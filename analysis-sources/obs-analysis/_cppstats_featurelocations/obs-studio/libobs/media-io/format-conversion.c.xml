<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\media-io\format-conversion.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"format-conversion.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/sse-intrin.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_m128_32_0</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint32_t *)&amp;val))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_m128_32_1</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(((uint32_t *)&amp;val) + 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack_shift</name><parameter_list>(<parameter><type><name>lum_plane</name></type></parameter>, <parameter><type><name>lum_pos0</name></type></parameter>, <parameter><type><name>lum_pos1</name></type></parameter>, <parameter><type><name>line1</name></type></parameter>, <parameter><type><name>line2</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>sh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __m128i pack_val = _mm_packs_epi32( _mm_srli_si128(_mm_and_si128(line1, mask), sh), _mm_srli_si128(_mm_and_si128(line2, mask), sh)); pack_val = _mm_packus_epi16(pack_val, pack_val); *(uint32_t *)(lum_plane + lum_pos0) = get_m128_32_0(pack_val); *(uint32_t *)(lum_plane + lum_pos1) = get_m128_32_1(pack_val); } while (false)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack_val</name><parameter_list>(<parameter><type><name>lum_plane</name></type></parameter>, <parameter><type><name>lum_pos0</name></type></parameter>, <parameter><type><name>lum_pos1</name></type></parameter>, <parameter><type><name>line1</name></type></parameter>, <parameter><type><name>line2</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __m128i pack_val = _mm_packs_epi32(_mm_and_si128(line1, mask), _mm_and_si128(line2, mask)); pack_val = _mm_packus_epi16(pack_val, pack_val); *(uint32_t *)(lum_plane + lum_pos0) = get_m128_32_0(pack_val); *(uint32_t *)(lum_plane + lum_pos1) = get_m128_32_1(pack_val); } while (false)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack_ch_1plane</name><parameter_list>(<parameter><type><name>uv_plane</name></type></parameter>, <parameter><type><name>chroma_pos</name></type></parameter>, <parameter><type><name>line1</name></type></parameter>, <parameter><type><name>line2</name></type></parameter>, <parameter><type><name>uv_mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __m128i add_val = _mm_add_epi64(_mm_and_si128(line1, uv_mask), _mm_and_si128(line2, uv_mask)); __m128i avg_val = _mm_add_epi64( add_val, _mm_shuffle_epi32(add_val, _MM_SHUFFLE(2, 3, 0, 1))); avg_val = _mm_srai_epi16(avg_val, 2); avg_val = _mm_shuffle_epi32(avg_val, _MM_SHUFFLE(3, 1, 2, 0)); avg_val = _mm_packus_epi16(avg_val, avg_val); *(uint32_t *)(uv_plane + chroma_pos) = get_m128_32_0(avg_val); } while (false)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack_ch_2plane</name><parameter_list>(<parameter><type><name>u_plane</name></type></parameter>, <parameter><type><name>v_plane</name></type></parameter>, <parameter><type><name>chroma_pos</name></type></parameter>, <parameter><type><name>line1</name></type></parameter>, <parameter><type><name>line2</name></type></parameter>, <parameter><type><name>uv_mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t packed_vals; __m128i add_val = _mm_add_epi64(_mm_and_si128(line1, uv_mask), _mm_and_si128(line2, uv_mask)); __m128i avg_val = _mm_add_epi64( add_val, _mm_shuffle_epi32(add_val, _MM_SHUFFLE(2, 3, 0, 1))); avg_val = _mm_srai_epi16(avg_val, 2); avg_val = _mm_shuffle_epi32(avg_val, _MM_SHUFFLE(3, 1, 2, 0)); avg_val = _mm_shufflelo_epi16(avg_val, _MM_SHUFFLE(3, 1, 2, 0)); avg_val = _mm_packus_epi16(avg_val, avg_val); packed_vals = get_m128_32_0(avg_val); *(uint16_t *)(u_plane + chroma_pos) = (uint16_t)(packed_vals); *(uint16_t *)(v_plane + chroma_pos) = (uint16_t)(packed_vals &gt;&gt; 16); } while (false)</cpp:value></cpp:define>






















<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>uint32_t</name></type> <name>min_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>compress_uyvx_to_i420</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>in_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>out_linesize</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lum_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>min_uint32</name><argument_list>(<argument><expr><name>in_linesize</name></expr></argument>, <argument><expr><name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>lum_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x0000FF00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>uv_mask</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>(<argument><expr><literal type="number">0x00FF</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y_pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>in_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>chroma_y_pos</name> <init>= <expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_y_pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><name>input</name> <operator>+</operator> <name>y_pos</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_pos0</name> <init>= <expr><name>lum_y_pos</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_pos1</name> <init>= <expr><name>lum_pos0</name> <operator>+</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>line1</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator><name>img</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>line2</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>img</name> <operator>+</operator> <name>in_linesize</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pack_shift</name><argument_list>(<argument><expr><name>lum_plane</name></expr></argument>, <argument><expr><name>lum_pos0</name></expr></argument>, <argument><expr><name>lum_pos1</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>,
<argument><expr><name>lum_mask</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_ch_2plane</name><argument_list>(<argument><expr><name>u_plane</name></expr></argument>, <argument><expr><name>v_plane</name></expr></argument>,
<argument><expr><name>chroma_y_pos</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>,
<argument><expr><name>uv_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>compress_uyvx_to_nv12</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>in_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>out_linesize</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lum_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>chroma_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>min_uint32</name><argument_list>(<argument><expr><name>in_linesize</name></expr></argument>, <argument><expr><name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>lum_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x0000FF00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>uv_mask</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>(<argument><expr><literal type="number">0x00FF</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y_pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>in_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>chroma_y_pos</name> <init>= <expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_y_pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><name>input</name> <operator>+</operator> <name>y_pos</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_pos0</name> <init>= <expr><name>lum_y_pos</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_pos1</name> <init>= <expr><name>lum_pos0</name> <operator>+</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>line1</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator><name>img</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>line2</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>img</name> <operator>+</operator> <name>in_linesize</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pack_shift</name><argument_list>(<argument><expr><name>lum_plane</name></expr></argument>, <argument><expr><name>lum_pos0</name></expr></argument>, <argument><expr><name>lum_pos1</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>,
<argument><expr><name>lum_mask</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_ch_1plane</name><argument_list>(<argument><expr><name>chroma_plane</name></expr></argument>, <argument><expr><name>chroma_y_pos</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>,
<argument><expr><name>line2</name></expr></argument>, <argument><expr><name>uv_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>convert_uyvx_to_i444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>in_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>out_linesize</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lum_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v_plane</name> <init>= <expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>min_uint32</name><argument_list>(<argument><expr><name>in_linesize</name></expr></argument>, <argument><expr><name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>lum_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x0000FF00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>u_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x000000FF</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>v_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00FF0000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y_pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>in_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_y_pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><name>input</name> <operator>+</operator> <name>y_pos</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_pos0</name> <init>= <expr><name>lum_y_pos</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lum_pos1</name> <init>= <expr><name>lum_pos0</name> <operator>+</operator> <name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>line1</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator><name>img</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>line2</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>img</name> <operator>+</operator> <name>in_linesize</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pack_shift</name><argument_list>(<argument><expr><name>lum_plane</name></expr></argument>, <argument><expr><name>lum_pos0</name></expr></argument>, <argument><expr><name>lum_pos1</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>,
<argument><expr><name>lum_mask</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_val</name><argument_list>(<argument><expr><name>u_plane</name></expr></argument>, <argument><expr><name>lum_pos0</name></expr></argument>, <argument><expr><name>lum_pos1</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>,
<argument><expr><name>u_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_shift</name><argument_list>(<argument><expr><name>v_plane</name></expr></argument>, <argument><expr><name>lum_pos0</name></expr></argument>, <argument><expr><name>lum_pos1</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>,
<argument><expr><name>v_mask</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>decompress_420</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>input</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>in_linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>out_linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_y_d2</name> <init>= <expr><name>start_y</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width_d2</name> <init>= <expr><name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height_d2</name> <init>= <expr><name>end_y</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y_d2</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height_d2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chroma0</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chroma1</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>lum0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>output0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lum0</name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lum1</name> <operator>=</operator> <name>lum0</name> <operator>+</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>output0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>output</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>out_linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>output1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>output0</name> <operator>+</operator> <name>out_linesize</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width_d2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>chroma0</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><name>chroma1</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output0</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>lum0</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output0</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>lum0</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output1</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>lum1</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output1</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>lum1</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>decompress_nv12</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>input</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>in_linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>out_linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_y_d2</name> <init>= <expr><name>start_y</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width_d2</name> <init>= <expr><call><name>min_uint32</name><argument_list>(<argument><expr><name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out_linesize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height_d2</name> <init>= <expr><name>end_y</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y_d2</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height_d2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>lum0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>output0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lum0</name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lum1</name> <operator>=</operator> <name>lum0</name> <operator>+</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>output0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>output</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>out_linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>output1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>output0</name> <operator>+</operator> <name>out_linesize</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width_d2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out</name> <init>= <expr><operator>*</operator><operator>(</operator><name>chroma</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output0</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>lum0</name><operator>++</operator><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output0</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>lum0</name><operator>++</operator><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output1</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>lum1</name><operator>++</operator><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>output1</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>lum1</name><operator>++</operator><operator>)</operator> <operator>|</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>decompress_422</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>in_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>out_linesize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leading_lum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width_d2</name> <init>= <expr><call><name>min_uint32</name><argument_list>(<argument><expr><name>in_linesize</name></expr></argument>, <argument><expr><name>out_linesize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>input32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>input32_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>output32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leading_lum</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>input32</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>input</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>in_linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>input32_end</name> <operator>=</operator> <name>input32</name> <operator>+</operator> <name>width_d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>output32</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>output</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>out_linesize</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>input32</name> <operator>&lt;</operator> <name>input32_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>dw</name> <init>= <expr><operator>*</operator><name>input32</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dw</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFF00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dw</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dw</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output32</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input32</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>input32</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>input</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>in_linesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>input32_end</name> <operator>=</operator> <name>input32</name> <operator>+</operator> <name>width_d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>output32</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>output</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>out_linesize</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>input32</name> <operator>&lt;</operator> <name>input32_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>dw</name> <init>= <expr><operator>*</operator><name>input32</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dw</name> <operator>&amp;=</operator> <literal type="number">0xFFFF00FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dw</name> <operator>|=</operator> <operator>(</operator><name>dw</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output32</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input32</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
