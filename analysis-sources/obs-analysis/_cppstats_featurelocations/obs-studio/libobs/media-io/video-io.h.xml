<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\media-io\video-io.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io-defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>video_frame</name>;</struct_decl>



<struct_decl>struct <name>video_output</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>video_output</name></name></type> <name>video_t</name>;</typedef>

<enum>enum <name>video_format</name> <block>{
<decl><name>VIDEO_FORMAT_NONE</name></decl>,


<decl><name>VIDEO_FORMAT_I420</name></decl>, 
<decl><name>VIDEO_FORMAT_NV12</name></decl>, 


<decl><name>VIDEO_FORMAT_YVYU</name></decl>,
<decl><name>VIDEO_FORMAT_YUY2</name></decl>, 
<decl><name>VIDEO_FORMAT_UYVY</name></decl>,


<decl><name>VIDEO_FORMAT_RGBA</name></decl>,
<decl><name>VIDEO_FORMAT_BGRA</name></decl>,
<decl><name>VIDEO_FORMAT_BGRX</name></decl>,
<decl><name>VIDEO_FORMAT_Y800</name></decl>, 


<decl><name>VIDEO_FORMAT_I444</name></decl>,


<decl><name>VIDEO_FORMAT_BGR3</name></decl>,


<decl><name>VIDEO_FORMAT_I422</name></decl>,


<decl><name>VIDEO_FORMAT_I40A</name></decl>,


<decl><name>VIDEO_FORMAT_I42A</name></decl>,


<decl><name>VIDEO_FORMAT_YUVA</name></decl>,


<decl><name>VIDEO_FORMAT_AYUV</name></decl>,
}</block>;</enum>

<enum>enum <name>video_colorspace</name> <block>{
<decl><name>VIDEO_CS_DEFAULT</name></decl>,
<decl><name>VIDEO_CS_601</name></decl>,
<decl><name>VIDEO_CS_709</name></decl>,
<decl><name>VIDEO_CS_SRGB</name></decl>,
}</block>;</enum>

<enum>enum <name>video_range_type</name> <block>{
<decl><name>VIDEO_RANGE_DEFAULT</name></decl>,
<decl><name>VIDEO_RANGE_PARTIAL</name></decl>,
<decl><name>VIDEO_RANGE_FULL</name></decl>
}</block>;</enum>

<struct>struct <name>video_data</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>linesize</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>video_output_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fps_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fps_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cache_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>format_is_yuv</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_video_format_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>
<return>return <expr><literal type="string">"I420"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>
<return>return <expr><literal type="string">"NV12"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>
<return>return <expr><literal type="string">"I422"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<return>return <expr><literal type="string">"YVYU"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<return>return <expr><literal type="string">"YUY2"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<return>return <expr><literal type="string">"UYVY"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<return>return <expr><literal type="string">"RGBA"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<return>return <expr><literal type="string">"BGRA"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<return>return <expr><literal type="string">"BGRX"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>
<return>return <expr><literal type="string">"I444"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<return>return <expr><literal type="string">"Y800"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>
<return>return <expr><literal type="string">"BGR3"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>
<return>return <expr><literal type="string">"I40A"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>
<return>return <expr><literal type="string">"I42A"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>
<return>return <expr><literal type="string">"YUVA"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>
<return>return <expr><literal type="string">"AYUV"</literal></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"None"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_video_colorspace_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_CS_709</name></expr>:</case>
<return>return <expr><literal type="string">"709"</literal></expr>;</return>
<case>case <expr><name>VIDEO_CS_601</name></expr>:</case>
<case>case <expr><name>VIDEO_CS_DEFAULT</name></expr>:</case>
<case>case <expr><name>VIDEO_CS_SRGB</name></expr>:</case><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"601"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>video_range_type</name></name></type>
<name>resolve_video_range</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <name>VIDEO_RANGE_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <ternary><condition><expr><call><name>format_is_yuv</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VIDEO_RANGE_PARTIAL</name></expr>
</then><else>: <expr><name>VIDEO_RANGE_FULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>range</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_video_range_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>resolve_video_range</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>range</name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="string">"Full"</literal></expr> </then><else>: <expr><literal type="string">"Partial"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>video_scale_type</name> <block>{
<decl><name>VIDEO_SCALE_DEFAULT</name></decl>,
<decl><name>VIDEO_SCALE_POINT</name></decl>,
<decl><name>VIDEO_SCALE_FAST_BILINEAR</name></decl>,
<decl><name>VIDEO_SCALE_BILINEAR</name></decl>,
<decl><name>VIDEO_SCALE_BICUBIC</name></decl>,
}</block>;</enum>

<struct>struct <name>video_scale_info</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>video_format</name></name></type> <name>video_format_from_fourcc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>video_format_get_parameters</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>color_space</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>min_range</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name><name>max_range</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_OUTPUT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_OUTPUT_INVALIDPARAM</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_OUTPUT_FAIL</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>video_output_open</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>video_output_close</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type>
<name>video_output_connect</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>conversion</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>video_output_disconnect</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>video_output_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>EXPORT</name> <specifier>const</specifier> struct <name>video_output_info</name> <operator>*</operator>
<call><name>video_output_get_info</name><argument_list>(<argument><expr><specifier>const</specifier> <name>video_t</name> <operator>*</operator><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>video_output_lock_frame</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>video_output_unlock_frame</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type> <name>video_output_get_frame_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>video_output_stop</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>video_output_stopped</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>video_format</name></name></type> <name>video_output_get_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>video_output_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>video_output_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>double</name></type> <name>video_output_get_frame_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>video_output_get_skipped_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>video_output_get_total_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>video_output_inc_texture_encoders</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>video_output_dec_texture_encoders</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>video_output_inc_texture_frames</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>video_output_inc_texture_skipped_frames</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
