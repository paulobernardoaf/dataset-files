<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\audio-monitoring\win32\wasapi-output.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../media-io/audio-resampler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/circlebuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/darray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../obs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wasapi-output.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTUALLY_DEFINE_GUID</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b7</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_C const GUID DECLSPEC_SELECTANY name = { l, w1, w2, {b1, b2, b3, b4, b5, b6, b7, b8}}</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[audio monitoring: '%s'] " format, obs_source_get_name(monitor-&gt;source), ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ACTUALLY_DEFINE_GUID</name><argument_list>(<argument><expr><name>CLSID_MMDeviceEnumerator</name></expr></argument>, <argument><expr><literal type="number">0xBCDE0395</literal></expr></argument>, <argument><expr><literal type="number">0xE52F</literal></expr></argument>, <argument><expr><literal type="number">0x467C</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>,
<argument><expr><literal type="number">0x3D</literal></expr></argument>, <argument><expr><literal type="number">0xC4</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACTUALLY_DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IMMDeviceEnumerator</name></expr></argument>, <argument><expr><literal type="number">0xA95664D2</literal></expr></argument>, <argument><expr><literal type="number">0x9614</literal></expr></argument>, <argument><expr><literal type="number">0x4F35</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>,
<argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACTUALLY_DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IAudioClient</name></expr></argument>, <argument><expr><literal type="number">0x1CB9AD4C</literal></expr></argument>, <argument><expr><literal type="number">0xDBFA</literal></expr></argument>, <argument><expr><literal type="number">0x4C32</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument>,
<argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0xF5</literal></expr></argument>, <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">0xB2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACTUALLY_DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IAudioRenderClient</name></expr></argument>, <argument><expr><literal type="number">0xF294ACFC</literal></expr></argument>, <argument><expr><literal type="number">0x3146</literal></expr></argument>, <argument><expr><literal type="number">0x4483</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>,
<argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0xAD</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>audio_monitor</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAudioClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAudioRenderClient</name> <modifier>*</modifier></type><name>render</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_recv_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_video_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>time_since_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>resampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>source_has_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>lowest_audio_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>delay_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delay_size</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>float</argument>)</argument_list></macro> <expr_stmt><expr><name>buf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>playback_mutex</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>process_audio_delay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_frame_ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>front_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>blocksize</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>cur_time</name> <operator>-</operator> <name><name>monitor</name><operator>-&gt;</operator><name>last_recv_time</name></name> <operator>&gt;</operator> <literal type="number">1000000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>last_recv_time</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ts</name> <operator>+=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>sync_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frames</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>frames</name> <operator>*</operator> <name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>monitor</name><operator>-&gt;</operator><name>prev_video_ts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>prev_video_ts</name></name> <operator>=</operator> <name>last_frame_ts</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>prev_video_ts</name></name> <operator>==</operator> <name>last_frame_ts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>time_since_prev</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name>frames</name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>monitor</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>time_since_prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bad_diff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circlebuf_peek_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_ts</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>front_ts</name> <operator>=</operator> <name>cur_ts</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>pad</name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>monitor</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>front_ts</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>last_frame_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bad_diff</name> <operator>=</operator> <operator>!</operator><name>last_frame_ts</name> <operator>||</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5000000000</literal> <operator>||</operator>
<name><name>monitor</name><operator>-&gt;</operator><name>time_since_prev</name></name> <operator>&gt;</operator> <literal type="number">100000000ULL</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_diff</name> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;</operator> <literal type="number">75000000</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_AUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"audio rushing, cutting audio, "</literal>
<literal type="string">"diff: %lld, delay buffer size: %lu, "</literal>
<literal type="string">"v: %llu: a: %llu"</literal></expr></argument>,
<argument><expr><name>diff</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><name>last_frame_ts</name></expr></argument>, <argument><expr><name>front_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><name>frames</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frames</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>*</operator><name>frames</name> <operator>*</operator> <name>blocksize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_diff</name> <operator>&amp;&amp;</operator> <name><name>diff</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">75000000</literal> <operator>&amp;&amp;</operator>
<name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name><operator>.</operator><name>size</name></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_AUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"audio dragging, cutting audio, "</literal>
<literal type="string">"diff: %lld, delay buffer size: %lu, "</literal>
<literal type="string">"v: %llu: a: %llu"</literal></expr></argument>,
<argument><expr><name>diff</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><name>last_frame_ts</name></expr></argument>, <argument><expr><name>front_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_audio_playback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAudioRenderClient</name> <modifier>*</modifier></type><name>render</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>render</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>resample_data</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vol</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>user_volume</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>resample_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>unlock</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>audio_resampler_resample</name><argument_list>(
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><name>resample_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resample_frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_offset</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>audio_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>audio_data</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>unlock</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UINT32</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetCurrentPadding</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>decouple_audio</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>async_decoupled</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>source_has_video</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>decouple_audio</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><name><name>audio_data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name>ts_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_audio_delay</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name>resample_frames</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>unlock</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>=
<expr><call><name><name>render</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetBuffer</name></name><argument_list>(<argument><expr><name>render</name></expr></argument>, <argument><expr><name>resample_frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>unlock</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>muted</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>close_float</name><argument_list>(<argument><expr><name>vol</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>=
<expr><name>cur</name> <operator>+</operator> <name>resample_frames</name> <operator>*</operator> <name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>cur</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <name>vol</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>resample_frames</name> <operator>*</operator> <name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>render</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseBuffer</name></name><argument_list>(<argument><expr><name>render</name></expr></argument>, <argument><expr><name>resample_frames</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>muted</name></expr> ?</condition><then> <expr><name>AUDCLNT_BUFFERFLAGS_SILENT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>audio_monitor_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_remove_audio_capture_callback</name><argument_list>(
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>on_audio_playback</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Stop</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>speaker_layout</name></name></type> <name>convert_speaker_layout</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KSAUDIO_SPEAKER_2POINT1</name></expr>:</case>
<return>return <expr><name>SPEAKERS_2POINT1</name></expr>;</return>
<case>case <expr><name>KSAUDIO_SPEAKER_SURROUND</name></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT0</name></expr>;</return>
<case>case <expr><name>KSAUDIO_SPEAKER_4POINT1</name></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT1</name></expr>;</return>
<case>case <expr><name>KSAUDIO_SPEAKER_5POINT1</name></expr>:</case>
<return>return <expr><name>SPEAKERS_5POINT1</name></expr>;</return>
<case>case <expr><name>KSAUDIO_SPEAKER_7POINT1</name></expr>:</case>
<return>return <expr><name>SPEAKERS_7POINT1</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator>enum <name>speaker_layout</name><operator>)</operator><name>channels</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>devices_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audio_monitor_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>immde</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>wfex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT32</name></type> <name>frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_device_id</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: No device ID set"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_DO_NOT_SELF_MONITOR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>obs_source_get_settings</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_dev_id</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"device_id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><call><name>devices_match</name><argument_list>(<argument><expr><name>s_dev_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_MMDeviceEnumerator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IMMDeviceEnumerator</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>immde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to create IMMDeviceEnumerator: %08lX"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>immde</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDefaultAudioEndpoint</name></name><argument_list>(
<argument><expr><name>immde</name></expr></argument>, <argument><expr><name>eRender</name></expr></argument>, <argument><expr><name>eConsole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>w_id</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w_id</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>immde</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDevice</name></name><argument_list>(<argument><expr><name>immde</name></expr></argument>, <argument><expr><name>w_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to get device: %08lX"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>monitor</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Activate</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IAudioClient</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to activate device: %08lX"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetMixFormat</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to get mix format: %08lX"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Initialize</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
<argument><expr><name>AUDCLNT_SHAREMODE_SHARED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">10000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wfex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to initialize: %08lX"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>audio_output_get_info</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><operator>(</operator><name>WAVEFORMATEXTENSIBLE</name> <operator>*</operator><operator>)</operator><name>wfex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>to</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>from</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>speakers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>from</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>wfex</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>.</operator><name>speakers</name></name> <operator>=</operator>
<call><name>convert_speaker_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dwChannelMask</name></name></expr></argument>, <argument><expr><name><name>wfex</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_FORMAT_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>wfex</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>wfex</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <call><name>audio_resampler_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetBufferSize</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to get buffer size: %08lX"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetService</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IAudioRenderClient</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to get IAudioRenderClient: %08lX"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to initialize mutex"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>monitor</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Start</name></name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to start audio: %08lX"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name>immde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wfex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>wfex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audio_monitor_init_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>source_has_video</name></name> <operator>=</operator>
<operator>(</operator><name><name>monitor</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_VIDEO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_add_audio_capture_callback</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>,
<argument><expr><name>on_audio_playback</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>audio_monitor_create</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name></type> <name>monitor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>audio_monitor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_monitor_init_final</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_monitor_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name></type> <name>new_monitor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>audio_monitor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_monitor</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>monitor</name> <operator>=</operator> <name>new_monitor</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>audio_monitor_init_final</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_monitor_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase_item</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
