<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\audio-monitoring\pulse\pulseaudio-output.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pulseaudio-wrapper.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PULSE_DATA</name><parameter_list>(<parameter><type><name>voidptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct audio_monitor *data = voidptr;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blog</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "pulse-am: " msg, ##__VA_ARGS__)</cpp:value></cpp:define>

<struct>struct <name>audio_monitor</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_buffer_attr</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>speakers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_sample_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>samples_per_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>bytes_per_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast64_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>new_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>resampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRemaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_per_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ignore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>playback_mutex</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>speaker_layout</name></name></type>
<name>pulseaudio_channels_to_obs_speakers</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_MONO</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_STEREO</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_2POINT1</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT0</name></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT1</name></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_5POINT1</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_7POINT1</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>audio_format</name></name></type>
<name>pulseaudio_to_obs_audio_format</name><parameter_list>(<parameter><decl><type><name>pa_sample_format_t</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_SAMPLE_U8</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_U8BIT</name></expr>;</return>
<case>case <expr><name>PA_SAMPLE_S16LE</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_16BIT</name></expr>;</return>
<case>case <expr><name>PA_SAMPLE_S32LE</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_32BIT</name></expr>;</return>
<case>case <expr><name>PA_SAMPLE_FLOAT32LE</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_FLOAT</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>AUDIO_FORMAT_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pa_channel_map</name></type> <name>pulseaudio_channel_map</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_channel_map</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_CENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_LFE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_SIDE_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_SIDE_RIGHT</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SPEAKERS_MONO</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_MONO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_STEREO</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_2POINT1</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_LFE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_4POINT0</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_CENTER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_4POINT1</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_CENTER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_5POINT1</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_7POINT1</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPEAKERS_UNKNOWN</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_byte</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>frames</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>cur</name> <operator>+</operator> <name>frames</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>cur</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <name>vol</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_short</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>frames</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>cur</name> <operator>+</operator> <name>frames</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>cur</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <name>vol</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_float</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>frames</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>cur</name> <operator>+</operator> <name>frames</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>cur</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <name>vol</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_volume</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>resample_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>resample_frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>bytes_per_channel</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>process_byte</name><argument_list>(<argument><expr><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>resample_frames</name></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>process_short</name><argument_list>(<argument><expr><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>resample_frames</name></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>process_float</name><argument_list>(<argument><expr><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>resample_frames</name></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_stream_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PULSE_DATA</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>new_data</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytesToFill</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToFill</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>bytesRemaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytesToFill</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>bytesRemaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_stream_begin_write</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buffer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytesToFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>new_data</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytesToFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_write</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytesToFill</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>,
<argument><expr><name>PA_SEEK_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pulseaudio_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>-=</operator> <name>bytesToFill</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_audio_playback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vol</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>user_volume</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>resample_data</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>resample_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>audio_resampler_resample</name><argument_list>(
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><name>resample_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resample_frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_offset</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>audio_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>audio_data</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>*</operator> <name>resample_frames</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>muted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>close_float</name><argument_list>(<argument><expr><name>vol</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_volume</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>, <argument><expr><name>resample_data</name></expr></argument>,
<argument><expr><name>resample_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>new_data</name></name></expr></argument>, <argument><expr><name><name>resample_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>frames</name></name> <operator>+=</operator> <name>resample_frames</name></expr>;</expr_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_stream_write</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_stream_write</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PULSE_DATA</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_signal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_underflow</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PULSE_DATA</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>tlength</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_stream_set_buffer_attr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_signal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_server_info</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_server_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Server name: '%s %s'"</literal></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>,
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>server_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_signal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_source_info</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_source_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PULSE_DATA</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_INVALID</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Audio format: %s, %"</literal> <name>PRIu32</name> <literal type="string">" Hz, %"</literal> <name>PRIu8</name> <literal type="string">" channels"</literal></expr></argument>,
<argument><expr><call><name>pa_sample_format_to_string</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>rate</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_sample_format_t</name></type> <name>format</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pulseaudio_to_obs_audio_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AUDIO_FORMAT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>PA_SAMPLE_FLOAT32LE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Sample format %s not supported by OBS,"</literal>
<literal type="string">"using %s instead for recording"</literal></expr></argument>,
<argument><expr><call><name>pa_sample_format_to_string</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>pa_sample_format_to_string</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>channels</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pulseaudio_channels_to_obs_speakers</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SPEAKERS_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"%c channels not supported by OBS,"</literal>
<literal type="string">"using %c instead for recording"</literal></expr></argument>,
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>sample_spec</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<label><name>skip</name>:</label>
<expr_stmt><expr><call><name>pulseaudio_signal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_stop_playback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_stream_disconnect</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_unref</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopped Monitoring in '%s'"</literal></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Got %"</literal> <name>PRIuFAST32</name> <literal type="string">" packets with %"</literal> <name>PRIuFAST64</name> <literal type="string">" frames"</literal></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audio_monitor_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_device_id</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_DO_NOT_SELF_MONITOR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>obs_source_get_settings</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_dev_id</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"device_id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><call><name>devices_match</name><argument_list>(<argument><expr><name>s_dev_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Prevented feedback-loop in '%s'"</literal></expr></argument>,
<argument><expr><name>s_dev_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pulseaudio_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_default_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pulseaudio_get_server_info</name><argument_list>(<argument><expr><name>pulseaudio_server_info</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>monitor</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get server info !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pulseaudio_get_source_info</name><argument_list>(<argument><expr><name>pulseaudio_source_info</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>monitor</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get source info !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>PA_SAMPLE_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"An error occurred while getting the source info!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_sample_spec</name></type> <name>spec</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>monitor</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pa_sample_spec_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sample spec is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>audio_output_get_info</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>from</name> <init>= <expr><block>{<expr><operator>.</operator><name>samples_per_sec</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>,
<expr><operator>.</operator><name>speakers</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>speakers</name></name></expr>,
<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>to</name> <init>= <expr><block>{
<expr><operator>.</operator><name>samples_per_sec</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>monitor</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>,
<expr><operator>.</operator><name>speakers</name> <operator>=</operator>
<call><name>pulseaudio_channels_to_obs_speakers</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>format</name> <operator>=</operator> <macro><name>pulseaudio_to_obs_audio_format</name><argument_list>(<argument>monitor-&gt;format</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <call><name>audio_resampler_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create resampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>bytes_per_channel</name></name> <operator>=</operator> <call><name>get_audio_bytes_per_channel</name><argument_list>(
<argument><expr><call><name>pulseaudio_to_obs_audio_format</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>speakers</name></name> <operator>=</operator> <call><name>pulseaudio_channels_to_obs_speakers</name><argument_list>(<argument><expr><name><name>spec</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>=</operator> <call><name>pa_frame_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_channel_map</name></type> <name>channel_map</name> <init>= <expr><call><name>pulseaudio_channel_map</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>pulseaudio_stream_new</name><argument_list>(
<argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>fragsize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>maxlength</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>minreq</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>prebuf</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><literal type="number">25000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator>
<name><name>monitor</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>*</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_stream_flags_t</name></type> <name>flags</name> <init>= <expr><name>PA_STREAM_INTERPOLATE_TIMING</name> <operator>|</operator>
<name>PA_STREAM_AUTO_TIMING_UPDATE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
<argument><expr><literal type="string">"Failed to init mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>ret</name> <init>= <expr><call><name>pulseaudio_connect_playback</name><argument_list>(
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pulseaudio_stop_playback</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to connect to stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Started Monitoring in '%s'"</literal></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audio_monitor_init_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_add_audio_capture_callback</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>,
<argument><expr><name>on_audio_playback</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_write_callback</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulseaudio_stream_write</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_set_underflow_callback</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulseaudio_underflow</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>audio_monitor_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_audio_capture_callback</name><argument_list>(
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>on_audio_playback</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>new_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pulseaudio_stop_playback</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pulseaudio_unref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>audio_monitor_create</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name></type> <name>monitor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>audio_monitor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_monitor_init_final</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_monitor_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name></type> <name>new_monitor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>audio_monitor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_monitor</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>playback_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>monitor</name> <operator>=</operator> <name>new_monitor</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>audio_monitor_init_final</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_monitor_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>audio_monitor_free</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase_item</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>monitoring_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
