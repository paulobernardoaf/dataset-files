<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-video.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/vec4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/format-conversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/video-frame.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_MEAN_AND_LEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>tick_sources</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>cur_time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>last_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>delta_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>seconds</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_time</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_time</name> <operator>=</operator> <name>cur_time</name> <operator>-</operator>
<call><name>video_output_get_frame_time</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delta_time</name> <operator>=</operator> <name>cur_time</name> <operator>-</operator> <name>last_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seconds</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>delta_time</name> <operator>/</operator> <literal type="number">1000000000.0</literal><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>draw_callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tick_callbacks</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tick_callback</name></name> <modifier>*</modifier></type><name>callback</name></decl>;</decl_stmt>
<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tick_callbacks</name><operator>.</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>callback</name><operator>-&gt;</operator><name>tick</name></name><argument_list>(<argument><expr><name><name>callback</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>draw_callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>first_source</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>cur_source</name> <init>= <expr><call><name>obs_source_get_ref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator>struct <name>obs_source</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_video_tick</name><argument_list>(<argument><expr><name>cur_source</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>cur_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cur_time</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>render_display</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_displays</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_enter_context</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>graphics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>displays_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_display</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>render_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>displays_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_render_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gs_enable_depth_test</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_set_cull_mode</name><argument_list>(<argument><expr><name>GS_NEITHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_ortho</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_set_viewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>unmap_last_surface</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>NUM_CHANNELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>mapped_surfaces</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_stagesurface_unmap</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>mapped_surfaces</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>mapped_surfaces</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>render_main_texture_name</name> <init>= <expr><literal type="string">"render_main_texture"</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_main_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>render_main_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GS_DEBUG_MARKER_BEGIN</name><argument_list>(<argument><expr><name>GS_DEBUG_COLOR_MAIN_TEXTURE</name></expr></argument>,
<argument><expr><name>render_main_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>clear_color</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clear_color</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_set_render_target</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>render_texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_clear</name><argument_list>(<argument><expr><name>GS_CLEAR_COLOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_color</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_render_size</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>base_width</name></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>base_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>draw_callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>draw_callbacks</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>draw_callback</name></name> <modifier>*</modifier></type><name>callback</name></decl>;</decl_stmt>
<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>draw_callbacks</name><operator>.</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>callback</name><operator>-&gt;</operator><name>draw</name></name><argument_list>(<argument><expr><name><name>callback</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>base_width</name></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>base_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>draw_callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_view_render</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>main_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>texture_rendered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GS_DEBUG_MARKER_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>render_main_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type>
<name>get_scale_effect_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>output_width</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>video</name><operator>-&gt;</operator><name>base_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>video</name><operator>-&gt;</operator><name>output_height</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>video</name><operator>-&gt;</operator><name>base_height</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>bilinear_lowres_effect</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>scale_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_SCALE_BILINEAR</name></expr>:</case>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>default_effect</name></name></expr>;</return>
<case>case <expr><name>OBS_SCALE_LANCZOS</name></expr>:</case>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>lanczos_effect</name></name></expr>;</return>
<case>case <expr><name>OBS_SCALE_AREA</name></expr>:</case>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>area_effect</name></name></expr>;</return>
<case>case <expr><name>OBS_SCALE_BICUBIC</name></expr>:</case>
<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>bicubic_effect</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>resolution_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>width_cmp</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><name><name>video</name><operator>-&gt;</operator><name>base_width</name></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>height_cmp</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><name><name>video</name><operator>-&gt;</operator><name>base_height</name></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>height</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>labs</name><argument_list>(<argument><expr><name>width_cmp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>labs</name><argument_list>(<argument><expr><name>height_cmp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>get_scale_effect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>resolution_close</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>default_effect</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>get_scale_effect_internal</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>bicubic_effect</name></name></expr>
?</condition><then> <expr><name><name>video</name><operator>-&gt;</operator><name>bicubic_effect</name></name></expr>
</then><else>: <expr><name><name>video</name><operator>-&gt;</operator><name>default_effect</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>effect</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>render_output_texture_name</name> <init>= <expr><literal type="string">"render_output_texture"</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>render_output_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>render_texture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>output_texture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name> <init>= <expr><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>get_scale_effect</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>ovi</name><operator>.</operator><name>output_format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_RGBA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tech</name> <operator>=</operator> <call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"DrawAlphaDivide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>effect</name> <operator>==</operator> <name><name>video</name><operator>-&gt;</operator><name>default_effect</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>width</name> <operator>==</operator> <name><name>video</name><operator>-&gt;</operator><name>base_width</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>height</name> <operator>==</operator> <name><name>video</name><operator>-&gt;</operator><name>base_height</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>texture</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tech</name> <operator>=</operator> <call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>render_output_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>bres</name> <init>=
<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"base_dimension"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>bres_i</name> <init>=
<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"base_dimension_i"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_set_render_target</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_render_size</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bres</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>base</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>video</name><operator>-&gt;</operator><name>base_width</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>video</name><operator>-&gt;</operator><name>base_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>bres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bres_i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>base_i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base_i</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>video</name><operator>-&gt;</operator><name>base_width</name></name></expr></argument>,
<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>video</name><operator>-&gt;</operator><name>base_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>bres_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passes</name> <operator>=</operator> <call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>render_output_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_convert_plane</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>tech_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height</name> <init>= <expr><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_set_render_target</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_render_size</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name> <init>= <expr><call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>GS_TRIS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>render_convert_texture_name</name> <init>= <expr><literal type="string">"render_convert_texture"</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>render_convert_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>render_convert_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>conversion_effect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>color_vec0</name> <init>=
<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"color_vec0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>color_vec1</name> <init>=
<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"color_vec1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>color_vec2</name> <init>=
<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"color_vec2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>width_i</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"width_i"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec0</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec1</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec2</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name>color_vec0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>render_convert_plane</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>conversion_techs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name>color_vec1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name>color_vec2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name>width_i</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>conversion_width_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>render_convert_plane</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>conversion_techs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name>color_vec2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name>width_i</name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>conversion_width_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>render_convert_plane</name><argument_list>(
<argument><expr><name>effect</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>conversion_techs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>texture_converted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>render_convert_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stage_output_texture_name</name> <init>= <expr><literal type="string">"stage_output_texture"</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>stage_output_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cur_texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>stage_output_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unmap_last_surface</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_conversion</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>copy_surfaces</name><index>[<expr><name>cur_texture</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_stage_texture</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>output_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>textures_copied</name><index>[<expr><name>cur_texture</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>texture_converted</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>copy</name> <init>=
<expr><name><name>video</name><operator>-&gt;</operator><name>copy_surfaces</name><index>[<expr><name>cur_texture</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_stage_texture</name><argument_list>(<argument><expr><name>copy</name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>textures_copied</name><index>[<expr><name>cur_texture</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>stage_output_texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>queue_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>raw_active</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_vframe_info</name></name> <modifier>*</modifier></type><name>vframe_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>duplicate</name> <init>=
<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_avail_queue</name><operator>.</operator><name>size</name></name> <operator>||</operator>
<operator>(</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>vframe_info</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>duplicate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_tex_frame</name></name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><call><name>circlebuf_data</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name></name></expr></argument>,
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name><operator>.</operator><name>size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_tex_frame</name></name></type> <name>tf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_avail_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>.</operator><name>released</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_texture_acquire_sync</name><argument_list>(<argument><expr><name><name>tf</name><operator>.</operator><name>tex</name></name></expr></argument>, <argument><expr><name><name>tf</name><operator>.</operator><name>lock_key</name></name></expr></argument>, <argument><expr><name>GS_WAIT_INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>released</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>raw_active</name> <operator>||</operator> <name><name>vframe_info</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_copy_texture</name><argument_list>(<argument><expr><name><name>tf</name><operator>.</operator><name>tex</name></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex_uv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tf</name><operator>.</operator><name>tex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>convert_textures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tf</name><operator>.</operator><name>tex_uv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>tex</name></name> <operator>=</operator> <name>tex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>tex_uv</name></name> <operator>=</operator> <name>tex_uv</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>vframe_info</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>released</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>gs_texture_get_shared_handle</name><argument_list>(<argument><expr><name><name>tf</name><operator>.</operator><name>tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texture_release_sync</name><argument_list>(<argument><expr><name><name>tf</name><operator>.</operator><name>tex</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>tf</name><operator>.</operator><name>lock_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
<return>return <expr><operator>--</operator><name><name>vframe_info</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>full_stop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>encode_gpu</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>raw_active</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_vframe_info</name></name> <modifier>*</modifier></type><name>vframe_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>queue_frame</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>raw_active</name></expr></argument>, <argument><expr><name>vframe_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_gpu_encoders_name</name> <init>= <expr><literal type="string">"output_gpu_encoders"</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>output_gpu_encoders</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>raw_active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_gpu_encoders_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>texture_converted</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer_gpu</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_vframe_info</name></name></type> <name>vframe_info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer_gpu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vframe_info</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vframe_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_gpu</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>raw_active</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vframe_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_gpu_encoders_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_video</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>raw_active</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>gpu_active</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur_texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gs_begin_scene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enable_depth_test</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_set_cull_mode</name><argument_list>(<argument><expr><name>GS_NEITHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>render_main_texture</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_active</name> <operator>||</operator> <name>gpu_active</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><call><name>render_output_texture</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gpu_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>gpu_conversion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>render_convert_texture</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gpu_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_gpu_encoders</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>raw_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>raw_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stage_output_texture</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>cur_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_set_render_target</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_end_scene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>download_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prev_texture</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>textures_copied</name><index>[<expr><name>prev_texture</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NUM_CHANNELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>channel</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>surface</name> <init>=
<expr><name><name>video</name><operator>-&gt;</operator><name>copy_surfaces</name><index>[<expr><name>prev_texture</name></expr>]</index><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>surface</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_stagesurface_map</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>mapped_surfaces</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <name>surface</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>set_gpu_converted_plane</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>linesize_input</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>linesize_output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>==</operator> <name>linesize_input</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>width</name> <operator>==</operator> <name>linesize_output</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><name>width</name> <operator>*</operator> <name>height</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>total</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>linesize_output</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>linesize_input</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_gpu_converted_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>video_frame</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>using_nv12_tex</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>width</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in_uv</name> <init>= <expr><call><name>set_gpu_converted_plane</name><argument_list>(
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height_d2</name> <init>= <expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height_d2</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>in_uv</name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>width</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>width_d2</name> <init>= <expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height_d2</name> <init>= <expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width_d2</name></expr></argument>, <argument><expr><name>height_d2</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width_d2</name></expr></argument>, <argument><expr><name>height_d2</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>width</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height_d2</name> <init>= <expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height_d2</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>width</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>height</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_gpu_converted_plane</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>

<empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_rgbx_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>video_frame</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in_ptr</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out_ptr</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_ptr</name></expr></argument>, <argument><expr><name>in_ptr</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_ptr</name></expr></argument>, <argument><expr><name>in_ptr</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_ptr</name> <operator>+=</operator> <name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ptr</name> <operator>+=</operator> <name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>output_video_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>video_frame</name></name></type> <name>output_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>locked</name></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>video_output_get_info</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>locked</name> <operator>=</operator> <call><name>video_output_lock_frame</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_frame</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>locked</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>gpu_conversion</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_gpu_converted_data</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_frame</name></expr></argument>,
<argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_rgbx_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_frame</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>video_output_unlock_frame</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>video_sleep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>raw_active</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>gpu_active</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p_time</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>interval_ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_vframe_info</name></name></type> <name>vframe_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name> <init>= <expr><operator>*</operator><name>p_time</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><name>cur_time</name> <operator>+</operator> <name>interval_ns</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_sleepto_ns</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_time</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>-</operator> <name>cur_time</name><operator>)</operator> <operator>/</operator> <name>interval_ns</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_time</name> <operator>=</operator> <name>cur_time</name> <operator>+</operator> <name>interval_ns</name> <operator>*</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>total_frames</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>lagged_frames</name></name> <operator>+=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vframe_info</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vframe_info</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vframe_info</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vframe_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gpu_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer_gpu</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vframe_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vframe_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_frame_gs_context_name</name> <init>= <expr><literal type="string">"gs_context(video-&gt;graphics)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_frame_render_video_name</name> <init>= <expr><literal type="string">"render_video"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_frame_download_frame_name</name> <init>= <expr><literal type="string">"download_frame"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_frame_gs_flush_name</name> <init>= <expr><literal type="string">"gs_flush"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_frame_output_video_data_name</name> <init>= <expr><literal type="string">"output_video_data"</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>output_frame</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>raw_active</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>gpu_active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_texture</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>cur_texture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_texture</name> <init>= <expr><ternary><condition><expr><name>cur_texture</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NUM_TEXTURES</name> <operator>-</operator> <literal type="number">1</literal></expr>
</then><else>: <expr><name>cur_texture</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>video_data</name></name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>frame_ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>video_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_frame_gs_context_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_enter_context</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>graphics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_frame_render_video_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GS_DEBUG_MARKER_BEGIN</name><argument_list>(<argument><expr><name>GS_DEBUG_COLOR_RENDER_VIDEO</name></expr></argument>,
<argument><expr><name>output_frame_render_video_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>render_video</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>raw_active</name></expr></argument>, <argument><expr><name>gpu_active</name></expr></argument>, <argument><expr><name>cur_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GS_DEBUG_MARKER_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_frame_render_video_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_frame_download_frame_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_ready</name> <operator>=</operator> <call><name>download_frame</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>prev_texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_frame_download_frame_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_frame_gs_flush_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_frame_gs_flush_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_frame_gs_context_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_active</name> <operator>&amp;&amp;</operator> <name>frame_ready</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_vframe_info</name></name></type> <name>vframe_info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vframe_info</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vframe_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>vframe_info</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_frame_output_video_data_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_video_data</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><name><name>vframe_info</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_frame_output_video_data_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>video</name><operator>-&gt;</operator><name>cur_texture</name></name> <operator>==</operator> <name>NUM_TEXTURES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>cur_texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBSP</name></cpp:macro> <cpp:value>"\xC2\xA0"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_base_frame_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>texture_rendered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>texture_converted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>cur_texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_raw_frame_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>textures_copied</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>textures_copied</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_gpu_frame_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>vframe_info_buffer_gpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>THREAD_LOCAL</name> <name>bool</name></type> <name>is_graphics_thread</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execute_graphics_tasks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tasks_remaining</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tasks_remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>task_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>tasks</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_task_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>task</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tasks_remaining</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>tasks</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>task_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tick_sources_name</name> <init>= <expr><literal type="string">"tick_sources"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>render_displays_name</name> <init>= <expr><literal type="string">"render_displays"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_frame_name</name> <init>= <expr><literal type="string">"output_frame"</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name> <modifier>*</modifier></type><name>obs_graphics_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><call><name>video_output_get_frame_time</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_time_total_ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fps_total_ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fps_total_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>gpu_was_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>raw_was_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>was_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>is_graphics_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_frame_interval_ns</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_set_thread_name</name><argument_list>(<argument><expr><literal type="string">"libobs: graphics thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>video_thread_name</name> <init>= <expr><call><name>profile_store_name</name><argument_list>(
<argument><expr><call><name>obs_get_profiler_name_store</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"obs_graphics_thread(%g"</literal> <name>NBSP</name> <literal type="string">"ms)"</literal></expr></argument>, <argument><expr><name>interval</name> <operator>/</operator> <literal type="number">1000000.</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>profile_register_root</name><argument_list>(<argument><expr><name>video_thread_name</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>stop_requested</name> <init>=
<expr><call><name>video_output_stopped</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_start</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_time_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>raw_active</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>raw_active</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>gpu_active</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>gpu_encoder_active</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>active</name> <init>= <expr><name>raw_active</name> <operator>||</operator> <name>gpu_active</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>gpu_active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>active</name> <init>= <expr><name>raw_active</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_active</name> <operator>&amp;&amp;</operator> <name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_base_frame_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw_was_active</name> <operator>&amp;&amp;</operator> <name>raw_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_raw_frame_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gpu_was_active</name> <operator>&amp;&amp;</operator> <name>gpu_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_gpu_frame_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gpu_was_active</name> <operator>=</operator> <name>gpu_active</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>raw_was_active</name> <operator>=</operator> <name>raw_active</name></expr>;</expr_stmt>
<expr_stmt><expr><name>was_active</name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>video_thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enter_context</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>graphics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_begin_frame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>tick_sources_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_time</name> <operator>=</operator> <call><name>tick_sources</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name></expr></argument>, <argument><expr><name>last_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>tick_sources_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>execute_graphics_tasks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>PeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>output_frame_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_frame</name><argument_list>(<argument><expr><name>raw_active</name></expr></argument>, <argument><expr><name>gpu_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>output_frame_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>render_displays_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>render_displays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>render_displays_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_time_ns</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>-</operator> <name>frame_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>video_thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_reenable_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_sleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><name>raw_active</name></expr></argument>, <argument><expr><name>gpu_active</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_time_total_ns</name> <operator>+=</operator> <name>frame_time_ns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fps_total_ns</name> <operator>+=</operator> <operator>(</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name> <operator>-</operator> <name>last_time</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fps_total_frames</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fps_total_ns</name> <operator>&gt;=</operator> <literal type="number">1000000000ULL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_fps</name></name> <operator>=</operator>
<operator>(</operator><name>double</name><operator>)</operator><name>fps_total_frames</name> <operator>/</operator>
<operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>fps_total_ns</name> <operator>/</operator> <literal type="number">1000000000.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_avg_frame_time_ns</name></name> <operator>=</operator>
<name>frame_time_total_ns</name> <operator>/</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name>fps_total_frames</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_time_total_ns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fps_total_ns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fps_total_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stop_requested</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
