<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-video-gpu-encode.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>gpu_encode_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><call><name>video_output_get_frame_time</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>obs_encoder_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>encoders</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wait_frames</name> <init>= <expr><name>NUM_ENCODE_TEXTURE_FRAMES_TO_WAIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>encoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_set_thread_name</name><argument_list>(<argument><expr><literal type="string">"obs gpu encode thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>os_sem_wait</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_tex_frame</name></name></type> <name>tf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lock_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lock_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_stop</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_frames</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wait_frames</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_event_reset</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name><name>tf</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lock_key</name> <operator>=</operator> <name><name>tf</name><operator>.</operator><name>lock_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_key</name> <operator>=</operator> <name><name>tf</name><operator>.</operator><name>lock_key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_output_inc_texture_frames</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>video</name><operator>-&gt;</operator><name>gpu_encoders</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><call><name>obs_encoder_get_ref</name><argument_list>(
<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>encoders</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoders</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>received</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><name><name>encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>paired_encoder</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>timebase_num</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>timebase_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>timebase_den</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>timebase_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name> <operator>&amp;&amp;</operator> <name>pair</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pair</name><operator>-&gt;</operator><name>first_received</name></name> <operator>||</operator>
<name><name>pair</name><operator>-&gt;</operator><name>first_raw_ts</name></name> <operator>&gt;</operator> <name>timestamp</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>video_pause_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>lock_count</name> <operator>==</operator> <name><name>encoders</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_key</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encode_texture</name></name><argument_list>(
<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tf</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name></expr></argument>, <argument><expr><name>lock_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>received</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_off_encoder_packet</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>success</name></expr></argument>, <argument><expr><name>received</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lock_key</name> <operator>=</operator> <name>next_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>+=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>timebase_num</name></name></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>lock_key</name></name> <operator>=</operator> <name>next_key</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>tf</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tf</name><operator>.</operator><name>timestamp</name></name> <operator>+=</operator> <name>interval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_push_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_output_inc_texture_skipped_frames</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_avail_queue</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoders</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_release</name><argument_list>(<argument><expr><name><name>encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name>encoders</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>encoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>init_gpu_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name> <modifier>*</modifier></type><name>ovi</name> <init>= <expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>ovi</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_avail_queue</name></name></expr></argument>, <argument><expr><name>NUM_ENCODE_TEXTURES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ENCODE_TEXTURES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex_uv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_texture_create_nv12</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_uv</name></expr></argument>, <argument><expr><name><name>ovi</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>,
<argument><expr><name><name>ovi</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>,
<argument><expr><name>GS_RENDER_TARGET</name> <operator>|</operator> <name>GS_SHARED_KM_TEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tex</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>handle</name> <init>= <expr><call><name>gs_texture_get_shared_handle</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_tex_frame</name></name></type> <name>frame</name> <init>= <expr><block>{
<expr><operator>.</operator><name>tex</name> <operator>=</operator> <name>tex</name></expr>, <expr><operator>.</operator><name>tex_uv</name> <operator>=</operator> <name>tex_uv</name></expr>, <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_avail_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>os_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name></expr></argument>, <argument><expr><name>OS_EVENT_TYPE_MANUAL</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gpu_encode_thread</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_thread_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stop_gpu_encoding_thread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_thread_initialized</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_stop</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_thread_initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_gpu_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_sem_destroy</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_semaphore</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encode_inactive</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>free_circlebuf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while (x.size) { struct obs_tex_frame frame; circlebuf_pop_front(&amp;x, &amp;frame, sizeof(frame)); gs_texture_destroy(frame.tex); gs_texture_destroy(frame.tex_uv); } circlebuf_free(&amp;x); } while (false)</cpp:value></cpp:define>










<expr_stmt><expr><call><name>free_circlebuf</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_circlebuf</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>gpu_encoder_avail_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>free_circlebuf</name></cpp:undef>
</block_content>}</block></function>
</unit>
