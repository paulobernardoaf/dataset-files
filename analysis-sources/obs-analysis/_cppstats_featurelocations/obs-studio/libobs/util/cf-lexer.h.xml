<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\cf-lexer.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lexer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>EXPORT</name> <name>char</name> <modifier>*</modifier></type><name>cf_literal_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>literal</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>











<enum>enum <name>cf_token_type</name> <block>{
<decl><name>CFTOKEN_NONE</name></decl>,
<decl><name>CFTOKEN_NAME</name></decl>,
<decl><name>CFTOKEN_NUM</name></decl>,
<decl><name>CFTOKEN_SPACETAB</name></decl>,
<decl><name>CFTOKEN_NEWLINE</name></decl>,
<decl><name>CFTOKEN_STRING</name></decl>,
<decl><name>CFTOKEN_OTHER</name></decl>
}</block>;</enum>

<struct>struct <name>cf_token</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>unmerged_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>cf_token_type</name></name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_token_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_token_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_token_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strref_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strref_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>unmerged_str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>unmerged_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<struct>struct <name>cf_lexer</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lexer</name></name></type> <name>base_lexer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reformatted</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>write_offset</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>tokens</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unexpected_eof</name></decl>;</decl_stmt> 
}</block>;</struct>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>cf_lexer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>cf_lexer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cf_lexer_get_tokens</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lex</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>cf_lexer_lex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct <name>cf_def</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>name</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>params</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>tokens</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>macro</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_def_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>cfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>cfd</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>cfd</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfd</name><operator>-&gt;</operator><name>macro</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_def_addparam</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>cfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>cfd</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_def_addtoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>cfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>cfd</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cf_def_getparam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>cfd</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cfd</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_def_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>cfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>cfd</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>cfd</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


























<struct>struct <name>cf_preprocessor</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_def</argument>)</argument_list></macro> <expr_stmt><expr><name>defines</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>sys_include_dirs</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_lexer</argument>)</argument_list></macro> <expr_stmt><expr><name>dependencies</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>tokens</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore_state</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>cf_preprocessor_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>cf_preprocessor_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>cf_preprocess</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>cf_preprocessor_add_sys_include_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>include_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>include_dir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sys_include_dirs</name></name></expr></argument>, <argument><expr><call><name>bstrdup</name><argument_list>(<argument><expr><name>include_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>cf_preprocessor_add_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>cf_preprocessor_remove_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type>
<name>cf_preprocessor_get_tokens</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pp</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
