<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\platform-windows.c">















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSAPI_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"darray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows/win-registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows/win-version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../deps/w32-pthreads/pthread.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SZ_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>have_clockfreq</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LARGE_INTEGER</name></type> <name>clock_freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>winver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>win_release_id</name><index>[<expr><name>MAX_SZ_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"unavailable"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>get_clockfreq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_clockfreq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_clockfreq</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>clock_freq</name><operator>.</operator><name>QuadPart</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_winver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>winver</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>ver</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_win_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winver</name> <operator>=</operator> <operator>(</operator><name><name>ver</name><operator>.</operator><name>major</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>ver</name><operator>.</operator><name>minor</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>winver</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>os_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dll_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wpath_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>h_library</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dll_name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dll_name</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dll_name</name></expr></argument>, <argument><expr><literal type="string">".dll"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dll_name</name></expr></argument>, <argument><expr><literal type="string">".dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name><name>dll_name</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>wpath_slash</name> <operator>=</operator> <call><name>wcsrchr</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wpath_slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wpath_slash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDllDirectoryW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wpath_slash</name> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h_library</name> <operator>=</operator> <call><name>LoadLibraryW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dll_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wpath_slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetDllDirectoryW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h_library</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ERROR_PROC_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FormatMessageA</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name> <operator>|</operator>
<name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_ENGLISH_US</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"LoadLibrary failed for '%s': %s (%lu)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>message</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>h_library</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>os_dlsym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<union>union <name>time_data</name> <block>{
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>os_cpu_usage_info</name> <block>{
<decl_stmt><decl><type><name><name>union</name> <name>time_data</name></name></type> <name>last_time</name></decl>, <decl><type ref="prev"/><name>last_sys_time</name></decl>, <decl><type ref="prev"/><name>last_user_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>core_count</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>os_cpu_usage_info_t</name> <modifier>*</modifier></type><name>os_cpu_usage_info_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>os_cpu_usage_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>last_time</name><operator>.</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetProcessTimes</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>last_sys_time</name><operator>.</operator><name>ft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>last_user_time</name><operator>.</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>core_count</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>dwNumberOfProcessors</name></name></expr>;</expr_stmt>

<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>os_cpu_usage_info_query</name><parameter_list>(<parameter><decl><type><name>os_cpu_usage_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>time_data</name></name></type> <name>cur_time</name></decl>, <decl><type ref="prev"/><name>cur_sys_time</name></decl>, <decl><type ref="prev"/><name>cur_user_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_time</name><operator>.</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetProcessTimes</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_sys_time</name><operator>.</operator><name>ft</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cur_user_time</name><operator>.</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>percent</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>cur_sys_time</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>last_sys_time</name><operator>.</operator><name>val</name></name> <operator>+</operator>
<operator>(</operator><name><name>cur_user_time</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>last_user_time</name><operator>.</operator><name>val</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>percent</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>cur_time</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>last_time</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>percent</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>core_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last_time</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>cur_time</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last_sys_time</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>cur_sys_time</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last_user_time</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>cur_user_time</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>

<return>return <expr><name>percent</name> <operator>*</operator> <literal type="number">100.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_cpu_usage_info_destroy</name><parameter_list>(<parameter><decl><type><name>os_cpu_usage_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_sleepto_ns</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>time_target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>milliseconds</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>time_target</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>milliseconds</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>time_target</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>milliseconds</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>milliseconds</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>time_target</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
Sleep(1);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_sleep_ms</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_winver</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0x0602</literal> <operator>&amp;&amp;</operator> <name>duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_gettime_ns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>current_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>time_val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>time_val</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>current_time</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>time_val</name> <operator>*=</operator> <literal type="number">1000000000.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>time_val</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>get_clockfreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>time_val</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>os_get_path_internal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>folder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path_utf16</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SHGetFolderPathW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name>path_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcat_s</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcat_s</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>os_get_path_ptr_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>folder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path_utf16</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SHGetFolderPathW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name>path_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_init_move_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>path</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_get_config_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_get_path_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>CSIDL_APPDATA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>os_get_config_path_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_get_path_ptr_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>CSIDL_APPDATA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_get_program_data_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_get_path_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>CSIDL_COMMON_APPDATA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>os_get_program_data_path_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_get_path_ptr_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>CSIDL_COMMON_APPDATA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>os_get_executable_path_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path_utf16</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_utf16</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_init_move_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>slash</name> <operator>-</operator> <name><name>path</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>path</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path_utf16</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_utf16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hFind</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hFind</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>hFind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hFind</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>os_get_abs_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>abspath</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wabspath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abspath</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_wfullpath</name><argument_list>(<argument><expr><name>wabspath</name></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_len</name> <operator>=</operator> <call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>wabspath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>abspath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>out_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>os_get_abs_path_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>bmalloc</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_get_abs_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>os_dir</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATA</name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>os_dirent</name></name></type> <name>out</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>os_dir_t</name> <modifier>*</modifier></type><name>os_opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path_str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>os_dir</name></name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATA</name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w_path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_str</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_str</name></expr></argument>, <argument><expr><literal type="string">"/*.*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name><name>path_str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>path_str</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>os_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>wfd</name></name> <operator>=</operator> <name>wfd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_dir</name><parameter_list>(<parameter><decl><type><name>WIN32_FIND_DATA</name> <modifier>*</modifier></type><name>wfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>wfd</name><operator>-&gt;</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>os_dirent</name></name> <modifier>*</modifier></type><name>os_readdir</name><parameter_list>(<parameter><decl><type><name>os_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FindNextFileW</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>wfd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>wfd</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>d_name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>d_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>directory</name></name> <operator>=</operator> <call><name>is_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>wfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>out</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_closedir</name><parameter_list>(<parameter><decl><type><name>os_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>os_get_free_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>remainingSpace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>abs_path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>w_abs_path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_get_abs_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w_abs_path</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name> <init>= <expr><call><name>GetDiskFreeSpaceExW</name><argument_list>(
<argument><expr><name>w_abs_path</name></expr></argument>, <argument><expr><operator>(</operator><name>PULARGE_INTEGER</name><operator>)</operator><operator>&amp;</operator><name>remainingSpace</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>remainingSpace</name><operator>.</operator><name>QuadPart</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_globent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>os_globent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>WIN32_FIND_DATA</name> <modifier>*</modifier></type><name>wfd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>wfd</name><operator>-&gt;</operator><name>cFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>path</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>directory</name></name> <operator>=</operator> <call><name>is_dir</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_glob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>os_glob_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pglob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct os_globent</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATA</name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w_path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>os_globent</name></name></type> <name>ent</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>make_globent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>.</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>FindNextFile</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pglob</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pglob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pglob</name><operator>)</operator><operator>-&gt;</operator><name>gl_pathc</name></name> <operator>=</operator> <name><name>files</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pglob</name><operator>)</operator><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>=</operator> <name><name>files</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pglob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_globfree</name><parameter_list>(<parameter><decl><type><name>os_glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pglob</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w_path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w_path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>RemoveDirectoryW</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>w_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path_utf16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_utf16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MKDIR_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>CreateDirectory</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_ALREADY_EXISTS</name><operator>)</operator></expr> ?</condition><then> <expr><name>MKDIR_EXISTS</name></expr>
</then><else>: <expr><name>MKDIR_ERROR</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>MKDIR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>old_path_utf16</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>new_path_utf16</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>old_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_path_utf16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_path_utf16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><call><name>MoveFileExW</name><argument_list>(<argument><expr><name>old_path_utf16</name></expr></argument>, <argument><expr><name>new_path_utf16</name></expr></argument>,
<argument><expr><name>MOVEFILE_REPLACE_EXISTING</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>old_path_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>new_path_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_safe_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>backup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wtarget</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wfrom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wbackup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name>from</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wtarget</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfrom</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>backup</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>backup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbackup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReplaceFileW</name><argument_list>(<argument><expr><name>wtarget</name></expr></argument>, <argument><expr><name>wfrom</name></expr></argument>, <argument><expr><name>wbackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><call><name>MoveFileExW</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>, <argument><expr><name>wtarget</name></expr></argument>, <argument><expr><name>MOVEFILE_REPLACE_EXISTING</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wtarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wbackup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hinst_dll</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>reserved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>reason</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DLL_PROCESS_ATTACH</name></expr>:</case>
<expr_stmt><expr><call><name>timeBeginPeriod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_win32_process_attach_np</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>DLL_PROCESS_DETACH</name></expr>:</case>
<expr_stmt><expr><call><name>timeEndPeriod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_win32_process_detach_np</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>DLL_THREAD_ATTACH</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_win32_thread_attach_np</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>DLL_THREAD_DETACH</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_win32_thread_detach_np</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hinst_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>os_performance_token_t</name> <modifier>*</modifier></type><name>os_request_high_performance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_end_high_performance</name><parameter_list>(<parameter><decl><type><name>os_performance_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_copyfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>file_in_utf16</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>file_out_utf16</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>file_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_in_utf16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>file_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_out_utf16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><call><name>CopyFileW</name><argument_list>(<argument><expr><name>file_in_utf16</name></expr></argument>, <argument><expr><name>file_out_utf16</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_in_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_out_utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>os_getcwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path_w</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>path_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>path_w</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path_w</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>SetCurrentDirectoryW</name><argument_list>(<argument><expr><name>path_w</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>DWORD</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>get_file_version_info_size_w_t</name>)<parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type> <name>module</name></decl></parameter>,
<parameter><decl><type><name>LPDWORD</name></type> <name>unused</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>get_file_version_info_w_t</name>)<parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>unused</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>ver_query_value_w_t</name>)<parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>subblock</name></decl></parameter>,
<parameter><decl><type><name>LPVOID</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PUINT</name></type> <name>sizeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>get_file_version_info_size_w_t</name></type> <name>get_file_version_info_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>get_file_version_info_w_t</name></type> <name>get_file_version_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ver_query_value_w_t</name></type> <name>ver_query_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ver_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ver_initialize_success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>initialize_version_functions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>ver</name> <init>= <expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"version"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ver_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ver</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>LoadLibraryW</name><argument_list>(<argument><expr><literal type="string">L"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ver</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load windows "</literal>
<literal type="string">"version library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>get_file_version_info_size</name> <operator>=</operator>
<operator>(</operator><name>get_file_version_info_size_w_t</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(
<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="string">"GetFileVersionInfoSizeW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>get_file_version_info</name> <operator>=</operator> <operator>(</operator><name>get_file_version_info_w_t</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(
<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="string">"GetFileVersionInfoW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ver_query_value</name> <operator>=</operator>
<operator>(</operator><name>ver_query_value_w_t</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="string">"VerQueryValueW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>get_file_version_info_size</name> <operator>||</operator> <operator>!</operator><name>get_file_version_info</name> <operator>||</operator>
<operator>!</operator><name>ver_query_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load windows version "</literal>
<literal type="string">"functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ver_initialize_success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>get_dll_ver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>ver_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VS_FIXEDFILEINFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8_lib</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ver_initialized</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>initialize_version_functions</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ver_initialize_success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8_lib</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_lib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>get_file_version_info_size</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get %s version info size"</literal></expr></argument>, <argument><expr><name>utf8_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_file_version_info</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get %s version info"</literal></expr></argument>, <argument><expr><name>utf8_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ver_query_value</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">L"\\"</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>||</operator> <operator>!</operator><name>info</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get %s version info value"</literal></expr></argument>,
<argument><expr><name>utf8_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ver_info</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>HIWORD</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dwFileVersionMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver_info</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>LOWORD</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dwFileVersionMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver_info</name><operator>-&gt;</operator><name>build</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>HIWORD</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dwFileVersionLS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver_info</name><operator>-&gt;</operator><name>revis</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>LOWORD</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dwFileVersionLS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>is_64_bit_windows</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>true</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>BOOL</name></type> <name>b64</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>IsWow64Process</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>b64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>b64</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_reg_dword</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>sub_key</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>value_name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>reg_dword</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>reg_dword</name></name></type> <name>reg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>sub_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>reg</name><operator>.</operator><name>return_value</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>status</name></name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name><name>reg</name><operator>.</operator><name>return_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reg</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER_REG_KEY</name></cpp:macro> <cpp:value>L"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rtl_get_ver</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTL_OSVERSIONINFOEXW</name></type> <name>osver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>ntdll</name> <init>= <expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"ntdll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>s</name></decl>;</decl_stmt>

<function_decl><type><name>NTSTATUS</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>get_ver</name>)
<parameter_list>(<parameter><decl><type><name>RTL_OSVERSIONINFOEXW</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>=
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>ntdll</name></expr></argument>, <literal type="string">"RtlGetVersion"</literal>)</argument_list></call></expr></init>;</function_decl>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>get_ver</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>osver</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>build</name></name> <operator>=</operator> <name><name>osver</name><operator>.</operator><name>dwBuildNumber</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>revis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_reg_sz</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwsize</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>(</operator><name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_reg_ver</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>dw_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>str</name><index>[<expr><name>MAX_SZ_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyW</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>WINVER_REG_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dw_val</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"CurrentMajorVersionNumber"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>dw_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dw_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"CurrentMinorVersionNumber"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>dw_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dw_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"UBR"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>dw_val</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>revis</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dw_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_reg_sz</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"CurrentBuildNumber"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ver</name><operator>-&gt;</operator><name>build</name></name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_reg_sz</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"ReleaseId"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>win_release_id</name></expr></argument>, <argument><expr><name>MAX_SZ_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>version_higher</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>major</name></name> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>major</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>major</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>minor</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>minor</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>minor</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>build</name></name> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>build</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>build</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>build</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>new</name><operator>-&gt;</operator><name>revis</name></name> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>revis</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>use_higher_ver</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>version_higher</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cur</name> <operator>=</operator> <operator>*</operator><name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_win_ver</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>win_version_info</name></name></type> <name>ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>got_version</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_version</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>reg_ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>rtl_ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>nto_ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_reg_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reg_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtl_get_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtl_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_dll_ver</name><argument_list>(<argument><expr><literal type="string">L"ntoskrnl.exe"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nto_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <name>reg_ver</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_higher_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtl_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_higher_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nto_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_version</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_win_release_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>win_release_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>get_win_ver_int</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_winver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>os_inhibit_info</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>os_inhibit_t</name> <modifier>*</modifier></type><name>os_inhibit_sleep_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>os_inhibit_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_inhibit_sleep_set_active</name><parameter_list>(<parameter><decl><type><name>os_inhibit_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>active</name></name> <operator>==</operator> <name>active</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetThreadExecutionState</name><argument_list>(<argument><expr><name>ES_CONTINUOUS</name> <operator>|</operator> <name>ES_SYSTEM_REQUIRED</name> <operator>|</operator>
<name>ES_AWAYMODE_REQUIRED</name> <operator>|</operator>
<name>ES_DISPLAY_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SetThreadExecutionState</name><argument_list>(<argument><expr><name>ES_CONTINUOUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_inhibit_sleep_destroy</name><parameter_list>(<parameter><decl><type><name>os_inhibit_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_inhibit_sleep_set_active</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_breakpoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__debugbreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DWORD</name></type> <name>num_logical_cores</name><parameter_list>(<parameter><decl><type><name>ULONG_PTR</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>left_shift</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ULONG_PTR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bit_set_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG_PTR</name></type> <name>bit_test</name> <init>= <expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>left_shift</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>DWORD</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>left_shift</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit_set_count</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>bit_test</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_test</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>bit_set_count</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>physical_cores</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>logical_cores</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>core_count_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>os_get_cores_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PSYSTEM_LOGICAL_PROCESSOR_INFORMATION</name></type> <name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>core_count_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>core_count_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetLogicalProcessorInformation</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetLogicalProcessorInformation</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>num</name> <init>= <expr><name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>DWORD</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>Relationship</name></name> <operator>==</operator> <name>RelationProcessorCore</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ULONG_PTR</name></type> <name>mask</name> <init>= <expr><name><name>temp</name><operator>-&gt;</operator><name>ProcessorMask</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>physical_cores</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>logical_cores</name> <operator>+=</operator> <call><name>num_logical_cores</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_get_physical_cores</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core_count_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_get_cores_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>physical_cores</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_get_logical_cores</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core_count_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_get_cores_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>logical_cores</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>os_get_sys_memory_usage_internal</name><parameter_list>(<parameter><decl><type><name>MEMORYSTATUSEX</name> <modifier>*</modifier></type><name>msex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><name>msex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_get_sys_free_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>msex</name> <init>= <expr><block>{<expr>sizeof<operator>(</operator><name>MEMORYSTATUSEX</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_get_sys_memory_usage_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>msex</name><operator>.</operator><name>ullAvailPhys</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>os_get_proc_memory_usage_internal</name><parameter_list>(<parameter><decl><type><name>PROCESS_MEMORY_COUNTERS</name> <modifier>*</modifier></type><name>pmc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetProcessMemoryInfo</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pmc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pmc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_get_proc_memory_usage</name><parameter_list>(<parameter><decl><type><name>os_proc_memory_usage_t</name> <modifier>*</modifier></type><name>usage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>pmc</name> <init>= <expr><block>{<expr>sizeof<operator>(</operator><name>PROCESS_MEMORY_COUNTERS</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_get_proc_memory_usage_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pmc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>usage</name><operator>-&gt;</operator><name>resident_size</name></name> <operator>=</operator> <name><name>pmc</name><operator>.</operator><name>WorkingSetSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>usage</name><operator>-&gt;</operator><name>virtual_size</name></name> <operator>=</operator> <name><name>pmc</name><operator>.</operator><name>PagefileUsage</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_get_proc_resident_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>pmc</name> <init>= <expr><block>{<expr>sizeof<operator>(</operator><name>PROCESS_MEMORY_COUNTERS</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_get_proc_memory_usage_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pmc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>pmc</name><operator>.</operator><name>WorkingSetSize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_get_proc_virtual_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>pmc</name> <init>= <expr><block>{<expr>sizeof<operator>(</operator><name>PROCESS_MEMORY_COUNTERS</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_get_proc_memory_usage_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pmc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>pmc</name><operator>.</operator><name>PagefileUsage</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_get_free_disk_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wdir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>GetDiskFreeSpaceExW</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name><name>free</name><operator>.</operator><name>QuadPart</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
