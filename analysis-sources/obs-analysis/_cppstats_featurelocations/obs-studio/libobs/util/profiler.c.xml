<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\profiler.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"darray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>



<struct>struct <name>profiler_snapshot</name> <block>{
<macro><name>DARRAY</name><argument_list>(<argument>profiler_snapshot_entry_t</argument>)</argument_list></macro> <expr_stmt><expr><name>roots</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>profiler_snapshot_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profiler_time_entries_t</name></type> <name>times</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>overall_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profiler_time_entries_t</name></type> <name>times_between_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>expected_time_between_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_time_between_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_time_between_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>overall_between_calls_count</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>profiler_snapshot_entry_t</argument>)</argument_list></macro> <expr_stmt><expr><name>children</name></expr>;</expr_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>profiler_time_entry</name></name></type> <name>profiler_time_entry</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>profile_call</name></name></type> <name>profile_call</name>;</typedef>
<struct>struct <name>profile_call</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>overhead_start</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>end_time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>overhead_end</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>expected_time_between_calls</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>profile_call</argument>)</argument_list></macro> <expr_stmt><expr><name>children</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>profile_times_table_entry</name></name></type> <name>profile_times_table_entry</name>;</typedef>
<struct>struct <name>profile_times_table_entry</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>probes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profiler_time_entry</name></type> <name>entry</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>profile_times_table</name></name></type> <name>profile_times_table</name>;</typedef>
<struct>struct <name>profile_times_table</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>occupied</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_probe_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_times_table_entry</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_start_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_occupied</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_times_table_entry</name> <modifier>*</modifier></type><name>old_entries</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>profile_entry</name></name></type> <name>profile_entry</name>;</typedef>
<struct>struct <name>profile_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_times_table</name></type> <name>times</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>profile_times_table</name></type> <name>overhead</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>expected_time_between_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_times_table</name></type> <name>times_between_calls</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>profile_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>children</name></expr>;</expr_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>profile_root_entry</name></name></type> <name>profile_root_entry</name>;</typedef>
<struct>struct <name>profile_root_entry</name> <block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>prev_call</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>diff_ns_to_usec</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>next</name> <operator>-</operator> <name>prev</name> <operator>+</operator> <literal type="number">500</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_max_probes</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>max_probe_count</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>map</name><operator>-&gt;</operator><name>max_probe_count</name></name> <operator>&lt;</operator> <name>val</name></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>max_probe_count</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>migrate_old_entries</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>limit_items</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>grow_hashmap</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>usec</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hashmap_entry</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>usec</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>probes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>start</name> <init>= <expr><name>usec</name> <operator>%</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr><expr><name>probes</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>start</name> <operator>+</operator> <name>probes</name><operator>)</operator> <operator>%</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_times_table_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>probes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>time_delta</name></name> <operator>=</operator> <name>usec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>occupied</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_max_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>time_delta</name></name> <operator>==</operator> <name>usec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>count</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>probes</name></name> <operator>&gt;=</operator> <name>probes</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>occupied</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0.7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grow_hashmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>usec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_probes</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>probes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_count</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_usec</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>time_delta</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>time_delta</name></name> <operator>=</operator> <name>usec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_max_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>probes</name> <operator>=</operator> <name>old_probes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>old_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>usec</name> <operator>=</operator> <name>old_usec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>usec</name> <operator>%</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_hashmap</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>occupied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>max_probe_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_times_table_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_start_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_occupied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>migrate_old_entries</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>limit_items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>old_occupied</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>limit_items</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>map</name><operator>-&gt;</operator><name>old_start_index</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>old_occupied</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>profile_times_table_entry</name> <modifier>*</modifier></type><name>entry</name> <init>=
<expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>old_entries</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>old_start_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>probes</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_hashmap_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>time_delta</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_occupied</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_hashmap</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>usec</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>migrate_old_entries</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_occupied</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>occupied</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_times_table_entry</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_hashmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>old_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><operator>(</operator><name>old_size</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_occupied</name></name> <operator>=</operator> <name>old_occupied</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_hashmap_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>usec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>profile_entry</name> <modifier>*</modifier></type><name>init_entry</name><parameter_list>(<parameter><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_hashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_hashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>overhead</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_hashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>profile_entry</name> <modifier>*</modifier></type><name>get_child</name><parameter_list>(<parameter><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>child</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>init_entry</name><argument_list>(<argument><expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_call</name><parameter_list>(<parameter><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>call</name></decl></parameter>,
<parameter><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>prev_call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>call</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>merge_call</name><argument_list>(<argument><expr><call><name>get_child</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prev_call</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>migrate_old_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>usec</name> <init>= <expr><call><name>diff_ns_to_usec</name><argument_list>(<argument><expr><name><name>prev_call</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>,
<argument><expr><name><name>call</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_hashmap_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>, <argument><expr><name>usec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>migrate_old_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>usec</name> <init>= <expr><call><name>diff_ns_to_usec</name><argument_list>(<argument><expr><name><name>call</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_hashmap_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>, <argument><expr><name>usec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>migrate_old_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>overhead</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usec</name> <operator>=</operator> <call><name>diff_ns_to_usec</name><argument_list>(<argument><expr><name><name>call</name><operator>-&gt;</operator><name>overhead_start</name></name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usec</name> <operator>+=</operator> <call><name>diff_ns_to_usec</name><argument_list>(<argument><expr><name><name>call</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>overhead_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_hashmap_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>overhead</name></name></expr></argument>, <argument><expr><name>usec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>root_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <macro><name>DARRAY</name><argument_list>(<argument>profile_root_entry</argument>)</argument_list></macro> <name>root_entries</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD_LOCAL</name> <name>profile_call</name> <modifier>*</modifier></type><name>thread_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD_LOCAL</name> <name>bool</name></type> <name>thread_enabled</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>profiler_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_reenable_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thread_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thread_enabled</name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lock_root</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thread_enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>profile_root_entry</name> <modifier>*</modifier></type><name>get_root_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>profile_root_entry</name> <modifier>*</modifier></type><name>r_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root_entries</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>root_entries</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>root_entries</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r_entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_entry</name> <operator>=</operator> <call><name>da_push_back_new</name><argument_list>(<argument><expr><name>root_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_entry</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name><name>r_entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r_entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_entry</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_entry</name><argument_list>(<argument><expr><name><name>r_entry</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r_entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_register_root</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>expected_time_between_calls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock_root</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_root_entry</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name> <operator>=</operator>
<operator>(</operator><name>expected_time_between_calls</name> <operator>+</operator> <literal type="number">500</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_call_context</name><parameter_list>(<parameter><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_context</name><parameter_list>(<parameter><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>prev_call</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock_root</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_call_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>profile_root_entry</name> <modifier>*</modifier></type><name>r_entry</name> <init>= <expr><call><name>get_root_entry</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mutex</name> <operator>=</operator> <name><name>r_entry</name><operator>-&gt;</operator><name>mutex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>r_entry</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_call</name> <operator>=</operator> <name><name>r_entry</name><operator>-&gt;</operator><name>prev_call</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r_entry</name><operator>-&gt;</operator><name>prev_call</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>merge_call</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>prev_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_call_context</name><argument_list>(<argument><expr><name>prev_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>profile_call</name></type> <name>new_call</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>overhead_start</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>.</operator><name>parent</name> <operator>=</operator> <name>thread_context</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>call</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_call</name><operator>.</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>new_call</name><operator>.</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_call</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>call</name> <operator>=</operator> <operator>&amp;</operator><name><name>new_call</name><operator>.</operator><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_call</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_call</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_call</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>thread_context</name> <operator>=</operator> <name>call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>end</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>call</name> <init>= <expr><name>thread_context</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>call</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Called profile end with no active profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>call</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Called profile end with mismatching name: "</literal>
<literal type="string">"start(\"%s\"[%p]) &lt;-&gt; end(\"%s\"[%p])"</literal></expr></argument>,
<argument><expr><name><name>call</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>call</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name><name>call</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>call</name> <operator>=</operator> <name><name>call</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>thread_context</name> <operator>=</operator> <name><name>call</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>overhead_end</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>merge_context</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>profiler_time_entry_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><operator>(</operator><operator>(</operator><name>profiler_time_entry</name> <operator>*</operator><operator>)</operator><name>second</name><operator>)</operator><operator>-&gt;</operator><name>time_delta</name> <operator>-</operator>
<operator>(</operator><operator>(</operator><name>profiler_time_entry</name> <operator>*</operator><operator>)</operator><name>first</name><operator>)</operator><operator>-&gt;</operator><name>time_delta</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>copy_map_to_array</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><name>profiler_time_entries_t</name> <modifier>*</modifier></type><name>entry_buffer</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>min_</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>max_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>migrate_old_entries</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>entry_buffer</name><operator>)</operator></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>entry_buffer</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>min__</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max__</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>calls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>probes</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>profiler_time_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>entry_buffer</name><operator>)</operator></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>calls</name> <operator>+=</operator> <name><name>entry</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min__</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>min__</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>time_delta</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>min__</name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>time_delta</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>max__</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>max__</name> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>time_delta</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>max__</name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>time_delta</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>min_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>min_</name> <operator>=</operator> <name>min__</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>max_</name> <operator>=</operator> <name>max__</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>calls</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>profile_entry_print_func</name>)<parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>indent_buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>output_buffer</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>active</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>parent_calls</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPIPE_RIGHT</name></cpp:macro> <cpp:value>" \xe2\x94\xa3"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPIPE</name></cpp:macro> <cpp:value>" \xe2\x94\x83"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWN_RIGHT</name></cpp:macro> <cpp:value>" \xe2\x94\x97"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_indent_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>indent_buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indent</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>indent_buffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>indent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><name>indent_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fragment</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>last</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>indent</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment</name> <operator>=</operator> <ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><name>VPIPE_RIGHT</name></expr> </then><else>: <expr><name>VPIPE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment</name> <operator>=</operator> <ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><name>DOWN_RIGHT</name></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>indent_buffer</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gather_stats</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>expected_time_between_calls</name></decl></parameter>,
<parameter><decl><type><name>profiler_time_entries_t</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>calls</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>percentile99</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>median</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>percent_within_bounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entries</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>percentile99</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>median</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>percent_within_bounds</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<decl_stmt><decl><type><name>uint64_t</name></type> <name>accu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entries</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_accu</name> <init>= <expr><name>accu</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>accu</name> <operator>+=</operator> <name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_accu</name> <operator>&lt;</operator> <name>calls</name> <operator>*</operator> <literal type="number">0.01</literal> <operator>&amp;&amp;</operator> <name>accu</name> <operator>&gt;=</operator> <name>calls</name> <operator>*</operator> <literal type="number">0.01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>percentile99</name> <operator>=</operator> <name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_delta</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>old_accu</name> <operator>&lt;</operator> <name>calls</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <name>accu</name> <operator>&gt;=</operator> <name>calls</name> <operator>*</operator> <literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>median</name> <operator>=</operator> <name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_delta</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>percent_within_bounds</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expected_time_between_calls</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entries</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>profiler_time_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>time_delta</name></name> <operator>&lt;</operator> <name>expected_time_between_calls</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <name><name>entry</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>percent_within_bounds</name> <operator>=</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>accu</name> <operator>/</operator> <name>calls</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G_MS</name></cpp:macro> <cpp:value>"g\xC2\xA0ms"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_print_entry</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>indent_buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>output_buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indent</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>parent_calls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>calls</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>overall_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>min_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>max_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>percentile99</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>median</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percent_within_bounds</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gather_stats</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>, <argument><expr><name>calls</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>percentile99</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>median</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>percent_within_bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_indent_string</name><argument_list>(<argument><expr><name>indent_buffer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_</name> <operator>==</operator> <name>max_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s%s: %"</literal> <name>G_MS</name></expr></argument>, <argument><expr><name><name>indent_buffer</name><operator>-&gt;</operator><name>array</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>min_</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>,
<argument><expr><literal type="string">"%s%s: min=%"</literal> <name>G_MS</name> <literal type="string">", median=%"</literal> <name>G_MS</name> <literal type="string">", "</literal>
<literal type="string">"max=%"</literal> <name>G_MS</name> <literal type="string">", 99th percentile=%"</literal> <name>G_MS</name></expr></argument>,
<argument><expr><name><name>indent_buffer</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>min_</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>,
<argument><expr><name>median</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>, <argument><expr><name>max_</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>, <argument><expr><name>percentile99</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>expected_ms</name> <init>=
<expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name> <operator>/</operator> <literal type="number">1000.</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><literal type="string">", %g%% below %"</literal> <name>G_MS</name></expr></argument>,
<argument><expr><name>percent_within_bounds</name></expr></argument>, <argument><expr><name>expected_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parent_calls</name> <operator>&amp;&amp;</operator> <name>calls</name> <operator>!=</operator> <name>parent_calls</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>calls_per_parent</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>calls</name> <operator>/</operator> <name>parent_calls</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lround</name><argument_list>(<argument><expr><name>calls_per_parent</name> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><literal type="string">", %g calls per parent call"</literal></expr></argument>,
<argument><expr><name>calls_per_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>output_buffer</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>indent</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>active</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>indent</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>profile_print_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>indent_buffer</name></expr></argument>,
<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><name>calls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gather_stats_between</name><parameter_list>(<parameter><decl><type><name>profiler_time_entries_t</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>calls</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>lower_bound</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>upper_bound</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>min_</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>max_</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>median</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>percent</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lower</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>higher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>median</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>percent</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>higher</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entries</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>accu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entries</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>accu</name> <operator>+=</operator> <name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>accu</name> <operator>&lt;</operator> <name>calls</name> <operator>*</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>median</name> <operator>=</operator> <name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_delta</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>found_upper_bound</name> <init>= <expr><name>max_</name> <operator>&lt;=</operator> <name>upper_bound</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_lower_bound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min_</name> <operator>&gt;=</operator> <name>upper_bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>higher</name> <operator>=</operator> <literal type="number">100.</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_upper_bound</name> <operator>&amp;&amp;</operator> <name>min_</name> <operator>&gt;=</operator> <name>lower_bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>percent</name> <operator>=</operator> <literal type="number">100.</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entries</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_delta</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_upper_bound</name> <operator>&amp;&amp;</operator> <name>delta</name> <operator>&lt;=</operator> <name>upper_bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>higher</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>accu</name> <operator>/</operator> <name>calls</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>found_upper_bound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_lower_bound</name> <operator>&amp;&amp;</operator> <name>delta</name> <operator>&lt;</operator> <name>lower_bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>percent</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>accu</name> <operator>/</operator> <name>calls</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>accu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>found_lower_bound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <name><name>entries</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_upper_bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>higher</name> <operator>=</operator> <literal type="number">100.</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>found_lower_bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>percent</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>accu</name> <operator>/</operator> <name>calls</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>accu</name> <operator>/</operator> <name>calls</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_print_entry_expected</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>indent_buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>output_buffer</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>active</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>parent_calls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>parent_calls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>expected_time</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>min_time_between_calls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>max_time_between_calls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>median</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percent</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lower</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>higher</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gather_stats_between</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>overall_between_calls_count</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>expected_time</name> <operator>*</operator> <literal type="number">0.98</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>expected_time</name> <operator>*</operator> <literal type="number">1.02</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument>, <argument><expr><name>min_</name></expr></argument>, <argument><expr><name>max_</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>median</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>percent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lower</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>higher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_indent_string</name><argument_list>(<argument><expr><name>indent_buffer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"%s%s: min=%"</literal> <name>G_MS</name> <literal type="string">", median=%"</literal> <name>G_MS</name> <literal type="string">", max=%"</literal> <name>G_MS</name> <literal type="string">", %g%% "</literal>
<literal type="string">"within Â±2%% of %"</literal> <name>G_MS</name> <literal type="string">" (%g%% lower, %g%% higher)"</literal></expr></argument>,
<argument><expr><name><name>indent_buffer</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>min_</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>, <argument><expr><name>median</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>,
<argument><expr><name>max_</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>, <argument><expr><name>expected_time</name> <operator>/</operator> <literal type="number">1000.</literal></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>higher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>indent</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>active</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>indent</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>profile_print_entry_expected</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>indent_buffer</name></expr></argument>, <argument><expr><name>output_buffer</name></expr></argument>,
<argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_print_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intro</name></decl></parameter>, <parameter><decl><type><name>profile_entry_print_func</name></type> <name>print</name></decl></parameter>,
<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>indent_buffer</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>output_buffer</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>free_snapshot</name> <init>= <expr><operator>!</operator><name>snap</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>snap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>snap</name> <operator>=</operator> <call><name>profile_snapshot_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>intro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indent_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"================================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_snapshot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>profile_snapshot_free</name><argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indent_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_print</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_print_func</name><argument_list>(<argument><expr><literal type="string">"== Profiler Results ============================="</literal></expr></argument>,
<argument><expr><name>profile_print_entry</name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_print_time_between_calls</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_print_func</name><argument_list>(<argument><expr><literal type="string">"== Profiler Time Between Calls =================="</literal></expr></argument>,
<argument><expr><name>profile_print_entry_expected</name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_call_children</name><parameter_list>(<parameter><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>call</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>call</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_call_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>call</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_call_context</name><parameter_list>(<parameter><decl><type><name>profile_call</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_call_children</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_hashmap</name><parameter_list>(<parameter><decl><type><name>profile_times_table</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>old_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_profile_entry</name><parameter_list>(<parameter><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_profile_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free_hashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACK_OVERHEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_hashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>overhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free_hashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>profile_root_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>old_root_entries</name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_move</name><argument_list>(<argument><expr><name>old_root_entries</name></expr></argument>, <argument><expr><name>root_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>old_root_entries</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>profile_root_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>old_root_entries</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_call_context</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>prev_call</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_profile_entry</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>old_root_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<struct>struct <name>profiler_name_store</name> <block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>names</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>profiler_name_store_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profiler_name_store_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>store</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_name_store_free</name><parameter_list>(<parameter><decl><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>store</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>names</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>names</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile_store_name</name><parameter_list>(<parameter><decl><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_vprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>names</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>add_entry_to_snapshot</name><parameter_list>(<parameter><decl><type><name>profile_entry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>s_entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s_entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_entry</name><operator>-&gt;</operator><name>overall_count</name></name> <operator>=</operator>
<call><name>copy_map_to_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s_entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s_entry</name><operator>-&gt;</operator><name>min_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s_entry</name><operator>-&gt;</operator><name>max_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s_entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name> <operator>=</operator>
<name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s_entry</name><operator>-&gt;</operator><name>overall_between_calls_count</name></name> <operator>=</operator>
<call><name>copy_map_to_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s_entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s_entry</name><operator>-&gt;</operator><name>min_time_between_calls</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s_entry</name><operator>-&gt;</operator><name>max_time_between_calls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><name><name>s_entry</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_entry_to_snapshot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>s_entry</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_snapshot_entry</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profiler_time_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>profiler_time_entry_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profiler_time_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>profiler_time_entry_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sort_snapshot_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>profile_snapshot_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profiler_snapshot_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>, <argument><expr><name><name>root_entries</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root_entries</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>root_entries</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_entry_to_snapshot</name><argument_list>(<argument><expr><name><name>root_entries</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name></expr></argument>,
<argument><expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>root_entries</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sort_snapshot_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>snap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_snapshot_entry</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_snapshot_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_snapshot_free</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>snap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_snapshot_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dump_csv_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>entry_dump_csv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>dump_csv_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent_name</name> <init>= <expr><ternary><condition><expr><name>parent</name></expr> ?</condition><then> <expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><literal type="string">"%p,%p,%p,%p,%s,0,"</literal>
<literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">",%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>parent_name</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_delta</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><literal type="string">"%p,%p,%p,%p,%s,"</literal>
<literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">",%"</literal> <name>PRIu64</name> <literal type="string">",%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>parent_name</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_delta</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>entry_dump_csv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>profiler_snapshot_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,
<parameter><decl><type><name>dump_csv_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>buffer</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"id,parent_id,name_id,parent_name_id,name,"</literal>
<literal type="string">"time_between_calls,time_delta_Âµs,count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>entry_dump_csv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_csv_fwrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>profiler_snapshot_dump_csv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>os_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>profiler_snapshot_dump</name><argument_list>(<argument><expr><name>snap</name></expr></argument>, <argument><expr><name>dump_csv_fwrite</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_csv_gzwrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gzwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>profiler_snapshot_dump_csv_gz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gzFile</name></type> <name>gz</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>filename_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename_w</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gz</name> <operator>=</operator> <call><name>gzopen_w</name><argument_list>(<argument><expr><name>filename_w</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>filename_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>gz</name> <operator>=</operator> <call><name>gzopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>profiler_snapshot_dump</name><argument_list>(<argument><expr><name>snap</name></expr></argument>, <argument><expr><name>dump_csv_gzwrite</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gzclose_w</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>profiler_snapshot_num_roots</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>snap</name></expr> ?</condition><then> <expr><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_snapshot_enumerate_roots</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,
<parameter><decl><type><name>profiler_entry_enum_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>snap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_snapshot_filter_roots</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,
<parameter><decl><type><name>profiler_name_filter_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>num</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>remove</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remove</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_snapshot_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>roots</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remove</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>profiler_snapshot_num_children</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>profiler_snapshot_enumerate_children</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>profiler_entry_enum_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profiler_snapshot_entry_name</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>profiler_time_entries_t</name> <modifier>*</modifier></type>
<name>profiler_snapshot_entry_times</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>profiler_snapshot_entry_overall_count</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>overall_count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>profiler_snapshot_entry_min_time</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>min_time</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>profiler_snapshot_entry_max_time</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>max_time</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>profiler_time_entries_t</name> <modifier>*</modifier></type>
<name>profiler_snapshot_entry_times_between_calls</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>times_between_calls</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>profiler_snapshot_entry_expected_time_between_calls</name><parameter_list>(
<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>expected_time_between_calls</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>profiler_snapshot_entry_min_time_between_calls</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>min_time_between_calls</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>profiler_snapshot_entry_max_time_between_calls</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>max_time_between_calls</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>profiler_snapshot_entry_overall_between_calls_count</name><parameter_list>(
<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>overall_between_calls_count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
