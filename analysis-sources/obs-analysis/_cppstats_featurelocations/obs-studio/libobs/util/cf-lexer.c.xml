<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\cf-lexer.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cf-lexer.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_convert_from_escape_literal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>*</operator><name>p_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>*</operator><name>p_src</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\?'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\?'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>


<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_src</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>cf_literal_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>literal</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>temp_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp_dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>literal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>literal</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\"'</literal> <operator>&amp;&amp;</operator> <name><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><operator>--</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>literal</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_dst</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>temp_src</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>temp_src</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp_src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_convert_from_escape_literal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>temp_dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>temp_src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>temp_dst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_is_token_break</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>start_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>start_token</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BASETOKEN_ALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_OTHER</name> <operator>||</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_WHITESPACE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>BASETOKEN_DIGIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_WHITESPACE</name> <operator>||</operator>
<operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_OTHER</name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>BASETOKEN_WHITESPACE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_space_or_tab</name><argument_list>(<argument><expr><operator>*</operator><name><name>start_token</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>is_space_or_tab</name><argument_list>(<argument><expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>BASETOKEN_OTHER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>start_token</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_DIGIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>start_token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>BASETOKEN_DIGIT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<case>case <expr><name>BASETOKEN_NONE</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>cf_is_splice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>array</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <call><name>is_newline</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_pass_any_splices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>parray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>cf_is_splice</name><argument_list>(<argument><expr><operator>*</operator><name>parray</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>parray</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>newline_size</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>parray</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>cf_is_comment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name>array</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name><operator>++</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_pass_any_splices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_lexer_process_comment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>out_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_is_comment</name><argument_list>(<argument><expr><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_pass_any_splices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>offset</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_newline</name><argument_list>(<argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_pass_any_splices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>was_star</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>unexpected_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_pass_any_splices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>was_star</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>unexpected_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>was_star</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>len</name></name> <operator>+=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>-</operator> <name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CFTOKEN_SPACETAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_lexer_write_strref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>+=</operator> <name><name>ref</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_lexer_is_include</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found_include_import</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_preprocessor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>num</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_space_or_tab</name><argument_list>(<argument><expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_include_import</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"import"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_include_import</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>found_preprocessor</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_preprocessor</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>is_newline</name><argument_list>(<argument><expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<return>return <expr><name>found_preprocessor</name> <operator>&amp;&amp;</operator> <name>found_include_import</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_lexer_getstrtoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>out_token</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>allow_escaped_delimiters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>escaped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_lexer_write_strref</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_pass_any_splices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>==</operator> <name>delimiter</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>escaped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_newline</name><argument_list>(<argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <operator>(</operator><name>allow_escaped_delimiters</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>offset</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>len</name></name> <operator>+=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>-</operator> <name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CFTOKEN_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_lexer_process_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>out_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <call><name>cf_lexer_is_include</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_lexer_getstrtoken</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>out_token</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_lexer_getstrtoken</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>out_token</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>,
<argument><expr><operator>!</operator><call><name>cf_lexer_is_include</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>cf_token_type</name></name></type>
<name>cf_get_token_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>start_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>start_token</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BASETOKEN_ALPHA</name></expr>:</case>
<return>return <expr><name>CFTOKEN_NAME</name></expr>;</return>

<case>case <expr><name>BASETOKEN_DIGIT</name></expr>:</case>
<return>return <expr><name>CFTOKEN_NUM</name></expr>;</return>

<case>case <expr><name>BASETOKEN_WHITESPACE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_newline</name><argument_list>(<argument><expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CFTOKEN_NEWLINE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CFTOKEN_SPACETAB</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>BASETOKEN_NONE</name></expr>:</case>
<case>case <expr><name>BASETOKEN_OTHER</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>CFTOKEN_OTHER</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_lexer_nexttoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>out_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>base_token</name></name></type> <name>token</name></decl>, <decl><type ref="prev"/><name>start_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wrote_data</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>base_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><name>out_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>lexer_getbasetoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>PARSE_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>token</name><operator>.</operator><name>text</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>BASETOKEN_ALPHA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cf_is_splice</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>text</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name> <operator>+=</operator>
<call><name>newline_size</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>text</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrote_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>text</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cf_lexer_process_comment</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>out_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cf_lexer_process_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>out_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>base_token_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wrote_data</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_is_token_break</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name> <operator>-=</operator> <name><name>token</name><operator>.</operator><name>text</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>cf_lexer_write_strref</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name><name>token</name><operator>.</operator><name>text</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>wrote_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator>
<name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name><name>out_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>cf_get_token_type</name><argument_list>(<argument><expr><name>out_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>wrote_data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cf_lexer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lexer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>reformatted</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>unexpected_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cf_lexer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>reformatted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lexer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>reformatted</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>unexpected_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cf_lexer_lex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>last_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cf_lexer_free</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lexer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>reformatted</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>reformatted</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>reformatted</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>cf_lexer_nexttoken</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_token</name> <operator>&amp;&amp;</operator> <call><name>is_space_or_tab</name><argument_list>(<argument><expr><operator>*</operator><name><name>last_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>is_space_or_tab</name><argument_list>(<argument><expr><operator>*</operator><name><name>token</name><operator>.</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_token_add</name><argument_list>(<argument><expr><name>last_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>token</name><operator>.</operator><name>lex</name></name> <operator>=</operator> <name>lex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_token</name> <operator>=</operator> <call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>last_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>token</name><operator>.</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>write_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>.</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>base_lexer</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>.</operator><name>lex</name></name> <operator>=</operator> <name>lex</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name><name>lex</name><operator>-&gt;</operator><name>unexpected_eof</name></name></expr>;</return>
</block_content>}</block></function>



<struct>struct <name>macro_param</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>name</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>tokens</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>macro_param_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>macro_param_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<struct>struct <name>macro_params</name> <block>{
<macro><name>DARRAY</name><argument_list>(<argument>struct macro_param</argument>)</argument_list></macro> <expr_stmt><expr><name>params</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>macro_params_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>macro_params_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>macro_param_free</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type>
<name>get_macro_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strref_cmp_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>param</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>cf_preprocessor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_block</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_tokens</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_block</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>go_to_newline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NEWLINE</name> <operator>&amp;&amp;</operator>
<name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>

<return>return <expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>next_token</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>preprocessor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_SPACETAB</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>preprocessor</name> <operator>||</operator> <name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NEWLINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
<return>return <expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_gettokenoffset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lexer_getstroffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>base_lexer</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_addew</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cf_gettokenoffset</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>val2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>val3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_data_add</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>ed</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>message</name></expr></argument>,
<argument><expr><name>error_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>formatted</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_safe_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error_data_add</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>ed</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><name><name>formatted</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>error_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_adderror</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_addew</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_addwarning</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>warning</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_addew</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>, <argument><expr><name>LEX_WARNING</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_adderror_expecting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expecting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"Expected $1"</literal></expr></argument>, <argument><expr><name>expecting</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_adderror_expected_newline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected token after preprocessor, expected "</literal>
<literal type="string">"newline"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>cf_adderror_unexpected_endif_eof</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"Unexpected end of file before #endif"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_adderror_unexpected_eof</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"Unexpected end of file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>insert_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>&amp;&amp;</operator> <name><name>pp</name><operator>-&gt;</operator><name>lex</name></name> <operator>&amp;&amp;</operator> <name><name>pp</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_ncopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name>file</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_insert_dstr</name><argument_list>(<argument><expr><name>str_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_include_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>file_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_lexer</name></name></type> <name>new_lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_mid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_file</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>str_file</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_path</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>dependencies</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>dep</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dependencies</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dep</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>str_file</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>cf_lexer_get_tokens</name><argument_list>(<argument><expr><name>dep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_preprocess_tokens</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><name><name>str_file</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>file_token</name></expr></argument>, <argument><expr><literal type="string">"Could not open file '$1'"</literal></expr></argument>,
<argument><expr><name><name>file_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_fread_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_lexer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_lexer_lex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_lex</name></expr></argument>, <argument><expr><name>file_data</name></expr></argument>, <argument><expr><name><name>str_file</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>cf_lexer_get_tokens</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_preprocess_tokens</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dependencies</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_sys_include</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ref</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ref</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator>
<name><name>ref</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_loc_include</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ref</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ref</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator>
<name><name>ref</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_include</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_sys_include</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_loc_include</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_include_file</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"Invalid or incomplete string"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_preprocess_macro_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>macro</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_def_addparam</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_OTHER</name> <operator>||</operator>
<operator>(</operator><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">')'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"',' or ')'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition>;</do>


<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_INDEX</name></cpp:macro> <cpp:value>((size_t)-1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>cf_preprocess_get_def_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>def_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>defines</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>cur_def</name> <init>= <expr><name>array</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_def</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>def_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>INVALID_INDEX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type>
<name>cf_preprocess_get_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>def_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>cf_preprocess_get_def_idx</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>def_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>INVALID_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>space_filler</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>append_space</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strref_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>space_filler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CFTOKEN_SPACETAB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>token</name><operator>.</operator><name>lex</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>lex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strref_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>.</operator><name>unmerged_str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>unmerged_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>token</name><operator>.</operator><name>lex</name></name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>lex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strref_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>.</operator><name>unmerged_str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>append_end_token</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_define</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name></type> <name>def</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_def_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>append_space</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>def</name><operator>.</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_token_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>def</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>complete</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_preprocess_macro_params</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>def</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NEWLINE</name> <operator>&amp;&amp;</operator>
<name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_def_addtoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>, <argument><expr><name>cur_token</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<label><name>complete</name>:</label>
<expr_stmt><expr><call><name>append_end_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>def</name><operator>.</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_space</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>def</name><operator>.</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>cf_def_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_preprocess_remove_def_strref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>def_idx</name> <init>= <expr><call><name>cf_preprocess_get_def_idx</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>def_idx</name> <operator>!=</operator> <name>INVALID_INDEX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cf_def_free</name><argument_list>(<argument><expr><name>array</name> <operator>+</operator> <name>def_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name></name></expr></argument>, <argument><expr><name>def_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_undef</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_preprocess_remove_def_strref</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>cf_preprocess_subblock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ignore</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>next_token</name><argument_list>(<argument><expr><name>p_cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name> <operator>=</operator> <name>ignore</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_preprocess_tokens</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_tokens</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>p_cur_token</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NONE</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_adderror_unexpected_endif_eof</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>*</operator><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>!</operator><name>eof</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_ifdef</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ifnot</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>def</name> <operator>=</operator> <call><name>cf_preprocess_get_def</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_true</name> <operator>=</operator> <operator>(</operator><name>def</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <name>ifnot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_preprocess_subblock</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>!</operator><name>is_true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_preprocess_subblock</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>is_true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cf_preprocessor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_block</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_include</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"define"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_define</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"undef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_undef</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"ifdef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_ifdef</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"ifndef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_ifdef</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>if_block</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_init_copy_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>,
<argument><expr><literal type="string">"#$1 outside of "</literal>
<literal type="string">"#if/#ifdef/#ifndef block"</literal></expr></argument>,
<argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_cur_token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NEWLINE</name> <operator>&amp;&amp;</operator>
<name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_cur_token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_addtoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, 
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_save_macro_param</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>cur_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>brace_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>append_space</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>brace_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>brace_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>brace_count</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>brace_count</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_preprocess_addtoken</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name>cur_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_adderror_unexpected_eof</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>append_space</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_end_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>param_is_whitespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>CFTOKEN_NONE</name> <operator>&amp;&amp;</operator>
<name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>CFTOKEN_SPACETAB</name> <operator>&amp;&amp;</operator>
<name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>CFTOKEN_NEWLINE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_save_macro_params</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>cur_params</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_OTHER</name> <operator>||</operator> <operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"'('"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_param</name></name></type> <name>param</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>macro_param_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_preprocess_save_macro_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name>cur_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_OTHER</name> <operator>||</operator>
<operator>(</operator><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">')'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>macro_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>, <argument><expr><literal type="string">"',' or ')'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>param_is_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>def</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>macro_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <name><name>def</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_token_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>cf_def_getparam</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>macro_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name><name>def</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>,
<argument><expr><literal type="string">"Mismatching number of macro parameters"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_preprocess_unwrap_param</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, 
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_param_token</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>cur_param_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_preprocess_addtoken</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_param_token</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cf_preprocess_unwrap_define</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, 
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>cur_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_params</name></name></type> <name>new_params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_def_token</name> <init>= <expr><name><name>def</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>macro_params_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>macro</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_preprocess_save_macro_params</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name>cur_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>cur_def_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_preprocess_addtoken</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_def_token</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>macro_params_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_addtoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, 
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>macro_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ignore</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>get_macro_param</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>param</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_unwrap_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>def</name> <operator>=</operator> <call><name>cf_preprocess_get_def</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>def</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_preprocess_unwrap_define</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name>def</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ignore</name>:</label>
<expr_stmt><expr><name>cur_token</name><operator>++</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cf_preprocess_tokens</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_block</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cur_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>newline</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>preprocessor_line</name> <init>= <expr><name>if_block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>cur_token</name> <init>= <expr><operator>*</operator><name>p_cur_token</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_SPACETAB</name> <operator>&amp;&amp;</operator>
<name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NEWLINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>preprocessor_line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expected_newline</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>cur_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>go_to_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newline</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>preprocessor_line</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_preprocessor</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>if_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NEWLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>preprocessor_line</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_preprocess_addtoken</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p_cur_token</name> <operator>=</operator> <name>cur_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cf_preprocessor_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sys_include_dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dependencies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>lex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cf_preprocessor_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dependencies</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sys_include_dirs</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>sys_include_dirs</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>defs</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>defines</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_def_free</name><argument_list>(<argument><expr><name>defs</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>sys_include_dirs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>sys_include_dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>dependencies</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_lexer_free</name><argument_list>(<argument><expr><name>dependencies</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sys_include_dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dependencies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>lex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ignore_state</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cf_preprocess</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>cf_lexer_get_tokens</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ed</name></name> <operator>=</operator> <name>ed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>lex</name></name> <operator>=</operator> <name>lex</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_preprocess_tokens</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name><name>lex</name><operator>-&gt;</operator><name>unexpected_eof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cf_preprocessor_add_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><call><name>cf_preprocess_get_def</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>def</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_init_copy_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>def</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_addwarning</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Token $1 already defined"</literal></expr></argument>,
<argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_addwarning</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>existing</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><literal type="string">"Previous definition of $1 is here"</literal></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_def_free</name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>existing</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_def</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>defines</name></name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cf_preprocessor_remove_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_preprocessor</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>ref</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ref</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>def_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>def_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_preprocess_remove_def_strref</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
