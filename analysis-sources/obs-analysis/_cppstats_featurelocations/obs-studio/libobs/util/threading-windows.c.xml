<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\threading-windows.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;excpt.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRYLEVEL_NONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SEH_MINGW</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__try</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__try</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__except</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__except</name></cpp:macro> <cpp:value>(x) if (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>os_event_init</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>os_event_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>OS_EVENT_TYPE_MANUAL</name><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>event</name> <operator>=</operator> <operator>(</operator><name>os_event_t</name> <operator>*</operator><operator>)</operator><name>handle</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_event_destroy</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_event_wait</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>event</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_event_timedwait</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>event</name></expr></argument>, <argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ETIMEDOUT</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_event_try</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EAGAIN</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_event_signal</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEvent</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_event_reset</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_sem_init</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG</name><operator>)</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sem</name> <operator>=</operator> <operator>(</operator><name>os_sem_t</name> <operator>*</operator><operator>)</operator><name>handle</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_sem_destroy</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_sem_post</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_sem_wait</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sem</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC_EXCEPTION</name></cpp:macro> <cpp:value>0x406D1388</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>8</name><name>)</name></cpp:pragma>
<struct>struct <name>vs_threadname_info</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>thread_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADNAME_INFO_SIZE</name></cpp:macro> <cpp:value>(sizeof(struct vs_threadname_info) / sizeof(ULONG_PTR))</cpp:value></cpp:define>


<function><type><name>void</name></type> <name>os_set_thread_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>vs_threadname_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0x1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>thread_id</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_SEH_MINGW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__try1</name><argument_list>(<argument>EXCEPTION_EXECUTE_HANDLER</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>__try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>RaiseException</name><argument_list>(<argument><expr><name>VC_EXCEPTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>THREADNAME_INFO_SIZE</name></expr></argument>,
<argument><expr><operator>(</operator><name>ULONG_PTR</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_SEH_MINGW</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>
<macro><name>__except1</name></macro><block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
</block_content>}</block> <macro><name>__except</name> <argument_list>(<argument>EXCEPTION_EXECUTE_HANDLER</argument>)</argument_list></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></block_content></block></function>
</unit>
