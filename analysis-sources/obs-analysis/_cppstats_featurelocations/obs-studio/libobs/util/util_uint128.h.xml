<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\util_uint128.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<struct>struct <name>util_uint128</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>i32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>high</name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>util_uint128</name></name></type> <name>util_uint128_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>util_uint128_t</name></type> <name>util_add128</name><parameter_list>(<parameter><decl><type><name>util_uint128_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>util_uint128_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>low</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>low</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>high</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>high</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>util_uint128_t</name></type> <name>util_lshift64_internal_32</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>util_uint128_t</name></type> <name>util_lshift64_internal_64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>util_uint128_t</name></type> <name>util_mul64_64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>util_add128</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>util_lshift64_internal_32</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>util_add128</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>util_lshift64_internal_32</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>util_add128</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>util_lshift64_internal_64</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>util_uint128_t</name></type> <name>util_div128_32</name><parameter_list>(<parameter><decl><type><name>util_uint128_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
