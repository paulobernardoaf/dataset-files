<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\cf-parser.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cf-parser.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>cf_adderror</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lexer_getstroffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>base_lexer</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>unmerged_str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>val2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>val3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_data_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>error_list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>col</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>formatted</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_safe_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error_data_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>error_list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>lex</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>formatted</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cf_pass_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_OTHER</name> <operator>||</operator>
<operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>!=</operator> <name>in</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name></name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <name>in</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_pass_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_token</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
