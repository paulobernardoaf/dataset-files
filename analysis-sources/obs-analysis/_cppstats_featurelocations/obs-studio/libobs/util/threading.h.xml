<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\threading.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c99defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../deps/w32-pthreads/pthread.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading-windows.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading-posix.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>pthread_mutex_init_value</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>init_val</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mutex</name> <operator>=</operator> <name>init_val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<enum>enum <name>os_event_type</name> <block>{
<decl><name>OS_EVENT_TYPE_AUTO</name></decl>,
<decl><name>OS_EVENT_TYPE_MANUAL</name></decl>,
}</block>;</enum>

<struct_decl>struct <name>os_event_data</name>;</struct_decl>
<struct_decl>struct <name>os_sem_data</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>os_event_data</name></name></type> <name>os_event_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>os_sem_data</name></name></type> <name>os_sem_t</name>;</typedef>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_event_init</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>os_event_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>os_event_destroy</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_event_wait</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_event_timedwait</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_event_try</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_event_signal</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>os_event_reset</name><parameter_list>(<parameter><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_sem_init</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>os_sem_destroy</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_sem_post</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>os_sem_wait</name><parameter_list>(<parameter><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>os_set_thread_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL</name></cpp:macro> <cpp:value>__declspec(thread)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL</name></cpp:macro> <cpp:value>__thread</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
