<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\platform-nix-dbus.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmem.h"</cpp:file></cpp:include>




<enum>enum <name>service_type</name> <block>{
<decl><name>FREEDESKTOP_SS</name></decl>, 
<decl><name>FREEDESKTOP_PM</name></decl>, 
<decl><name>MATE_SM</name></decl>, 
<decl><name>GNOME_SM</name></decl>, 
}</block>;</enum>

<struct>struct <name>service_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uninhibit</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>service_info</name></name></type> <name><name>services</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>FREEDESKTOP_SS</name></expr>]</index> <operator>=</operator>
<block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"org.freedesktop.ScreenSaver"</literal></expr>,
<expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"/ScreenSaver"</literal></expr>,
<expr><operator>.</operator><name>uninhibit</name> <operator>=</operator> <literal type="string">"UnInhibit"</literal></expr>,
}</block></expr>,
<expr><index>[<expr><name>FREEDESKTOP_PM</name></expr>]</index> <operator>=</operator>
<block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"org.freedesktop.PowerManagement.Inhibit"</literal></expr>,
<expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"/org/freedesktop/PowerManagement"</literal></expr>,
<expr><operator>.</operator><name>uninhibit</name> <operator>=</operator> <literal type="string">"UnInhibit"</literal></expr>,
}</block></expr>,
<expr><index>[<expr><name>MATE_SM</name></expr>]</index> <operator>=</operator>
<block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"org.mate.SessionManager"</literal></expr>,
<expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"/org/mate/SessionManager"</literal></expr>,
<expr><operator>.</operator><name>uninhibit</name> <operator>=</operator> <literal type="string">"Uninhibit"</literal></expr>,
}</block></expr>,
<expr><index>[<expr><name>GNOME_SM</name></expr>]</index> <operator>=</operator>
<block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"org.gnome.SessionManager"</literal></expr>,
<expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"/org/gnome/SessionManager"</literal></expr>,
<expr><operator>.</operator><name>uninhibit</name> <operator>=</operator> <literal type="string">"Uninhibit"</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>num_services</name> <init>=
<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>services</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>service_info</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<struct>struct <name>dbus_sleep_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>service_info</name></name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusPendingCall</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>service_type</name></name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>dbus_sleep_info_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dbus_sleep_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbus_pending_call_cancel</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_pending_call_unref</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_connection_close</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_connection_unref</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dbus_sleep_info</name></name> <modifier>*</modifier></type><name>dbus_sleep_info_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbus_sleep_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>dbus_bus_get_private</name><argument_list>(<argument><expr><name>DBUS_BUS_SESSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create dbus connection: %s"</literal></expr></argument>,
<argument><expr><name><name>err</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_services</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>service_info</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><operator>&amp;</operator><name><name>services</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dbus_bus_name_has_owner</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Found dbus service: %s"</literal></expr></argument>,
<argument><expr><name><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator>enum <name>service_type</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dbus_sleep_info_destroy</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dbus_inhibit_sleep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dbus_sleep_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dbus_pending_call_block</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_pending_call_steal_reply</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_pending_call_unref</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>dbus_message_get_args</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <operator>!</operator><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <ternary><condition><expr><name>active</name></expr> ?</condition><then> <expr><literal type="string">"Inhibit"</literal></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>uninhibit</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_message_new_method_call</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dbus_message_new_method_call failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><literal type="string">"libobs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0xC</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>xid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MATE_SM</name></expr>:</case>
<case>case <expr><name>GNOME_SM</name></expr>:</case>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>dbus_message_append_args</name><argument_list>(
<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>program</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xid</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>, <argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>dbus_message_append_args</name><argument_list>(
<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>program</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>dbus_connection_send_with_reply</name><argument_list>(
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>dbus_message_append_args</name><argument_list>(
<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>dbus_connection_send</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dbus_connection_flush</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
