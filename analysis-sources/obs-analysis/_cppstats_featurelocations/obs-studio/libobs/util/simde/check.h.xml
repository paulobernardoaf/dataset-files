<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\simde\check.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_CHECK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_CHECK_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_NDEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SIZE_MODIFIER</name></cpp:macro> <cpp:value>"z"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_CHAR_MODIFIER</name></cpp:macro> <cpp:value>"hh"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SHORT_MODIFIER</name></cpp:macro> <cpp:value>"h"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SIZE_MODIFIER</name></cpp:macro> <cpp:value>"I64"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SIZE_MODIFIER</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_CHAR_MODIFIER</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SHORT_MODIFIER</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__PUSH_DISABLE_MSVC_C4127</name></cpp:macro> <cpp:value>__pragma(warning(push)) __pragma(warning(disable : 4127))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__POP_DISABLE_MSVC_C4127</name></cpp:macro> <cpp:value>__pragma(warning(pop))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__PUSH_DISABLE_MSVC_C4127</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__POP_DISABLE_MSVC_C4127</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>simde_errorf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_errorf</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fprintf(stderr, format, __VA_ARGS__), abort())</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_error</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_errorf("%s", msg)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_CHECK_FAIL_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ASSUME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_ASSUME(expr)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(!!(expr) ? 1 : (__builtin_unreachable(), 1)))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__assume(expr)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_true</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert(expr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_false</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert(!(expr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_type_full</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert(((a)op(b)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_double_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>precision</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_string_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_string_not_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_memory_equal</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_memory_not_equal</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!HEDLEY_LIKELY(expr)) { simde_error("assertion failed: " #expr "\n"); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_true</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!HEDLEY_LIKELY(expr)) { simde_error("assertion failed: " #expr " is not true\n"); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_false</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!HEDLEY_LIKELY(!(expr))) { simde_error("assertion failed: " #expr " is not false\n"); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_type_full</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { T simde_tmp_a_ = (a); T simde_tmp_b_ = (b); if (!(simde_tmp_a_ op simde_tmp_b_)) { simde_errorf("assertion failed: %s %s %s (" prefix "%" fmt suffix " %s " prefix "%" fmt suffix ")\n", #a, #op, #b, simde_tmp_a_, #op, simde_tmp_b_); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_double_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>precision</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const double simde_tmp_a_ = (a); const double simde_tmp_b_ = (b); const double simde_tmp_diff_ = ((simde_tmp_a_ - simde_tmp_b_) &lt; 0) ? -(simde_tmp_a_ - simde_tmp_b_) : (simde_tmp_a_ - simde_tmp_b_); if (HEDLEY_UNLIKELY(simde_tmp_diff_ &gt; 1e-##precision)) { simde_errorf( "assertion failed: %s == %s (%0." #precision "g == %0." #precision "g)\n", #a, #b, simde_tmp_a_, simde_tmp_b_); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_string_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const char *simde_tmp_a_ = a; const char *simde_tmp_b_ = b; if (HEDLEY_UNLIKELY(strcmp(simde_tmp_a_, simde_tmp_b_) != 0)) { simde_errorf( "assertion failed: string %s == %s (\"%s\" == \"%s\")\n", #a, #b, simde_tmp_a_, simde_tmp_b_); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_string_not_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const char *simde_tmp_a_ = a; const char *simde_tmp_b_ = b; if (HEDLEY_UNLIKELY(strcmp(simde_tmp_a_, simde_tmp_b_) == 0)) { simde_errorf( "assertion failed: string %s != %s (\"%s\" == \"%s\")\n", #a, #b, simde_tmp_a_, simde_tmp_b_); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_memory_equal</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const unsigned char *simde_tmp_a_ = (const unsigned char *)(a); const unsigned char *simde_tmp_b_ = (const unsigned char *)(b); const size_t simde_tmp_size_ = (size); if (HEDLEY_UNLIKELY(memcmp(simde_tmp_a_, simde_tmp_b_, simde_tmp_size_)) != 0) { size_t simde_tmp_pos_; for (simde_tmp_pos_ = 0; simde_tmp_pos_ &lt; simde_tmp_size_; simde_tmp_pos_++) { if (simde_tmp_a_[simde_tmp_pos_] != simde_tmp_b_[simde_tmp_pos_]) { simde_errorf( "assertion failed: memory %s == %s, at offset %" SIMDE_SIZE_MODIFIER "u\n", #a, #b, simde_tmp_pos_); break; } } } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_memory_not_equal</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const unsigned char *simde_tmp_a_ = (const unsigned char *)(a); const unsigned char *simde_tmp_b_ = (const unsigned char *)(b); const size_t simde_tmp_size_ = (size); if (HEDLEY_UNLIKELY(memcmp(simde_tmp_a_, simde_tmp_b_, simde_tmp_size_)) == 0) { simde_errorf( "assertion failed: memory %s != %s (%" SIMDE_SIZE_MODIFIER "u bytes)\n", #a, #b, simde_tmp_size_); } SIMDE__PUSH_DISABLE_MSVC_C4127 } while (0) SIMDE__POP_DISABLE_MSVC_C4127</cpp:value></cpp:define>















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_type</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type_full("", "", T, fmt, a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_char</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type_full("'\\x", "'", char, "02" SIMDE_CHAR_MODIFIER "x", a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_uchar</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type_full("'\\x", "'", unsigned char, "02" SIMDE_CHAR_MODIFIER "x", a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_short</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(short, SIMDE_SHORT_MODIFIER "d", a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ushort</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(unsigned short, SIMDE_SHORT_MODIFIER "u", a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_int</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(int, "d", a, op, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_uint</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(unsigned int, "u", a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_long</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(long int, "ld", a, op, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ulong</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(unsigned long int, "lu", a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_llong</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(long long int, "lld", a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ullong</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(unsigned long long int, "llu", a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_size</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(size_t, SIMDE_SIZE_MODIFIER "u", a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_float</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(float, "f", a, op, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_double</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(double, "g", a, op, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ptr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(const void *, "p", a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_int8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(int8_t, PRIi8, a, op, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_uint8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(uint8_t, PRIu8, a, op, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_int16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(int16_t, PRIi16, a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_uint16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(uint16_t, PRIu16, a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_int32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(int32_t, PRIi32, a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_uint32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(uint32_t, PRIu32, a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_int64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(int64_t, PRIi64, a, op, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_uint64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_type(uint64_t, PRIu64, a, op, b)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ptr_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_ptr(a, ==, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ptr_not_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_ptr(a, !=, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_null</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_ptr(ptr, ==, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_not_null</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_ptr(ptr, !=, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ptr_null</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_ptr(ptr, ==, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_ptr_not_null</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_ptr(ptr, !=, NULL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
