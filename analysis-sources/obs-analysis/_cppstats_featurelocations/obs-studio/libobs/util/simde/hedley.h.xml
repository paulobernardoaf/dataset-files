<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\simde\hedley.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>HEDLEY_VERSION</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_VERSION</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_STRINGIFY_EX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_STRINGIFY_EX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STRINGIFY_EX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_STRINGIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_STRINGIFY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STRINGIFY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_STRINGIFY_EX(x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CONCAT_EX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CONCAT_EX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONCAT_EX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##b</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CONCAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CONCAT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_CONCAT_EX(a, b)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_VERSION_ENCODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_VERSION_ENCODE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_VERSION_ENCODE</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>revision</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((major)*1000000) + ((minor)*1000) + (revision))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_VERSION_DECODE_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_VERSION_DECODE_MAJOR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_VERSION_DECODE_MAJOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((version) / 1000000)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_VERSION_DECODE_MINOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_VERSION_DECODE_MINOR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_VERSION_DECODE_MINOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((version) % 1000000) / 1000)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_VERSION_DECODE_REVISION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_VERSION_DECODE_REVISION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_VERSION_DECODE_REVISION</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((version) % 1000)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_GNUC_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_MSVC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_MSVC_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_FULL_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_FULL_VER</name> <operator>&gt;=</operator> <literal type="number">140000000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 10000000, (_MSC_FULL_VER % 10000000) / 100000, (_MSC_FULL_VER % 100000) / 100)</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_FULL_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 1000000, (_MSC_FULL_VER % 1000000) / 10000, (_MSC_FULL_VER % 10000) / 10)</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(_MSC_VER / 100, _MSC_VER % 100, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_MSVC_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_MSVC_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_MSC_FULL_VER &gt;= ((major * 10000000) + (minor * 100000) + (patch)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1200</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_MSC_FULL_VER &gt;= ((major * 1000000) + (minor * 10000) + (patch)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_MSC_VER &gt;= ((major * 100) + (minor)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_INTEL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_INTEL_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER_UPDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INTEL_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, __INTEL_COMPILER_UPDATE)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INTEL_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_INTEL_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_INTEL_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_INTEL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INTEL_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_INTEL_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INTEL_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PGI_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PGIC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PGIC_MINOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PGIC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PGI_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PGI_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PGI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_PGI_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PGI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_SUNPRO_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_SUNPRO_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__SUNPRO_C</name> <operator>&gt;</operator> <literal type="number">0x1000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SUNPRO_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE((((__SUNPRO_C &gt;&gt; 16) &amp; 0xf) * 10) + ((__SUNPRO_C &gt;&gt; 12) &amp; 0xf), (((__SUNPRO_C &gt;&gt; 8) &amp; 0xf) * 10) + ((__SUNPRO_C &gt;&gt; 4) &amp; 0xf), (__SUNPRO_C &amp; 0xf) * 10)</cpp:value></cpp:define>





<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SUNPRO_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE((__SUNPRO_C &gt;&gt; 8) &amp; 0xf, (__SUNPRO_C &gt;&gt; 4) &amp; 0xf, (__SUNPRO_C)&amp;0xf)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__SUNPRO_CC</name> <operator>&gt;</operator> <literal type="number">0x1000</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SUNPRO_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE((((__SUNPRO_CC &gt;&gt; 16) &amp; 0xf) * 10) + ((__SUNPRO_CC &gt;&gt; 12) &amp; 0xf), (((__SUNPRO_CC &gt;&gt; 8) &amp; 0xf) * 10) + ((__SUNPRO_CC &gt;&gt; 4) &amp; 0xf), (__SUNPRO_CC &amp; 0xf) * 10)</cpp:value></cpp:define>





<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SUNPRO_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE((__SUNPRO_CC &gt;&gt; 8) &amp; 0xf, (__SUNPRO_CC &gt;&gt; 4) &amp; 0xf, (__SUNPRO_CC)&amp;0xf)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_SUNPRO_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_SUNPRO_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_SUNPRO_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SUNPRO_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_SUNPRO_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SUNPRO_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_EMSCRIPTEN_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_EMSCRIPTEN_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_EMSCRIPTEN_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__EMSCRIPTEN_major__, __EMSCRIPTEN_minor__, __EMSCRIPTEN_tiny__)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_EMSCRIPTEN_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_EMSCRIPTEN_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_EMSCRIPTEN_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_EMSCRIPTEN_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_EMSCRIPTEN_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_EMSCRIPTEN_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARM_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_ARM_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CC_ARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCOMPILER_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ARM_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__ARMCOMPILER_VERSION / 1000000, (__ARMCOMPILER_VERSION % 1000000) / 10000, (__ARMCOMPILER_VERSION % 10000) / 100)</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CC_ARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ARM_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__ARMCC_VERSION / 1000000, (__ARMCC_VERSION % 1000000) / 10000, (__ARMCC_VERSION % 10000) / 100)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARM_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_ARM_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARM_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ARM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_ARM_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ARM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IBM_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_IBM_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ibmxl__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IBM_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__ibmxl_version__, __ibmxl_release__, __ibmxl_modification__)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__xlC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__xlC_ver__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IBM_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__xlC__ &gt;&gt; 8, __xlC__ &amp; 0xff, (__xlC_ver__ &gt;&gt; 8) &amp; 0xff)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__xlC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IBM_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__xlC__ &gt;&gt; 8, __xlC__ &amp; 0xff, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IBM_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_IBM_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IBM_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IBM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_IBM_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IBM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_TI_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TI_COMPILER_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_TI_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TI_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_TI_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_TI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_TI_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_TI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CRAY_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CRAY_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_CRAYC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_RELEASE_PATCHLEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CRAY_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, _RELEASE_PATCHLEVEL)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CRAY_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CRAY_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CRAY_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CRAY_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CRAY_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_CRAY_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CRAY_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IAR_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_IAR_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__VER__</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IAR_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE((__VER__ / 1000000), ((__VER__ / 1000) % 1000), (__VER__ % 1000))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IAR_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(VER / 100, __VER__ % 100, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IAR_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_IAR_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IAR_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IAR_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_IAR_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IAR_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TINYC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_TINYC_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_TINYC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__TINYC__ / 1000, (__TINYC__ / 100) % 10, __TINYC__ % 100)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TINYC_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_TINYC_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TINYC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_TINYC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_TINYC_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_TINYC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DMC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DMC_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DMC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__DMC__ &gt;&gt; 8, (__DMC__ &gt;&gt; 4) &amp; 0xf, __DMC__ &amp; 0xf)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DMC_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DMC_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DMC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DMC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_DMC_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DMC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_COMPCERT_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_COMPCERT_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__COMPCERT_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_COMPCERT_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__COMPCERT_VERSION__ / 10000, (__COMPCERT_VERSION__ / 100) % 100, __COMPCERT_VERSION__ % 100)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_COMPCERT_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_COMPCERT_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_COMPCERT_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_COMPCERT_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_COMPCERT_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_COMPCERT_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PELLES_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PELLES_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POCC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PELLES_VERSION</name></cpp:macro> <cpp:value>HEDLEY_VERSION_ENCODE(__POCC__ / 100, __POCC__ % 100, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PELLES_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PELLES_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PELLES_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PELLES_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_PELLES_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PELLES_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_VERSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_INTEL_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARM_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TI_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__COMPCERT__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_VERSION</name></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY_GCC_VERSION &gt;= HEDLEY_VERSION_ENCODE(major, minor, patch))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_attribute(attribute)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_CPP_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_CPP_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_cpp_attribute</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_cpp_attribute(attribute)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_cpp_attribute</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_cpp_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_CPP_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_CPP_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_cpp_attribute</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_cpp_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_BUILTIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_builtin(builtin)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_BUILTIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_builtin(builtin)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_BUILTIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_builtin(builtin)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_FEATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_FEATURE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_feature(feature)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_FEATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_FEATURE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_feature(feature)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_FEATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_FEATURE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_feature(feature)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_EXTENSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_extension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_extension(extension)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_EXTENSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_extension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_extension(extension)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_EXTENSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_extension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_extension(extension)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_DECLSPEC_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_DECLSPEC_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_declspec_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_declspec_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_declspec_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_declspec_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_declspec_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_declspec_attribute(attribute)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_HAS_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_HAS_WARNING</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_warning</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_warning(warning)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GNUC_HAS_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GNUC_HAS_WARNING</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_warning</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_warning(warning)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GNUC_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_HAS_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_HAS_WARNING</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_warning</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_warning(warning)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">18</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_CRAY_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TINYC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__C99_PRAGMA_OPERATOR</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRAGMA</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Pragma(#value)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRAGMA</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__pragma(value)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRAGMA</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DIAGNOSTIC_PUSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DIAGNOSTIC_POP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DIAGNOSTIC_POP</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic push")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic pop")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>_Pragma("warning(push)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>_Pragma("warning(pop)")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>_Pragma("GCC diagnostic push")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>_Pragma("GCC diagnostic pop")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>__pragma(warning(push))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>__pragma(warning(pop))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>_Pragma("push")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>_Pragma("pop")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>_Pragma("diag_push")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>_Pragma("diag_pop")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">90</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro> <cpp:value>_Pragma("warning(push)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro> <cpp:value>_Pragma("warning(pop)")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_PUSH</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_POP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wdeprecated-declarations"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("warning(disable:1478 1786)")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("diag_suppress 1215,1444")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>__pragma(warning(disable : 4996))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("diag_suppress 1291,1718")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("error_messages(off,E_DEPRECATED_ATT,E_DEPRECATED_ATT_MESS)")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("error_messages(off,symdeprecated,symdeprecated2)")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("diag_suppress=Pe1444,Pe1215")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">90</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro> <cpp:value>_Pragma("warn(disable:2241)")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wunknown-pragmas"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic ignored \"-Wunknown-pragmas\"")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>_Pragma("warning(disable:161)")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>_Pragma("diag_suppress 1675")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>_Pragma("GCC diagnostic ignored \"-Wunknown-pragmas\"")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>__pragma(warning(disable : 4068))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>_Pragma("diag_suppress 163")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro> <cpp:value>_Pragma("diag_suppress=Pe161")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wcast-qual"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic ignored \"-Wcast-qual\"")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name></cpp:macro> <cpp:value>_Pragma("warning(disable:2203 2331)")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name></cpp:macro> <cpp:value>_Pragma("GCC diagnostic ignored \"-Wcast-qual\"")</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DEPRECATED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DEPRECATED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_DEPRECATED_FOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_DEPRECATED_FOR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201402L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[[deprecated("Since " #since)]]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[[deprecated("Since " #since "; use " #replacement)]]</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_EXTENSION</name><argument_list>(<argument><expr><name>attribute_deprecated_with_message</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__deprecated__("Since " #since)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__deprecated__("Since " #since "; use " #replacement)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__deprecated__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__deprecated__))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">14</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(deprecated("Since " #since))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(deprecated("Since " #since "; use " #replacement))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">50</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(deprecated)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(deprecated)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Pragma("deprecated")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Pragma("deprecated")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED</name><parameter_list>(<parameter><type><name>since</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_DEPRECATED_FOR</name><parameter_list>(<parameter><type><name>since</name></type></parameter>, <parameter><type><name>replacement</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNAVAILABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_UNAVAILABLE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>warning</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNAVAILABLE</name><parameter_list>(<parameter><type><name>available_since</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__warning__("Not available until " #available_since)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNAVAILABLE</name><parameter_list>(<parameter><type><name>available_since</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_WARN_UNUSED_RESULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_WARN_UNUSED_RESULT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201703L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARN_UNUSED_RESULT</name></cpp:macro> <cpp:value>[[nodiscard]]</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>warn_unused_result</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARN_UNUSED_RESULT</name></cpp:macro> <cpp:value>__attribute__((__warn_unused_result__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_Check_return_</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARN_UNUSED_RESULT</name></cpp:macro> <cpp:value>_Check_return_</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARN_UNUSED_RESULT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_SENTINEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_SENTINEL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>sentinel</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SENTINEL</name><parameter_list>(<parameter><type><name>position</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__sentinel__(position)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_SENTINEL</name><parameter_list>(<parameter><type><name>position</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_NO_RETURN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_NO_RETURN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>__noreturn</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>__attribute__((__noreturn__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>_Noreturn</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>[[noreturn]]</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>noreturn</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">18</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>__attribute__((__noreturn__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>_Pragma("does_not_return")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>__declspec(noreturn)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>_Pragma("FUNC_NEVER_RETURNS;")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_COMPCERT_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>__attribute((noreturn))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro> <cpp:value>__declspec(noreturn)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_RETURN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNREACHABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_UNREACHABLE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNREACHABLE_RETURN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_UNREACHABLE_RETURN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_unreachable</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARM_VERSION</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__builtin_unreachable()</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__assume(0)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>std::_nassert(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_nassert(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE_RETURN</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return value</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>abort()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE_RETURN</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return value</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNREACHABLE_RETURN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNREACHABLE_RETURN</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_UNREACHABLE()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ASSUME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_ASSUME</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ASSUME</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__assume(expr)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_assume</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ASSUME</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_assume(expr)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ASSUME</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::_nassert(expr)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ASSUME</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_nassert(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_unreachable</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARM_VERSION</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ASSUME</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)((expr) ? 1 : (__builtin_unreachable(), 1)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ASSUME</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(expr))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>HEDLEY_DIAGNOSTIC_PUSH</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wvariadic-macros"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wvariadic-macros"</cpp:literal></cpp:pragma>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wvariadic-macros"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_NON_NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_NON_NULL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>nonnull</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NON_NULL</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__nonnull__(__VA_ARGS__)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NON_NULL</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>HEDLEY_DIAGNOSTIC_POP</name></decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PRINTF_FORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PRINTF_FORMAT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>format</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USE_MINGW_ANSI_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRINTF_FORMAT</name><parameter_list>(<parameter><type><name>string_idx</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(ms_printf, string_idx, first_to_check)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>format</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__USE_MINGW_ANSI_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRINTF_FORMAT</name><parameter_list>(<parameter><type><name>string_idx</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(gnu_printf, string_idx, first_to_check)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRINTF_FORMAT</name><parameter_list>(<parameter><type><name>string_idx</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(__printf__, string_idx, first_to_check)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRINTF_FORMAT</name><parameter_list>(<parameter><type><name>string_idx</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(vaformat(printf, string_idx, first_to_check))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRINTF_FORMAT</name><parameter_list>(<parameter><type><name>string_idx</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CONSTEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CONSTEXPR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONSTEXPR</name></cpp:macro> <cpp:value>constexpr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CONSTEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONSTEXPR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PREDICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PREDICT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_LIKELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_LIKELY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNLIKELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_UNLIKELY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNPREDICTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_UNPREDICTABLE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_unpredictable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNPREDICTABLE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_unpredictable(!!(expr))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_expect_with_probability</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect_with_probability(expr, value, probability)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT_TRUE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect_with_probability(!!(expr), 1, probability)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT_FALSE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect_with_probability(!!(expr), 0, probability)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_LIKELY</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(expr), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNLIKELY</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(expr), 0)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_BUILTIN_UNPREDICTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_BUILTIN_UNPREDICTABLE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect_with_probability(!!(expr), 1, 0.5)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_expect</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TINYC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">27</literal></expr></argument>)</argument_list></call></expr></cpp:elif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((probability) &gt;= 0.9) ? __builtin_expect(!!(expr), (expected)) : (((void)(expected)), !!(expr)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT_TRUE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__extension__({ HEDLEY_CONSTEXPR double hedley_probability_ = (probability); ((hedley_probability_ &gt;= 0.9) ? __builtin_expect(!!(expr), 1) : ((hedley_probability_ &lt;= 0.1) ? __builtin_expect(!!(expr), 0) : !!(expr))); }))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT_FALSE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__extension__({ HEDLEY_CONSTEXPR double hedley_probability_ = (probability); ((hedley_probability_ &gt;= 0.9) ? __builtin_expect(!!(expr), 0) : ((hedley_probability_ &lt;= 0.1) ? __builtin_expect(!!(expr), 1) : !!(expr))); }))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_LIKELY</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(expr), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNLIKELY</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(expr), 0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((void)(expected)), !!(expr))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT_TRUE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(expr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PREDICT_FALSE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>probability</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(expr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_LIKELY</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(expr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNLIKELY</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(expr))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_UNPREDICTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_UNPREDICTABLE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PREDICT(expr, 1, 0.5)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_MALLOC</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MALLOC</name></cpp:macro> <cpp:value>__attribute__((__malloc__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MALLOC</name></cpp:macro> <cpp:value>_Pragma("returns_new_memory")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">14</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MALLOC</name></cpp:macro> <cpp:value>__declspec(restrict)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MALLOC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PURE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>pure</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">96</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PURE</name></cpp:macro> <cpp:value>__attribute__((__pure__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PURE</name></cpp:macro> <cpp:value>_Pragma("does_not_write_global_data")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PURE</name></cpp:macro> <cpp:value>_Pragma("FUNC_IS_PURE;")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PURE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CONST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><specifier>const</specifier></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONST</name></cpp:macro> <cpp:value>__attribute__((__const__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONST</name></cpp:macro> <cpp:value>_Pragma("no_side_effect")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONST</name></cpp:macro> <cpp:value>HEDLEY_PURE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_RESTRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_RESTRICT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RESTRICT</name></cpp:macro> <cpp:value>restrict</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">14</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">14</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RESTRICT</name></cpp:macro> <cpp:value>__restrict</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RESTRICT</name></cpp:macro> <cpp:value>_Restrict</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RESTRICT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_INLINE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">199711L</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INLINE</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INLINE</name></cpp:macro> <cpp:value>__inline__</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INLINE</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_INLINE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ALWAYS_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_ALWAYS_INLINE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>always_inline</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ALWAYS_INLINE</name></cpp:macro> <cpp:value>__attribute__((__always_inline__)) HEDLEY_INLINE</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ALWAYS_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ALWAYS_INLINE</name></cpp:macro> <cpp:value>_Pragma("FUNC_ALWAYS_INLINE;")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ALWAYS_INLINE</name></cpp:macro> <cpp:value>_Pragma("inline=forced")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ALWAYS_INLINE</name></cpp:macro> <cpp:value>HEDLEY_INLINE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_NEVER_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_NEVER_INLINE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>noinline</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>__attribute__((__noinline__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>__declspec(noinline)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>_Pragma("noinline")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>_Pragma("FUNC_CANNOT_INLINE;")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>_Pragma("inline=never")</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_COMPCERT_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>__attribute((noinline))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro> <cpp:value>__declspec(noinline)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NEVER_INLINE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PRIVATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PRIVATE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_PUBLIC</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IMPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_IMPORT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRIVATE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PUBLIC</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IMPORT</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_EABI__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRIVATE</name></cpp:macro> <cpp:value>__attribute__((__visibility__("hidden")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PUBLIC</name></cpp:macro> <cpp:value>__attribute__((__visibility__("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PRIVATE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_PUBLIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IMPORT</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_NO_THROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_NO_THROW</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>nothrow</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_THROW</name></cpp:macro> <cpp:value>__attribute__((__nothrow__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_THROW</name></cpp:macro> <cpp:value>__declspec(nothrow)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_NO_THROW</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_FALL_THROUGH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_FALL_THROUGH</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_SUNPRO_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201703L</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>HEDLEY_HAS_CPP_ATTRIBUTE</name><argument_list>(<argument><expr><name>fallthrough</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FALL_THROUGH</name></cpp:macro> <cpp:value>[[fallthrough]]</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>HEDLEY_HAS_CPP_ATTRIBUTE</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>fallthrough</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FALL_THROUGH</name></cpp:macro> <cpp:value>[[clang::fallthrough]]</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FALL_THROUGH</name></cpp:macro> <cpp:value>[[gnu::fallthrough]]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_FALL_THROUGH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_GNUC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>fallthrough</name><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FALL_THROUGH</name></cpp:macro> <cpp:value>__attribute__((__fallthrough__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__fallthrough</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FALL_THROUGH</name></cpp:macro> <cpp:value>__fallthrough</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FALL_THROUGH</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_RETURNS_NON_NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_RETURNS_NON_NULL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>returns_nonnull</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RETURNS_NON_NULL</name></cpp:macro> <cpp:value>__attribute__((__returns_nonnull__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_Ret_notnull_</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RETURNS_NON_NULL</name></cpp:macro> <cpp:value>_Ret_notnull_</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_RETURNS_NON_NULL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_ARRAY_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_ARRAY_PARAM</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_NO_VLA__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TINYC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ARRAY_PARAM</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(name)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_ARRAY_PARAM</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IS_CONSTANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_IS_CONSTANT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_REQUIRE_CONSTEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_REQUIRE_CONSTEXPR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY__IS_CONSTEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY__IS_CONSTEXPR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_constant_p</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TINYC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>HEDLEY_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_CRAY_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IS_CONSTANT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_constant_p(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_types_compatible_p</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_CRAY_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TINYC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTPTR_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY__IS_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_types_compatible_p( __typeof__((1 ? (void *)((__INTPTR_TYPE__)((expr)*0)) : (int *)0)), int *)</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY__IS_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_types_compatible_p( __typeof__((1 ? (void *)((intptr_t)((expr)*0)) : (int *)0)), int *)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_SUNPRO_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_PGI_VERSION</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_HAS_EXTENSION</name><argument_list>(<argument><expr><name>c_generic_selections</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">17</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTPTR_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY__IS_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((1 ? (void *)((__INTPTR_TYPE__)((expr)*0)) : (int *)0), int * : 1, void * : 0)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY__IS_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((1 ? (void *)((intptr_t)*0) : (int *)0), int * : 1, void * : 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_INTEL_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TINYC_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_TI_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY__IS_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(void) != sizeof(*(1 ? ((void *)((expr)*0L)) : ((struct { char v[sizeof(void) * 2]; } *)1))))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY__IS_CONSTEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IS_CONSTANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IS_CONSTANT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY__IS_CONSTEXPR(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REQUIRE_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEDLEY__IS_CONSTEXPR(expr) ? (expr) : (-1))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_IS_CONSTANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_IS_CONSTANT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REQUIRE_CONSTEXPR</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_BEGIN_C_DECLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_BEGIN_C_DECLS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_END_C_DECLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_END_C_DECLS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_C_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_C_DECL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_BEGIN_C_DECLS</name></cpp:macro> <cpp:value>extern "C" {</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_END_C_DECLS</name></cpp:macro> <cpp:value>}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_C_DECL</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_BEGIN_C_DECLS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_END_C_DECLS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_C_DECL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_STATIC_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_STATIC_ASSERT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_HAS_FEATURE</name><argument_list>(<argument><expr><name>c_static_assert</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <macro><name>defined</name><argument_list>(<argument>_Static_assert</argument>)</argument_list></macro><operator>)</operator></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Static_assert(expr, message)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_assert(expr, message)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CONST_CAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CONST_CAST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONST_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(const_cast&lt;T&gt;(expr))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wcast-qual"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONST_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__extension__({ HEDLEY_DIAGNOSTIC_PUSH HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL((T)(expr)); HEDLEY_DIAGNOSTIC_POP }))</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CONST_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T)(expr))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_REINTERPRET_CAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_REINTERPRET_CAST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REINTERPRET_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reinterpret_cast&lt;T&gt;(expr))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REINTERPRET_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((T *)&amp;(expr)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_STATIC_CAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_STATIC_CAST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STATIC_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(static_cast&lt;T&gt;(expr))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_STATIC_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T)(expr))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CPP_CAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CPP_CAST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CPP_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_cast&lt;T&gt;(expr)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CPP_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_MESSAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_MESSAGE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wunknown-pragmas"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MESSAGE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_DIAGNOSTIC_PUSH HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS HEDLEY_PRAGMA(message msg) HEDLEY_DIAGNOSTIC_POP</cpp:value></cpp:define>




<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MESSAGE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(message msg)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_CRAY_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MESSAGE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(_CRI message msg)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_IAR_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MESSAGE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(message(msg))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_PELLES_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MESSAGE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(message(msg))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_MESSAGE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_WARNING</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wunknown-pragmas"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARNING</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_DIAGNOSTIC_PUSH HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS HEDLEY_PRAGMA(clang warning msg) HEDLEY_DIAGNOSTIC_POP</cpp:value></cpp:define>




<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">18</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARNING</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(GCC warning msg)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">15</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARNING</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(message(msg))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_WARNING</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_MESSAGE(msg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_REQUIRE_MSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_REQUIRE_MSG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>diagnose_if</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_WARNING</name><argument_list>(<argument><expr><literal type="string">"-Wgcc-compat"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REQUIRE_MSG</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_DIAGNOSTIC_PUSH _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") __attribute__((__diagnose_if__(!(expr), msg, "error"))) HEDLEY_DIAGNOSTIC_POP</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REQUIRE_MSG</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__diagnose_if__(!(expr), msg, "error")))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REQUIRE_MSG</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_REQUIRE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_REQUIRE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_REQUIRE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_REQUIRE_MSG(expr, #expr)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_FLAGS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>flag_enum</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FLAGS</name></cpp:macro> <cpp:value>__attribute__((__flag_enum__))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_FLAGS_CAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_FLAGS_CAST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">19</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FLAGS_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__extension__({ HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(disable:188)")((T)(expr)); HEDLEY_DIAGNOSTIC_POP }))</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_FLAGS_CAST</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_STATIC_CAST(T, expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_EMPTY_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_EMPTY_BASES</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">19</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">23918</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">20</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_EMPTY_BASES</name></cpp:macro> <cpp:value>__declspec(empty_bases)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_EMPTY_BASES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_GCC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_ATTRIBUTE(attribute)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_CPP_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_CPP_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_CPP_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_CPP_ATTRIBUTE(attribute)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_BUILTIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_BUILTIN(builtin)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_FEATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_FEATURE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_FEATURE(feature)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_EXTENSION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_EXTENSION</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_EXTENSION(extension)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEDLEY_CLANG_HAS_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEDLEY_CLANG_HAS_WARNING</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEDLEY_CLANG_HAS_WARNING</name><parameter_list>(<parameter><type><name>warning</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_HAS_WARNING(warning)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
