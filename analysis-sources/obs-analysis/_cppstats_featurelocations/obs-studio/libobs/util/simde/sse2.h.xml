<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\simde\sse2.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SSE2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SSE2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__SSE2_H</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sse.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE_SSE2_NATIVE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_FORCE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SSE2_NATIVE</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NO_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SSE2_NATIVE</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NO_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SSE2_NEON</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_FORCE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Native SSE2 support requires native SSE support</cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Native SSE2 support requires native SSE support, disabling</cpp:warning>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE_SSE2_NATIVE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:warning>#<cpp:directive>warning</cpp:directive> SSE2 NEON support requires SSE NEON support, disabling</cpp:warning>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE_SSE_NEON</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vreinterpretq_m128i_s32</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(simde__m128i) { .neon_i32 = v }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vreinterpretq_m128i_u64</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(simde__m128i) { .neon_u64 = v }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vreinterpretq_s32_m128i</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.neon_i32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vreinterpretq_u64_m128i</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.neon_u64</cpp:value></cpp:define>

<macro><name>SIMDE__BEGIN_DECLS</name></macro>

<typedef>typedef <macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <type><union>union <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__ENABLE_GCC_VEC_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int8_t</name> <name>i8</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16</decl>)<operator>,</operator> __may_alias__</decl_stmt>)</block></union></type>);</typedef>
<decl_stmt><decl><type><name>int16_t</name> <name>i16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <name>i32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <name>i64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <name>u8</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <name>u16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <name>u32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <name>u64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>simde_int128</name> <name>i128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_uint128</name> <name>u128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>simde_float32</name> <name>f32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_float64</name> <name>f64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>i8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>i16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>i32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>i64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>u16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>u64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>simde_int128</name></type> <name><name>i128</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_uint128</name></type> <name><name>u128</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>simde_float32</name></type> <name><name>f32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_float64</name></type> <name><name>f64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128i</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int8x16_t</name></type> <name>neon_i8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x8_t</name></type> <name>neon_i16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>neon_i32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64x2_t</name></type> <name>neon_i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8x16_t</name></type> <name>neon_u8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16x8_t</name></type> <name>neon_u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>neon_u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>neon_u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>neon_f32</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float64x2_t</name></type> <name>neon_f64</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
} simde__m128i<empty_stmt>;</empty_stmt>

<typedef>typedef <macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <type><union>union <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__ENABLE_GCC_VEC_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int8_t</name> <name>i8</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16</decl>)<operator>,</operator> __may_alias__</decl_stmt>)</block></union></type>);</typedef>
<decl_stmt><decl><type><name>int16_t</name> <name>i16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <name>i32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <name>i64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <name>u8</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <name>u16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <name>u32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <name>u64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_float32</name> <name>f32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_float64</name> <name>f64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>i8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>i16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>i32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>i64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>u16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>u64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_float32</name></type> <name><name>f32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_float64</name></type> <name><name>f64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128d</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int8x16_t</name></type> <name>neon_i8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x8_t</name></type> <name>neon_i16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>neon_i32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64x2_t</name></type> <name>neon_i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8x16_t</name></type> <name>neon_u8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16x8_t</name></type> <name>neon_u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>neon_u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>neon_u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>neon_f32</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float64x2_t</name></type> <name>neon_f64</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
} simde__m128d<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__m128i</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m128i</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"__m128i size doesn't match simde__m128i size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__m128d</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m128d</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"__m128d size doesn't match simde__m128d size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name> <name>simde__m128i</name></type> <name>SIMDE__M128I_C</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name> <name>simde__m128d</name></type> <name>SIMDE__M128D_C</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__M128I_NEON_C</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(simde__m128i) { .neon_##T = expr }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__M128D_NEON_C</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(simde__m128d) { .neon_##T = expr }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m128i</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"simde__m128i size incorrect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m128d</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"simde__m128d size incorrect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_add_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_add_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vaddq_s8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_add_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_add_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vaddq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_add_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><call><name>vaddq_s64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i64</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_add_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_add_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>f64</name></expr></argument>, <argument><expr><call><name>vaddq_f64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f64</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_add_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_add_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_add_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_add_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M64_NEON_C</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><call><name>vadd_s64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i64</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_adds_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_adds_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vqaddq_s8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>INT8_MAX</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>INT8_MIN</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_adds_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_adds_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vqaddq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>INT16_MAX</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>INT16_MIN</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_adds_epu8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_adds_epu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>u8</name></expr></argument>, <argument><expr><call><name>vqaddq_u8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_u8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>UINT8_MAX</name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>
</then><else>: <expr><name>UINT8_MAX</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_adds_epu16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_adds_epu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><call><name>vqaddq_u16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_u16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_u16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>UINT16_MAX</name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>
</then><else>: <expr><name>UINT16_MAX</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_and_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_and_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128D_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vandq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_and_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vandq_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_andnot_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_andnot_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128D_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vbicq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_andnot_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_andnot_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vbicq_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_avg_epu8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_avg_epu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>u8</name></expr></argument>, <argument><expr><call><name>vrhaddq_u8</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_u8</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_avg_epu16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_avg_epu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><call><name>vrhaddq_u16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_u16</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_u16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_bslli_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name>imm8</name> <operator>&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><name>imm8</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u128</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u128</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_bslli_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_slli_si128(a.n, imm8))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_bslli_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( i8, (((imm8) &lt;= 0) ? ((a).neon_i8) : (((imm8) &gt; 15) ? (vdupq_n_s8(0)) : (vextq_s8(vdupq_n_s8(0), (a).neon_i8, 16 - (imm8))))))</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_slli_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_bslli_si128(a, imm8)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_bsrli_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name>imm8</name> <operator>&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><name>imm8</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u128</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u128</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_bsrli_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_srli_si128(a.n, imm8))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_bsrli_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( i8, ((imm8) &lt;= 0) ? ((a).neon_i8) : (((imm8) &gt; 15) ? (vdupq_n_s8(0)) : (vextq_s8((a).neon_i8, vdupq_n_s8(0), (imm8)))))</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_bsrli_si128(a, imm8)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_clflush</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_clflush</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comieq_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comieq_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comige_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comige_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comigt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comigt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comile_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comile_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comilt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comilt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comineq_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comineq_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_castpd_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128_C</name><argument_list>(<argument><expr><call><name>_mm_castpd_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<union>union <block>{
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>ps</name></decl>;</decl_stmt>
}</block> <decl><name>r</name></decl>;</union>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>pd</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>ps</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_castpd_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_castpd_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<union>union <block>{
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>si128</name></decl>;</decl_stmt>
}</block> <decl><name>r</name></decl>;</union>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>pd</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>si128</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_castps_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_castps_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<union>union <block>{
<decl_stmt><decl><type><name>simde__m128</name></type> <name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>pd</name></decl>;</decl_stmt>
}</block> <decl><name>r</name></decl>;</union>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>pd</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_castps_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_castps_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<union>union <block>{
<decl_stmt><decl><type><name>simde__m128</name></type> <name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>si128</name></decl>;</decl_stmt>
}</block> <decl><name>r</name></decl>;</union>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>si128</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_castsi128_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_castsi128_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<union>union <block>{
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>si128</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>pd</name></decl>;</decl_stmt>
}</block> <decl><name>r</name></decl>;</union>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>si128</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>pd</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_castsi128_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128_C</name><argument_list>(<argument><expr><call><name>_mm_castsi128_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128_NEON_C</name><argument_list>(<argument><expr><name>f32</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<union>union <block>{
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>si128</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>ps</name></decl>;</decl_stmt>
}</block> <decl><name>r</name></decl>;</union>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>si128</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>ps</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmpeq_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s8_u8</name><argument_list>(<argument><expr><call><name>vceqq_s8</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmpeq_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s16_u16</name><argument_list>(<argument><expr><call><name>vceqq_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmpeq_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vceqq_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0x00000000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpeq_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128D_NEON_C</name><argument_list>(
<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(
<argument><expr><call><name>vceqq_s32</name><argument_list>(<argument><expr><call><name>vreinterpretq_s32_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vreinterpretq_s32_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpeq_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpneq_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpneq_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128D_NEON_C</name><argument_list>(<argument><expr><name>f32</name></expr></argument>,
<argument><expr><call><name>vreinterpretq_f32_u16</name><argument_list>(<argument><expr><call><name>vmvnq_u16</name><argument_list>(
<argument><expr><call><name>vceqq_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpneq_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpneq_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmplt_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmplt_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s8_u8</name><argument_list>(<argument><expr><call><name>vcltq_s8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmplt_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmplt_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s16_u16</name><argument_list>(<argument><expr><call><name>vcltq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmplt_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmplt_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vcltq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0x00000000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmplt_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmplt_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmplt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmplt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmple_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmple_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmple_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmple_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmpgt_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s8_u8</name><argument_list>(<argument><expr><call><name>vcgtq_s8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmpgt_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s16_u16</name><argument_list>(<argument><expr><call><name>vcgtq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cmpgt_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(
<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vcgtq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0x00000000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpgt_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpgt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpge_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpge_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpge_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpge_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpnge_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpnge_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>simde_mm_cmplt_pd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpnge_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpnge_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>simde_mm_cmplt_sd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpnlt_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpnlt_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>simde_mm_cmpge_pd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpnlt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpnlt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>simde_mm_cmpge_sd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpnle_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpnle_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>simde_mm_cmpgt_pd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpnle_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpnle_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>simde_mm_cmpgt_sd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpord_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpord_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpord_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpord_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpunord_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpunord_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cmpunord_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cmpunord_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cvtepi32_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float64</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtepi32_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128_C</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128_NEON_C</name><argument_list>(<argument><expr><name>f32</name></expr></argument>, <argument><expr><call><name>vcvtq_f32_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cvtpd_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cvtpd_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvtpd_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cvtpd_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpd_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128_C</name><argument_list>(<argument><expr><call><name>_mm_cvtpd_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cvtpi32_pd</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cvtpi32_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float64</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cvtps_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_cvtps_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vcvtnq_s32_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>signmask</name> <init>= <expr><call><name>vdupq_n_u32</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>half</name> <init>= <expr><call><name>vbslq_f32</name><argument_list>(<argument><expr><name>signmask</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>,
<argument><expr><call><name>vdupq_n_f32</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>r_normal</name> <init>= <expr><call><name>vcvtq_s32_f32</name><argument_list>(
<argument><expr><call><name>vaddq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>half</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>r_trunc</name> <init>=
<expr><call><name>vcvtq_s32_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>plusone</name> <init>= <expr><call><name>vshrq_n_s32</name><argument_list>(<argument><expr><call><name>vnegq_s32</name><argument_list>(<argument><expr><name>r_trunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>r_even</name> <init>= <expr><call><name>vbicq_s32</name><argument_list>(<argument><expr><call><name>vaddq_s32</name><argument_list>(<argument><expr><name>r_trunc</name></expr></argument>, <argument><expr><name>plusone</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vdupq_n_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>delta</name> <init>= <expr><call><name>vsubq_f32</name><argument_list>(
<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>,
<argument><expr><call><name>vcvtq_f32_s32</name><argument_list>(<argument><expr><name>r_trunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>is_delta_half</name> <init>=
<expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>half</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>,
<argument><expr><call><name>vbslq_s32</name><argument_list>(<argument><expr><name>is_delta_half</name></expr></argument>, <argument><expr><name>r_even</name></expr></argument>, <argument><expr><name>r_normal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cvtps_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cvtps_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>double</name></type> <name>simde_mm_cvtsd_f64</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtsd_f64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvtsd_si32</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtsd_si32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvtsd_si64</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtsd_si64x</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>_mm_cvtsd_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_cvtsd_si64x</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtsd_si64(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtsd_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128_C</name><argument_list>(<argument><expr><call><name>_mm_cvtsd_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvtsi128_si32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtsi128_si32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>vgetq_lane_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int64_t</name></type> <name>simde_mm_cvtsi128_si64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtsi128_si64x</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>_mm_cvtsi128_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_cvtsi128_si64x</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtsi128_si64(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cvtsi32_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_cvtsi32_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float64</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cvtsi32_si128</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi32_si128</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vsetq_lane_s32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>vdupq_n_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cvtsi64_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi64_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi64x_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float64</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_cvtsi64x_sd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtsi64(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cvtsi64_si128</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi64_si128</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi64x_si128</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_cvtsi64x_si128</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtsi64_si128(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_cvtss_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtss_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cvttpd_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvttpd_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>trunc</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvttpd_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvttpd_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>trunc</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_cvttps_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvttps_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vcvtq_s32_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>truncf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvttsd_si32</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvttsd_si32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>trunc</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int64_t</name></type> <name>simde_mm_cvttsd_si64</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvttsd_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>_mm_cvttsd_si64x</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>trunc</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_cvttsd_si64x</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvttsd_si64(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_div_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_div_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_div_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_div_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_extract_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>imm8</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__REALLY_GCC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_extract_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_extract_epi16(a.n, imm8)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_extract_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vgetq_lane_s16((a).neon_i16, (imm8)) &amp; ((int32_t)UINT32_C(0x0000ffff)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_insert_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>imm8</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_insert_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_insert_epi16((a).n, (i), (imm8)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_insert_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C(i16, vsetq_lane_s16((i), a.neon_i16, (imm8)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type>
<name>simde_mm_load_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <specifier>const</specifier></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vld1q_u32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_load_pd1</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_pd1</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>mem_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>mem_addr</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_load1_pd</name><parameter_list>(<parameter><type><name>mem_addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_load_pd1(mem_addr)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_load_sd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_sd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simde_float64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_load_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vld1q_s32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_loadh_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde_float64</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadh_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde_float64</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_loadl_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadl_epi64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vcombine_s32</name><argument_list>(<argument><expr><call><name>vld1_s32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vcreate_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_loadl_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde_float64</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadl_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simde_float64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type>
<name>simde_mm_loadr_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <specifier>const</specifier></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadr_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type>
<name>simde_mm_loadu_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <specifier>const</specifier></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadu_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde_float64</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_loadu_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>mem_addr</name><operator>)</operator><operator>.</operator><name>n</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vld1q_s32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_madd_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_madd_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>pl</name> <init>=
<expr><call><name>vmull_s16</name><argument_list>(<argument><expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>ph</name> <init>=
<expr><call><name>vmull_s16</name><argument_list>(<argument><expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x2_t</name></type> <name>rl</name> <init>= <expr><call><name>vpadd_s32</name><argument_list>(<argument><expr><call><name>vget_low_s32</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vget_high_s32</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x2_t</name></type> <name>rh</name> <init>= <expr><call><name>vpadd_s32</name><argument_list>(<argument><expr><call><name>vget_low_s32</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vget_high_s32</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vcombine_s32</name><argument_list>(<argument><expr><name>rl</name></expr></argument>, <argument><expr><name>rh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_maskmoveu_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_maskmoveu_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>mask</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mask</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_movemask_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_movemask_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint8x16_t</name></type> <name>input</name> <init>= <expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>xr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>mask_and</name> <init>= <expr><call><name>vdup_n_u8</name><argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8x8_t</name></type> <name>mask_shift</name> <init>= <expr><call><name>vld1_s8</name><argument_list>(<argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>lo</name> <init>= <expr><call><name>vget_low_u8</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>hi</name> <init>= <expr><call><name>vget_high_u8</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>vand_u8</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>mask_and</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>vshl_u8</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>mask_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>vand_u8</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>mask_and</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>vshl_u8</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>mask_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>vpadd_u8</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>vpadd_u8</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>vpadd_u8</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>vpadd_u8</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>vpadd_u8</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>vpadd_u8</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>hi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>lo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE_REDUCTION</name><argument_list>(<argument>| : r</argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_movemask_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_movemask_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_movepi64_pi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_movepi64_pi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_movpi64_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_movpi64_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_min_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator> <call><name>vminq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_min_epu8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_epu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u8</name></name> <operator>=</operator> <call><name>vminq_u8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_u8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_min_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_min_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_max_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator> <call><name>vmaxq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_max_epu8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_epu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u8</name></name> <operator>=</operator> <call><name>vmaxq_u8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_u8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_max_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_max_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_move_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_move_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i64</name></name> <operator>=</operator> <call><name>vsetq_lane_s64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i64</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_move_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_move_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_mul_epu32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mul_epu32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_mul_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_mod_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_mul_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mul_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_mul_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mul_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_mul_su32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mul_su32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_mulhi_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mulhi_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>a3210</name> <init>= <expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>b3210</name> <init>= <expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>ab3210</name> <init>= <expr><call><name>vmull_s16</name><argument_list>(<argument><expr><name>a3210</name></expr></argument>, <argument><expr><name>b3210</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>a7654</name> <init>= <expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>b7654</name> <init>= <expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>ab7654</name> <init>= <expr><call><name>vmull_s16</name><argument_list>(<argument><expr><name>a7654</name></expr></argument>, <argument><expr><name>b7654</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16x8x2_t</name></type> <name>rv</name> <init>= <expr><call><name>vuzpq_u16</name><argument_list>(<argument><expr><call><name>vreinterpretq_u16_s32</name><argument_list>(<argument><expr><name>ab3210</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vreinterpretq_u16_s32</name><argument_list>(<argument><expr><name>ab7654</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u16</name></name> <operator>=</operator> <name><name>rv</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>
<literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_mulhi_epu16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mulhi_epu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_mullo_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mullo_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator> <call><name>vmulq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator>
<literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_or_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_or_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_or_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vorrq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_packs_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_packs_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i8</name></name> <operator>=</operator> <call><name>vcombine_s8</name><argument_list>(<argument><expr><call><name>vqmovn_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vqmovn_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT8_MAX</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT8_MAX</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT8_MIN</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT8_MIN</name></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT8_MAX</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT8_MAX</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT8_MIN</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT8_MIN</name></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_packs_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_packs_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator>
<call><name>vcombine_s16</name><argument_list>(<argument><expr><call><name>vqmovn_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vqmovn_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT16_MAX</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT16_MAX</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT16_MIN</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT16_MIN</name></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT16_MAX</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT16_MAX</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT16_MIN</name><operator>)</operator></expr>
?</condition><then> <expr><name>INT16_MIN</name></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_packus_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u8</name></name> <operator>=</operator>
<call><name>vcombine_u8</name><argument_list>(<argument><expr><call><name>vqmovun_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vqmovun_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT8_MAX</name><operator>)</operator></expr>
?</condition><then> <expr><name>UINT8_MAX</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT8_MAX</name><operator>)</operator></expr>
?</condition><then> <expr><name>UINT8_MAX</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_pause</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_pause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sad_epu8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_sad_epu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE_REDUCTION</name><argument_list>(<argument>+ : tmp</argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition>
<incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>e</name> <init>= <expr><name>j</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>e</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>e</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>e</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set_epi8</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>e15</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e14</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e13</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e12</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name>e11</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e10</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e9</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e8</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e4</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_epi8</name><argument_list>(<argument><expr><name>e15</name></expr></argument>, <argument><expr><name>e14</name></expr></argument>, <argument><expr><name>e13</name></expr></argument>, <argument><expr><name>e12</name></expr></argument>, <argument><expr><name>e11</name></expr></argument>, <argument><expr><name>e10</name></expr></argument>, <argument><expr><name>e9</name></expr></argument>, <argument><expr><name>e8</name></expr></argument>, <argument><expr><name>e7</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>,
<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>e8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>e9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>e10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>e11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>e12</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>e13</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>e14</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>e15</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set_epi16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e4</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_epi16</name><argument_list>(<argument><expr><name>e7</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>int16_t</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>e0</name></expr>, <expr><name>e1</name></expr>, <expr><name>e2</name></expr>, <expr><name>e3</name></expr>, <expr><name>e4</name></expr>, <expr><name>e5</name></expr>, <expr><name>e6</name></expr>, <expr><name>e7</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set_epi32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>int32_t</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>e0</name></expr>, <expr><name>e1</name></expr>, <expr><name>e2</name></expr>, <expr><name>e3</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vld1q_s32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_epi64</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>e0</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>e0</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e1</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set_epi64x</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
<argument><expr><call><name>vcombine_s64</name><argument_list>(<argument><expr><call><name>vdup_n_s64</name><argument_list>(<argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vdup_n_s64</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_set_epu8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>e15</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e14</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e13</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>e12</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e11</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e10</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>e9</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e6</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e4</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>e8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>e9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>e10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>e11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>e12</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>e13</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>e14</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>e15</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_set_epu16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e5</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>e4</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_set_epu32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>e1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_set_epu64x</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_set_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>simde_float64</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_pd</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_set_pd1</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_pd</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_set_sd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_sd</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set1_epi8</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_epi8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i8</name></name> <operator>=</operator> <call><name>vdupq_n_s8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set1_epi16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_epi16</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator> <call><name>vdupq_n_s16</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set1_epi32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vdupq_n_s32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set1_epi64x</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_epi64x</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i64</name></name> <operator>=</operator> <call><name>vmovq_n_s64</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_set1_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_set1_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_pd</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_setr_epi8</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>e15</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e14</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e13</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e12</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name>e11</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e10</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e9</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e8</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e4</name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setr_epi8</name><argument_list>(<argument><expr><name>e15</name></expr></argument>, <argument><expr><name>e14</name></expr></argument>, <argument><expr><name>e13</name></expr></argument>, <argument><expr><name>e12</name></expr></argument>, <argument><expr><name>e11</name></expr></argument>, <argument><expr><name>e10</name></expr></argument>, <argument><expr><name>e9</name></expr></argument>, <argument><expr><name>e8</name></expr></argument>, <argument><expr><name>e7</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>,
<argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>t</name><index>[]</index></name> <init>= <expr><block>{<expr><name>e15</name></expr>, <expr><name>e14</name></expr>, <expr><name>e13</name></expr>, <expr><name>e12</name></expr>, <expr><name>e11</name></expr>, <expr><name>e10</name></expr>, <expr><name>e9</name></expr>, <expr><name>e8</name></expr>,
<expr><name>e7</name></expr>, <expr><name>e6</name></expr>, <expr><name>e5</name></expr>, <expr><name>e4</name></expr>, <expr><name>e3</name></expr>, <expr><name>e2</name></expr>, <expr><name>e1</name></expr>, <expr><name>e0</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i8</name></name> <operator>=</operator> <call><name>vld1q_s8</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e15</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e14</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e13</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e12</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_setr_epi16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e4</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setr_epi16</name><argument_list>(<argument><expr><name>e7</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>t</name><index>[]</index></name> <init>= <expr><block>{<expr><name>e7</name></expr>, <expr><name>e6</name></expr>, <expr><name>e5</name></expr>, <expr><name>e4</name></expr>, <expr><name>e3</name></expr>, <expr><name>e2</name></expr>, <expr><name>e1</name></expr>, <expr><name>e0</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i16</name></name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_setr_epi32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setr_epi32</name><argument_list>(<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>t</name><index>[]</index></name> <init>= <expr><block>{<expr><name>e3</name></expr>, <expr><name>e2</name></expr>, <expr><name>e1</name></expr>, <expr><name>e0</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vld1q_s32</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_setr_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setr_epi64</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>e0</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i64</name></name> <operator>=</operator> <call><name>vcombine_s64</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>neon_i64</name></name></expr></argument>, <argument><expr><name><name>e0</name><operator>.</operator><name>neon_i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>e1</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e0</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_setr_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>simde_float64</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setr_pd</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_setzero_pd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setzero_pd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_setzero_si128</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vdupq_n_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_shuffle_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_shuffle_epi32((a).n, (imm8)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ const simde__m128i simde__tmp_a_ = a; (simde__m128i){.i32 = SIMDE__SHUFFLE_VECTOR( 32, 16, (simde__tmp_a_).i32, (simde__tmp_a_).i32, ((imm8)) &amp; 3, ((imm8) &gt;&gt; 2) &amp; 3, ((imm8) &gt;&gt; 4) &amp; 3, ((imm8) &gt;&gt; 6) &amp; 3)}; })</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_shuffle_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>imm8</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>imm8</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128D_C(_mm_shuffle_pd((a).n, (b).n, (imm8)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ (simde__m128d){.f64 = SIMDE__SHUFFLE_VECTOR( 64, 16, (a).f64, (b).f64, (((imm8)) &amp; 1), (((imm8) &gt;&gt; 1) &amp; 1) + 2)}; })</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_shufflehi_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shufflehi_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_shufflehi_epi16((a).n, (imm8)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shufflehi_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ const simde__m128i simde__tmp_a_ = a; (simde__m128i){.i16 = SIMDE__SHUFFLE_VECTOR( 16, 16, (simde__tmp_a_).i16, (simde__tmp_a_).i16, 0, 1, 2, 3, (((imm8)) &amp; 3) + 4, (((imm8) &gt;&gt; 2) &amp; 3) + 4, (((imm8) &gt;&gt; 4) &amp; 3) + 4, (((imm8) &gt;&gt; 6) &amp; 3) + 4)}; })</cpp:value></cpp:define>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_shufflelo_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shufflelo_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_shufflelo_epi16((a).n, (imm8)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shufflelo_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ const simde__m128i simde__tmp_a_ = a; (simde__m128i){.i16 = SIMDE__SHUFFLE_VECTOR( 16, 16, (simde__tmp_a_).i16, (simde__tmp_a_).i16, (((imm8)) &amp; 3), (((imm8) &gt;&gt; 2) &amp; 3), (((imm8) &gt;&gt; 4) &amp; 3), (((imm8) &gt;&gt; 6) &amp; 3), 4, 5, 6, 7)}; })</cpp:value></cpp:define>









<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sll_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sll_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sll_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sll_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sll_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sll_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_sqrt_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_sqrt_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_sqrt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_sqrt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srl_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_srl_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srl_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_srl_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srl_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_srl_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srai_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>m</name> <init>=
<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>imm8</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>is_neg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>imm8</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srai_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_srai_epi16((a).n, (imm8)));</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srai_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>m</name> <init>=
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>imm8</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_neg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>imm8</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srai_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_srai_epi32((a).n, (imm8)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srai_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( i32, ((imm8) &lt;= 0) ? (a.neon_i32) : (((imm8) &gt; 31) ? (vshrq_n_s32(vshrq_n_s32(a.neon_i32, 16), 16)) : (vshrq_n_s32(a.neon_i32, (imm8)))))</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sra_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sra_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>count</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">15</literal> <operator>||</operator> <name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator>
<operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>cnt</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>is_neg</name> <init>= <expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>cnt</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sra_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_BUG_GCC_BAD_MM_SRA_EPI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sra_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>cnt</name> <init>= <expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>UINT32_MAX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>
<operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>cnt</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>is_neg</name> <init>= <expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>cnt</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_slli_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>imm8</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>imm8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_slli_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_slli_epi16(a.n, imm8));</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_slli_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( i16, ((imm8) &lt;= 0) ? ((a).neon_i16) : (((imm8) &gt; 31) ? (vdupq_n_s16(0)) : (vshlq_n_s16((a).neon_i16, (imm8)))))</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_slli_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>imm8</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>imm8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_slli_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_slli_epi32(a.n, imm8));</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_slli_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( i32, ((imm8) &lt;= 0) ? ((a).neon_i32) : (((imm8) &gt; 31) ? (vdupq_n_s32(0)) : (vshlq_n_s32((a).neon_i32, (imm8)))))</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_slli_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>imm8</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>imm8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_slli_epi64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_slli_epi64(a.n, imm8));</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srli_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>imm8</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>imm8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_srli_epi16(a.n, imm8));</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_epi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( u16, ((imm8) &lt;= 0) ? ((a).neon_u16) : (((imm8) &gt; 31) ? (vdupq_n_u16(0)) : (vshrq_n_u16((a).neon_u16, (imm8)))))</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srli_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>imm8</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>imm8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_srli_epi32(a.n, imm8))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_epi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( u32, ((imm8) &lt;= 0) ? ((a).neon_u32) : (((imm8) &gt; 31) ? (vdupq_n_u32(0)) : (vshrq_n_u32((a).neon_u32, (imm8)))))</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_srli_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>s</name> <init>= <expr><name>imm8</name> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_epi64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_C(_mm_srli_epi64(a.n, imm8))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_srli_epi64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128I_NEON_C( u64, (((imm8)&amp;255) &lt; 0 || ((imm8)&amp;255) &gt; 63) ? (vdupq_n_u64(0)) : ((((imm8)&amp;255) == 0) ? (a.neon_u64) : (vshrq_n_u64((a).neon_u64, (imm8)&amp;255))))</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store1_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store1_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_store_pd1</name><parameter_list>(<parameter><type><name>mem_addr</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_store1_pd(mem_addr, a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store_sd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store_sd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>vst1q_s32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storeh_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storeh_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>mem_addr</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storel_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vgetq_lane_s64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i64</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storel_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storel_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>mem_addr</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storer_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storer_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storeu_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storeu_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storeu_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vst1q_s32</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_stream_pd</name><parameter_list>(<parameter><decl><type><name>simde_float64</name></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_stream_pd</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_stream_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_stream_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_stream_si32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_stream_si32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>mem_addr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_stream_si64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__REALLY_GCC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>mem_addr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>_mm_stream_si64</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_mm_stream_si64</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>mem_addr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sub_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sub_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vsubq_s8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sub_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sub_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vsubq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sub_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sub_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vsubq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_sub_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><call><name>vsubq_s64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i64</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_sub_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_sub_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_sub_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_sub_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_sub_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sub_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_subs_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_subs_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i8</name></expr></argument>, <argument><expr><call><name>vqsubq_s8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>INT8_MIN</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>INT8_MAX</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_subs_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_subs_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>vqsubq_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>INT16_MIN</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>INT16_MAX</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_subs_epu8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_subs_epu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>u8</name></expr></argument>, <argument><expr><call><name>vqsubq_u8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_u8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>x</name> <init>= <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_subs_epu16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_subs_epu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><call><name>vqsubq_u16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_u16</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_u16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>x</name> <init>= <expr><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT16_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomieq_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomieq_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomige_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomige_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomigt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomigt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomile_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomile_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomilt_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomilt_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomineq_sd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomineq_sd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_undefined_pd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_UNDEFINED128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_undefined_pd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_setzero_pd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_undefined_si128</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_UNDEFINED128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_undefined_si128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_lfence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_lfence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>simde_mm_sfence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_mfence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_mfence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>simde_mm_sfence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpackhi_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int8x8_t</name></type> <name>a1</name> <init>= <expr><call><name>vreinterpret_s8_s16</name><argument_list>(<argument><expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8x8_t</name></type> <name>b1</name> <init>= <expr><call><name>vreinterpret_s8_s16</name><argument_list>(<argument><expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8x8x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_s8</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i8</name></expr></argument>,
<argument><expr><call><name>vcombine_s8</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpackhi_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>a1</name> <init>= <expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>b1</name> <init>= <expr><call><name>vget_high_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x4x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_s16</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i16</name></expr></argument>,
<argument><expr><call><name>vcombine_s16</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpackhi_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int32x2_t</name></type> <name>a1</name> <init>= <expr><call><name>vget_high_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x2_t</name></type> <name>b1</name> <init>= <expr><call><name>vget_high_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x2x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_s32</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>,
<argument><expr><call><name>vcombine_s32</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpackhi_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_unpackhi_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpacklo_epi8</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int8x8_t</name></type> <name>a1</name> <init>= <expr><call><name>vreinterpret_s8_s16</name><argument_list>(<argument><expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8x8_t</name></type> <name>b1</name> <init>= <expr><call><name>vreinterpret_s8_s16</name><argument_list>(<argument><expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8x8x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_s8</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i8</name></expr></argument>,
<argument><expr><call><name>vcombine_s8</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpacklo_epi16</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_epi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>a1</name> <init>= <expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x4_t</name></type> <name>b1</name> <init>= <expr><call><name>vget_low_s16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i16</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x4x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_s16</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i16</name></expr></argument>,
<argument><expr><call><name>vcombine_s16</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpacklo_epi32</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_epi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int32x2_t</name></type> <name>a1</name> <init>= <expr><call><name>vget_low_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x2_t</name></type> <name>b1</name> <init>= <expr><call><name>vget_low_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x2x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_s32</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>,
<argument><expr><call><name>vcombine_s32</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_unpacklo_epi64</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_epi64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_unpacklo_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128d</name></type> <name>simde_mm_xor_pd</name><parameter_list>(<parameter><decl><type><name>simde__m128d</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128d</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128D_C</name><argument_list>(<argument><expr><call><name>_mm_xor_pd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128d</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_mm_xor_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_C</name><argument_list>(<argument><expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>veorq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128i</name></type> <name>simde_x_mm_not_si128</name><parameter_list>(<parameter><decl><type><name>simde__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE2_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>SIMDE__M128I_NEON_C</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>vmvnq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>simde__m128i</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr><name>SIMDE__END_DECLS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
