<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\simde\sse.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__SSE_H</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmx.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE_SSE_NATIVE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_FORCE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SSE_NATIVE</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NO_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SSE_NATIVE</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NO_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_SSE_NEON</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_FORCE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Native SSE support requires native MMX support</cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Native SSE support requires native MMX support, disabling</cpp:warning>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE_SSE_NATIVE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:warning>#<cpp:directive>warning</cpp:directive> SSE3 NEON support requires MMX NEON support, disabling</cpp:warning>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE_SSE3_NEON</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xmmintrin.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_NO_ATOMICS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fenv.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ALIGN</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((aligned(alignment)))</cpp:value></cpp:define>
<macro><name>SIMDE__BEGIN_DECLS</name></macro>

<typedef>typedef <macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <type><union>union <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__ENABLE_GCC_VEC_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int8_t</name> <name>i8</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16</decl>)<operator>,</operator> __may_alias__</decl_stmt>)</block></union></type>);</typedef>
<decl_stmt><decl><type><name>int16_t</name> <name>i16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <name>i32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <name>i64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <name>u8</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <name>u16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <name>u32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <name>u64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>simde_int128</name> <name>i128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_uint128</name> <name>u128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>simde_float32</name> <name>f32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>i8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>i16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>i32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>i64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>u16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>u64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>simde_int128</name></type> <name><name>i128</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simde_uint128</name></type> <name><name>u128</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>simde_float32</name></type> <name><name>f32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int8x16_t</name></type> <name>neon_i8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16x8_t</name></type> <name>neon_i16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32x4_t</name></type> <name>neon_i32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64x2_t</name></type> <name>neon_i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8x16_t</name></type> <name>neon_u8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16x8_t</name></type> <name>neon_u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>neon_u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>neon_u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>neon_f32</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
} simde__m128<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__m128</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m128</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"__m128 size doesn't match simde__m128 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name> <name>simde__m128</name></type> <name>SIMDE__M128_C</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__M128_NEON_C</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(simde__m128) { .neon_##T = expr }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m128</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"simde__m128 size incorrect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_add_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_add_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vaddq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_add_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_add_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32_t</name></type> <name>b0</name> <init>= <expr><call><name>vgetq_lane_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>value</name> <init>= <expr><call><name>vsetq_lane_f32</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><call><name>vdupq_n_f32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vaddq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>, <argument><expr><call><name>simde_mm_add_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_and_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_and_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vandq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_andnot_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_andnot_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vbicq_s32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_avg_pu16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_avg_pu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u16</name></name> <operator>=</operator> <call><name>vrhadd_u16</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_u16</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_u16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pavgw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_avg_pu16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_avg_pu8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_avg_pu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u8</name></name> <operator>=</operator> <call><name>vrhadd_u8</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_u8</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_u8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pavgb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_avg_pu8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpeq_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpeq_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpeq_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpeq_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmpeq_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpge_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpge_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcgeq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpge_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpge_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcgeq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmpge_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpgt_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpgt_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcgtq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpgt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpgt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcgtq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmpgt_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmple_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmple_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcleq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmple_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmple_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcleq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmple_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmplt_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmplt_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcltq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmplt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmplt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmplt_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpneq_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpneq_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vmvnq_u32</name><argument_list>(<argument><expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpneq_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpneq_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>e</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vmvnq_u32</name><argument_list>(<argument><expr><call><name>vreinterpretq_u32_f32</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmpneq_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpnge_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpnge_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcltq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmplt_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpnge_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpnge_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmplt_ss</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpngt_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpngt_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcleq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmple_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpngt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpngt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcleq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmple_ss</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpnle_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpnle_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcgtq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmpgt_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpnle_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpnle_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>=
<expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vcgtq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmpgt_ss</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpnlt_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpnlt_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vcgeq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmpge_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpnlt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpnlt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cmpge_ss</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpord_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpord_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>



<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>ceqaa</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>ceqbb</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_u32</name></name> <operator>=</operator> <call><name>vandq_u32</name><argument_list>(<argument><expr><name>ceqaa</name></expr></argument>, <argument><expr><name>ceqbb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><literal type="number">0xffffffff</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpord_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpord_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>ceqaa</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>ceqbb</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>s</name> <init>= <expr><call><name>vreinterpretq_f32_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>ceqaa</name></expr></argument>, <argument><expr><name>ceqbb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>t</name> <init>= <expr><call><name>vextq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vextq_f32</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>,
<argument><expr><call><name>simde_mm_cmpord_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0xffffffff</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpunord_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpunord_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cmpunord_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cmpunord_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name></name> <operator>=</operator> <call><name>SIMDE__SHUFFLE_VECTOR</name><argument_list>(
<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>, <argument><expr><call><name>simde_mm_cmpunord_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comieq_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comieq_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>b_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_or_b_nan</name> <init>= <expr><call><name>vmvnq_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_not_nan</name></expr></argument>, <argument><expr><name>b_not_nan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_eq_b</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vgetq_lane_u32</name><argument_list>(<argument><expr><call><name>vorrq_u32</name><argument_list>(<argument><expr><name>a_or_b_nan</name></expr></argument>, <argument><expr><name>a_eq_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comige_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comige_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>b_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_and_b_not_nan</name> <init>= <expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_not_nan</name></expr></argument>, <argument><expr><name>b_not_nan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_ge_b</name> <init>= <expr><call><name>vcgeq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vgetq_lane_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_and_b_not_nan</name></expr></argument>, <argument><expr><name>a_ge_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comigt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comigt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>b_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_and_b_not_nan</name> <init>= <expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_not_nan</name></expr></argument>, <argument><expr><name>b_not_nan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_gt_b</name> <init>= <expr><call><name>vcgtq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vgetq_lane_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_and_b_not_nan</name></expr></argument>, <argument><expr><name>a_gt_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comile_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comile_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>b_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_or_b_nan</name> <init>= <expr><call><name>vmvnq_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_not_nan</name></expr></argument>, <argument><expr><name>b_not_nan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_le_b</name> <init>= <expr><call><name>vcleq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vgetq_lane_u32</name><argument_list>(<argument><expr><call><name>vorrq_u32</name><argument_list>(<argument><expr><name>a_or_b_nan</name></expr></argument>, <argument><expr><name>a_le_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comilt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comilt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>b_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_or_b_nan</name> <init>= <expr><call><name>vmvnq_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_not_nan</name></expr></argument>, <argument><expr><name>b_not_nan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_lt_b</name> <init>= <expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vgetq_lane_u32</name><argument_list>(<argument><expr><call><name>vorrq_u32</name><argument_list>(<argument><expr><name>a_or_b_nan</name></expr></argument>, <argument><expr><name>a_lt_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_comineq_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_comineq_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>b_not_nan</name> <init>= <expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_and_b_not_nan</name> <init>= <expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_not_nan</name></expr></argument>, <argument><expr><name>b_not_nan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>a_neq_b</name> <init>= <expr><call><name>vmvnq_u32</name><argument_list>(<argument><expr><call><name>vceqq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vgetq_lane_u32</name><argument_list>(<argument><expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>a_and_b_not_nan</name></expr></argument>, <argument><expr><name>a_neq_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvt_pi2ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvt_pi2ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvt_ps2pi</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvt_ps2pi</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvt_si2ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvt_si2ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvt_ss2si</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvt_ss2si</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpi16_ps</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtpi16_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpi32_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpi32x2_ps</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtpi32x2_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpi8_ps</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtpi8_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvtps_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtps_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvtps_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtps_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvtps_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtps_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpu16_ps</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtpu16_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtpu8_ps</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtpu8_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtsi32_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi32_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_cvtsi64_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi64_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtsi64x_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>simde_float32</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde_float32</name></type> <name>simde_mm_cvtss_f32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtss_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>vgetq_lane_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvtss_si32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtss_si32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int64_t</name></type> <name>simde_mm_cvtss_si64</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtss_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>_mm_cvtss_si64x</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvtt_ps2pi</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvtt_ps2pi</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>truncf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvtt_ss2si</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvtt_ss2si</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>truncf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_cvttps_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_cvttps_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_cvtt_ps2pi</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_cvttss_si32</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvttss_si32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>truncf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int64_t</name></type> <name>simde_mm_cvttss_si64</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_cvttss_si64x</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>_mm_cvttss_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>truncf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_div_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_div_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>recip0</name> <init>= <expr><call><name>vrecpeq_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>recip1</name> <init>= <expr><call><name>vmulq_f32</name><argument_list>(<argument><expr><name>recip0</name></expr></argument>, <argument><expr><call><name>vrecpsq_f32</name><argument_list>(<argument><expr><name>recip0</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vmulq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name>recip1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_div_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_div_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32_t</name></type> <name>value</name> <init>= <expr><call><name>vgetq_lane_f32</name><argument_list>(<argument><expr><call><name>simde_mm_div_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>.</operator><name>neon_f32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vsetq_lane_f32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int32_t</name></type> <name>simde_mm_extract_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>imm8</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_extract_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_extract_pi16(a.n, imm8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pextrw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_extract_pi16(a.n, imm8)</cpp:value></cpp:define>

<enum>enum <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>simde_MM_ROUND_NEAREST</name> <init>= <expr><name>_MM_ROUND_NEAREST</name></expr></init></decl>,
<decl><name>simde_MM_ROUND_DOWN</name> <init>= <expr><name>_MM_ROUND_DOWN</name></expr></init></decl>,
<decl><name>simde_MM_ROUND_UP</name> <init>= <expr><name>_MM_ROUND_UP</name></expr></init></decl>,
<decl><name>simde_MM_ROUND_TOWARD_ZERO</name> <init>= <expr><name>_MM_ROUND_TOWARD_ZERO</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>simde_MM_ROUND_NEAREST</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FE_TONEAREST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>=</operator> <name>FE_TONEAREST</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,

<decl><name>simde_MM_ROUND_DOWN</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FE_DOWNWARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><name>FE_DOWNWARD</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,

<decl><name>simde_MM_ROUND_UP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FE_UPWARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><name>FE_UPWARD</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,

<decl><name>simde_MM_ROUND_TOWARD_ZERO</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FE_TOWARDZERO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><name>FE_TOWARDZERO</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</enum>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>unsigned</name> <name>int</name></type> <name>simde_MM_GET_ROUNDING_MODE</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_MM_GET_ROUNDING_MODE</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>fegetround</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_MM_SET_ROUNDING_MODE</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_MM_SET_ROUNDING_MODE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_insert_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>imm8</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_insert_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M64_C(_mm_insert_pi16((a).n, i, imm8));</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pinsrw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M64_C(simde_mm_insert_pi16((a).n, i, imm8));</cpp:value></cpp:define>


<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type>
<name>simde_mm_load_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <specifier>const</specifier></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vld1q_f32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_load_ps1</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_ps1</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>simde_float32</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>mem_addr</name></expr></init></decl>;</decl_stmt>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_load_ss</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load_ss</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vsetq_lane_f32</name><argument_list>(<argument><expr><operator>*</operator><name>mem_addr</name></expr></argument>, <argument><expr><call><name>vdupq_n_f32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>mem_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_load1_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_load1_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vld1q_dup_f32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_load_ps1</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_loadh_pi</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadh_pi</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__m64</name> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_loadl_pi</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadl_pi</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__m64</name> <operator>*</operator><operator>)</operator><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type>
<name>simde_mm_loadr_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <specifier>const</specifier></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadr_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type>
<name>simde_mm_loadu_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <specifier>const</specifier></type> <name><name>mem_addr</name><index>[<expr><call><name>HEDLEY_ARRAY_PARAM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_loadu_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vld1q_f32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>mem_addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_maskmove_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_maskmove_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>mask</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>mask</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_maskmovq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>mem_addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_maskmove_si64(a, mask, mem_addr)</cpp:value></cpp:define>


<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_max_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmaxsw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_max_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_max_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vmaxq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_max_pu8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_pu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmaxub</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_max_pu8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_max_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_max_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32_t</name></type> <name>value</name> <init>= <expr><call><name>vgetq_lane_f32</name><argument_list>(<argument><expr><call><name>vmaxq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vsetq_lane_f32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_min_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pminsw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_min_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_min_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vminq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_min_pu8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_pu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pminub</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_min_pu8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_min_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_min_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32_t</name></type> <name>value</name> <init>= <expr><call><name>vgetq_lane_f32</name><argument_list>(<argument><expr><call><name>vminq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vsetq_lane_f32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_move_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_move_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_movehl_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_movehl_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_movelh_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_movelh_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_movemask_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_movemask_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nmemb</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE_REDUCTION</name><argument_list>(<argument>| : r</argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmemb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>nmemb</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>nmemb</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmovmskb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_movemask_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_movemask_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_movemask_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32x4_t</name></type> <name>movemask</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32x4_t</name></type> <name>highbit</name> <init>= <expr><block>{<expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>,
<expr><literal type="number">0x80000000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>t0</name> <init>= <expr><name><name>a</name><operator>.</operator><name>neon_u32</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>t1</name> <init>= <expr><call><name>vtstq_u32</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>highbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>t2</name> <init>= <expr><call><name>vandq_u32</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>movemask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x2_t</name></type> <name>t3</name> <init>= <expr><call><name>vorr_u32</name><argument_list>(<argument><expr><call><name>vget_low_u32</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vget_high_u32</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vget_lane_u32</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>vget_lane_u32</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE_REDUCTION</name><argument_list>(<argument>| : r</argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_mul_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vmulq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_mul_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mul_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_mulhi_pu16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_mulhi_pu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmulhuw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_mulhi_pu16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_or_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_or_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>vorrq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>b</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_prefetch</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_prefetch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_prefetch(p, i)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_rcp_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_rcp_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>recip</name> <init>= <expr><call><name>vrecpeq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MM_RCP_PS_ITERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_MM_RCP_PS_ITERS</name></cpp:macro> <cpp:value>SIMDE_ACCURACY_ITERS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIMDE_MM_RCP_PS_ITERS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>recip</name> <operator>=</operator> <call><name>vmulq_f32</name><argument_list>(<argument><expr><name>recip</name></expr></argument>, <argument><expr><call><name>vrecpsq_f32</name><argument_list>(<argument><expr><name>recip</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <name>recip</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_rcp_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_rcp_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_rsqrt_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_rsqrt_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vrsqrteq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_IEC_559__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>INT32_C</name><argument_list>(<argument><expr><literal type="number">0x5f3759df</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIMDE_ACCURACY_ITERS</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>half</name> <init>= <expr><call><name>SIMDE_FLOAT32_C</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ai</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>ai</name> <operator>&lt;</operator> <name>SIMDE_ACCURACY_ITERS</name></expr>;</condition> <incr><expr><name>ai</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <call><name>SIMDE_FLOAT32_C</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<operator>(</operator><name>half</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_rsqrt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_rsqrt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_IEC_559__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INT32_C</name><argument_list>(<argument><expr><literal type="number">0x5f3759df</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIMDE_ACCURACY_ITERS</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name>half</name> <init>= <expr><call><name>SIMDE_FLOAT32_C</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ai</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>ai</name> <operator>&lt;</operator> <name>SIMDE_ACCURACY_ITERS</name></expr>;</condition> <incr><expr><name>ai</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <call><name>SIMDE_FLOAT32_C</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<operator>(</operator><name>half</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_sad_pu8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_sad_pu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE_REDUCTION</name><argument_list>(<argument>+ : sum</argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psadbw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sad_pu8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_set_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>simde_float32</name></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><name>simde_float32</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>simde_float32</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_ps</name><argument_list>(<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>simde_float32</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>e0</name></expr>, <expr><name>e1</name></expr>, <expr><name>e2</name></expr>, <expr><name>e3</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vld1q_f32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_set_ps1</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vdupq_n_f32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_set_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_set1_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_set_ps1(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_set_ss</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_set_ss</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_set_ps</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_setr_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>simde_float32</name></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><name>simde_float32</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>simde_float32</name></type> <name>e0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setr_ps</name><argument_list>(<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>SIMDE_ALIGN</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>simde_float32</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>e3</name></expr>, <expr><name>e2</name></expr>, <expr><name>e1</name></expr>, <expr><name>e0</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vld1q_f32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_set_ps</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_setzero_ps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vdupq_n_f32</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_set_ps</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_sfence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_sfence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<expr_stmt><expr><call><name>__atomic_thread_fence</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_NO_ATOMICS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>__atomic_thread_fence</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<expr_stmt><expr><call><name>__atomic_thread_fence</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_CLANG_HAS_FEATURE</name><argument_list>(<argument><expr><name>c_atomic</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>__c11_atomic_thread_fence</name><argument_list>(<argument>__ATOMIC_SEQ_CST</argument>)</argument_list></macro>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__SUNPRO_C</name> <operator>&gt;=</operator> <literal type="number">0x5140</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__SUNPRO_CC</name> <operator>&gt;=</operator> <literal type="number">0x5140</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<expr_stmt><expr><call><name>__atomic_thread_fence</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>critical</omp:name><omp:argument_list>(<omp:argument><omp:expr>simde_mm_sfence_</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<block>{<block_content>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_MM_SHUFFLE</name><parameter_list>(<parameter><type><name>z</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((z) &lt;&lt; 6) | ((y) &lt;&lt; 4) | ((x) &lt;&lt; 2) | (w))</cpp:value></cpp:define>


<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m64</name></type> <name>simde_mm_shuffle_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M64_C(_mm_shuffle_pi16(a.n, imm8))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ const simde__m64 simde__tmp_a_ = a; (simde__m64){.i16 = SIMDE__SHUFFLE_VECTOR( 16, 8, (simde__tmp_a_).i16, (simde__tmp_a_).i16, (((imm8)) &amp; 3), (((imm8) &gt;&gt; 2) &amp; 3), (((imm8) &gt;&gt; 4) &amp; 3), (((imm8) &gt;&gt; 6) &amp; 3))}; })</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pshufw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M64_C(_m_pshufw(a.n, imm8))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pshufw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_shuffle_pi16(a, imm8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_shuffle_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><operator>(</operator><name>imm8</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__M128_C(_mm_shuffle_ps(a.n, b.n, imm8))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__SHUFFLE_VECTOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_mm_shuffle_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>imm8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ (simde__m128){.f32 = SIMDE__SHUFFLE_VECTOR( 32, 16, (a).f32, (b).f32, (((imm8)) &amp; 3), (((imm8) &gt;&gt; 2) &amp; 3), (((imm8) &gt;&gt; 4) &amp; 3) + 4, (((imm8) &gt;&gt; 6) &amp; 3) + 4)}; })</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_sqrt_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_sqrt_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>recipsq</name> <init>= <expr><call><name>vrsqrteq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x4_t</name></type> <name>sq</name> <init>= <expr><call><name>vrecpeq_f32</name><argument_list>(<argument><expr><name>recipsq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <name>sq</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_sqrt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_sqrt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32_t</name></type> <name>value</name> <init>= <expr><call><name>vgetq_lane_f32</name><argument_list>(<argument><expr><call><name>simde_mm_sqrt_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>.</operator><name>neon_f32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vsetq_lane_f32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>vst1q_f32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE_ALIGNED</name><argument_list>(<argument>mem_addr : <literal type="number">16</literal></argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store_ps1</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store_ps1</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE_ALIGNED</name><argument_list>(<argument>mem_addr : <literal type="number">16</literal></argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store_ss</name><parameter_list>(<parameter><decl><type><name>simde_float32</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>mem_addr</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_store1_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_store1_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>simde_mm_store_ps1</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storeh_pi</name><parameter_list>(<parameter><decl><type><name>simde__m64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storeh_pi</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storel_pi</name><parameter_list>(<parameter><decl><type><name>simde__m64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storel_pi</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storer_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storer_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE_ALIGNED</name><argument_list>(<argument>mem_addr : <literal type="number">16</literal></argument>)</argument_list></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_storeu_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_storeu_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>vst1q_f32</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mem_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_sub_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_sub_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vsubq_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_sub_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_sub_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomieq_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomieq_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomige_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomige_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomigt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomigt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomile_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomile_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomilt_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomilt_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>int</name></type> <name>simde_mm_ucomineq_ss</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_ucomineq_ss</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fenv_t</name></type> <name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>feholdexcept</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_LIKELY</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_ia32_undef128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__HAVE_UNDEFINED128</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_BUG_GCC_REV_208793</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__HAVE_UNDEFINED128</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_undefined_ps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__HAVE_UNDEFINED128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_undefined_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>simde_mm_setzero_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_unpackhi_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_unpackhi_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x2_t</name></type> <name>a1</name> <init>= <expr><call><name>vget_high_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x2_t</name></type> <name>b1</name> <init>= <expr><call><name>vget_high_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x2x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_f32</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vcombine_f32</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_unpacklo_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_unpacklo_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>float32x2_t</name></type> <name>a1</name> <init>= <expr><call><name>vget_low_f32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x2_t</name></type> <name>b1</name> <init>= <expr><call><name>vget_low_f32</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>neon_f32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float32x2x2_t</name></type> <name>result</name> <init>= <expr><call><name>vzip_f32</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_f32</name></name> <operator>=</operator> <call><name>vcombine_f32</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>f32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>simde__m128</name></type> <name>simde_mm_xor_ps</name><parameter_list>(<parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>simde__m128</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>_mm_xor_ps</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>neon_i32</name></name> <operator>=</operator> <call><name>veorq_s32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>neon_i32</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>neon_i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>SIMDE__VECTORIZE</name></macro>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_stream_pi</name><parameter_list>(<parameter><decl><type><name>simde__m64</name> <modifier>*</modifier></type><name>mem_addr</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_stream_pi</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem_addr</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>mem_addr</name><operator>-&gt;</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_stream_ps</name><parameter_list>(<parameter><decl><type><name>simde_float32</name></type> <name><name>mem_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>simde__m128</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>simde_assert_aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_stream_ps</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SIMDE__ASSUME_ALIGNED</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>uint32_t</name></type> <name>simde_mm_getcsr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_mm_getcsr</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounding_mode</name> <init>= <expr><call><name>fegetround</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>rounding_mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FE_TONEAREST</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>FE_UPWARD</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FE_DOWNWARD</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FE_TOWARDZERO</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>
<name>void</name></type> <name>simde_mm_setcsr</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_SSE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_mm_setcsr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch <condition>(<expr><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_TONEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_DOWNWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_UPWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_TOWARDZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_MM_TRANSPOSE4_PS</name><parameter_list>(<parameter><type><name>row0</name></type></parameter>, <parameter><type><name>row1</name></type></parameter>, <parameter><type><name>row2</name></type></parameter>, <parameter><type><name>row3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { simde__m128 tmp3, tmp2, tmp1, tmp0; tmp0 = simde_mm_unpacklo_ps((row0), (row1)); tmp2 = simde_mm_unpacklo_ps((row2), (row3)); tmp1 = simde_mm_unpackhi_ps((row0), (row1)); tmp3 = simde_mm_unpackhi_ps((row2), (row3)); row0 = simde_mm_movelh_ps(tmp0, tmp2); row1 = simde_mm_movehl_ps(tmp2, tmp0); row2 = simde_mm_movelh_ps(tmp1, tmp3); row3 = simde_mm_movehl_ps(tmp3, tmp1); } while (0)</cpp:value></cpp:define>












<expr><name>SIMDE__END_DECLS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
