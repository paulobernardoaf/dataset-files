<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\threading-posix.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>os_atomic_inc_long</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>os_atomic_dec_long</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__sync_sub_and_fetch</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>os_atomic_set_long</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>os_atomic_load_long</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>os_atomic_compare_swap_long</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>old_val</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>new_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>old_val</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>os_atomic_set_bool</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>bool</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>os_atomic_load_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>bool</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
