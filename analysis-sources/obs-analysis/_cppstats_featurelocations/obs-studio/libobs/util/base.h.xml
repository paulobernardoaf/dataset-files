<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\base.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c99defs.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRINGIFY(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S__LINE__</name></cpp:macro> <cpp:value>STRINGIFY_(__LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_CUR_LINE</name></cpp:macro> <cpp:value>__LINE__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LINE</name></cpp:macro> <cpp:value>__FILE__ " (" S__LINE__ "): "</cpp:value></cpp:define>

<enum>enum <block>{







<decl><name>LOG_ERROR</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,








<decl><name>LOG_WARNING</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>,




<decl><name>LOG_INFO</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>,




<decl><name>LOG_DEBUG</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>log_handler_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>base_get_log_handler</name><parameter_list>(<parameter><decl><type><name>log_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>base_set_log_handler</name><parameter_list>(<parameter><decl><type><name>log_handler_t</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>base_set_crash_handler</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>blogva</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTFATTR</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(__printf__, f, a)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTFATTR</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>PRINTFATTR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>blog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PRINTFATTR</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bcrash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRINTFATTR</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
