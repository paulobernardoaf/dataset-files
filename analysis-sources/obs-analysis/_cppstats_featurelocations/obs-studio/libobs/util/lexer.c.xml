<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\util\lexer.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lexer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>astrblank</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>strref_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>str2</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str2</name> <operator>=</operator> <name>astrblank</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch1</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ch1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>str1</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ch2</name> <operator>=</operator> <operator>*</operator><name>str2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>&lt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch1</name> <operator>&gt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>strref_cmpi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>str2</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str2</name> <operator>=</operator> <name>astrblank</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch1</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ch1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>str1</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ch2</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>&lt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch1</name> <operator>&gt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>strref_cmp_strref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch1</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ch1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>str1</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ch2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>str2</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>str2</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>&lt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch1</name> <operator>&gt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>str2</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>strref_cmpi_strref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strref_is_empty</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch1</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ch1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>str1</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ch2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>str2</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>str2</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>&lt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch1</name> <operator>&gt;</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>str1</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>str2</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>valid_int_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found_num</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>&lt;</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_num</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><operator>++</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>n</name></expr>)</condition>;</do>

<return>return <expr><name>found_num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>valid_float_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found_num</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_exp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_dec</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found_dec</name> <operator>||</operator> <name>found_exp</name> <operator>||</operator> <operator>!</operator><name>found_num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_dec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found_exp</name> <operator>||</operator> <operator>!</operator><name>found_num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_exp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found_num</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_exp</name> <operator>||</operator> <operator>!</operator><name>found_num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>&lt;</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>found_num</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><operator>++</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>n</name></expr>)</condition>;</do>

<return>return <expr><name>found_num</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>error_data_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>error_item</name></name></type> <name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>error</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>error_data_buildstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>error_item</name></name> <modifier>*</modifier></type><name>items</name> <init>= <expr><name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>error_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>items</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s (%u, %u): %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>row</name></name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>column</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>str</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>base_token_type</name></name></type> <name>get_char_token_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_whitespace</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BASETOKEN_WHITESPACE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BASETOKEN_DIGIT</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BASETOKEN_ALPHA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>BASETOKEN_OTHER</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lexer_getbasetoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ignore_whitespace</name></name></type> <name>iws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>base_token_type</name></name></type> <name>type</name> <init>= <expr><name>BASETOKEN_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore_whitespace</name> <init>= <expr><operator>(</operator><name>iws</name> <operator>==</operator> <name>IGNORE_WHITESPACE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><operator>(</operator><name>offset</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>base_token_type</name></name></type> <name>new_type</name> <init>= <expr><call><name>get_char_token_type</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BASETOKEN_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_type</name> <operator>==</operator> <name>BASETOKEN_WHITESPACE</name> <operator>&amp;&amp;</operator>
<name>ignore_whitespace</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token_start</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>new_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>BASETOKEN_DIGIT</name> <operator>&amp;&amp;</operator>
<name>type</name> <operator>!=</operator> <name>BASETOKEN_ALPHA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_newline</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>is_newline_pair</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>!=</operator> <name>new_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>token_start</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <name>token_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strref_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>token_start</name></expr></argument>, <argument><expr><name>offset</name> <operator>-</operator> <name>token_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lexer_getstroffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur_row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>text</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>text</name> <operator>&lt;</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_newline</name><argument_list>(<argument><expr><operator>*</operator><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name>newline_size</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_row</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <name>cur_row</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <name>cur_col</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
