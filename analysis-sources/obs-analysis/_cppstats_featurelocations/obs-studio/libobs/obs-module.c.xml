<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-module.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-module.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_module_extension</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>req_func_not_found</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Required module function '%s' in module '%s' not "</literal>
<literal type="string">"found, loading of module failed"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MODULE_MISSING_EXPORTS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_module_exports</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>load</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>-&gt;</operator><name>load</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>req_func_not_found</name><argument_list>(<argument><expr><literal type="string">"obs_module_load"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>set_pointer</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_set_pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>-&gt;</operator><name>set_pointer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>req_func_not_found</name><argument_list>(<argument><expr><literal type="string">"obs_module_set_pointer"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_ver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>-&gt;</operator><name>ver</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>req_func_not_found</name><argument_list>(<argument><expr><literal type="string">"obs_module_ver"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>unload</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_unload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>post_load</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_post_load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>set_locale</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_set_locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>free_locale</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_free_locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>author</name></name> <operator>=</operator> <call><name>os_dlsym</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"obs_module_author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MODULE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>get_module_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>ext_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ext_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>get_module_extension</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ext_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>ext_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>name</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>reset_win32_symbol_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>obs_open_module</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_module</name></name></type> <name>mod</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name> <operator>||</operator> <operator>!</operator><name>path</name> <operator>||</operator> <operator>!</operator><name>obs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MODULE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>astrstri</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"Library/Application Support"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>astrstri</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"obs-browser"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring old obs-browser.so version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MODULE_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"---------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>module</name></name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>.</operator><name>module</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Module '%s' not loaded"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MODULE_FILE_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errorcode</name> <operator>=</operator> <call><name>load_module_exports</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errorcode</name> <operator>!=</operator> <name>MODULE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>errorcode</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>bin_path</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>file</name></name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>mod</name><operator>.</operator><name>bin_path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>file</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>mod</name><operator>.</operator><name>file</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>mod</name><operator>.</operator><name>bin_path</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>mod</name><operator>.</operator><name>file</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>mod_name</name></name> <operator>=</operator> <call><name>get_module_name</name><argument_list>(<argument><expr><name><name>mod</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>data_path</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>data_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>first_module</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>.</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Loading module: %s"</literal></expr></argument>, <argument><expr><name><name>mod</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>module</name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>first_module</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>module</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mod</name><operator>.</operator><name>set_pointer</name></name><argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>.</operator><name>set_locale</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mod</name><operator>.</operator><name>set_locale</name></name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>locale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>MODULE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_init_module</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name> <operator>||</operator> <operator>!</operator><name>obs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile_name</name> <init>=
<expr><call><name>profile_store_name</name><argument_list>(<argument><expr><call><name>obs_get_profiler_name_store</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"obs_init_module(%s)"</literal></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>profile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>loaded</name></name> <operator>=</operator> <call><name><name>module</name><operator>-&gt;</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>module</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize module '%s'"</literal></expr></argument>,
<argument><expr><name><name>module</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>profile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>module</name><operator>-&gt;</operator><name>loaded</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_log_loaded_modules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" Loaded Modules:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>first_module</name></name></expr></init></decl>;</init> <condition><expr><operator>!</operator><operator>!</operator><name>mod</name></expr>;</condition> <incr><expr><name>mod</name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>mod</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_module_file_name</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>module</name></expr> ?</condition><then> <expr><name><name>module</name><operator>-&gt;</operator><name>file</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_module_name</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>module</name> <operator>&amp;&amp;</operator> <name><name>module</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>module</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_module_author</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>module</name> <operator>&amp;&amp;</operator> <name><name>module</name><operator>-&gt;</operator><name>author</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>module</name><operator>-&gt;</operator><name>author</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_module_description</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>module</name> <operator>&amp;&amp;</operator> <name><name>module</name><operator>-&gt;</operator><name>description</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>module</name><operator>-&gt;</operator><name>description</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_module_binary_path</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>module</name></expr> ?</condition><then> <expr><name><name>module</name><operator>-&gt;</operator><name>bin_path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_module_data_path</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>module</name></expr> ?</condition><then> <expr><name><name>module</name><operator>-&gt;</operator><name>data_path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>obs_find_module_file</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>data_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>dstr_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_file_exists</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>output</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>obs_module_get_config_path</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>module_config_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>dstr_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>mod_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>output</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_add_module_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
struct <expr_stmt><expr><name>obs_module_path</name> omp</expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name> <operator>||</operator> <operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

omp<expr_stmt><expr><operator>.</operator><name>bin</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
omp<expr_stmt><expr><operator>.</operator><name>data</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>module_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator>omp</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_all_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_module_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>obs_open_module</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>bin_path</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>data_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>MODULE_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Failed to load module file '%s': %d"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>bin_path</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_init_module</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_load_all_modules_name</name> <init>= <expr><literal type="string">"obs_load_all_modules"</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset_win32_symbol_paths_name</name> <init>= <expr><literal type="string">"reset_win32_symbol_paths"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>obs_load_all_modules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>obs_load_all_modules_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_find_modules</name><argument_list>(<argument><expr><name>load_all_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>reset_win32_symbol_paths_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_win32_symbol_paths</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>reset_win32_symbol_paths_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>obs_load_all_modules_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_post_load_modules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>first_module</name></name></expr></init></decl>;</init> <condition><expr><operator>!</operator><operator>!</operator><name>mod</name></expr>;</condition> <incr><expr><name>mod</name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>post_load</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mod</name><operator>-&gt;</operator><name>post_load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>make_data_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>parsed_data_dir</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>parsed_data_dir</name></expr></argument>, <argument><expr><name>data_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><name>parsed_data_dir</name></expr></argument>, <argument><expr><literal type="string">"%module%"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dstr_end</name><argument_list>(<argument><expr><name>parsed_data_dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><name>parsed_data_dir</name></expr></argument>, <argument><expr><name><name>parsed_data_dir</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>make_data_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>parsed_data_dir</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>make_data_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsed_data_dir</name></expr></argument>, <argument><expr><name>data_dir</name></expr></argument>, <argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>os_file_exists</name><argument_list>(<argument><expr><name><name>parsed_data_dir</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <call><name>astrcmpi_n</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>make_data_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsed_data_dir</name></expr></argument>, <argument><expr><name>data_dir</name></expr></argument>, <argument><expr><name>module_name</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>parsed_data_dir</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_binary_from_directory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>parsed_bin_path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bin_path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>directory</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>, <argument><expr><name>bin_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>, <argument><expr><literal type="string">"%module%"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dstr_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy_dstr</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><call><name>get_module_extension</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_file_exists</name><argument_list>(<argument><expr><name><name>parsed_bin_path</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_copy_dstr</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>, <argument><expr><call><name>get_module_extension</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_file_exists</name><argument_list>(<argument><expr><name><name>parsed_bin_path</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><name>parsed_bin_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>process_found_module</name><argument_list>(<argument><expr>struct <name>obs_module_path</name> <operator>*</operator>omp</expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>,
<argument><expr><name>bool</name> <name>directory</name></expr></argument>,
<argument><expr><name>obs_find_module_callback_t</name> <name>callback</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>param</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_module_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>parsed_bin_path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>parsed_data_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bin_found</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <ternary><condition><expr><name>file</name></expr> ?</condition><then> <expr><operator>(</operator><name>file</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>path</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>directory</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>ext</name> <operator>-</operator> <name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsed_bin_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bin_found</name> <operator>=</operator> <call><name>parse_binary_from_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsed_bin_path</name></expr></argument>,
omp<argument><expr><operator>-&gt;</operator><name>bin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>parsed_data_dir</name> <operator>=</operator> <call><name>make_data_directory</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>, omp<argument><expr><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parsed_data_dir</name> <operator>&amp;&amp;</operator> <name>bin_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>bin_path</name></name> <operator>=</operator> <name><name>parsed_bin_path</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>data_path</name></name> <operator>=</operator> <name>parsed_data_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>parsed_data_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsed_bin_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>find_modules_in_path</name><argument_list>(<argument><expr>struct <name>obs_module_path</name> <operator>*</operator>omp</expr></argument>,
<argument><expr><name>obs_find_module_callback_t</name> <name>callback</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>param</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>search_path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>module_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>search_directories</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_glob_t</name> <modifier>*</modifier></type><name>gi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>, omp<argument><expr><operator>-&gt;</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>module_start</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>search_path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="string">"%module%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>module_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>, <argument><expr><name>module_start</name> <operator>-</operator> <name><name>search_path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search_directories</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>dstr_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>search_directories</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>, <argument><expr><call><name>get_module_extension</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_glob</name><argument_list>(<argument><expr><name><name>search_path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gi</name><operator>-&gt;</operator><name>gl_pathc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>search_directories</name> <operator>==</operator> <name><name>gi</name><operator>-&gt;</operator><name>gl_pathv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>directory</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_found_module</name><argument_list>(omp, <argument><expr><name><name>gi</name><operator>-&gt;</operator><name>gl_pathv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>,
<argument><expr><name>search_directories</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>os_globfree</name><argument_list>(<argument><expr><name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>search_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>obs_find_modules</name><parameter_list>(<parameter><decl><type><name>obs_find_module_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obs</name><operator>-&gt;</operator><name>module_paths</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
struct <expr_stmt><expr><name>obs_module_path</name> <operator>*</operator>omp <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>module_paths</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_modules_in_path</name><argument_list>(omp, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_enum_modules</name><parameter_list>(<parameter><decl><type><name>obs_enum_module_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>first_module</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>module</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>module</name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_module</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mod</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>free_locale</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mod</name><operator>-&gt;</operator><name>free_locale</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>loaded</name></name> <operator>&amp;&amp;</operator> <name><name>mod</name><operator>-&gt;</operator><name>unload</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mod</name><operator>-&gt;</operator><name>unload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>mod_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>bin_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>data_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>lookup_t</name> <modifier>*</modifier></type><name>obs_module_load_locale</name><parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_locale</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lookup_t</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name> <operator>||</operator> <operator>!</operator><name>default_locale</name> <operator>||</operator> <operator>!</operator><name>locale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs_module_load_locale: Invalid parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"locale/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>default_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">".ini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>obs_find_module_file</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lookup</name> <operator>=</operator> <call><name>text_lookup_create</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lookup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load '%s' text for module: '%s'"</literal></expr></argument>,
<argument><expr><name>default_locale</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>default_locale</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"/locale/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">".ini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>obs_find_module_file</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>text_lookup_add</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load '%s' text for module: '%s'"</literal></expr></argument>,
<argument><expr><name>locale</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>lookup</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_OBS_DEF</name><parameter_list>(<parameter><type><name>size_var</name></type></parameter>, <parameter><type><name>structure</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct structure data = {0}; if (!size_var) { blog(LOG_ERROR, "Tried to register " #structure " outside of obs_module_load"); return; } if (size_var &gt; sizeof(data)) { blog(LOG_ERROR, "Tried to register " #structure " with size %llu which is more " "than libobs currently supports " "(%llu)", (long long unsigned)size_var, (long long unsigned)sizeof(data)); goto error; } memcpy(&amp;data, info, size_var); da_push_back(dest, &amp;data); } while (false)</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((offsetof(type, val) + sizeof(info-&gt;val) &gt; size) || !info-&gt;val) { blog(LOG_ERROR, "Required value '" #val "' for " "'%s' not found. " #func " failed.", info-&gt;id); goto error; } } while (false)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_ERROR</name><parameter_list>(<parameter><type><name>size_var</name></type></parameter>, <parameter><type><name>structure</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct structure data = {0}; if (!size_var) return; memcpy(&amp;data, info, sizeof(data) &lt; size_var ? sizeof(data) : size_var); if (info-&gt;type_data &amp;&amp; info-&gt;free_type_data) info-&gt;free_type_data(info-&gt;type_data); } while (false)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>source_warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(LOG_WARNING, "obs_register_source: " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(LOG_WARNING, "obs_register_output: " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>encoder_warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(LOG_WARNING, "obs_register_encoder: " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>service_warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(LOG_WARNING, "obs_register_service: " format, ##__VA_ARGS__)</cpp:value></cpp:define>


<function><type><name>void</name></type> <name>obs_register_source_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>array</name> <operator>=</operator> <operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>input_types</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>array</name> <operator>=</operator> <operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>filter_types</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>array</name> <operator>=</operator> <operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>transition_types</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_SCENE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"Tried to register unknown source type: %u"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_source_info2</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"Source '%s' already exists! "</literal>
<literal type="string">"Duplicate library?"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_VIDEO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>|=</operator> <name>OBS_SOURCE_ASYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>get_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"get_width ignored registering "</literal>
<literal type="string">"transition '%s'"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>get_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"get_height ignored registering "</literal>
<literal type="string">"transition '%s'"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>|=</operator> <name>OBS_SOURCE_COMPOSITE</name> <operator>|</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator>
<name>OBS_SOURCE_CUSTOM_DRAW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_COMPOSITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"Source '%s': Composite sources "</literal>
<literal type="string">"cannot be audio sources"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"Source '%s': Composite sources "</literal>
<literal type="string">"cannot be async sources"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL_</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_REQUIRED_VAL(struct obs_source_info, info, val, func)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_name</name></expr></argument>, <argument><expr><name>obs_register_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_FILTER</name> <operator>&amp;&amp;</operator>
<name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_VIDEO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_width</name></expr></argument>, <argument><expr><name>obs_register_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_height</name></expr></argument>, <argument><expr><name>obs_register_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_COMPOSITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>audio_render</name></expr></argument>, <argument><expr><name>obs_register_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_REQUIRED_VAL_</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>source_warn</name><argument_list>(<argument><expr><literal type="string">"Tried to register obs_source_info with size "</literal>
<literal type="string">"%llu which is more than libobs currently "</literal>
<literal type="string">"supports (%llu)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>unsigned</name><operator>)</operator><name>size</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>unsigned</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>data</name><operator>.</operator><name>unversioned_id</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>versioned_id</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>versioned_id</name></expr></argument>, <argument><expr><literal type="string">"%s_v%d"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>id</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>data</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>versioned_id</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_source_info</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>source_types</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>HANDLE_ERROR</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_source_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_register_output_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>find_output</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>output_warn</name><argument_list>(<argument><expr><literal type="string">"Output id '%s' already exists! "</literal>
<literal type="string">"Duplicate library?"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL_</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_REQUIRED_VAL(struct obs_output_info, info, val, func)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_name</name></expr></argument>, <argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>, <argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>encoded_packet</name></expr></argument>, <argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>raw_video</name></expr></argument>,
<argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_AUDIO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_MULTI_TRACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>raw_audio2</name></expr></argument>,
<argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>raw_audio</name></expr></argument>,
<argument><expr><name>obs_register_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_REQUIRED_VAL_</name></cpp:undef>

<expr_stmt><expr><call><name>REGISTER_OBS_DEF</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_output_info</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>output_types</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>HANDLE_ERROR</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_output_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_register_encoder_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>find_encoder</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encoder_warn</name><argument_list>(<argument><expr><literal type="string">"Encoder id '%s' already exists! "</literal>
<literal type="string">"Duplicate library?"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL_</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_REQUIRED_VAL(struct obs_encoder_info, info, val, func)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_name</name></expr></argument>, <argument><expr><name>obs_register_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>obs_register_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>, <argument><expr><name>obs_register_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>caps</name></name> <operator>&amp;</operator> <name>OBS_ENCODER_CAP_PASS_TEXTURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>encode_texture</name></expr></argument>, <argument><expr><name>obs_register_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><name>obs_register_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_frame_size</name></expr></argument>, <argument><expr><name>obs_register_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_REQUIRED_VAL_</name></cpp:undef>

<expr_stmt><expr><call><name>REGISTER_OBS_DEF</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_encoder_info</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>encoder_types</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>HANDLE_ERROR</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_encoder_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_register_service_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>find_service</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>service_warn</name><argument_list>(<argument><expr><literal type="string">"Service id '%s' already exists! "</literal>
<literal type="string">"Duplicate library?"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL_</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_REQUIRED_VAL(struct obs_service_info, info, val, func)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>get_name</name></expr></argument>, <argument><expr><name>obs_register_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>obs_register_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>, <argument><expr><name>obs_register_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_REQUIRED_VAL_</name></cpp:undef>

<expr_stmt><expr><call><name>REGISTER_OBS_DEF</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_service_info</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>service_types</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>HANDLE_ERROR</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_service_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_register_modal_ui_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_modal_ui</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL_</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_REQUIRED_VAL(struct obs_modal_ui, info, val, func)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>obs_register_modal_ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>obs_register_modal_ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>exec</name></expr></argument>, <argument><expr><name>obs_register_modal_ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_REQUIRED_VAL_</name></cpp:undef>

<expr_stmt><expr><call><name>REGISTER_OBS_DEF</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_modal_ui</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>modal_ui_callbacks</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>HANDLE_ERROR</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_modal_ui</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_register_modeless_ui_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_modeless_ui</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUIRED_VAL_</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_REQUIRED_VAL(struct obs_modeless_ui, info, val, func)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>obs_register_modeless_ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>obs_register_modeless_ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_REQUIRED_VAL_</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>obs_register_modeless_ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_REQUIRED_VAL_</name></cpp:undef>

<expr_stmt><expr><call><name>REGISTER_OBS_DEF</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_modeless_ui</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>modeless_ui_callbacks</name></name></expr></argument>,
<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>HANDLE_ERROR</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>obs_modeless_ui</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
