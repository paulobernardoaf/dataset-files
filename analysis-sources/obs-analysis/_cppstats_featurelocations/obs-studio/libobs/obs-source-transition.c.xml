<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-source-transition.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/math-extra.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lock_transition</name><parameter_list>(<parameter><type><name>transition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;transition-&gt;transition_mutex);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlock_transition</name><parameter_list>(<parameter><type><name>transition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;transition-&gt;transition_mutex);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trylock_textures</name><parameter_list>(<parameter><type><name>transition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_trylock(&amp;transition-&gt;transition_tex_mutex)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lock_textures</name><parameter_list>(<parameter><type><name>transition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;transition-&gt;transition_tex_mutex)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlock_textures</name><parameter_list>(<parameter><type><name>transition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;transition-&gt;transition_tex_mutex)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>transition_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_transition_init</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_tex_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_tex_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_alignment</name></name> <operator>=</operator> <name>OBS_ALIGN_LEFT</name> <operator>|</operator> <name>OBS_ALIGN_TOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_free</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_tex_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enter_context</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>graphics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_clear</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>active</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_clear"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>active</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>add_alignment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_cx</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cx</name></name></expr> ?</condition><then> <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cx</name></name></expr> </then><else>: <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_actual_cx</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_cy</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cy</name></name></expr> ?</condition><then> <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cy</name></name></expr> </then><else>: <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_actual_cy</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recalculate_transition_matrix</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tr_cx</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>get_cx</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tr_cy</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>get_cy</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>source_cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>source_cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tr_aspect</name> <init>= <expr><name>tr_cx</name> <operator>/</operator> <name>tr_cy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>source_aspect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>obs_transition_scale_type</name></name></type> <name>scale_type</name> <init>= <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_scale_type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>tr</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>source_cx</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source_cy</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>source_cx</name> <operator>==</operator> <literal type="number">0.0f</literal> <operator>||</operator> <name>source_cy</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>source_aspect</name> <operator>=</operator> <name>source_cx</name> <operator>/</operator> <name>source_cy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale_type</name> <operator>==</operator> <name>OBS_TRANSITION_SCALE_MAX_ONLY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>source_cx</name> <operator>&gt;</operator> <name>tr_cx</name> <operator>||</operator> <name>source_cy</name> <operator>&gt;</operator> <name>tr_cy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scale_type</name> <operator>=</operator> <name>OBS_TRANSITION_SCALE_ASPECT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scale_type</name> <operator>==</operator> <name>OBS_TRANSITION_SCALE_ASPECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>use_width</name> <init>= <expr><name>tr_aspect</name> <operator>&lt;</operator> <name>source_aspect</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><name>use_width</name></expr> ?</condition><then> <expr><name>tr_cx</name> <operator>/</operator> <name>source_cx</name></expr>
</then><else>: <expr><name>tr_cy</name> <operator>/</operator> <name>source_cy</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale_type</name> <operator>==</operator> <name>OBS_TRANSITION_SCALE_STRETCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>tr_cx</name> <operator>/</operator> <name>source_cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>tr_cy</name> <operator>/</operator> <name>source_cy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>source_cx</name> <operator>*=</operator> <name><name>scale</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>source_cy</name> <operator>*=</operator> <name><name>scale</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_alignment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_alignment</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tr_cx</name> <operator>-</operator> <name>source_cx</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tr_cy</name> <operator>-</operator> <name>source_cy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_scale3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_translate3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tr</name><operator>-&gt;</operator><name>transition_matrices</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>recalculate_transition_matrices</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>recalculate_transition_matrix</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recalculate_transition_matrix</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recalculate_transition_size</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cx</name> <init>= <expr><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cy</name> <init>= <expr><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_cx</name> <operator>&gt;</operator> <name>cx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <name>new_cx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_cy</name> <operator>&gt;</operator> <name>cy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>new_cy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_actual_cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_actual_cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_tick</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>recalculate_transition_size</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recalculate_transition_matrices</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_mode</name></name> <operator>==</operator> <name>OBS_TRANSITION_MODE_MANUAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_torque</name></name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_val</name></name> <operator>=</operator>
<name><name>transition</name><operator>-&gt;</operator><name>transition_manual_target</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_val</name></name> <operator>=</operator> <call><name>calc_torquef</name><argument_list>(
<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_val</name></name></expr></argument>,
<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_target</name></name></expr></argument>,
<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_torque</name></name></expr></argument>,
<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_clamp</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>trylock_textures</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_texrender_reset</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_reset</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_textures</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_transition_target</name></name></type> <name>target</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>new_child</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>target</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>old_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>add_success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>already_active</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_child</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_child</name> <operator>==</operator> <name>old_child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>already_active</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>already_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add_success</name> <operator>=</operator> <call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>,
<argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_child</name> <operator>&amp;&amp;</operator> <name>add_success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>old_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>&amp;&amp;</operator> <name>add_success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add_success</name> <operator>=</operator> <call><name>callback</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>add_success</name></expr> ?</condition><then> <expr><name>new_child</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_success</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_cx</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>transition</name><operator>-&gt;</operator><name>transition_cy</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recalculate_transition_size</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recalculate_transition_matrices</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>old_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_transition_get_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_transition_target</name></name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>target</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_get_source"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_transition_get_active_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_get_source"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>||</operator> <name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>activate_child</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>obs_source_add_active_child</name><argument_list>(
<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>activate_transition</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>transition_active</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>||</operator>
<name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_transition_start</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_transition_mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>duration_ms</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>same_as_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>same_as_dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>same_mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_start"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>same_as_source</name> <operator>=</operator> <name>dest</name> <operator>==</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>same_as_dest</name> <operator>=</operator> <name>dest</name> <operator>==</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>same_mode</name> <operator>=</operator> <name>mode</name> <operator>==</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>active</name> <operator>=</operator> <call><name>transition_active</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>same_as_source</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name>OBS_TRANSITION_MODE_MANUAL</name> <operator>&amp;&amp;</operator> <name>same_mode</name> <operator>&amp;&amp;</operator>
<name>same_as_dest</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_val</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_target</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>transition_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>transition</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>transition_start</name></name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_use_fixed_duration</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration_ms</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_fixed_duration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>same_as_dest</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>same_as_source</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_start_time</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_duration</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name>duration_ms</name> <operator>*</operator> <literal type="number">1000000ULL</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_source</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>OBS_TRANSITION_SOURCE_B</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
<argument><expr><name>activate_transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>same_as_dest</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>same_as_source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"source_transition_start"</literal></expr></argument>,
<argument><expr><literal type="string">"transition_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>recalculate_transition_size</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recalculate_transition_matrices</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_set_manual_torque</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>torque</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>clamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_torque</name></name> <operator>=</operator> <name>torque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_clamp</name></name> <operator>=</operator> <name>clamp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_set_manual_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_target</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_set</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>active</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_clear"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_val</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_target</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>active</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>calc_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_mode</name></name> <operator>==</operator> <name>OBS_TRANSITION_MODE_MANUAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>transition</name><operator>-&gt;</operator><name>transition_manual_val</name></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_start_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>-=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_start_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0f</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>ts</name> <operator>/</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>end</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>get_video_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>calc_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>obs_transition_get_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_video_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>get_texture</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_transition_target</name></name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>target</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>gs_texrender_get_texture</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_set_scale_type</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_transition_scale_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_set_scale_type"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_scale_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_transition_scale_type</name></name></type>
<name>obs_transition_get_scale_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_get_scale_type"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>transition</name><operator>-&gt;</operator><name>transition_scale_type</name></name></expr>
</then><else>: <expr><name>OBS_TRANSITION_SCALE_MAX_ONLY</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_set_alignment</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_set_alignment"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_alignment</name></name> <operator>=</operator> <name>alignment</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_transition_get_alignment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_get_alignment"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>transition</name><operator>-&gt;</operator><name>transition_alignment</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_set_size</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_set_size"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_set_size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_cx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_cy</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_save</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> <operator>=</operator> <ternary><condition><expr><call><name>transition_active</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>
</then><else>: <expr><name><name>tr</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_source_a"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>child</name></expr> ?</condition><then> <expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_alignment"</literal></expr></argument>,
<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_mode"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>tr</name><operator>-&gt;</operator><name>transition_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_scale_type"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>tr</name><operator>-&gt;</operator><name>transition_scale_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_cx"</literal></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_cy"</literal></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_load</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_source_a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>alignment</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_alignment"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mode</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scale_type</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_scale_type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cx</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_cx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cy</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transition_cy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>obs_get_source_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name>tr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Cannot set transition '%s' "</literal>
<literal type="string">"to source '%s' due to "</literal>
<literal type="string">"infinite recursion"</literal></expr></argument>,
<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed to find source '%s' for "</literal>
<literal type="string">"transition '%s'"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_alignment</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>alignment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_mode</name></name> <operator>=</operator> <operator>(</operator>enum <name>obs_transition_mode</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_scale_type</name></name> <operator>=</operator> <operator>(</operator>enum <name>obs_transition_scale_type</name><operator>)</operator><name>scale_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cx</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>transition_cy</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>recalculate_transition_size</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recalculate_transition_matrices</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>transition_state</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>transitioning_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>transitioning_audio</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_transition_state</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>transition_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>enum_child</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_callback</name><argument_list>(<argument><expr><name>tr</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_enum_sources</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_child</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><call><name>get_cx</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><call><name>get_cy</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>blank</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gs_texrender_begin</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_clear</name><argument_list>(<argument><expr><name>GS_CLEAR_COLOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blank</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_ortho</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transition</name><operator>-&gt;</operator><name>transition_matrices</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texrender_end</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_transition_stop</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>old_child</name> <init>= <expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_child</name> <operator>&amp;&amp;</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>old_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>old_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>handle_stop</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transition</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>transition_stop</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>transition</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>transition_stop</name></name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"source_transition_stop"</literal></expr></argument>,
<argument><expr><literal type="string">"transition_stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_force_stop</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>handle_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_video_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name>obs_transition_video_render_callback_t</name></type> <name>callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>transition_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name><name>matrices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>locked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>video_stopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_video_render"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_video_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal> <operator>&amp;&amp;</operator> <name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>video_stopped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_transition_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stopped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>copy_transition_state</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_matrices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_matrices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>transitioning_video</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>locked</name> <operator>=</operator> <call><name>trylock_textures</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>transitioning_video</name></name> <operator>&amp;&amp;</operator> <name>locked</name> <operator>&amp;&amp;</operator> <name>callback</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>tex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>render_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_texture</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tex</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transparent_texture</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transparent_texture</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>get_cx</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <call><name>get_cy</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cx</name> <operator>&amp;&amp;</operator> <name>cy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_blend_state_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_blend_function</name><argument_list>(<argument><expr><name>GS_BLEND_ONE</name></expr></argument>, <argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name><name>transition</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>,
<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_blend_state_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>.</operator><name>transitioning_audio</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>matrices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>matrices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>locked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlock_textures</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>video_stopped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"source_transition_video_stop"</literal></expr></argument>,
<argument><expr><literal type="string">"transition_video_stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stopped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_transition_video_render_direct</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_transition_target</name></name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>transition_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name><name>matrices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>video_stopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>render_b</name> <init>= <expr><name>target</name> <operator>==</operator> <name>OBS_TRANSITION_SOURCE_B</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>transitioning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_video_render"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_video_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal> <operator>&amp;&amp;</operator> <name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>video_stopped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_transition_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stopped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>copy_transition_state</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>transitioning</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>transitioning_audio</name></name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>transitioning_video</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_matrices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_matrices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>transitioning</name> <operator>&amp;&amp;</operator> <name>render_b</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>matrices</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>video_stopped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"source_transition_video_stop"</literal></expr></argument>,
<argument><expr><literal type="string">"transition_video_stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stopped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>transitioning</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>get_sample_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sample_ts_offset</name> <init>=
<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample</name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_ts</name> <init>= <expr><name>ts</name> <operator>+</operator> <name>sample_ts_offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>calc_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mix_child</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>,
<parameter><decl><type><name>obs_transition_audio_mix_callback_t</name></type> <name>mix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context_data</name> <init>= <expr><name><name>transition</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>get_sample_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name>mix</name><argument_list>(<argument><expr><name>context_data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>min_ts</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>,
<parameter><decl><type><name>obs_transition_audio_mix_callback_t</name></type> <name>mix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>child</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>child</name><operator>-&gt;</operator><name>audio_pending</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name></type> <name>child_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_get_audio_mix</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>ns_to_audio_frames</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>ts</name> <operator>-</operator> <name>min_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix_idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><operator>&amp;</operator><name><name>child_audio</name><operator>.</operator><name>output</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mixers</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix_idx</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mix_child</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>in</name></expr></argument>,
<argument><expr><name>AUDIO_OUTPUT_FRAMES</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>,
<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>calc_min_ts</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>sources</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sources</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>audio_pending</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>min_ts</name> <operator>||</operator> <name><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>audio_ts</name> <operator>&lt;</operator> <name>min_ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_ts</name> <operator>=</operator> <name><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>audio_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>min_ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>stop_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_transition_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_transition_audio_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>,
<parameter><decl><type><name>obs_transition_audio_mix_callback_t</name></type> <name>mix_a</name></decl></parameter>,
<parameter><decl><type><name>obs_transition_audio_mix_callback_t</name></type> <name>mix_b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>sources</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>transition_state</name></name></type> <name>state</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_audio_render"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_ts</name> <operator>=</operator> <call><name>calc_min_ts</name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_ts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>calc_time</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>min_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal> <operator>&amp;&amp;</operator> <name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stopped</name> <operator>=</operator> <call><name>stop_audio</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transition</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_ts</name> <operator>=</operator> <call><name>calc_min_ts</name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>min_ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_transition_state</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>transition</name><operator>-&gt;</operator><name>transitioning_video</name></name> <operator>&amp;&amp;</operator>
<name><name>transition</name><operator>-&gt;</operator><name>transitioning_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stopped</name> <operator>=</operator> <call><name>stop_audio</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_ts</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>transitioning_audio</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_audio</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>audio</name></expr></argument>,
<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>mix_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_audio</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>audio</name></expr></argument>,
<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>mix_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>TOTAL_AUDIO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stopped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_stop</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ts_out</name> <operator>=</operator> <name>min_ts</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><name>min_ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_enable_fixed</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_enable_fixed"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_use_fixed_duration</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transition</name><operator>-&gt;</operator><name>transition_fixed_duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_transition_fixed</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>transition_valid</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><literal type="string">"obs_transition_fixed"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>transition</name><operator>-&gt;</operator><name>transition_use_fixed_duration</name></name></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_source_t</name> <modifier>*</modifier></type>
<name>copy_source_state</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr_dest</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr_source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>old_child</name> <init>= <expr><name><name>tr_dest</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>new_child</name> <init>= <expr><name><name>tr_source</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name> <init>= <expr><name><name>tr_source</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_child</name> <operator>&amp;&amp;</operator> <name><name>tr_dest</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>, <argument><expr><name>old_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tr_dest</name><operator>-&gt;</operator><name>transition_sources</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>new_child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr_dest</name><operator>-&gt;</operator><name>transition_source_active</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <name>new_child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>, <argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>new_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>old_child</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_swap_begin</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr_dest</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr_source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>old_children</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tr_dest</name> <operator>==</operator> <name>tr_source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_textures</name><argument_list>(<argument><expr><name>tr_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lock_textures</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>tr_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lock_transition</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>old_children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>copy_source_state</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>, <argument><expr><name>tr_source</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_transition</name><argument_list>(<argument><expr><name>tr_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>old_children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_transition_swap_end</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr_dest</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr_source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tr_dest</name> <operator>==</operator> <name>tr_source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_transition_clear</name><argument_list>(<argument><expr><name>tr_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>tr_dest</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>tr_source</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tr_dest</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr_source</name><operator>-&gt;</operator><name>transition_texrender</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>unlock_textures</name><argument_list>(<argument><expr><name>tr_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_textures</name><argument_list>(<argument><expr><name>tr_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
