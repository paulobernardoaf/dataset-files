<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-hotkey.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>size_t</name></type> <name>obs_hotkey_id</name>;</typedef>
<typedef>typedef <type><name>size_t</name></type> <name>obs_hotkey_pair_id</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_INVALID_HOTKEY_ID</name></cpp:macro> <cpp:value>(~(obs_hotkey_id)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_INVALID_HOTKEY_PAIR_ID</name></cpp:macro> <cpp:value>(~(obs_hotkey_pair_id)0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>OBS_INVALID_HOTKEY_ID</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>OBS_INVALID_HOTKEY_PAIR_ID</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_MOUSE_LEN</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<enum>enum <name>obs_key</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_HOTKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-hotkeys.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OBS_HOTKEY</name></cpp:undef>
<decl><name>OBS_KEY_LAST_VALUE</name></decl> 
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>obs_key</name></name></type> <name>obs_key_t</name>;</typedef>

<struct>struct <name>obs_key_combination</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_key_t</name></type> <name>key</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>obs_key_combination</name></name></type> <name>obs_key_combination_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>obs_hotkey</name></name></type> <name>obs_hotkey_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>obs_hotkey_binding</name></name></type> <name>obs_hotkey_binding_t</name>;</typedef>

<enum>enum <name>obs_hotkey_registerer_type</name> <block>{
<decl><name>OBS_HOTKEY_REGISTERER_FRONTEND</name></decl>,
<decl><name>OBS_HOTKEY_REGISTERER_SOURCE</name></decl>,
<decl><name>OBS_HOTKEY_REGISTERER_OUTPUT</name></decl>,
<decl><name>OBS_HOTKEY_REGISTERER_ENCODER</name></decl>,
<decl><name>OBS_HOTKEY_REGISTERER_SERVICE</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>obs_hotkey_registerer_type</name></name></type> <name>obs_hotkey_registerer_t</name>;</typedef>



<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_hotkey_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_hotkey_get_description</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_hotkey_registerer_t</name></type>
<name>obs_hotkey_get_registerer_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>obs_hotkey_get_registerer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_get_pair_partner_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_key_combination_t</name></type>
<name>obs_hotkey_binding_get_key_combination</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type>
<name>obs_hotkey_binding_get_hotkey_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_hotkey_t</name> <modifier>*</modifier></type>
<name>obs_hotkey_binding_get_hotkey</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_set_name</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_set_description</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_pair_set_names</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_pair_set_descriptions</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc1</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>obs_hotkeys_translations</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>del</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>home</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>page_up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>page_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scroll_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caps_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>backspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_multiply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_minus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_plus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_decimal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_multiply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_minus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_plus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_decimal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apple_keypad_equal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mouse_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escape</name></decl>;</decl_stmt>
}</block>;</struct>






<function_decl><type><name>EXPORT</name> <name>void</name></type>
<name>obs_hotkeys_set_translations_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_hotkeys_translations</name></name> <modifier>*</modifier></type><name>translations</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_hotkeys_set_translations</name><parameter_list>(<parameter><type><name>translations</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_hotkeys_set_translations_s( translations, sizeof(struct obs_hotkeys_translations))</cpp:value></cpp:define>



<function_decl><type><name>EXPORT</name> <name>void</name></type>
<name>obs_hotkeys_set_audio_hotkeys_translations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mute</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unmute</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_mute</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_talk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkeys_set_sceneitem_hotkeys_translations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hide</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>obs_hotkey_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_register_frontend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_register_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_register_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_register_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_id</name></type> <name>obs_hotkey_register_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>obs_hotkey_active_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_frontend</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_encoder</name><parameter_list>(
<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_output</name><parameter_list>(
<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_service</name><parameter_list>(
<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_source</name><parameter_list>(
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_unregister</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_pair_unregister</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_load_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_key_combination_t</name> <modifier>*</modifier></type><name>combinations</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_load</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkeys_load_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkeys_load_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkeys_load_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkeys_load_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_pair_load</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_hotkey_save</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_pair_save</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_data0</name></decl></parameter>,
<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_data1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>obs_hotkey_enum_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_enum_hotkeys</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_enum_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>obs_hotkey_binding_enum_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_enum_hotkey_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_enum_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_inject_event</name><parameter_list>(<parameter><decl><type><name>obs_key_combination_t</name></type> <name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_enable_background_press</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_enable_strict_modifiers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>obs_hotkey_callback_router_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type>
<name>obs_hotkey_set_callback_routing_func</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_callback_router_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_trigger_routed_callback</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_enable_callback_rerouting</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>obs_hotkey_atomic_update_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_hotkey_update_atomic</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_atomic_update_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>dstr</name>;</struct_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_key_to_str</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_key_combination_to_str</name><parameter_list>(<parameter><decl><type><name>obs_key_combination_t</name></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_key_t</name></type> <name>obs_key_from_virtual_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>obs_key_to_virtual_key</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_key_to_name</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_key_t</name></type> <name>obs_key_from_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_key_combination_is_empty</name><parameter_list>(<parameter><decl><type><name>obs_key_combination_t</name></type> <name>combo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>combo</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;&amp;</operator> <name><name>combo</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
