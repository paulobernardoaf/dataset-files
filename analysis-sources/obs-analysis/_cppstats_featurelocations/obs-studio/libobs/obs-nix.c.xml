<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-nix.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_XINPUT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xinput.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib-xcb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XF86keysym.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Sunkeysym.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_module_extension</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">".so"</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STRING</name></cpp:macro> <cpp:value>"64bit"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STRING</name></cpp:macro> <cpp:value>"32bit"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>module_bin</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"../../obs-plugins/"</literal> <name>BIT_STRING</name></expr>,
<expr><name>OBS_INSTALL_PREFIX</name>
<literal type="string">"/"</literal> <name>OBS_PLUGIN_DESTINATION</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>module_data</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>OBS_DATA_PATH</name> <literal type="string">"/obs-plugins/%module%"</literal></expr>,
<expr><name>OBS_INSTALL_DATA_PATH</name> <literal type="string">"/obs-plugins/%module%"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>module_patterns_size</name> <init>=
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>module_bin</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>module_bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add_default_module_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>module_patterns_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_add_module_path</name><argument_list>(<argument><expr><name><name>module_bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>module_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type><name>find_libobs_data_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>output</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>OBS_DATA_PATH</name> <literal type="string">"/libobs/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>output</name><operator>.</operator><name>array</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>OBS_INSTALL_PREFIX</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>OBS_INSTALL_DATA_PATH</name> <literal type="string">"/libobs/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>output</name><operator>.</operator><name>array</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_cores</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Physical Cores: %d, Logical Cores: %d"</literal></expr></argument>,
<argument><expr><call><name>os_get_physical_cores</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>os_get_logical_cores</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>physical_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_physical_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linecap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>proc_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>proc_speed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/cpuinfo"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linecap</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"model name"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_name</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_name</name></expr></argument>, <argument><expr><name><name>proc_name</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_depad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"physical id"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>physical_id</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"cpu MHz"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>, <argument><expr><name><name>proc_speed</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_depad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>physical_id</name> <operator>!=</operator> <name>last_physical_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_physical_id</name> <operator>=</operator> <name>physical_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU Name: %s"</literal></expr></argument>, <argument><expr><name><name>proc_name</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU Speed: %sMHz"</literal></expr></argument>, <argument><expr><name><name>proc_speed</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_speed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linecap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>proc_speed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/var/run/dmesg.boot"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU: Missing /var/run/dmesg.boot !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linecap</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"CPU: "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_ncopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU Speed: %sMHz"</literal></expr></argument>, <argument><expr><name><name>proc_speed</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc_speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_HW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>HW_MODEL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU Name: %s"</literal></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>log_processor_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_processor_speed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_memory_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sysinfo</name></name></type> <name>info</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Physical Memory: %"</literal> <name>PRIu64</name> <literal type="string">"MB Total, %"</literal> <name>PRIu64</name> <literal type="string">"MB Free"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>totalram</name></name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>mem_unit</name></name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>freeram</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>bufferram</name></name><operator>)</operator> <operator>*</operator>
<name><name>info</name><operator>.</operator><name>mem_unit</name></name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_kernel_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>info</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Kernel Version: %s %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_x_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dpy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Unable to open X display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>protocol_version</name> <init>= <expr><call><name>ProtocolVersion</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocol_revision</name> <init>= <expr><call><name>ProtocolRevision</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vendor_release</name> <init>= <expr><call><name>VendorRelease</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor_name</name> <init>= <expr><call><name>ServerVendor</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>vendor_name</name></expr></argument>, <argument><expr><literal type="string">"X.Org"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Window System: X%d.%d, Vendor: %s, Version: %d"</literal>
<literal type="string">".%d.%d"</literal></expr></argument>,
<argument><expr><name>protocol_version</name></expr></argument>, <argument><expr><name>protocol_revision</name></expr></argument>, <argument><expr><name>vendor_name</name></expr></argument>,
<argument><expr><name>vendor_release</name> <operator>/</operator> <literal type="number">10000000</literal></expr></argument>, <argument><expr><operator>(</operator><name>vendor_release</name> <operator>/</operator> <literal type="number">100000</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>,
<argument><expr><operator>(</operator><name>vendor_release</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Window System: X%d.%d - vendor string: %s - "</literal>
<literal type="string">"vendor release: %d"</literal></expr></argument>,
<argument><expr><name>protocol_version</name></expr></argument>, <argument><expr><name>protocol_revision</name></expr></argument>, <argument><expr><name>vendor_name</name></expr></argument>,
<argument><expr><name>vendor_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_distribution_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linecap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>distro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/etc/os-release"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Distribution: Missing /etc/os-release !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>distro</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linecap</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>distro</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>distro</name></expr></argument>, <argument><expr><name><name>distro</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"VERSION_ID"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><name><name>version</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Distribution: %s %s"</literal></expr></argument>, <argument><expr><name><name>distro</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>version</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>distro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>log_system_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>log_processor_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>log_processor_cores</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_memory_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_kernel_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>log_distribution_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>log_x_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


















<struct>struct <name>keycode_list</name> <block>{
<macro><name>DARRAY</name><argument_list>(<argument>xcb_keycode_t</argument>)</argument_list></macro> <expr_stmt><expr><name>list</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>obs_hotkeys_platform</name> <block>{
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_keysym_t</name></type> <name><name>base_keysyms</name><index>[<expr><name>OBS_KEY_LAST_VALUE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>keycode_list</name></name></type> <name><name>keycodes</name><index>[<expr><name>OBS_KEY_LAST_VALUE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_keycode_t</name></type> <name>min_keycode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_keycode_t</name></type> <name>super_l_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_keycode_t</name></type> <name>super_r_code</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>xcb_keysym_t</name> <modifier>*</modifier></type><name>keysyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_keysyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syms_per_code</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_XINPUT</name></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name><name>pressed</name><index>[<expr><name>XINPUT_MOUSE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>update</name><index>[<expr><name>XINPUT_MOUSE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>button_pressed</name><index>[<expr><name>XINPUT_MOUSE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_1</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_2</name></cpp:macro> <cpp:value>(2 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_3</name></cpp:macro> <cpp:value>(3 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_4</name></cpp:macro> <cpp:value>(4 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_5</name></cpp:macro> <cpp:value>(5 &lt;&lt; 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_keysym</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_KEY_RETURN</name></expr>:</case>
<return>return <expr><name>XK_Return</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ESCAPE</name></expr>:</case>
<return>return <expr><name>XK_Escape</name></expr>;</return>
<case>case <expr><name>OBS_KEY_TAB</name></expr>:</case>
<return>return <expr><name>XK_Tab</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BACKSPACE</name></expr>:</case>
<return>return <expr><name>XK_BackSpace</name></expr>;</return>
<case>case <expr><name>OBS_KEY_INSERT</name></expr>:</case>
<return>return <expr><name>XK_Insert</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DELETE</name></expr>:</case>
<return>return <expr><name>XK_Delete</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PAUSE</name></expr>:</case>
<return>return <expr><name>XK_Pause</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PRINT</name></expr>:</case>
<return>return <expr><name>XK_Print</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HOME</name></expr>:</case>
<return>return <expr><name>XK_Home</name></expr>;</return>
<case>case <expr><name>OBS_KEY_END</name></expr>:</case>
<return>return <expr><name>XK_End</name></expr>;</return>
<case>case <expr><name>OBS_KEY_LEFT</name></expr>:</case>
<return>return <expr><name>XK_Left</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UP</name></expr>:</case>
<return>return <expr><name>XK_Up</name></expr>;</return>
<case>case <expr><name>OBS_KEY_RIGHT</name></expr>:</case>
<return>return <expr><name>XK_Right</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DOWN</name></expr>:</case>
<return>return <expr><name>XK_Down</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PAGEUP</name></expr>:</case>
<return>return <expr><name>XK_Prior</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PAGEDOWN</name></expr>:</case>
<return>return <expr><name>XK_Next</name></expr>;</return>

<case>case <expr><name>OBS_KEY_SHIFT</name></expr>:</case>
<return>return <expr><name>XK_Shift_L</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CONTROL</name></expr>:</case>
<return>return <expr><name>XK_Control_L</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ALT</name></expr>:</case>
<return>return <expr><name>XK_Alt_L</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CAPSLOCK</name></expr>:</case>
<return>return <expr><name>XK_Caps_Lock</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMLOCK</name></expr>:</case>
<return>return <expr><name>XK_Num_Lock</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SCROLLLOCK</name></expr>:</case>
<return>return <expr><name>XK_Scroll_Lock</name></expr>;</return>

<case>case <expr><name>OBS_KEY_F1</name></expr>:</case>
<return>return <expr><name>XK_F1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F2</name></expr>:</case>
<return>return <expr><name>XK_F2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F3</name></expr>:</case>
<return>return <expr><name>XK_F3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F4</name></expr>:</case>
<return>return <expr><name>XK_F4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F5</name></expr>:</case>
<return>return <expr><name>XK_F5</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F6</name></expr>:</case>
<return>return <expr><name>XK_F6</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F7</name></expr>:</case>
<return>return <expr><name>XK_F7</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F8</name></expr>:</case>
<return>return <expr><name>XK_F8</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F9</name></expr>:</case>
<return>return <expr><name>XK_F9</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F10</name></expr>:</case>
<return>return <expr><name>XK_F10</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F11</name></expr>:</case>
<return>return <expr><name>XK_F11</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F12</name></expr>:</case>
<return>return <expr><name>XK_F12</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F13</name></expr>:</case>
<return>return <expr><name>XK_F13</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F14</name></expr>:</case>
<return>return <expr><name>XK_F14</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F15</name></expr>:</case>
<return>return <expr><name>XK_F15</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F16</name></expr>:</case>
<return>return <expr><name>XK_F16</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F17</name></expr>:</case>
<return>return <expr><name>XK_F17</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F18</name></expr>:</case>
<return>return <expr><name>XK_F18</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F19</name></expr>:</case>
<return>return <expr><name>XK_F19</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F20</name></expr>:</case>
<return>return <expr><name>XK_F20</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F21</name></expr>:</case>
<return>return <expr><name>XK_F21</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F22</name></expr>:</case>
<return>return <expr><name>XK_F22</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F23</name></expr>:</case>
<return>return <expr><name>XK_F23</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F24</name></expr>:</case>
<return>return <expr><name>XK_F24</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F25</name></expr>:</case>
<return>return <expr><name>XK_F25</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F26</name></expr>:</case>
<return>return <expr><name>XK_F26</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F27</name></expr>:</case>
<return>return <expr><name>XK_F27</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F28</name></expr>:</case>
<return>return <expr><name>XK_F28</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F29</name></expr>:</case>
<return>return <expr><name>XK_F29</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F30</name></expr>:</case>
<return>return <expr><name>XK_F30</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F31</name></expr>:</case>
<return>return <expr><name>XK_F31</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F32</name></expr>:</case>
<return>return <expr><name>XK_F32</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F33</name></expr>:</case>
<return>return <expr><name>XK_F33</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F34</name></expr>:</case>
<return>return <expr><name>XK_F34</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F35</name></expr>:</case>
<return>return <expr><name>XK_F35</name></expr>;</return>

<case>case <expr><name>OBS_KEY_MENU</name></expr>:</case>
<return>return <expr><name>XK_Menu</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HYPER_L</name></expr>:</case>
<return>return <expr><name>XK_Hyper_L</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HYPER_R</name></expr>:</case>
<return>return <expr><name>XK_Hyper_R</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HELP</name></expr>:</case>
<return>return <expr><name>XK_Help</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CANCEL</name></expr>:</case>
<return>return <expr><name>XK_Cancel</name></expr>;</return>
<case>case <expr><name>OBS_KEY_FIND</name></expr>:</case>
<return>return <expr><name>XK_Find</name></expr>;</return>
<case>case <expr><name>OBS_KEY_REDO</name></expr>:</case>
<return>return <expr><name>XK_Redo</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UNDO</name></expr>:</case>
<return>return <expr><name>XK_Undo</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SPACE</name></expr>:</case>
<return>return <expr><name>XK_space</name></expr>;</return>

<case>case <expr><name>OBS_KEY_COPY</name></expr>:</case>
<return>return <expr><name>XF86XK_Copy</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CUT</name></expr>:</case>
<return>return <expr><name>XF86XK_Cut</name></expr>;</return>
<case>case <expr><name>OBS_KEY_OPEN</name></expr>:</case>
<return>return <expr><name>XF86XK_Open</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PASTE</name></expr>:</case>
<return>return <expr><name>XF86XK_Paste</name></expr>;</return>
<case>case <expr><name>OBS_KEY_FRONT</name></expr>:</case>
<return>return <expr><name>SunXK_Front</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PROPS</name></expr>:</case>
<return>return <expr><name>SunXK_Props</name></expr>;</return>

<case>case <expr><name>OBS_KEY_EXCLAM</name></expr>:</case>
<return>return <expr><name>XK_exclam</name></expr>;</return>
<case>case <expr><name>OBS_KEY_QUOTEDBL</name></expr>:</case>
<return>return <expr><name>XK_quotedbl</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMBERSIGN</name></expr>:</case>
<return>return <expr><name>XK_numbersign</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DOLLAR</name></expr>:</case>
<return>return <expr><name>XK_dollar</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PERCENT</name></expr>:</case>
<return>return <expr><name>XK_percent</name></expr>;</return>
<case>case <expr><name>OBS_KEY_AMPERSAND</name></expr>:</case>
<return>return <expr><name>XK_ampersand</name></expr>;</return>
<case>case <expr><name>OBS_KEY_APOSTROPHE</name></expr>:</case>
<return>return <expr><name>XK_apostrophe</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PARENLEFT</name></expr>:</case>
<return>return <expr><name>XK_parenleft</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PARENRIGHT</name></expr>:</case>
<return>return <expr><name>XK_parenright</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ASTERISK</name></expr>:</case>
<return>return <expr><name>XK_asterisk</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PLUS</name></expr>:</case>
<return>return <expr><name>XK_plus</name></expr>;</return>
<case>case <expr><name>OBS_KEY_COMMA</name></expr>:</case>
<return>return <expr><name>XK_comma</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MINUS</name></expr>:</case>
<return>return <expr><name>XK_minus</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PERIOD</name></expr>:</case>
<return>return <expr><name>XK_period</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SLASH</name></expr>:</case>
<return>return <expr><name>XK_slash</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0</name></expr>:</case>
<return>return <expr><name>XK_0</name></expr>;</return>
<case>case <expr><name>OBS_KEY_1</name></expr>:</case>
<return>return <expr><name>XK_1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_2</name></expr>:</case>
<return>return <expr><name>XK_2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_3</name></expr>:</case>
<return>return <expr><name>XK_3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_4</name></expr>:</case>
<return>return <expr><name>XK_4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_5</name></expr>:</case>
<return>return <expr><name>XK_5</name></expr>;</return>
<case>case <expr><name>OBS_KEY_6</name></expr>:</case>
<return>return <expr><name>XK_6</name></expr>;</return>
<case>case <expr><name>OBS_KEY_7</name></expr>:</case>
<return>return <expr><name>XK_7</name></expr>;</return>
<case>case <expr><name>OBS_KEY_8</name></expr>:</case>
<return>return <expr><name>XK_8</name></expr>;</return>
<case>case <expr><name>OBS_KEY_9</name></expr>:</case>
<return>return <expr><name>XK_9</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMEQUAL</name></expr>:</case>
<return>return <expr><name>XK_KP_Equal</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMASTERISK</name></expr>:</case>
<return>return <expr><name>XK_KP_Multiply</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMPLUS</name></expr>:</case>
<return>return <expr><name>XK_KP_Add</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMCOMMA</name></expr>:</case>
<return>return <expr><name>XK_KP_Separator</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMMINUS</name></expr>:</case>
<return>return <expr><name>XK_KP_Subtract</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMPERIOD</name></expr>:</case>
<return>return <expr><name>XK_KP_Decimal</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMSLASH</name></expr>:</case>
<return>return <expr><name>XK_KP_Divide</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM0</name></expr>:</case>
<return>return <expr><name>XK_KP_0</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM1</name></expr>:</case>
<return>return <expr><name>XK_KP_1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM2</name></expr>:</case>
<return>return <expr><name>XK_KP_2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM3</name></expr>:</case>
<return>return <expr><name>XK_KP_3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM4</name></expr>:</case>
<return>return <expr><name>XK_KP_4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM5</name></expr>:</case>
<return>return <expr><name>XK_KP_5</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM6</name></expr>:</case>
<return>return <expr><name>XK_KP_6</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM7</name></expr>:</case>
<return>return <expr><name>XK_KP_7</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM8</name></expr>:</case>
<return>return <expr><name>XK_KP_8</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM9</name></expr>:</case>
<return>return <expr><name>XK_KP_9</name></expr>;</return>
<case>case <expr><name>OBS_KEY_COLON</name></expr>:</case>
<return>return <expr><name>XK_colon</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SEMICOLON</name></expr>:</case>
<return>return <expr><name>XK_semicolon</name></expr>;</return>
<case>case <expr><name>OBS_KEY_LESS</name></expr>:</case>
<return>return <expr><name>XK_less</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EQUAL</name></expr>:</case>
<return>return <expr><name>XK_equal</name></expr>;</return>
<case>case <expr><name>OBS_KEY_GREATER</name></expr>:</case>
<return>return <expr><name>XK_greater</name></expr>;</return>
<case>case <expr><name>OBS_KEY_QUESTION</name></expr>:</case>
<return>return <expr><name>XK_question</name></expr>;</return>
<case>case <expr><name>OBS_KEY_AT</name></expr>:</case>
<return>return <expr><name>XK_at</name></expr>;</return>
<case>case <expr><name>OBS_KEY_A</name></expr>:</case>
<return>return <expr><name>XK_A</name></expr>;</return>
<case>case <expr><name>OBS_KEY_B</name></expr>:</case>
<return>return <expr><name>XK_B</name></expr>;</return>
<case>case <expr><name>OBS_KEY_C</name></expr>:</case>
<return>return <expr><name>XK_C</name></expr>;</return>
<case>case <expr><name>OBS_KEY_D</name></expr>:</case>
<return>return <expr><name>XK_D</name></expr>;</return>
<case>case <expr><name>OBS_KEY_E</name></expr>:</case>
<return>return <expr><name>XK_E</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F</name></expr>:</case>
<return>return <expr><name>XK_F</name></expr>;</return>
<case>case <expr><name>OBS_KEY_G</name></expr>:</case>
<return>return <expr><name>XK_G</name></expr>;</return>
<case>case <expr><name>OBS_KEY_H</name></expr>:</case>
<return>return <expr><name>XK_H</name></expr>;</return>
<case>case <expr><name>OBS_KEY_I</name></expr>:</case>
<return>return <expr><name>XK_I</name></expr>;</return>
<case>case <expr><name>OBS_KEY_J</name></expr>:</case>
<return>return <expr><name>XK_J</name></expr>;</return>
<case>case <expr><name>OBS_KEY_K</name></expr>:</case>
<return>return <expr><name>XK_K</name></expr>;</return>
<case>case <expr><name>OBS_KEY_L</name></expr>:</case>
<return>return <expr><name>XK_L</name></expr>;</return>
<case>case <expr><name>OBS_KEY_M</name></expr>:</case>
<return>return <expr><name>XK_M</name></expr>;</return>
<case>case <expr><name>OBS_KEY_N</name></expr>:</case>
<return>return <expr><name>XK_N</name></expr>;</return>
<case>case <expr><name>OBS_KEY_O</name></expr>:</case>
<return>return <expr><name>XK_O</name></expr>;</return>
<case>case <expr><name>OBS_KEY_P</name></expr>:</case>
<return>return <expr><name>XK_P</name></expr>;</return>
<case>case <expr><name>OBS_KEY_Q</name></expr>:</case>
<return>return <expr><name>XK_Q</name></expr>;</return>
<case>case <expr><name>OBS_KEY_R</name></expr>:</case>
<return>return <expr><name>XK_R</name></expr>;</return>
<case>case <expr><name>OBS_KEY_S</name></expr>:</case>
<return>return <expr><name>XK_S</name></expr>;</return>
<case>case <expr><name>OBS_KEY_T</name></expr>:</case>
<return>return <expr><name>XK_T</name></expr>;</return>
<case>case <expr><name>OBS_KEY_U</name></expr>:</case>
<return>return <expr><name>XK_U</name></expr>;</return>
<case>case <expr><name>OBS_KEY_V</name></expr>:</case>
<return>return <expr><name>XK_V</name></expr>;</return>
<case>case <expr><name>OBS_KEY_W</name></expr>:</case>
<return>return <expr><name>XK_W</name></expr>;</return>
<case>case <expr><name>OBS_KEY_X</name></expr>:</case>
<return>return <expr><name>XK_X</name></expr>;</return>
<case>case <expr><name>OBS_KEY_Y</name></expr>:</case>
<return>return <expr><name>XK_Y</name></expr>;</return>
<case>case <expr><name>OBS_KEY_Z</name></expr>:</case>
<return>return <expr><name>XK_Z</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BRACKETLEFT</name></expr>:</case>
<return>return <expr><name>XK_bracketleft</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BACKSLASH</name></expr>:</case>
<return>return <expr><name>XK_backslash</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BRACKETRIGHT</name></expr>:</case>
<return>return <expr><name>XK_bracketright</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ASCIICIRCUM</name></expr>:</case>
<return>return <expr><name>XK_asciicircum</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UNDERSCORE</name></expr>:</case>
<return>return <expr><name>XK_underscore</name></expr>;</return>
<case>case <expr><name>OBS_KEY_QUOTELEFT</name></expr>:</case>
<return>return <expr><name>XK_quoteleft</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BRACELEFT</name></expr>:</case>
<return>return <expr><name>XK_braceleft</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BAR</name></expr>:</case>
<return>return <expr><name>XK_bar</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BRACERIGHT</name></expr>:</case>
<return>return <expr><name>XK_braceright</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ASCIITILDE</name></expr>:</case>
<return>return <expr><name>XK_grave</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NOBREAKSPACE</name></expr>:</case>
<return>return <expr><name>XK_nobreakspace</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EXCLAMDOWN</name></expr>:</case>
<return>return <expr><name>XK_exclamdown</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CENT</name></expr>:</case>
<return>return <expr><name>XK_cent</name></expr>;</return>
<case>case <expr><name>OBS_KEY_STERLING</name></expr>:</case>
<return>return <expr><name>XK_sterling</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CURRENCY</name></expr>:</case>
<return>return <expr><name>XK_currency</name></expr>;</return>
<case>case <expr><name>OBS_KEY_YEN</name></expr>:</case>
<return>return <expr><name>XK_yen</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BROKENBAR</name></expr>:</case>
<return>return <expr><name>XK_brokenbar</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SECTION</name></expr>:</case>
<return>return <expr><name>XK_section</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_diaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_COPYRIGHT</name></expr>:</case>
<return>return <expr><name>XK_copyright</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ORDFEMININE</name></expr>:</case>
<return>return <expr><name>XK_ordfeminine</name></expr>;</return>
<case>case <expr><name>OBS_KEY_GUILLEMOTLEFT</name></expr>:</case>
<return>return <expr><name>XK_guillemotleft</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NOTSIGN</name></expr>:</case>
<return>return <expr><name>XK_notsign</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HYPHEN</name></expr>:</case>
<return>return <expr><name>XK_hyphen</name></expr>;</return>
<case>case <expr><name>OBS_KEY_REGISTERED</name></expr>:</case>
<return>return <expr><name>XK_registered</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MACRON</name></expr>:</case>
<return>return <expr><name>XK_macron</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEGREE</name></expr>:</case>
<return>return <expr><name>XK_degree</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PLUSMINUS</name></expr>:</case>
<return>return <expr><name>XK_plusminus</name></expr>;</return>
<case>case <expr><name>OBS_KEY_TWOSUPERIOR</name></expr>:</case>
<return>return <expr><name>XK_twosuperior</name></expr>;</return>
<case>case <expr><name>OBS_KEY_THREESUPERIOR</name></expr>:</case>
<return>return <expr><name>XK_threesuperior</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ACUTE</name></expr>:</case>
<return>return <expr><name>XK_acute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MU</name></expr>:</case>
<return>return <expr><name>XK_mu</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PARAGRAPH</name></expr>:</case>
<return>return <expr><name>XK_paragraph</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PERIODCENTERED</name></expr>:</case>
<return>return <expr><name>XK_periodcentered</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CEDILLA</name></expr>:</case>
<return>return <expr><name>XK_cedilla</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ONESUPERIOR</name></expr>:</case>
<return>return <expr><name>XK_onesuperior</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MASCULINE</name></expr>:</case>
<return>return <expr><name>XK_masculine</name></expr>;</return>
<case>case <expr><name>OBS_KEY_GUILLEMOTRIGHT</name></expr>:</case>
<return>return <expr><name>XK_guillemotright</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ONEQUARTER</name></expr>:</case>
<return>return <expr><name>XK_onequarter</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ONEHALF</name></expr>:</case>
<return>return <expr><name>XK_onehalf</name></expr>;</return>
<case>case <expr><name>OBS_KEY_THREEQUARTERS</name></expr>:</case>
<return>return <expr><name>XK_threequarters</name></expr>;</return>
<case>case <expr><name>OBS_KEY_QUESTIONDOWN</name></expr>:</case>
<return>return <expr><name>XK_questiondown</name></expr>;</return>
<case>case <expr><name>OBS_KEY_AGRAVE</name></expr>:</case>
<return>return <expr><name>XK_Agrave</name></expr>;</return>
<case>case <expr><name>OBS_KEY_AACUTE</name></expr>:</case>
<return>return <expr><name>XK_Aacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ACIRCUMFLEX</name></expr>:</case>
<return>return <expr><name>XK_Acircumflex</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ATILDE</name></expr>:</case>
<return>return <expr><name>XK_Atilde</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ADIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_Adiaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ARING</name></expr>:</case>
<return>return <expr><name>XK_Aring</name></expr>;</return>
<case>case <expr><name>OBS_KEY_AE</name></expr>:</case>
<return>return <expr><name>XK_AE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CCEDILLA</name></expr>:</case>
<return>return <expr><name>XK_cedilla</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EGRAVE</name></expr>:</case>
<return>return <expr><name>XK_Egrave</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EACUTE</name></expr>:</case>
<return>return <expr><name>XK_Eacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ECIRCUMFLEX</name></expr>:</case>
<return>return <expr><name>XK_Ecircumflex</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EDIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_Ediaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_IGRAVE</name></expr>:</case>
<return>return <expr><name>XK_Igrave</name></expr>;</return>
<case>case <expr><name>OBS_KEY_IACUTE</name></expr>:</case>
<return>return <expr><name>XK_Iacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ICIRCUMFLEX</name></expr>:</case>
<return>return <expr><name>XK_Icircumflex</name></expr>;</return>
<case>case <expr><name>OBS_KEY_IDIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_Idiaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ETH</name></expr>:</case>
<return>return <expr><name>XK_ETH</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NTILDE</name></expr>:</case>
<return>return <expr><name>XK_Ntilde</name></expr>;</return>
<case>case <expr><name>OBS_KEY_OGRAVE</name></expr>:</case>
<return>return <expr><name>XK_Ograve</name></expr>;</return>
<case>case <expr><name>OBS_KEY_OACUTE</name></expr>:</case>
<return>return <expr><name>XK_Oacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_OCIRCUMFLEX</name></expr>:</case>
<return>return <expr><name>XK_Ocircumflex</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ODIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_Odiaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MULTIPLY</name></expr>:</case>
<return>return <expr><name>XK_multiply</name></expr>;</return>
<case>case <expr><name>OBS_KEY_OOBLIQUE</name></expr>:</case>
<return>return <expr><name>XK_Ooblique</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UGRAVE</name></expr>:</case>
<return>return <expr><name>XK_Ugrave</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UACUTE</name></expr>:</case>
<return>return <expr><name>XK_Uacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UCIRCUMFLEX</name></expr>:</case>
<return>return <expr><name>XK_Ucircumflex</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UDIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_Udiaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_YACUTE</name></expr>:</case>
<return>return <expr><name>XK_Yacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_THORN</name></expr>:</case>
<return>return <expr><name>XK_Thorn</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SSHARP</name></expr>:</case>
<return>return <expr><name>XK_ssharp</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DIVISION</name></expr>:</case>
<return>return <expr><name>XK_division</name></expr>;</return>
<case>case <expr><name>OBS_KEY_YDIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_Ydiaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MULTI_KEY</name></expr>:</case>
<return>return <expr><name>XK_Multi_key</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CODEINPUT</name></expr>:</case>
<return>return <expr><name>XK_Codeinput</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SINGLECANDIDATE</name></expr>:</case>
<return>return <expr><name>XK_SingleCandidate</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MULTIPLECANDIDATE</name></expr>:</case>
<return>return <expr><name>XK_MultipleCandidate</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PREVIOUSCANDIDATE</name></expr>:</case>
<return>return <expr><name>XK_PreviousCandidate</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MODE_SWITCH</name></expr>:</case>
<return>return <expr><name>XK_Mode_switch</name></expr>;</return>
<case>case <expr><name>OBS_KEY_KANJI</name></expr>:</case>
<return>return <expr><name>XK_Kanji</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MUHENKAN</name></expr>:</case>
<return>return <expr><name>XK_Muhenkan</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HENKAN</name></expr>:</case>
<return>return <expr><name>XK_Henkan</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ROMAJI</name></expr>:</case>
<return>return <expr><name>XK_Romaji</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HIRAGANA</name></expr>:</case>
<return>return <expr><name>XK_Hiragana</name></expr>;</return>
<case>case <expr><name>OBS_KEY_KATAKANA</name></expr>:</case>
<return>return <expr><name>XK_Katakana</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HIRAGANA_KATAKANA</name></expr>:</case>
<return>return <expr><name>XK_Hiragana_Katakana</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ZENKAKU</name></expr>:</case>
<return>return <expr><name>XK_Zenkaku</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANKAKU</name></expr>:</case>
<return>return <expr><name>XK_Hankaku</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ZENKAKU_HANKAKU</name></expr>:</case>
<return>return <expr><name>XK_Zenkaku_Hankaku</name></expr>;</return>
<case>case <expr><name>OBS_KEY_TOUROKU</name></expr>:</case>
<return>return <expr><name>XK_Touroku</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MASSYO</name></expr>:</case>
<return>return <expr><name>XK_Massyo</name></expr>;</return>
<case>case <expr><name>OBS_KEY_KANA_LOCK</name></expr>:</case>
<return>return <expr><name>XK_Kana_Lock</name></expr>;</return>
<case>case <expr><name>OBS_KEY_KANA_SHIFT</name></expr>:</case>
<return>return <expr><name>XK_Kana_Shift</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EISU_SHIFT</name></expr>:</case>
<return>return <expr><name>XK_Eisu_Shift</name></expr>;</return>
<case>case <expr><name>OBS_KEY_EISU_TOGGLE</name></expr>:</case>
<return>return <expr><name>XK_Eisu_toggle</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL</name></expr>:</case>
<return>return <expr><name>XK_Hangul</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_START</name></expr>:</case>
<return>return <expr><name>XK_Hangul_Start</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_END</name></expr>:</case>
<return>return <expr><name>XK_Hangul_End</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_HANJA</name></expr>:</case>
<return>return <expr><name>XK_Hangul_Hanja</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_JAMO</name></expr>:</case>
<return>return <expr><name>XK_Hangul_Jamo</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_ROMAJA</name></expr>:</case>
<return>return <expr><name>XK_Hangul_Romaja</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_BANJA</name></expr>:</case>
<return>return <expr><name>XK_Hangul_Banja</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_PREHANJA</name></expr>:</case>
<return>return <expr><name>XK_Hangul_PreHanja</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_POSTHANJA</name></expr>:</case>
<return>return <expr><name>XK_Hangul_PostHanja</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HANGUL_SPECIAL</name></expr>:</case>
<return>return <expr><name>XK_Hangul_Special</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_GRAVE</name></expr>:</case>
<return>return <expr><name>XK_dead_grave</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_ACUTE</name></expr>:</case>
<return>return <expr><name>XK_dead_acute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_CIRCUMFLEX</name></expr>:</case>
<return>return <expr><name>XK_dead_circumflex</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_TILDE</name></expr>:</case>
<return>return <expr><name>XK_dead_tilde</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_MACRON</name></expr>:</case>
<return>return <expr><name>XK_dead_macron</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_BREVE</name></expr>:</case>
<return>return <expr><name>XK_dead_breve</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_ABOVEDOT</name></expr>:</case>
<return>return <expr><name>XK_dead_abovedot</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_DIAERESIS</name></expr>:</case>
<return>return <expr><name>XK_dead_diaeresis</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_ABOVERING</name></expr>:</case>
<return>return <expr><name>XK_dead_abovering</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_DOUBLEACUTE</name></expr>:</case>
<return>return <expr><name>XK_dead_doubleacute</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_CARON</name></expr>:</case>
<return>return <expr><name>XK_dead_caron</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_CEDILLA</name></expr>:</case>
<return>return <expr><name>XK_dead_cedilla</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_OGONEK</name></expr>:</case>
<return>return <expr><name>XK_dead_ogonek</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_IOTA</name></expr>:</case>
<return>return <expr><name>XK_dead_iota</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_VOICED_SOUND</name></expr>:</case>
<return>return <expr><name>XK_dead_voiced_sound</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_SEMIVOICED_SOUND</name></expr>:</case>
<return>return <expr><name>XK_dead_semivoiced_sound</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_BELOWDOT</name></expr>:</case>
<return>return <expr><name>XK_dead_belowdot</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_HOOK</name></expr>:</case>
<return>return <expr><name>XK_dead_hook</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DEAD_HORN</name></expr>:</case>
<return>return <expr><name>XK_dead_horn</name></expr>;</return>

<case>case <expr><name>OBS_KEY_MOUSE1</name></expr>:</case>
<return>return <expr><name>MOUSE_1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE2</name></expr>:</case>
<return>return <expr><name>MOUSE_2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE3</name></expr>:</case>
<return>return <expr><name>MOUSE_3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE4</name></expr>:</case>
<return>return <expr><name>MOUSE_4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE5</name></expr>:</case>
<return>return <expr><name>MOUSE_5</name></expr>;</return>


<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_base_keysyms</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name><operator>-&gt;</operator><name>base_keysyms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_keysym</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_key_t</name></type> <name>key_from_base_keysym</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>xcb_keysym_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>base_keysyms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>xcb_keysym_t</name><operator>)</operator><name>code</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obs_key_t</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_key</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_keycode_t</name></type> <name>kc</name> <init>= <expr><operator>(</operator><name>xcb_keycode_t</name><operator>)</operator><name>code</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name><name>list</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"found alternate keycode %d for %s "</literal>
<literal type="string">"which already has keycode %d"</literal></expr></argument>,
<argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>obs_key_to_name</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name><name>list</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>fill_keycodes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>xcb_setup_t</name></name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_get_keyboard_mapping_cookie_t</name></type> <name>cookie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_get_keyboard_mapping_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mincode</name> <init>= <expr><name><name>setup</name><operator>-&gt;</operator><name>min_keycode</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxcode</name> <init>= <expr><name><name>setup</name><operator>-&gt;</operator><name>max_keycode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>min_keycode</name></name> <operator>=</operator> <name><name>setup</name><operator>-&gt;</operator><name>min_keycode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cookie</name> <operator>=</operator> <call><name>xcb_get_keyboard_mapping</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>mincode</name></expr></argument>,
<argument><expr><name>maxcode</name> <operator>-</operator> <name>mincode</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_get_keyboard_mapping_reply</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>||</operator> <operator>!</operator><name>reply</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"xcb_get_keyboard_mapping_reply failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error1</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_keysym_t</name> <modifier>*</modifier></type><name>keysyms</name> <init>= <expr><call><name>xcb_get_keyboard_mapping_keysyms</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syms_per_code</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>reply</name><operator>-&gt;</operator><name>keysyms_per_keycode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>num_keysyms</name></name> <operator>=</operator> <operator>(</operator><name>maxcode</name> <operator>-</operator> <name>mincode</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>syms_per_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>syms_per_code</name></name> <operator>=</operator> <name>syms_per_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>keysyms</name></name> <operator>=</operator>
<call><name>bmemdup</name><argument_list>(<argument><expr><name>keysyms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xcb_keysym_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>num_keysyms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>code</name> <operator>=</operator> <name>mincode</name></expr>;</init> <condition><expr><name>code</name> <operator>&lt;=</operator> <name>maxcode</name></expr>;</condition> <incr><expr><name>code</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_keysym_t</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_key_t</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <operator>&amp;</operator><name><name>keysyms</name><index>[<expr><operator>(</operator><name>code</name> <operator>-</operator> <name>mincode</name><operator>)</operator> <operator>*</operator> <name>syms_per_code</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>syms_per_code</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sym</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sym</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>XK_Super_L</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>super_l_code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sym</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>XK_Super_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>super_r_code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_from_base_keysym</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>sym</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>OBS_KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_key</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<label><name>error1</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>reply</name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>default_screen</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>def_screen_idx</name> <init>= <expr><call><name>XDefaultScreen</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>iter</name><operator>.</operator><name>rem</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>def_screen_idx</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_screen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xcb_window_t</name></type> <name>root_window</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>default_screen</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>screen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_XINPUT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>registerMouseEvents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><call><name>root_window</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>xcb_input_event_mask_t</name></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_input_xi_event_mask_t</name></type> <name>mask</name></decl>;</decl_stmt>
}</block> <decl><name>mask</name></decl>;</struct>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>head</name><operator>.</operator><name>deviceid</name></name> <operator>=</operator> <name>XCB_INPUT_DEVICE_ALL_MASTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>head</name><operator>.</operator><name>mask_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>XCB_INPUT_XI_EVENT_MASK_RAW_BUTTON_PRESS</name> <operator>|</operator>
<name>XCB_INPUT_XI_EVENT_MASK_RAW_BUTTON_RELEASE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_input_xi_select_events</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mask</name><operator>.</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>obs_hotkeys_platform_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_hotkeys_platform_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_XINPUT</name></expr></cpp:if>
<expr_stmt><expr><call><name>registerMouseEvents</name><argument_list>(<argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fill_base_keysyms</name><argument_list>(<argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_keycodes</name><argument_list>(<argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_platform_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>keysyms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mouse_button_pressed</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_XINPUT</name></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>pressed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XINPUT_MOUSE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>update</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XINPUT_MOUSE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>xcb_poll_for_event</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>response_type</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">80</literal><operator>)</operator> <operator>==</operator> <name>XCB_GE_GENERIC</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>xcb_ge_event_t</name> <operator>*</operator><operator>)</operator><name>ev</name><operator>)</operator><operator>-&gt;</operator><name>event_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XCB_INPUT_RAW_BUTTON_PRESS</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>xcb_input_raw_button_press_event_t</name> <modifier>*</modifier></type><name>mot</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mot</name> <operator>=</operator> <operator>(</operator><name>xcb_input_raw_button_press_event_t</name> <operator>*</operator><operator>)</operator><name>ev</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mot</name><operator>-&gt;</operator><name>detail</name></name> <operator>&lt;</operator> <name>XINPUT_MOUSE_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><name><name>mot</name><operator>-&gt;</operator><name>detail</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>update</name><index>[<expr><name><name>mot</name><operator>-&gt;</operator><name>detail</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported button"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>XCB_INPUT_RAW_BUTTON_RELEASE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>xcb_input_raw_button_release_event_t</name> <modifier>*</modifier></type><name>mot</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mot</name> <operator>=</operator> <operator>(</operator><name>xcb_input_raw_button_release_event_t</name> <operator>*</operator><operator>)</operator><name>ev</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mot</name><operator>-&gt;</operator><name>detail</name></name> <operator>&lt;</operator> <name>XINPUT_MOUSE_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>update</name><index>[<expr><name><name>mot</name><operator>-&gt;</operator><name>detail</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported button"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_KEY_MOUSE1</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE3</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE4</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE5</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE6</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE7</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE8</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE9</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE10</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE11</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE12</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE13</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE14</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE15</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE17</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE18</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE19</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE20</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE21</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE22</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE23</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE24</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE25</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE26</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE27</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE28</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE29</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>XINPUT_MOUSE_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>update</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>button_pressed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pressed</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_query_pointer_cookie_t</name></type> <name>qpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_query_pointer_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qpc</name> <operator>=</operator> <call><name>xcb_query_pointer</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><call><name>root_window</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_query_pointer_reply</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"xcb_query_pointer_reply failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>buttons</name> <init>= <expr><name><name>reply</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_KEY_MOUSE1</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>buttons</name> <operator>&amp;</operator> <name>XCB_BUTTON_MASK_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>buttons</name> <operator>&amp;</operator> <name>XCB_BUTTON_MASK_3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_KEY_MOUSE3</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>buttons</name> <operator>&amp;</operator> <name>XCB_BUTTON_MASK_2</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>keycode_pressed</name><parameter_list>(<parameter><decl><type><name>xcb_query_keymap_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><decl><type><name>xcb_keycode_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>reply</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>code</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>code</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>key_pressed</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>keycode_list</name></name> <modifier>*</modifier></type><name>codes</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_query_keymap_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_query_keymap_reply</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><call><name>xcb_query_keymap</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"xcb_query_keymap failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_META</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pressed</name> <operator>=</operator> <call><name>keycode_pressed</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>super_l_code</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>keycode_pressed</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>super_r_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>codes</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>keycode_pressed</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name><name>codes</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pressed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_hotkeys_platform_is_pressed</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>OBS_KEY_MOUSE1</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>OBS_KEY_MOUSE29</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>mouse_button_pressed</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>key_pressed</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_key_translation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>dstr</name></decl></parameter>, <parameter><decl><type><name>xcb_keycode_t</name></type> <name>keycode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>connection</name> <operator>=</operator> <call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XKeyEvent</name></type> <name>event</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>KeyPress</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name><operator>-&gt;</operator><name>display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>root</name></name> <operator>=</operator> <call><name>root_window</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keycode</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>XLookupString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_ncopy</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_to_upper</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_key_to_str</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>dstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>OBS_KEY_MOUSE1</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>OBS_KEY_MOUSE29</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><literal type="string">"Mouse %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key</name> <operator>-</operator> <name>OBS_KEY_MOUSE1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>OBS_KEY_NUM0</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>OBS_KEY_NUM9</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><literal type="string">"Numpad %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key</name> <operator>-</operator> <name>OBS_KEY_NUM0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>translate_key</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>def</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dstr_copy(dstr, obs_get_hotkey_translation(key, def))</cpp:value></cpp:define>


<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_KEY_INSERT</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Insert"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_DELETE</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Delete"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_HOME</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Home"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_END</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"End"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_PAGEUP</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Page Up"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_PAGEDOWN</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Page Down"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMLOCK</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Num Lock"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_SCROLLLOCK</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Scroll Lock"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_CAPSLOCK</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Caps Lock"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_BACKSPACE</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Backspace"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_TAB</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Tab"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_PRINT</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Print"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_PAUSE</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Pause"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_LEFT</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_RIGHT</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_UP</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Up"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_DOWN</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Down"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_SHIFT</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Shift"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_ALT</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Alt"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_CONTROL</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Control"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_META</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Super"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_MENU</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Menu"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMASTERISK</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Numpad *"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMPLUS</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Numpad +"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMCOMMA</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Numpad ,"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMPERIOD</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Numpad ."</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMSLASH</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Numpad /"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_SPACE</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Space"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBS_KEY_ESCAPE</name></expr>:</case>
<return>return <expr><call><name>translate_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Escape"</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>OBS_KEY_F1</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>OBS_KEY_F35</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><literal type="string">"F%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key</name> <operator>-</operator> <name>OBS_KEY_F1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>keycode_list</name></name> <modifier>*</modifier></type><name>keycodes</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>keycodes</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_key_translation</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><name><name>keycodes</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>OBS_KEY_NONE</name> <operator>&amp;&amp;</operator> <call><name>dstr_is_empty</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><call><name>obs_key_to_name</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_key_t</name></type> <name>key_from_keycode</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>xcb_keycode_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>keycode_list</name></name> <modifier>*</modifier></type><name>codes</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>keycodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>codes</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>codes</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obs_key_t</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_key_t</name></type> <name>obs_key_from_virtual_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_keysym_t</name> <modifier>*</modifier></type><name>keysyms</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>keysyms</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syms_per_code</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>syms_per_code</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_keysyms</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>num_keysyms</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_keysyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>keysyms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>xcb_keysym_t</name><operator>)</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xcb_keycode_t</name></type> <name>code</name> <init>= <expr><operator>(</operator><name>xcb_keycode_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>/</operator> <name>syms_per_code</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>min_keycode</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>obs_key_t</name></type> <name>key</name> <init>= <expr><call><name>key_from_keycode</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_key_to_virtual_key</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_META</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XK_Super_L</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name><operator>-&gt;</operator><name>base_keysyms</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_combo_key</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>key_str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_key_to_str</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_key_combination_to_str</name><parameter_list>(<parameter><decl><type><name>obs_key_combination_t</name></type> <name>combination</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_CONTROL_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_CONTROL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_COMMAND_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_META</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_ALT_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_ALT</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_SHIFT_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_SHIFT</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>combination</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>OBS_KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name><name>combination</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
