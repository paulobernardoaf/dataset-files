<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-windows.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/windows/win-registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/windows/win-version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/dstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wscapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iwscapi.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>win_ver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_module_extension</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">".dll"</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STRING</name></cpp:macro> <cpp:value>"64bit"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STRING</name></cpp:macro> <cpp:value>"32bit"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>module_bin</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"../../obs-plugins/"</literal> <name>BIT_STRING</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>module_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"../../data/obs-plugins/%module%"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>module_patterns_size</name> <init>=
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>module_bin</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>module_bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add_default_module_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>module_patterns_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_add_module_path</name><argument_list>(<argument><expr><name><name>module_bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>module_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>find_libobs_data_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"../../data/libobs/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>path</name><operator>.</operator><name>array</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyW</name><argument_list>(
<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,
<argument><expr><literal type="string">L"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"ProcessorNameString"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU Name: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>speed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"~MHz"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>speed</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CPU Speed: %ldMHz"</literal></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_processor_cores</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Physical Cores: %d, Logical Cores: %d"</literal></expr></argument>,
<argument><expr><call><name>os_get_physical_cores</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>os_get_logical_cores</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_available_memory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>ms</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ms</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>note</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>note</name> <init>= <expr><literal type="string">" (NOTE: 32bit programs cannot use more than 3gb)"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Physical Memory: %luMB Total, %luMB Free%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>/</operator> <literal type="number">1048576</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>.</operator><name>ullAvailPhys</name></name> <operator>/</operator> <literal type="number">1048576</literal><operator>)</operator></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_win_release_id</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_windows_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>ver</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_win_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>release_id</name> <init>= <expr><call><name>get_win_release_id</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b64</name> <init>= <expr><call><name>is_64_bit_windows</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>windows_bitness</name> <init>= <expr><ternary><condition><expr><name>b64</name></expr> ?</condition><then> <expr><literal type="string">"64"</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Windows Version: %d.%d Build %d (release: %s; revision: %d; %s-bit)"</literal></expr></argument>,
<argument><expr><name><name>ver</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>ver</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>ver</name><operator>.</operator><name>build</name></name></expr></argument>, <argument><expr><name>release_id</name></expr></argument>, <argument><expr><name><name>ver</name><operator>.</operator><name>revis</name></name></expr></argument>,
<argument><expr><name>windows_bitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_admin_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SID_IDENTIFIER_AUTHORITY</name></type> <name>auth</name> <init>= <expr><name>SECURITY_NT_AUTHORITY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PSID</name></type> <name>admin_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auth</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>SECURITY_BUILTIN_DOMAIN_RID</name></expr></argument>,
<argument><expr><name>DOMAIN_ALIAS_RID_ADMINS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>admin_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>admin_group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>admin_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Running as administrator: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>HRESULT</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>dwm_is_composition_enabled_t</name>)<parameter_list>(<parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_aero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dwm_is_composition_enabled_t</name></type> <name>composition_enabled</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aeroMessage</name> <init>=
<expr><ternary><condition><expr><name>win_ver</name> <operator>&gt;=</operator> <literal type="number">0x602</literal></expr>
?</condition><then> <expr><literal type="string">" (Aero is always on for windows 8 and above)"</literal></expr>
</then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>dwm</name> <init>= <expr><call><name>LoadLibraryW</name><argument_list>(<argument><expr><literal type="string">L"dwmapi"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bComposition</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dwm</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>composition_enabled</name> <operator>=</operator> <operator>(</operator><name>dwm_is_composition_enabled_t</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(
<argument><expr><name>dwm</name></expr></argument>, <argument><expr><literal type="string">"DwmIsCompositionEnabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>composition_enabled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dwm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>composition_enabled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bComposition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Aero is %s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bComposition</name></expr> ?</condition><then> <expr><literal type="string">"Enabled"</literal></expr> </then><else>: <expr><literal type="string">"Disabled"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>aeroMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN10_GAME_BAR_REG_KEY</name></cpp:macro> <cpp:value>L"Software\\Microsoft\\Windows\\CurrentVersion\\GameDVR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN10_GAME_DVR_POLICY_REG_KEY</name></cpp:macro> <cpp:value>L"SOFTWARE\\Policies\\Microsoft\\Windows\\GameDVR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN10_GAME_DVR_REG_KEY</name></cpp:macro> <cpp:value>L"System\\GameConfigStore"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN10_GAME_MODE_REG_KEY</name></cpp:macro> <cpp:value>L"Software\\Microsoft\\GameBar"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_gaming_features</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>win_ver</name> <operator>&lt;</operator> <literal type="number">0xA00</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>reg_dword</name></name></type> <name>game_bar_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reg_dword</name></name></type> <name>game_dvr_allowed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reg_dword</name></name></type> <name>game_dvr_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reg_dword</name></name></type> <name>game_dvr_bg_recording</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reg_dword</name></name></type> <name>game_mode_enabled</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_reg_dword</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>WIN10_GAME_BAR_REG_KEY</name></expr></argument>,
<argument><expr><literal type="string">L"AppCaptureEnabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>game_bar_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_reg_dword</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>WIN10_GAME_DVR_POLICY_REG_KEY</name></expr></argument>,
<argument><expr><literal type="string">L"AllowGameDVR"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>game_dvr_allowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_reg_dword</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>WIN10_GAME_DVR_REG_KEY</name></expr></argument>,
<argument><expr><literal type="string">L"GameDVR_Enabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>game_dvr_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_reg_dword</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>WIN10_GAME_BAR_REG_KEY</name></expr></argument>,
<argument><expr><literal type="string">L"HistoricalCaptureEnabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>game_dvr_bg_recording</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_reg_dword</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>WIN10_GAME_MODE_REG_KEY</name></expr></argument>,
<argument><expr><literal type="string">L"AllowAutoGameMode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>game_mode_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>game_mode_enabled</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_reg_dword</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>WIN10_GAME_MODE_REG_KEY</name></expr></argument>,
<argument><expr><literal type="string">L"AutoGameModeEnabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>game_mode_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Windows 10 Gaming Features:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>game_bar_enabled</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\tGame Bar: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>game_bar_enabled</name><operator>.</operator><name>return_value</name></name></expr> ?</condition><then> <expr><literal type="string">"On"</literal></expr> </then><else>: <expr><literal type="string">"Off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>game_dvr_allowed</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\tGame DVR Allowed: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>game_dvr_allowed</name><operator>.</operator><name>return_value</name></name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>game_dvr_enabled</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\tGame DVR: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>game_dvr_enabled</name><operator>.</operator><name>return_value</name></name></expr> ?</condition><then> <expr><literal type="string">"On"</literal></expr> </then><else>: <expr><literal type="string">"Off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>game_dvr_bg_recording</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\tGame DVR Background Recording: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>game_dvr_bg_recording</name><operator>.</operator><name>return_value</name></name></expr> ?</condition><then> <expr><literal type="string">"On"</literal></expr> </then><else>: <expr><literal type="string">"Off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>game_mode_enabled</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\tGame Mode: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>game_mode_enabled</name><operator>.</operator><name>return_value</name></name></expr> ?</condition><then> <expr><literal type="string">"On"</literal></expr> </then><else>: <expr><literal type="string">"Off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_str_for_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WSC_SECURITY_PRODUCT_STATE_ON</name></expr>:</case>
<return>return <expr><literal type="string">"enabled"</literal></expr>;</return>
<case>case <expr><name>WSC_SECURITY_PRODUCT_STATE_OFF</name></expr>:</case>
<return>return <expr><literal type="string">"disabled"</literal></expr>;</return>
<case>case <expr><name>WSC_SECURITY_PRODUCT_STATE_SNOOZED</name></expr>:</case>
<return>return <expr><literal type="string">"temporarily disabled"</literal></expr>;</return>
<case>case <expr><name>WSC_SECURITY_PRODUCT_STATE_EXPIRED</name></expr>:</case>
<return>return <expr><literal type="string">"expired"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_str_for_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WSC_SECURITY_PROVIDER_ANTIVIRUS</name></expr>:</case>
<return>return <expr><literal type="string">"AV"</literal></expr>;</return>
<case>case <expr><name>WSC_SECURITY_PROVIDER_FIREWALL</name></expr>:</case>
<return>return <expr><literal type="string">"FW"</literal></expr>;</return>
<case>case <expr><name>WSC_SECURITY_PROVIDER_ANTISPYWARE</name></expr>:</case>
<return>return <expr><literal type="string">"ASW"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_security_products_by_type</name><parameter_list>(<parameter><decl><type><name>IWSCProductList</name> <modifier>*</modifier></type><name>prod_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IWscProduct</name> <modifier>*</modifier></type><name>prod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BSTR</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSC_SECURITY_PRODUCT_STATE</name></type> <name>prod_state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>prod_list</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>prod_list</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>prod_list</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>get_Count</name></name><argument_list>(<argument><expr><name>prod_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>prod_list</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>prod_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>prod_list</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>get_Item</name></name><argument_list>(<argument><expr><name>prod_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>prod</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>get_ProductName</name></name><argument_list>(<argument><expr><name>prod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>prod</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>get_ProductState</name></name><argument_list>(<argument><expr><name>prod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prod_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\t%S: %s (%s)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>get_str_for_state</name><argument_list>(<argument><expr><name>prod_state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_str_for_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>prod</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>prod_list</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>prod_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_security_products</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IWSCProductList</name> <modifier>*</modifier></type><name>prod_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>h_wsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>




<expr_stmt><expr><name>h_wsc</name> <operator>=</operator> <call><name>LoadLibraryW</name><argument_list>(<argument><expr><literal type="string">L"wscapi.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h_wsc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name> <modifier>*</modifier></type><name>prod_list_clsid</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>CLSID</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_wsc</name></expr></argument>, <argument><expr><literal type="string">"CLSID_WSCProductList"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name> <modifier>*</modifier></type><name>prod_list_iid</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>IID</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_wsc</name></expr></argument>, <argument><expr><literal type="string">"IID_IWSCProductList"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prod_list_clsid</name> <operator>&amp;&amp;</operator> <name>prod_list_iid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Sec. Software Status:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><name>prod_list_clsid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>, <argument><expr><name>prod_list_iid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>prod_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_security_products_by_type</name><argument_list>(
<argument><expr><name>prod_list</name></expr></argument>, <argument><expr><name>WSC_SECURITY_PROVIDER_ANTIVIRUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><name>prod_list_clsid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>, <argument><expr><name>prod_list_iid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>prod_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_security_products_by_type</name><argument_list>(
<argument><expr><name>prod_list</name></expr></argument>, <argument><expr><name>WSC_SECURITY_PROVIDER_FIREWALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><name>prod_list_clsid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>, <argument><expr><name>prod_list_iid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>prod_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_security_products_by_type</name><argument_list>(
<argument><expr><name>prod_list</name></expr></argument>, <argument><expr><name>WSC_SECURITY_PROVIDER_ANTISPYWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>h_wsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_system_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>ver</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_win_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>win_ver</name> <operator>=</operator> <operator>(</operator><name><name>ver</name><operator>.</operator><name>major</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>ver</name><operator>.</operator><name>minor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_processor_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_processor_cores</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_available_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_windows_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_admin_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_aero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_gaming_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_security_products</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>obs_hotkeys_platform</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>vk_codes</name><index>[<expr><name>OBS_KEY_LAST_VALUE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_virtual_key</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_KEY_RETURN</name></expr>:</case>
<return>return <expr><name>VK_RETURN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ESCAPE</name></expr>:</case>
<return>return <expr><name>VK_ESCAPE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_TAB</name></expr>:</case>
<return>return <expr><name>VK_TAB</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BACKTAB</name></expr>:</case>
<return>return <expr><name>VK_OEM_BACKTAB</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BACKSPACE</name></expr>:</case>
<return>return <expr><name>VK_BACK</name></expr>;</return>
<case>case <expr><name>OBS_KEY_INSERT</name></expr>:</case>
<return>return <expr><name>VK_INSERT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DELETE</name></expr>:</case>
<return>return <expr><name>VK_DELETE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PAUSE</name></expr>:</case>
<return>return <expr><name>VK_PAUSE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PRINT</name></expr>:</case>
<return>return <expr><name>VK_SNAPSHOT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CLEAR</name></expr>:</case>
<return>return <expr><name>VK_CLEAR</name></expr>;</return>
<case>case <expr><name>OBS_KEY_HOME</name></expr>:</case>
<return>return <expr><name>VK_HOME</name></expr>;</return>
<case>case <expr><name>OBS_KEY_END</name></expr>:</case>
<return>return <expr><name>VK_END</name></expr>;</return>
<case>case <expr><name>OBS_KEY_LEFT</name></expr>:</case>
<return>return <expr><name>VK_LEFT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_UP</name></expr>:</case>
<return>return <expr><name>VK_UP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_RIGHT</name></expr>:</case>
<return>return <expr><name>VK_RIGHT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_DOWN</name></expr>:</case>
<return>return <expr><name>VK_DOWN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PAGEUP</name></expr>:</case>
<return>return <expr><name>VK_PRIOR</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PAGEDOWN</name></expr>:</case>
<return>return <expr><name>VK_NEXT</name></expr>;</return>

<case>case <expr><name>OBS_KEY_SHIFT</name></expr>:</case>
<return>return <expr><name>VK_SHIFT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CONTROL</name></expr>:</case>
<return>return <expr><name>VK_CONTROL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ALT</name></expr>:</case>
<return>return <expr><name>VK_MENU</name></expr>;</return>
<case>case <expr><name>OBS_KEY_CAPSLOCK</name></expr>:</case>
<return>return <expr><name>VK_CAPITAL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMLOCK</name></expr>:</case>
<return>return <expr><name>VK_NUMLOCK</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SCROLLLOCK</name></expr>:</case>
<return>return <expr><name>VK_SCROLL</name></expr>;</return>

<case>case <expr><name>OBS_KEY_F1</name></expr>:</case>
<return>return <expr><name>VK_F1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F2</name></expr>:</case>
<return>return <expr><name>VK_F2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F3</name></expr>:</case>
<return>return <expr><name>VK_F3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F4</name></expr>:</case>
<return>return <expr><name>VK_F4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F5</name></expr>:</case>
<return>return <expr><name>VK_F5</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F6</name></expr>:</case>
<return>return <expr><name>VK_F6</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F7</name></expr>:</case>
<return>return <expr><name>VK_F7</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F8</name></expr>:</case>
<return>return <expr><name>VK_F8</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F9</name></expr>:</case>
<return>return <expr><name>VK_F9</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F10</name></expr>:</case>
<return>return <expr><name>VK_F10</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F11</name></expr>:</case>
<return>return <expr><name>VK_F11</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F12</name></expr>:</case>
<return>return <expr><name>VK_F12</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F13</name></expr>:</case>
<return>return <expr><name>VK_F13</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F14</name></expr>:</case>
<return>return <expr><name>VK_F14</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F15</name></expr>:</case>
<return>return <expr><name>VK_F15</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F16</name></expr>:</case>
<return>return <expr><name>VK_F16</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F17</name></expr>:</case>
<return>return <expr><name>VK_F17</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F18</name></expr>:</case>
<return>return <expr><name>VK_F18</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F19</name></expr>:</case>
<return>return <expr><name>VK_F19</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F20</name></expr>:</case>
<return>return <expr><name>VK_F20</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F21</name></expr>:</case>
<return>return <expr><name>VK_F21</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F22</name></expr>:</case>
<return>return <expr><name>VK_F22</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F23</name></expr>:</case>
<return>return <expr><name>VK_F23</name></expr>;</return>
<case>case <expr><name>OBS_KEY_F24</name></expr>:</case>
<return>return <expr><name>VK_F24</name></expr>;</return>

<case>case <expr><name>OBS_KEY_SPACE</name></expr>:</case>
<return>return <expr><name>VK_SPACE</name></expr>;</return>

<case>case <expr><name>OBS_KEY_APOSTROPHE</name></expr>:</case>
<return>return <expr><name>VK_OEM_7</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PLUS</name></expr>:</case>
<return>return <expr><name>VK_OEM_PLUS</name></expr>;</return>
<case>case <expr><name>OBS_KEY_COMMA</name></expr>:</case>
<return>return <expr><name>VK_OEM_COMMA</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MINUS</name></expr>:</case>
<return>return <expr><name>VK_OEM_MINUS</name></expr>;</return>
<case>case <expr><name>OBS_KEY_PERIOD</name></expr>:</case>
<return>return <expr><name>VK_OEM_PERIOD</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SLASH</name></expr>:</case>
<return>return <expr><name>VK_OEM_2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0</name></expr>:</case>
<return>return <expr><literal type="char">'0'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_1</name></expr>:</case>
<return>return <expr><literal type="char">'1'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_2</name></expr>:</case>
<return>return <expr><literal type="char">'2'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_3</name></expr>:</case>
<return>return <expr><literal type="char">'3'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_4</name></expr>:</case>
<return>return <expr><literal type="char">'4'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_5</name></expr>:</case>
<return>return <expr><literal type="char">'5'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_6</name></expr>:</case>
<return>return <expr><literal type="char">'6'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_7</name></expr>:</case>
<return>return <expr><literal type="char">'7'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_8</name></expr>:</case>
<return>return <expr><literal type="char">'8'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_9</name></expr>:</case>
<return>return <expr><literal type="char">'9'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMASTERISK</name></expr>:</case>
<return>return <expr><name>VK_MULTIPLY</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMPLUS</name></expr>:</case>
<return>return <expr><name>VK_ADD</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMMINUS</name></expr>:</case>
<return>return <expr><name>VK_SUBTRACT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMPERIOD</name></expr>:</case>
<return>return <expr><name>VK_DECIMAL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUMSLASH</name></expr>:</case>
<return>return <expr><name>VK_DIVIDE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM0</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD0</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM1</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM2</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM3</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM4</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM5</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD5</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM6</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD6</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM7</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD7</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM8</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD8</name></expr>;</return>
<case>case <expr><name>OBS_KEY_NUM9</name></expr>:</case>
<return>return <expr><name>VK_NUMPAD9</name></expr>;</return>
<case>case <expr><name>OBS_KEY_SEMICOLON</name></expr>:</case>
<return>return <expr><name>VK_OEM_1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_A</name></expr>:</case>
<return>return <expr><literal type="char">'A'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_B</name></expr>:</case>
<return>return <expr><literal type="char">'B'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_C</name></expr>:</case>
<return>return <expr><literal type="char">'C'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_D</name></expr>:</case>
<return>return <expr><literal type="char">'D'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_E</name></expr>:</case>
<return>return <expr><literal type="char">'E'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_F</name></expr>:</case>
<return>return <expr><literal type="char">'F'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_G</name></expr>:</case>
<return>return <expr><literal type="char">'G'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_H</name></expr>:</case>
<return>return <expr><literal type="char">'H'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_I</name></expr>:</case>
<return>return <expr><literal type="char">'I'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_J</name></expr>:</case>
<return>return <expr><literal type="char">'J'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_K</name></expr>:</case>
<return>return <expr><literal type="char">'K'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_L</name></expr>:</case>
<return>return <expr><literal type="char">'L'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_M</name></expr>:</case>
<return>return <expr><literal type="char">'M'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_N</name></expr>:</case>
<return>return <expr><literal type="char">'N'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_O</name></expr>:</case>
<return>return <expr><literal type="char">'O'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_P</name></expr>:</case>
<return>return <expr><literal type="char">'P'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_Q</name></expr>:</case>
<return>return <expr><literal type="char">'Q'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_R</name></expr>:</case>
<return>return <expr><literal type="char">'R'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_S</name></expr>:</case>
<return>return <expr><literal type="char">'S'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_T</name></expr>:</case>
<return>return <expr><literal type="char">'T'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_U</name></expr>:</case>
<return>return <expr><literal type="char">'U'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_V</name></expr>:</case>
<return>return <expr><literal type="char">'V'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_W</name></expr>:</case>
<return>return <expr><literal type="char">'W'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_X</name></expr>:</case>
<return>return <expr><literal type="char">'X'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_Y</name></expr>:</case>
<return>return <expr><literal type="char">'Y'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_Z</name></expr>:</case>
<return>return <expr><literal type="char">'Z'</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_BRACKETLEFT</name></expr>:</case>
<return>return <expr><name>VK_OEM_4</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BACKSLASH</name></expr>:</case>
<return>return <expr><name>VK_OEM_5</name></expr>;</return>
<case>case <expr><name>OBS_KEY_BRACKETRIGHT</name></expr>:</case>
<return>return <expr><name>VK_OEM_6</name></expr>;</return>
<case>case <expr><name>OBS_KEY_ASCIITILDE</name></expr>:</case>
<return>return <expr><name>VK_OEM_3</name></expr>;</return>

<case>case <expr><name>OBS_KEY_HENKAN</name></expr>:</case>
<return>return <expr><name>VK_CONVERT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MUHENKAN</name></expr>:</case>
<return>return <expr><name>VK_NONCONVERT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_KANJI</name></expr>:</case>
<return>return <expr><name>VK_KANJI</name></expr>;</return>
<case>case <expr><name>OBS_KEY_TOUROKU</name></expr>:</case>
<return>return <expr><name>VK_OEM_FJ_TOUROKU</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MASSYO</name></expr>:</case>
<return>return <expr><name>VK_OEM_FJ_MASSHOU</name></expr>;</return>

<case>case <expr><name>OBS_KEY_HANGUL</name></expr>:</case>
<return>return <expr><name>VK_HANGUL</name></expr>;</return>

<case>case <expr><name>OBS_KEY_BACKSLASH_RT102</name></expr>:</case>
<return>return <expr><name>VK_OEM_102</name></expr>;</return>

<case>case <expr><name>OBS_KEY_MOUSE1</name></expr>:</case>
<return>return <expr><name>VK_LBUTTON</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE2</name></expr>:</case>
<return>return <expr><name>VK_RBUTTON</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE3</name></expr>:</case>
<return>return <expr><name>VK_MBUTTON</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE4</name></expr>:</case>
<return>return <expr><name>VK_XBUTTON1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_MOUSE5</name></expr>:</case>
<return>return <expr><name>VK_XBUTTON2</name></expr>;</return>

<case>case <expr><name>OBS_KEY_VK_CANCEL</name></expr>:</case>
<return>return <expr><name>VK_CANCEL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0x07</name></expr>:</case>
<return>return <expr><literal type="number">0x07</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x0A</name></expr>:</case>
<return>return <expr><literal type="number">0x0A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x0B</name></expr>:</case>
<return>return <expr><literal type="number">0x0B</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x0E</name></expr>:</case>
<return>return <expr><literal type="number">0x0E</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x0F</name></expr>:</case>
<return>return <expr><literal type="number">0x0F</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x16</name></expr>:</case>
<return>return <expr><literal type="number">0x16</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_JUNJA</name></expr>:</case>
<return>return <expr><name>VK_JUNJA</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_FINAL</name></expr>:</case>
<return>return <expr><name>VK_FINAL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0x1A</name></expr>:</case>
<return>return <expr><literal type="number">0x1A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_ACCEPT</name></expr>:</case>
<return>return <expr><name>VK_ACCEPT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_MODECHANGE</name></expr>:</case>
<return>return <expr><name>VK_MODECHANGE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_SELECT</name></expr>:</case>
<return>return <expr><name>VK_SELECT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_PRINT</name></expr>:</case>
<return>return <expr><name>VK_PRINT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_EXECUTE</name></expr>:</case>
<return>return <expr><name>VK_EXECUTE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_HELP</name></expr>:</case>
<return>return <expr><name>VK_HELP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0x30</name></expr>:</case>
<return>return <expr><literal type="number">0x30</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x31</name></expr>:</case>
<return>return <expr><literal type="number">0x31</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x32</name></expr>:</case>
<return>return <expr><literal type="number">0x32</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x33</name></expr>:</case>
<return>return <expr><literal type="number">0x33</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x34</name></expr>:</case>
<return>return <expr><literal type="number">0x34</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x35</name></expr>:</case>
<return>return <expr><literal type="number">0x35</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x36</name></expr>:</case>
<return>return <expr><literal type="number">0x36</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x37</name></expr>:</case>
<return>return <expr><literal type="number">0x37</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x38</name></expr>:</case>
<return>return <expr><literal type="number">0x38</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x39</name></expr>:</case>
<return>return <expr><literal type="number">0x39</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x3A</name></expr>:</case>
<return>return <expr><literal type="number">0x3A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x3B</name></expr>:</case>
<return>return <expr><literal type="number">0x3B</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x3C</name></expr>:</case>
<return>return <expr><literal type="number">0x3C</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x3D</name></expr>:</case>
<return>return <expr><literal type="number">0x3D</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x3E</name></expr>:</case>
<return>return <expr><literal type="number">0x3E</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x3F</name></expr>:</case>
<return>return <expr><literal type="number">0x3F</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x40</name></expr>:</case>
<return>return <expr><literal type="number">0x40</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x41</name></expr>:</case>
<return>return <expr><literal type="number">0x41</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x42</name></expr>:</case>
<return>return <expr><literal type="number">0x42</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x43</name></expr>:</case>
<return>return <expr><literal type="number">0x43</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x44</name></expr>:</case>
<return>return <expr><literal type="number">0x44</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x45</name></expr>:</case>
<return>return <expr><literal type="number">0x45</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x46</name></expr>:</case>
<return>return <expr><literal type="number">0x46</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x47</name></expr>:</case>
<return>return <expr><literal type="number">0x47</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x48</name></expr>:</case>
<return>return <expr><literal type="number">0x48</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x49</name></expr>:</case>
<return>return <expr><literal type="number">0x49</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x4A</name></expr>:</case>
<return>return <expr><literal type="number">0x4A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x4B</name></expr>:</case>
<return>return <expr><literal type="number">0x4B</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x4C</name></expr>:</case>
<return>return <expr><literal type="number">0x4C</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x4D</name></expr>:</case>
<return>return <expr><literal type="number">0x4D</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x4E</name></expr>:</case>
<return>return <expr><literal type="number">0x4E</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x4F</name></expr>:</case>
<return>return <expr><literal type="number">0x4F</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x50</name></expr>:</case>
<return>return <expr><literal type="number">0x50</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x51</name></expr>:</case>
<return>return <expr><literal type="number">0x51</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x52</name></expr>:</case>
<return>return <expr><literal type="number">0x52</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x53</name></expr>:</case>
<return>return <expr><literal type="number">0x53</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x54</name></expr>:</case>
<return>return <expr><literal type="number">0x54</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x55</name></expr>:</case>
<return>return <expr><literal type="number">0x55</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x56</name></expr>:</case>
<return>return <expr><literal type="number">0x56</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x57</name></expr>:</case>
<return>return <expr><literal type="number">0x57</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x58</name></expr>:</case>
<return>return <expr><literal type="number">0x58</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x59</name></expr>:</case>
<return>return <expr><literal type="number">0x59</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x5A</name></expr>:</case>
<return>return <expr><literal type="number">0x5A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LWIN</name></expr>:</case>
<return>return <expr><name>VK_LWIN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_RWIN</name></expr>:</case>
<return>return <expr><name>VK_RWIN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_APPS</name></expr>:</case>
<return>return <expr><name>VK_APPS</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0x5E</name></expr>:</case>
<return>return <expr><literal type="number">0x5E</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_SLEEP</name></expr>:</case>
<return>return <expr><name>VK_SLEEP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_SEPARATOR</name></expr>:</case>
<return>return <expr><name>VK_SEPARATOR</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0x88</name></expr>:</case>
<return>return <expr><literal type="number">0x88</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x89</name></expr>:</case>
<return>return <expr><literal type="number">0x89</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x8A</name></expr>:</case>
<return>return <expr><literal type="number">0x8A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x8B</name></expr>:</case>
<return>return <expr><literal type="number">0x8B</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x8C</name></expr>:</case>
<return>return <expr><literal type="number">0x8C</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x8D</name></expr>:</case>
<return>return <expr><literal type="number">0x8D</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x8E</name></expr>:</case>
<return>return <expr><literal type="number">0x8E</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x8F</name></expr>:</case>
<return>return <expr><literal type="number">0x8F</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_FJ_JISHO</name></expr>:</case>
<return>return <expr><name>VK_OEM_FJ_JISHO</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_FJ_LOYA</name></expr>:</case>
<return>return <expr><name>VK_OEM_FJ_LOYA</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_FJ_ROYA</name></expr>:</case>
<return>return <expr><name>VK_OEM_FJ_ROYA</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0x97</name></expr>:</case>
<return>return <expr><literal type="number">0x97</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x98</name></expr>:</case>
<return>return <expr><literal type="number">0x98</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x99</name></expr>:</case>
<return>return <expr><literal type="number">0x99</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x9A</name></expr>:</case>
<return>return <expr><literal type="number">0x9A</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x9B</name></expr>:</case>
<return>return <expr><literal type="number">0x9B</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x9C</name></expr>:</case>
<return>return <expr><literal type="number">0x9C</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x9D</name></expr>:</case>
<return>return <expr><literal type="number">0x9D</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x9E</name></expr>:</case>
<return>return <expr><literal type="number">0x9E</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0x9F</name></expr>:</case>
<return>return <expr><literal type="number">0x9F</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LSHIFT</name></expr>:</case>
<return>return <expr><name>VK_LSHIFT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_RSHIFT</name></expr>:</case>
<return>return <expr><name>VK_RSHIFT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LCONTROL</name></expr>:</case>
<return>return <expr><name>VK_LCONTROL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_RCONTROL</name></expr>:</case>
<return>return <expr><name>VK_RCONTROL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LMENU</name></expr>:</case>
<return>return <expr><name>VK_LMENU</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_RMENU</name></expr>:</case>
<return>return <expr><name>VK_RMENU</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_BACK</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_BACK</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_FORWARD</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_FORWARD</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_REFRESH</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_REFRESH</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_STOP</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_STOP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_SEARCH</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_SEARCH</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_FAVORITES</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_FAVORITES</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_BROWSER_HOME</name></expr>:</case>
<return>return <expr><name>VK_BROWSER_HOME</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_VOLUME_MUTE</name></expr>:</case>
<return>return <expr><name>VK_VOLUME_MUTE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_VOLUME_DOWN</name></expr>:</case>
<return>return <expr><name>VK_VOLUME_DOWN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_VOLUME_UP</name></expr>:</case>
<return>return <expr><name>VK_VOLUME_UP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_MEDIA_NEXT_TRACK</name></expr>:</case>
<return>return <expr><name>VK_MEDIA_NEXT_TRACK</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_MEDIA_PREV_TRACK</name></expr>:</case>
<return>return <expr><name>VK_MEDIA_PREV_TRACK</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_MEDIA_STOP</name></expr>:</case>
<return>return <expr><name>VK_MEDIA_STOP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_MEDIA_PLAY_PAUSE</name></expr>:</case>
<return>return <expr><name>VK_MEDIA_PLAY_PAUSE</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LAUNCH_MAIL</name></expr>:</case>
<return>return <expr><name>VK_LAUNCH_MAIL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LAUNCH_MEDIA_SELECT</name></expr>:</case>
<return>return <expr><name>VK_LAUNCH_MEDIA_SELECT</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LAUNCH_APP1</name></expr>:</case>
<return>return <expr><name>VK_LAUNCH_APP1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_LAUNCH_APP2</name></expr>:</case>
<return>return <expr><name>VK_LAUNCH_APP2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0xB8</name></expr>:</case>
<return>return <expr><literal type="number">0xB8</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xB9</name></expr>:</case>
<return>return <expr><literal type="number">0xB9</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC1</name></expr>:</case>
<return>return <expr><literal type="number">0xC1</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC2</name></expr>:</case>
<return>return <expr><literal type="number">0xC2</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC3</name></expr>:</case>
<return>return <expr><literal type="number">0xC3</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC4</name></expr>:</case>
<return>return <expr><literal type="number">0xC4</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC5</name></expr>:</case>
<return>return <expr><literal type="number">0xC5</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC6</name></expr>:</case>
<return>return <expr><literal type="number">0xC6</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC7</name></expr>:</case>
<return>return <expr><literal type="number">0xC7</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC8</name></expr>:</case>
<return>return <expr><literal type="number">0xC8</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xC9</name></expr>:</case>
<return>return <expr><literal type="number">0xC9</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xCA</name></expr>:</case>
<return>return <expr><literal type="number">0xCA</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xCB</name></expr>:</case>
<return>return <expr><literal type="number">0xCB</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xCC</name></expr>:</case>
<return>return <expr><literal type="number">0xCC</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xCD</name></expr>:</case>
<return>return <expr><literal type="number">0xCD</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xCE</name></expr>:</case>
<return>return <expr><literal type="number">0xCE</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xCF</name></expr>:</case>
<return>return <expr><literal type="number">0xCF</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD0</name></expr>:</case>
<return>return <expr><literal type="number">0xD0</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD1</name></expr>:</case>
<return>return <expr><literal type="number">0xD1</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD2</name></expr>:</case>
<return>return <expr><literal type="number">0xD2</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD3</name></expr>:</case>
<return>return <expr><literal type="number">0xD3</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD4</name></expr>:</case>
<return>return <expr><literal type="number">0xD4</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD5</name></expr>:</case>
<return>return <expr><literal type="number">0xD5</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD6</name></expr>:</case>
<return>return <expr><literal type="number">0xD6</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD7</name></expr>:</case>
<return>return <expr><literal type="number">0xD7</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD8</name></expr>:</case>
<return>return <expr><literal type="number">0xD8</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xD9</name></expr>:</case>
<return>return <expr><literal type="number">0xD9</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_0xDA</name></expr>:</case>
<return>return <expr><literal type="number">0xDA</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_8</name></expr>:</case>
<return>return <expr><name>VK_OEM_8</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0xE0</name></expr>:</case>
<return>return <expr><literal type="number">0xE0</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_AX</name></expr>:</case>
<return>return <expr><name>VK_OEM_AX</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_ICO_HELP</name></expr>:</case>
<return>return <expr><name>VK_ICO_HELP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_ICO_00</name></expr>:</case>
<return>return <expr><name>VK_ICO_00</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_PROCESSKEY</name></expr>:</case>
<return>return <expr><name>VK_PROCESSKEY</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_ICO_CLEAR</name></expr>:</case>
<return>return <expr><name>VK_ICO_CLEAR</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_PACKET</name></expr>:</case>
<return>return <expr><name>VK_PACKET</name></expr>;</return>
<case>case <expr><name>OBS_KEY_0xE8</name></expr>:</case>
<return>return <expr><literal type="number">0xE8</literal></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_RESET</name></expr>:</case>
<return>return <expr><name>VK_OEM_RESET</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_JUMP</name></expr>:</case>
<return>return <expr><name>VK_OEM_JUMP</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_PA1</name></expr>:</case>
<return>return <expr><name>VK_OEM_PA1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_PA2</name></expr>:</case>
<return>return <expr><name>VK_OEM_PA2</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_PA3</name></expr>:</case>
<return>return <expr><name>VK_OEM_PA3</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_WSCTRL</name></expr>:</case>
<return>return <expr><name>VK_OEM_WSCTRL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_CUSEL</name></expr>:</case>
<return>return <expr><name>VK_OEM_CUSEL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_ATTN</name></expr>:</case>
<return>return <expr><name>VK_OEM_ATTN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_FINISH</name></expr>:</case>
<return>return <expr><name>VK_OEM_FINISH</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_COPY</name></expr>:</case>
<return>return <expr><name>VK_OEM_COPY</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_AUTO</name></expr>:</case>
<return>return <expr><name>VK_OEM_AUTO</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_ENLW</name></expr>:</case>
<return>return <expr><name>VK_OEM_ENLW</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_ATTN</name></expr>:</case>
<return>return <expr><name>VK_ATTN</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_CRSEL</name></expr>:</case>
<return>return <expr><name>VK_CRSEL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_EXSEL</name></expr>:</case>
<return>return <expr><name>VK_EXSEL</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_EREOF</name></expr>:</case>
<return>return <expr><name>VK_EREOF</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_PLAY</name></expr>:</case>
<return>return <expr><name>VK_PLAY</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_ZOOM</name></expr>:</case>
<return>return <expr><name>VK_ZOOM</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_NONAME</name></expr>:</case>
<return>return <expr><name>VK_NONAME</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_PA1</name></expr>:</case>
<return>return <expr><name>VK_PA1</name></expr>;</return>
<case>case <expr><name>OBS_KEY_VK_OEM_CLEAR</name></expr>:</case>
<return>return <expr><name>VK_OEM_CLEAR</name></expr>;</return>


<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_hotkeys_platform_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_hotkeys_platform_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name><operator>-&gt;</operator><name>vk_codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_virtual_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_platform_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkeys</name><operator>-&gt;</operator><name>platform_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vk_down</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>vk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>state</name> <init>= <expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>down</name> <init>= <expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>down</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_hotkeys_platform_is_pressed</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_META</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>vk_down</name><argument_list>(<argument><expr><name>VK_LWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>vk_down</name><argument_list>(<argument><expr><name>VK_RWIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vk_down</name><argument_list>(<argument><expr><call><name>obs_key_to_virtual_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_key_to_str</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">L""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>scan_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_NONE</name></expr>)</condition> <block>{<block_content>
<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>OBS_KEY_MOUSE1</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>OBS_KEY_MOUSE29</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"Mouse %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key</name> <operator>-</operator> <name>OBS_KEY_MOUSE1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_PAUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>obs_get_hotkey_translation</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Pause"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_META</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>obs_get_hotkey_translation</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Windows"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vk</name> <operator>=</operator> <call><name>obs_key_to_virtual_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_code</name> <operator>=</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>vk</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VK_HOME</name></expr>:</case>
<case>case <expr><name>VK_END</name></expr>:</case>
<case>case <expr><name>VK_LEFT</name></expr>:</case>
<case>case <expr><name>VK_UP</name></expr>:</case>
<case>case <expr><name>VK_RIGHT</name></expr>:</case>
<case>case <expr><name>VK_DOWN</name></expr>:</case>
<case>case <expr><name>VK_PRIOR</name></expr>:</case>
<case>case <expr><name>VK_NEXT</name></expr>:</case>
<case>case <expr><name>VK_INSERT</name></expr>:</case>
<case>case <expr><name>VK_DELETE</name></expr>:</case>
<case>case <expr><name>VK_NUMLOCK</name></expr>:</case>
<expr_stmt><expr><name>scan_code</name> <operator>|=</operator> <literal type="number">0x01000000</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name> <argument_list type="generic">&lt; <argument><expr><name>OBS_KEY_VK_CANCEL</name> <operator>||</operator> <name>key</name></expr></argument> &gt;</argument_list></name> <name>OBS_KEY_VK_OEM_CLEAR</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>scan_code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GetKeyNameTextW</name><argument_list>(<argument><expr><name>scan_code</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_from_wcs</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>!=</operator> <name>OBS_KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>obs_key_to_name</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_key_t</name></type> <name>obs_key_from_virtual_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>platform</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>platform</name><operator>-&gt;</operator><name>vk_codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obs_key_t</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_key_to_virtual_key</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_META</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VK_LWIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name><operator>-&gt;</operator><name>vk_codes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_combo_key</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>key_str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_key_to_str</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_key_combination_to_str</name><parameter_list>(<parameter><decl><type><name>obs_key_combination_t</name></type> <name>combination</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_CONTROL_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_CONTROL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_COMMAND_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_META</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_ALT_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_ALT</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>combination</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>INTERACT_SHIFT_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name>OBS_KEY_SHIFT</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>combination</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>OBS_KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_combo_key</name><argument_list>(<argument><expr><name><name>combination</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>sym_initialize_called</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>reset_win32_symbol_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><specifier>static</specifier> <name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>sym_initialize_w</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>sym_set_search_path_w</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>funcs_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialize_success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>first_module</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path_str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>paths</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path_str_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abspath</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>funcs_initialized</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>mod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>funcs_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>LoadLibraryW</name><argument_list>(<argument><expr><literal type="string">L"DbgHelp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mod</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sym_initialize_w</name> <operator>=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"SymInitializeW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_set_search_path_w</name> <operator>=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"SymSetSearchPathW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym_initialize_w</name> <operator>||</operator> <operator>!</operator><name>sym_set_search_path_w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>initialize_success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialize_success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>abspath</name> <operator>=</operator> <call><name>os_get_abs_path_ptr</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abspath</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abspath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>module</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>bin_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path_end</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>module</name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>path_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>existing_path</name> <init>= <expr><name><name>paths</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>existing_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>abspath</name> <operator>=</operator> <call><name>os_get_abs_path_ptr</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abspath</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abspath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>paths</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_str</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_str</name></expr></argument>, <argument><expr><name><name>paths</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>path_str</name><operator>.</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name><name>path_str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>path_str</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_str_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path_str_w</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym_initialize_called</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sym_initialize_w</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>path_str_w</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_initialize_called</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sym_set_search_path_w</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>path_str_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path_str_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>paths</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initialize_crash_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>obs_init_win32_crash_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>initialize_crash_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>initialize_com</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>CoInitializeEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COINIT_APARTMENTTHREADED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>success</name> <init>= <expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CoInitializeEx succeeded: 0x%08X"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CoInitializeEx failed: 0x%08X"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uninitialize_com</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
