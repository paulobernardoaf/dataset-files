<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-output.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BUILD_CAPTIONS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;caption/caption.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;caption/mpeg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>reconnecting</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>stopping</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_event_try</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EAGAIN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>delay_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_active</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>delay_capturing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_capturing</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>data_capture_ending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread_active</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>find_output</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obs</name><operator>-&gt;</operator><name>output_types</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>output_types</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>obs</name><operator>-&gt;</operator><name>output_types</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_output_get_display_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_output</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>info</name><operator>-&gt;</operator><name>get_name</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>output_signals</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"void start(ptr output)"</literal></expr>,
<expr><literal type="string">"void stop(ptr output, int code)"</literal></expr>,
<expr><literal type="string">"void pause(ptr output)"</literal></expr>,
<expr><literal type="string">"void unpause(ptr output)"</literal></expr>,
<expr><literal type="string">"void starting(ptr output)"</literal></expr>,
<expr><literal type="string">"void stopping(ptr output)"</literal></expr>,
<expr><literal type="string">"void activate(ptr output)"</literal></expr>,
<expr><literal type="string">"void deactivate(ptr output)"</literal></expr>,
<expr><literal type="string">"void reconnect(ptr output)"</literal></expr>,
<expr><literal type="string">"void reconnect_success(ptr output)"</literal></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_output_handlers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_context_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>OBS_OBJ_TYPE_OUTPUT</name></expr></argument>,
<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>signal_handler_add_array</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>output_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_output_t</name> <modifier>*</modifier></type><name>obs_output_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_output</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>, <argument><expr><name>OS_EVENT_TYPE_MANUAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_output_handlers</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Output ID '%s' not found"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>owns_info_id</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>info</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name> <operator>=</operator> <call><name>obs_get_video</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name> <operator>=</operator> <call><name>obs_get_audio</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_defaults</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnect_stop_event</name></name></expr></argument>,
<argument><expr><name>OS_EVENT_TYPE_MANUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_sec</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_max</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_weak_output_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_context_data_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>outputs_mutex</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>=</operator>
<call><name><name>info</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create output '%s'!"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"output '%s' (%s) created"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>output</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>obs_output_destroy</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name></name> <operator>+</operator>
<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clear_audio_buffers</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>audio_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_destroy</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_context_data_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"output '%s' destroyed"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>valid</name></name> <operator>&amp;&amp;</operator> <call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_output_actual_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_event_wait</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>data_capture_ending</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_encoder_remove_output</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>,
<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_encoder_remove_output</name><argument_list>(
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>clear_audio_buffers</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_context_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>owns_info_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_output_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_name"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_actual_start</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_event_wait</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>starting_frame_count</name></name> <operator>=</operator>
<call><name>video_output_get_total_frames</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>starting_drawn_count</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>total_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>starting_lagged_count</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lagged_frames</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_restart_refs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_restart_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>caption_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_start</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>encoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_service</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_start"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_service</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_SERVICE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_service</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>obs_service_initialize</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>encoded</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>delay_sec</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>obs_output_delay_start</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_output_actual_start</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"starting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>data_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>data_active</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_frame_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>drawn</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>total_frames</name></name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>starting_drawn_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lagged</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>lagged_frames</name></name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>starting_lagged_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dropped</name> <init>= <expr><call><name>obs_output_get_frames_dropped</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>total_frames</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>percentage_lagged</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percentage_dropped</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>drawn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percentage_lagged</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>lagged</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>drawn</name> <operator>*</operator> <literal type="number">100.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dropped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percentage_dropped</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>dropped</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>total</name> <operator>*</operator> <literal type="number">100.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Output '%s': stopping"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dropped</name> <operator>||</operator> <operator>!</operator><name>total</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Output '%s': Total frames output: %d"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Output '%s': Total frames output: %d"</literal>
<literal type="string">" (%d attempted)"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <name>dropped</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lagged</name> <operator>||</operator> <operator>!</operator><name>drawn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Output '%s': Total drawn frames: %"</literal> <name>PRIu32</name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>drawn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Output '%s': Total drawn frames: %"</literal> <name>PRIu32</name> <literal type="string">" (%"</literal> <name>PRIu32</name>
<literal type="string">" attempted)"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>drawn</name> <operator>-</operator> <name>lagged</name></expr></argument>, <argument><expr><name>drawn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>drawn</name> <operator>&amp;&amp;</operator> <name>lagged</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Output '%s': Number of lagged frames due "</literal>
<literal type="string">"to rendering lag/stalls: %"</literal> <name>PRIu32</name> <literal type="string">" (%0.1f%%)"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>lagged</name></expr></argument>, <argument><expr><name>percentage_lagged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&amp;&amp;</operator> <name>dropped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Output '%s': Number of dropped frames due "</literal>
<literal type="string">"to insufficient bandwidth/connection stalls: "</literal>
<literal type="string">"%d (%0.1f%%)"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>dropped</name></expr></argument>, <argument><expr><name>percentage_dropped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_stop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>obs_output_actual_stop</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>call_stop</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>was_reconnecting</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stopping</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_output_pause</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_reset</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>was_reconnecting</name> <operator>=</operator> <call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_thread_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>call_stop</name> <operator>=</operator> <call><name>delay_capturing</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_capturing</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>OBS_OUTPUT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_output_end_data_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>call_stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>call_stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>call_stop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>was_reconnecting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>OBS_OUTPUT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>caption_tail</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>caption_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>caption_tail</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_stop</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>encoded</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_output_force_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>encoded</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_output_delay_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>stopping</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"stopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_output_actual_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_force_stop</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_force_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stopping</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"stopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>obs_output_actual_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>output</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_output_get_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_flags"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_get_output_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_output</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>settings</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_output_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_output</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_get_output_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_output</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>defaults</name> <init>= <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>properties</name></decl>;</decl_stmt>

<expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>properties</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_output_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_properties"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_update</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_update"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_output_get_settings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_can_pause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_can_pause"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_CAN_PAUSE</name><operator>)</operator></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>end_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>+=</operator> <name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>-</operator> <name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>get_closest_v_ts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_frame_interval_ns</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i2</name> <init>= <expr><name>interval</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>pause</name><operator>-&gt;</operator><name>last_video_ts</name></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>pause</name><operator>-&gt;</operator><name>last_video_ts</name></name> <operator>+</operator> <name>i2</name><operator>)</operator> <operator>/</operator> <name>interval</name><operator>)</operator> <operator>*</operator> <name>interval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pause_can_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pause_can_stop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_encoded_output_pause</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>venc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name><name>aenc</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>closest_v_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>venc</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>closest_v_ts</name> <operator>=</operator> <call><name>get_closest_v_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pause_can_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pause_can_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pause</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>venc</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>ts_start</name></name> <operator>=</operator> <name>closest_v_ts</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>paused</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>pause</name><operator>.</operator><name>ts_start</name></name> <operator>=</operator> <name>closest_v_ts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pause_can_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pause_can_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pause</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_pause</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><name>closest_v_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>paused</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_pause</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pause</name></expr></argument>, <argument><expr><name>closest_v_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>MAX_AUDIO_MIXES</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aenc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aenc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>venc</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_raw_output_pause</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>closest_v_ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>closest_v_ts</name> <operator>=</operator> <call><name>get_closest_v_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>pause_can_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>ts_start</name></name> <operator>=</operator> <name>closest_v_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>pause_can_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_pause</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><name>closest_v_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_pause</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_pause"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_CAN_PAUSE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>pause</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><call><name>obs_encoded_output_pause</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>obs_raw_output_pause</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pause</name></expr> ?</condition><then> <expr><literal type="string">"pause"</literal></expr> </then><else>: <expr><literal type="string">"unpause"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"output %s %spaused"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>pause</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"un"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_paused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_paused"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>obs_output_get_pause_offset</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_pause_offset"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>ts_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>obs_output_get_signal_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_signal_handler"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>obs_output_get_proc_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_proc_handler"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>procs</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_media</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_media"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name> <operator>=</operator> <name>video</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name> <operator>=</operator> <name>audio</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>video_t</name> <modifier>*</modifier></type><name>obs_output_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_video"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>audio_t</name> <modifier>*</modifier></type><name>obs_output_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_audio"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_first_mixer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>mixer_mask</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_mixer</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mixer_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_mixer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>mixer_mask</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mixer_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_output_get_mixer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_mixer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_first_mixer</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_mixers</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mixers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_mixers"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>mixer_mask</name></name> <operator>=</operator> <name>mixers</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_output_get_mixers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_mixers"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>mixer_mask</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_remove_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_remove_encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name> <operator>==</operator> <name>encoder</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>encoder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_video_encoder</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_video_encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>encoder</name> <operator>&amp;&amp;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_video_encoder: "</literal>
<literal type="string">"encoder passed is not a video encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name> <operator>==</operator> <name>encoder</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_encoder_remove_output</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_encoder_add_output</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_set_scaled_size</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_audio_encoder</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_audio_encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>encoder</name> <operator>&amp;&amp;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_audio_encoder: "</literal>
<literal type="string">"encoder passed is not an audio encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_MULTI_TRACK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>MAX_AUDIO_MIXES</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>encoder</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_encoder_remove_output</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_encoder_add_output</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>obs_output_get_video_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_video_encoder"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>obs_output_get_audio_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_audio_encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_MULTI_TRACK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>MAX_AUDIO_MIXES</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_service</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_service"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>service</name> <operator>||</operator> <name><name>service</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_service_t</name> <modifier>*</modifier></type><name>obs_output_get_service</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_service"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_reconnect_settings</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>retry_count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>retry_sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_reconnect_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_max</name></name> <operator>=</operator> <name>retry_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_sec</name></name> <operator>=</operator> <name>retry_sec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>obs_output_get_total_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_total_bytes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_total_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>delay_capturing</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_total_bytes</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_output_get_frames_dropped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_frames_dropped"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_dropped_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_dropped_frames</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_output_get_total_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_total_frames"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>total_frames</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_preferred_size</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_preferred_size"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_VIDEO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"output '%s': Cannot set the preferred "</literal>
<literal type="string">"resolution while the output is active"</literal></expr></argument>,
<argument><expr><call><name>obs_output_get_name</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_set_scaled_size</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_output_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_VIDEO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>obs_encoder_get_width</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name></expr>
</then><else>: <expr><call><name>video_output_get_width</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_output_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_VIDEO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>obs_encoder_get_height</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name></expr>
</then><else>: <expr><call><name>video_output_get_height</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_video_conversion</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>conversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_video_conversion"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>conversion</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_video_conversion"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name></name> <operator>=</operator> <operator>*</operator><name>conversion</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_audio_conversion</name><parameter_list>(
<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_convert_info</name></name> <modifier>*</modifier></type><name>conversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_audio_conversion"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>conversion</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_audio_conversion"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_conversion</name></name> <operator>=</operator> <operator>*</operator><name>conversion</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_conversion_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>service_supports_multitrack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name> <operator>||</operator> <operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>supports_multitrack</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>supports_multitrack</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>num_audio_mixes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mix_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_SERVICE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>service_supports_multitrack</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_MULTI_TRACK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mix_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mix_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>mix_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>audio_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>encoded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>encoded</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mix_count</name> <init>= <expr><call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mix_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mix_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>can_begin_data_capture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_audio</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>has_service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_video</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>encoded</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>audio_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_service</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>has_scaling</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_width</name> <init>= <expr><call><name>video_output_get_width</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_height</name> <init>= <expr><call><name>video_output_get_height</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>video_width</name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>||</operator>
<name>video_height</name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type>
<name>get_video_conversion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion_set</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>width</name></name> <operator>=</operator>
<call><name>obs_output_get_width</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>height</name></name> <operator>=</operator>
<call><name>obs_output_get_height</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>has_scaling</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>video_output_get_info</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <name>VIDEO_CS_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>VIDEO_RANGE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>scaled_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>scaled_height</name></name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>video_conversion</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>audio_convert_info</name></name> <modifier>*</modifier></type>
<name>get_audio_conversion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>output</name><operator>-&gt;</operator><name>audio_conversion_set</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>audio_conversion</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_track_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>encoder</name></name> <operator>==</operator> <name>encoder</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>check_received</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>received_video</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_video</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_interleaved_packet_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>





<expr_stmt><expr><name>offset</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>video_offset</name></name></expr>
</then><else>: <expr><name><name>output</name><operator>-&gt;</operator><name>audio_offsets</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>track_idx</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>dts</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>=</operator> <call><name>packet_dts_usec</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>has_higher_opposing_ts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>highest_audio_ts</name></name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>highest_video_ts</name></name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BUILD_CAPTIONS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>nal_start</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_caption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>backup</name> <init>= <expr><operator>*</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caption_frame_t</name></type> <name>cf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sei_t</name></type> <name>sei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ref</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>out_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sei_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>caption_frame_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caption_frame_from_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_head</name><operator>-&gt;</operator><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_from_caption_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>sei_render_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>sei_render</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name>nal_start</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>backup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>out_data</name><operator>.</operator><name>array</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>out_data</name><operator>.</operator><name>num</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>send_interleaved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>out</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_higher_opposing_ts</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>total_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BUILD_CAPTIONS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frame_timestamp</name> <init>=
<expr><operator>(</operator><name><name>out</name><operator>.</operator><name>pts</name></name> <operator>*</operator> <name><name>out</name><operator>.</operator><name>timebase_num</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>out</name><operator>.</operator><name>timebase_den</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name> <operator>&amp;&amp;</operator>
<name><name>output</name><operator>-&gt;</operator><name>caption_timestamp</name></name> <operator>&lt;=</operator> <name>frame_timestamp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sending caption: %f \"%s\""</literal></expr></argument>,
<argument><expr><name>frame_timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_head</name><operator>-&gt;</operator><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>display_duration</name> <init>=
<expr><name><name>output</name><operator>-&gt;</operator><name>caption_head</name><operator>-&gt;</operator><name>display_duration</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_caption</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>caption_timestamp</name></name> <operator>=</operator>
<name>frame_timestamp</name> <operator>+</operator> <name>display_duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encoded_packet</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_higher_ts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>highest_video_ts</name></name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>highest_video_ts</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>highest_audio_ts</name></name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>highest_audio_ts</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type>
<name>find_first_packet_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>find_first_packet_type_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_interleaved_start_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>closest_diff</name> <init>= <expr><literal type="number">0x7FFFFFFFFFFFFFFFLL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>first_video</name> <init>=
<expr><call><name>find_first_packet_type</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>OBS_ENCODER_VIDEO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>video_idx</name> <init>= <expr><name>DARRAY_INVALID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>packet</name> <operator>==</operator> <name>first_video</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>video_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>-</operator> <name><name>first_video</name><operator>-&gt;</operator><name>dts_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>closest_diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>closest_diff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>video_idx</name> <operator>&lt;</operator> <name>idx</name></expr> ?</condition><then> <expr><name>video_idx</name></expr> </then><else>: <expr><name>idx</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prune_premature_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>audio_mixes</name> <init>= <expr><call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>video_idx</name> <operator>=</operator> <call><name>find_first_packet_type_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>OBS_ENCODER_VIDEO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>video_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_idx</name> <operator>=</operator> <name>video_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>video</name> <operator>=</operator> <operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>video_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>duration_usec</name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>timebase_num</name></name> <operator>*</operator> <literal type="number">1000000LL</literal> <operator>/</operator> <name><name>video</name><operator>-&gt;</operator><name>timebase_den</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>audio_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>audio_idx</name> <operator>=</operator> <call><name>find_first_packet_type_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><name>OBS_ENCODER_AUDIO</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>audio_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>audio</name> <operator>=</operator> <operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>audio_idx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>audio_idx</name> <operator>&gt;</operator> <name>max_idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_idx</name> <operator>=</operator> <name>audio_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>-</operator> <name><name>video</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <name>max_diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_diff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>diff</name> <operator>&gt;</operator> <name>duration_usec</name></expr> ?</condition><then> <expr><name>max_idx</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>discard_to_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_erase_range</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_STARTING_PACKETS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>prune_interleaved_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>start_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prune_start</name> <init>= <expr><call><name>prune_premature_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_STARTING_PACKETS</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"--------- Pruning! %d ---------"</literal></expr></argument>, <argument><expr><name>prune_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"packet: %s %d, ts: %lld, pruned = %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr> ?</condition><then> <expr><literal type="string">"audio"</literal></expr> </then><else>: <expr><literal type="string">"video"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>track_idx</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>prune_start</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>prune_start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>prune_start</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>prune_start</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <call><name>get_interleaved_start_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>discard_to_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>start_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_first_packet_type_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name> <operator>&amp;&amp;</operator>
<name><name>packet</name><operator>-&gt;</operator><name>track_idx</name></name> <operator>!=</operator> <name>audio_idx</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_last_packet_type_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name> <operator>&amp;&amp;</operator>
<name><name>packet</name><operator>-&gt;</operator><name>track_idx</name></name> <operator>!=</operator> <name>audio_idx</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type>
<name>find_first_packet_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>find_first_packet_type_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>audio_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type>
<name>find_last_packet_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>find_last_packet_type_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>audio_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_audio_and_video_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>video</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>audio</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>audio_mixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>video</name> <operator>=</operator> <call><name>find_first_packet_type</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>OBS_ENCODER_VIDEO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>video</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>audio_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>audio</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find_first_packet_type</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>OBS_ENCODER_AUDIO</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audio</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>video</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>initialize_interleaved_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name><name>audio</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name><name>last_audio</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>audio_mixes</name> <init>= <expr><call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>start_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_audio_and_video_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>video</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>, <argument><expr><name>audio_mixes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>audio_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>last_audio</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>find_last_packet_type</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>OBS_ENCODER_AUDIO</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>audio_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>last_audio</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dts_usec</name> <operator>&lt;</operator> <name><name>video</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <call><name>get_interleaved_start_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>discard_to_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>start_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_audio_and_video_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>video</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>,
<argument><expr><name>audio_mixes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_offset</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>audio_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>audio</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dts</name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_STARTING_PACKETS</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>dts_usec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><name><name>audio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>dts_usec</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><name>v</name> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"output '%s' offset for video: %lld, audio: %lld, "</literal>
<literal type="string">"diff: %lldms"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>diff</name> <operator>/</operator> <literal type="number">1000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>highest_audio_ts</name></name> <operator>-=</operator> <name><name>audio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>dts_usec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>highest_video_ts</name></name> <operator>-=</operator> <name><name>video</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apply_interleaved_packet_offset</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>insert_interleaved_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>cur_packet</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_packet</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>==</operator> <name><name>cur_packet</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>&amp;&amp;</operator>
<name><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>&lt;</operator> <name><name>cur_packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_insert</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resort_interleaved_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct encoder_packet</argument>)</argument_list></macro> <expr_stmt><expr><name>old_array</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_array</name><operator>.</operator><name>da</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>old_array</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_interleaved_packet</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_array</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>old_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>discard_unused_audio_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>dts_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_packets</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>&gt;=</operator> <name>dts_usec</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>discard_to_idx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interleave_packets</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>was_started</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>track_idx</name></name> <operator>=</operator> <call><name>get_track_index</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>received_video</name></name> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>discard_unused_audio_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>was_started</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>received_video</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>*</operator><name>packet</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_packet_create_instance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_started</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_interleaved_packet_offset</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_received</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>insert_interleaved_packet</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_higher_ts</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>received_video</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_started</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>prune_interleaved_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>initialize_interleaved_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resort_interleaved_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_interleaved</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>send_interleaved</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_encoded_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>data_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>track_idx</name></name> <operator>=</operator> <call><name>get_track_index</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encoded_packet</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>total_frames</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_raw_video_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>video_pause_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>data_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>raw_video</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>total_frames</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>prepare_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>last_video_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>new</name> <operator>=</operator> <operator>*</operator><name>old</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>old</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <literal type="number">1000000000</literal> <operator>/</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>end_ts</name> <init>= <expr><operator>(</operator><name><name>old</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <name>duration</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cutoff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end_ts</name> <operator>&lt;=</operator> <name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name> <operator>-</operator> <name><name>old</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+=</operator> <name>cutoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name>cutoff</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>output</name><operator>-&gt;</operator><name>audio_size</name></name> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>cutoff</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>frames</name></name> <operator>-=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cutoff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_raw_audio_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_data</name></name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>frame_size_bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_audio</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>audio_pause_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>audio_start_ts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_start_ts</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_size_bytes</name> <operator>=</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name><name>output</name><operator>-&gt;</operator><name>audio_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>audio_buffer</name><index>[<expr><name>mix_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>.</operator><name>frames</name></name> <operator>*</operator> <name><name>output</name><operator>-&gt;</operator><name>audio_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<while>while <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>audio_buffer</name><index>[<expr><name>mix_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>frame_size_bytes</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>audio_buffer</name><index>[<expr><name>mix_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>frame_size_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>audio_start_ts</name></name> <operator>+</operator>
<call><name>audio_frames_to_ns</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>total_audio_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>timestamp</name></name> <operator>+=</operator> <name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>ts_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>total_audio_frames</name></name> <operator>+=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>raw_audio2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>raw_audio2</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>mix_idx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>raw_audio</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>start_audio_encoders</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>encoded_callback_t</name></type> <name>encoded_callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_mixes</name> <init>= <expr><call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>obs_encoder_start</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>encoded_callback</name></expr></argument>,
<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>start_raw_audio</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>raw_audio2</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>mixer_mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>audio_output_connect</name><argument_list>(
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><call><name>get_audio_conversion</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>default_raw_audio_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>audio_output_connect</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><call><name>get_first_mixer</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_audio_conversion</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>default_raw_audio_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_packet_data</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_audio</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>received_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>highest_audio_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>highest_video_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free_packets</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>preserve_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>delay_flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_DELAY_PRESERVE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hook_data_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>encoded</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>has_video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoded_callback_t</name></type> <name>encoded_callback</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encoded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_packet_data</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded_callback</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>has_video</name> <operator>&amp;&amp;</operator> <name>has_audio</name><operator>)</operator></expr>
?</condition><then> <expr><name>interleave_packets</name></expr>
</then><else>: <expr><name>default_encoded_callback</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>delay_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>delay_sec</name></name> <operator>*</operator> <literal type="number">1000000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>delay_cur_flags</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>delay_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>delay_callback</name></name> <operator>=</operator> <name>encoded_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name>encoded_callback</name> <operator>=</operator> <name>process_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Output '%s': %"</literal> <name>PRIu32</name> <literal type="string">" second delay "</literal>
<literal type="string">"active, preserve on disconnect is %s"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>delay_sec</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>preserve_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>start_audio_encoders</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_video</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_start</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>,
<argument><expr><name>encoded_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_video</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>start_raw_video</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>,
<argument><expr><call><name>get_video_conversion</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>default_raw_video_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>start_raw_audio</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_reconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"timeout_sec"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_cur_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"reconnect"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_reconnect_success</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"reconnect_success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_stop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"last_error"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"code"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>convert_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>encoded</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>has_video</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>has_audio</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>has_service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>encoded</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>has_video</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OBS_OUTPUT_VIDEO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>has_audio</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OBS_OUTPUT_AUDIO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>has_service</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OBS_OUTPUT_SERVICE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_can_begin_data_capture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>encoded</name></decl>, <decl><type ref="prev"/><name>has_video</name></decl>, <decl><type ref="prev"/><name>has_audio</name></decl>, <decl><type ref="prev"/><name>has_service</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_can_begin_data_capture"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>data_capture_ending</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>convert_flags</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_audio</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>has_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>can_begin_data_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>has_video</name></expr></argument>, <argument><expr><name>has_audio</name></expr></argument>,
<argument><expr><name>has_service</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>initialize_audio_encoders</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>num_mixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_initialize</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>find_inactive_audio_encoder</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>num_mixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>audio</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>audio</name><operator>-&gt;</operator><name>active</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>audio</name><operator>-&gt;</operator><name>paired_encoder</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>audio</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>pair_encoders</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_mixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>audio</name> <init>=
<expr><call><name>find_inactive_audio_encoder</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>num_mixes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>video</name> <operator>&amp;&amp;</operator> <name>audio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audio</name><operator>-&gt;</operator><name>active</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>active</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>paired_encoder</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>audio</name><operator>-&gt;</operator><name>paired_encoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>wait_for_video</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>paired_encoder</name></name> <operator>=</operator> <name>video</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>paired_encoder</name></name> <operator>=</operator> <name>audio</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_initialize_encoders</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>encoded</name></decl>, <decl><type ref="prev"/><name>has_video</name></decl>, <decl><type ref="prev"/><name>has_audio</name></decl>, <decl><type ref="prev"/><name>has_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_mixes</name> <init>= <expr><call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_initialize_encoders"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>convert_flags</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_audio</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>has_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoded</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_video</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>obs_encoder_initialize</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_audio</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>initialize_audio_encoders</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>num_mixes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>begin_delayed_capture</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>delay_capturing</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_packet_data</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_capturing</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal_reconnect_success</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>signal_start</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_raw_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_audio_buffers</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>aoi</name> <init>=
<expr><call><name>audio_output_get_info</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_convert_info</name></name></type> <name>conv</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>audio_conversion</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_convert_info</name></name></type> <name>info</name> <init>= <expr><block>{
<expr><name><name>aoi</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>,
<expr><name><name>aoi</name><operator>-&gt;</operator><name>format</name></name></expr>,
<expr><name><name>aoi</name><operator>-&gt;</operator><name>speakers</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>audio_conversion_set</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>samples_per_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>conv</name><operator>.</operator><name>samples_per_sec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>AUDIO_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>conv</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>speakers</name></name> <operator>!=</operator> <name>SPEAKERS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <name><name>conv</name><operator>.</operator><name>speakers</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <call><name>get_audio_planes</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>total_audio_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_size</name></name> <operator>=</operator>
<call><name>get_audio_size</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>speakers</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>audio_start_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>video_start_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pause_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_begin_data_capture</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>encoded</name></decl>, <decl><type ref="prev"/><name>has_video</name></decl>, <decl><type ref="prev"/><name>has_audio</name></decl>, <decl><type ref="prev"/><name>has_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_mixes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_begin_data_capture"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>begin_delayed_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>total_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_OUTPUT_ENCODED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reset_raw_output</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>convert_flags</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_audio</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>has_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_begin_data_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>has_video</name></expr></argument>, <argument><expr><name>has_audio</name></expr></argument>,
<argument><expr><name>has_service</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_mixes</name> <operator>=</operator> <call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_video</name> <operator>&amp;&amp;</operator> <name>has_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pair_encoders</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>num_mixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>data_active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hook_data_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>has_video</name></expr></argument>, <argument><expr><name>has_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_service</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_service_activate</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal_reconnect_success</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"starting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>signal_start</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>stop_audio_encoders</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>encoded_callback_t</name></type> <name>encoded_callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_mixes</name> <init>= <expr><call><name>num_audio_mixes</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_mixes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>obs_encoder_stop</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio_encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>encoded_callback</name></expr></argument>,
<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>stop_raw_audio</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>raw_audio2</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>mixer_mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>audio_output_disconnect</name><argument_list>(
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><name>default_raw_audio_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>audio_output_disconnect</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><call><name>get_first_mixer</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>default_raw_audio_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>end_data_capture_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>encoded</name></decl>, <decl><type ref="prev"/><name>has_video</name></decl>, <decl><type ref="prev"/><name>has_audio</name></decl>, <decl><type ref="prev"/><name>has_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoded_callback_t</name></type> <name>encoded_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_flags</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_audio</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>has_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>encoded</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoded_callback</name> <operator>=</operator> <name>process_delay</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>encoded_callback</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>has_video</name> <operator>&amp;&amp;</operator> <name>has_audio</name><operator>)</operator></expr>
?</condition><then> <expr><name>interleave_packets</name></expr>
</then><else>: <expr><name>default_encoded_callback</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_video</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_encoder_stop</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video_encoder</name></name></expr></argument>,
<argument><expr><name>encoded_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_audio_encoders</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_video</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_raw_video</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr></argument>,
<argument><expr><name>default_raw_video_callback</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_raw_audio</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_service</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_service_deactivate</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>active_delay_ns</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_output_cleanup_delay</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_output_signal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"deactivate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread_active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_output_end_data_capture_internal</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>signal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_end_data_capture"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>data_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>OBS_OUTPUT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_capturing</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_restart_refs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>stopping_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>data_active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>video</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_frame_info</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>data_capture_ending</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread_active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>end_data_capture_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>end_data_capture_thread</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create end_data_capture_thread "</literal>
<literal type="string">"for output '%s'!"</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_data_capture_thread</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>OBS_OUTPUT_SUCCESS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_end_data_capture</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_output_end_data_capture_internal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>reconnect_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ms</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_cur_sec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_thread_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_timedwait</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_stop_event</name></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ETIMEDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_output_actual_start</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_try</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_stop_event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_thread_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RETRY_SEC</name></cpp:macro> <cpp:value>(15 * 60)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_reconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_cur_sec</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retries</name></name> <operator>&gt;=</operator> <name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>OBS_OUTPUT_DISCONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_output_end_data_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_event_reset</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_cur_sec</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_cur_sec</name></name> <operator>&gt;</operator> <name>MAX_RETRY_SEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_cur_sec</name></name> <operator>=</operator> <name>MAX_RETRY_SEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retries</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>OBS_OUTPUT_DISCONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnect_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reconnect_thread</name></expr></argument>,
<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to create reconnect thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>reconnecting</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Output '%s': Reconnecting in %d seconds.."</literal></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_reconnect</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>can_reconnect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>reconnect_active</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>reconnect_retry_max</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>OBS_OUTPUT_SUCCESS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>reconnect_active</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <name>OBS_OUTPUT_DISCONNECTED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_signal_stop</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_signal_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>stop_code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_reconnect</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_restart_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_output_end_data_capture_internal</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_reconnect</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>delay_active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>delay_active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_output_end_data_capture</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_addref</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_release</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>control</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>obs_output_destroy</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_weak_output_release</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_output_addref</name><parameter_list>(<parameter><decl><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_weak_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_output_release</name><parameter_list>(<parameter><decl><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_output_t</name> <modifier>*</modifier></type><name>obs_output_get_ref</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>obs_weak_output_get_output</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>obs_output_get_weak_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>weak</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_weak_output_addref</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>weak</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_output_t</name> <modifier>*</modifier></type><name>obs_weak_output_get_output</name><parameter_list>(<parameter><decl><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_get_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>weak</name><operator>-&gt;</operator><name>output</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_weak_output_references_output</name><parameter_list>(<parameter><decl><type><name>obs_weak_output_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>,
<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>weak</name> <operator>&amp;&amp;</operator> <name>output</name> <operator>&amp;&amp;</operator> <name><name>weak</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_output_get_type_data</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_type_data"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type_data</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_output_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_id"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BUILD_CAPTIONS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>caption_text_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>tail</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>display_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>caption_text</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CAPTION_LINE_BYTES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name></expr></argument>,
<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>display_duration</name></name> <operator>=</operator> <name>display_duration</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_output_caption_text1</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_output_caption_text1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_output_output_caption_text2</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_output_caption_text2</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>display_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_output_caption_text2"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>active</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Caption text: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>caption_tail</name></name> <operator>=</operator>
<call><name>caption_text_new</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>caption_tail</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_head</name></name></expr></argument>, <argument><expr><name>display_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>caption_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>float</name></type> <name>obs_output_get_congestion</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_congestion"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_congestion</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_congestion</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_output_get_connect_time_ms</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_connect_time_ms"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_connect_time_ms</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_connect_time_ms</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_output_get_last_error</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_get_last_error"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_output_set_last_error</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_set_last_error"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>last_error_message</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_output_reconnecting</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_output_reconnecting"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>reconnecting</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_output_get_supported_video_codecs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encoded_video_codecs</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_output_get_supported_audio_codecs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encoded_audio_codecs</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
