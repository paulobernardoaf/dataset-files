<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-hotkey-name-map.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bmem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/c99defs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<struct_decl>struct <name>obs_hotkey_name_map_edge</name>;</struct_decl>
<struct_decl>struct <name>obs_hotkey_name_map_node</name>;</struct_decl>
<struct_decl>struct <name>obs_hotkey_name_map</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>obs_hotkey_name_map_edge</name></name></type> <name>obs_hotkey_name_map_edge_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>obs_hotkey_name_map_node</name></name></type> <name>obs_hotkey_name_map_node_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>obs_hotkey_name_map</name></name></type> <name>obs_hotkey_name_map_t</name>;</typedef>

<struct>struct <name>obs_hotkey_name_map_node</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>is_leaf</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>obs_hotkey_name_map_edge_t</argument>)</argument_list></macro> <expr_stmt><expr><name>children</name></expr>;</expr_stmt>
}</block>;</union>
}</block>;</struct>

<struct>struct <name>obs_hotkey_name_map</name> <block>{
<decl_stmt><decl><type><name>obs_hotkey_name_map_node_t</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>leaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_leaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>next_leaf</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>obs_hotkey_name_map_edge_prefix</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_MAP_COMPRESS_LENGTH</name></cpp:macro> <cpp:value>(sizeof(struct obs_hotkey_name_map_edge_prefix) - sizeof(uint8_t))</cpp:value></cpp:define>


<struct>struct <name>obs_hotkey_name_map_edge</name> <block>{
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>compressed_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>compressed_prefix</name><index>[<expr><name>NAME_MAP_COMPRESS_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_name_map_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>new_node</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_hotkey_name_map_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>new_leaf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_name_map_t</name> <modifier>*</modifier></type><name>name_map</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>node</name> <init>=
<expr><operator>&amp;</operator><name><name>name_map</name><operator>-&gt;</operator><name>leaves</name><index>[<expr><name><name>name_map</name><operator>-&gt;</operator><name>next_leaf</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>name_map</name><operator>-&gt;</operator><name>next_leaf</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>is_leaf</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>get_prefix</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>&gt;=</operator> <name>NAME_MAP_COMPRESS_LENGTH</name></expr> ?</condition><then> <expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr>
</then><else>: <expr><name><name>e</name><operator>-&gt;</operator><name>compressed_prefix</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_prefix</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>compressed_len</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>NAME_MAP_COMPRESS_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>compressed_prefix</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>bstrdup_n</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>add_leaf</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>new_leaf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shrink_prefix</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old_comp</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>&lt;</operator> <name>NAME_MAP_COMPRESS_LENGTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>new_comp</name> <init>= <expr><name>l</name> <operator>&lt;</operator> <name>NAME_MAP_COMPRESS_LENGTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_comp</name> <operator>&amp;&amp;</operator> <name>new_comp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reduce_edge</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str_</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>common_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <operator>*</operator><name>str_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>common_length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str_</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>new_node_</name> <init>= <expr><call><name>new_node</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>tail</name> <init>=
<expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>new_node_</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>-</operator> <name>common_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_leaf</name><argument_list>(<argument><expr><name>new_node_</name></expr></argument>, <argument><expr><name>str_</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <name>common_length</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>new_node_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shrink_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>common_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<enum>enum <name>obs_hotkey_name_map_edge_compare_result</name> <block>{
<decl><name>RES_MATCHES</name></decl>,
<decl><name>RES_NO_MATCH</name></decl>,
<decl><name>RES_COMMON_PREFIX</name></decl>,
<decl><name>RES_PREFIX_MATCHES</name></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>obs_hotkey_name_map_edge_compare_result</name></name></type>
<name>compare_prefix</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pref_len</name> <init>= <expr><name><name>edge</name><operator>-&gt;</operator><name>prefix_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>pref_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pref_len</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>l</name> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><name>RES_MATCHES</name></expr> </then><else>: <expr><name>RES_PREFIX_MATCHES</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>pref_len</name> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><name>RES_PREFIX_MATCHES</name></expr> </then><else>: <expr><name>RES_COMMON_PREFIX</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>RES_NO_MATCH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>is_leaf</name></name> <operator>&amp;&amp;</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>new_node_</name> <init>= <expr><call><name>new_node</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name>new_node_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>edge</name> <init>=
<expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>new_node_</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_leaf</name><argument_list>(<argument><expr><name>new_node_</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>is_leaf</name></name> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>compare_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RES_NO_MATCH</name></expr>:</case>
<continue>continue;</continue>

<case>case <expr><name>RES_MATCHES</name></expr>:</case>
<case>case <expr><name>RES_PREFIX_MATCHES</name></expr>:</case>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name></expr></argument>,
<argument><expr><name>l</name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>RES_COMMON_PREFIX</name></expr>:</case>
<expr_stmt><expr><call><name>reduce_edge</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>add_leaf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_hotkey_name_map_insert</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_t</name> <modifier>*</modifier></type><name>trie</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trie</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trie</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_hotkey_name_map_lookup</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_t</name> <modifier>*</modifier></type><name>trie</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trie</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>&amp;</operator><name><name>trie</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>compare_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RES_NO_MATCH</name></expr>:</case>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>RES_COMMON_PREFIX</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>RES_PREFIX_MATCHES</name></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>e</name><operator>-&gt;</operator><name>prefix_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>RES_MATCHES</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>is_leaf</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>prefix_len</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name>
<operator>.</operator><name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_node</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>is_leaf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">": % 3d\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lu:\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_node</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>trie_print_size</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_t</name> <modifier>*</modifier></type><name>trie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trie</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>obs_key_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_HOTKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-hotkeys.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OBS_HOTKEY</name></cpp:undef>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_key_to_name</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>OBS_KEY_LAST_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"obs-hotkey.c: queried unknown key "</literal>
<literal type="string">"with code %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>obs_key_names</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_key_t</name></type> <name>obs_key_from_name_fallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_HOTKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (strcmp(#x, name) == 0) return x;</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-hotkeys.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OBS_HOTKEY</name></cpp:undef>
<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_name_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_hotkey_name_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>obs_hotkey_name_map_t</name> <modifier>*</modifier></type><name>name_map</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_HOTKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name_map-&gt;num_leaves += 1;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-hotkeys.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OBS_HOTKEY</name></cpp:undef>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_hotkey_name_map_node_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>name_map</name><operator>-&gt;</operator><name>num_leaves</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>name_map</name><operator>-&gt;</operator><name>leaves</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_HOTKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_hotkey_name_map_insert(name_map, #x, x);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-hotkeys.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OBS_HOTKEY</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>obs_key_t</name></type> <name>obs_key_from_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>obs_key_from_name_fallback</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map_init_token</name></name></expr></argument>, <argument><expr><name>init_name_map</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>obs_key_from_name_fallback</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_hotkey_name_map_lookup</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OBS_KEY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_node</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>release</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_edge</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_edge_t</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_node</name><argument_list>(<argument><expr><name><name>edge</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>edge</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>&lt;</operator> <name>NAME_MAP_COMPRESS_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><call><name>get_prefix</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_node</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_name_map_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>release</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>is_leaf</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_edge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>release</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>is_leaf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_name_map_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name> <operator>||</operator> <operator>!</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name><operator>-&gt;</operator><name>leaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>name_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
