<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-avc.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-avc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/array-serializer.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>obs_avc_keyframe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nal_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nal_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>nal_start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>nal_start</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>nal_start</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>nal_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE_IDR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE_IDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <name>nal_end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ff_avc_find_startcode_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80808080</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>end</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>end</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obs_avc_find_startcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_avc_find_startcode_internal</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>out</name> <operator>&amp;&amp;</operator> <name>out</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>out</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_drop_priority</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>priority</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>serialize_avc_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>serializer</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_keyframe</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nal_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nal_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>nal_start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>nal_start</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>nal_start</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>nal_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE_IDR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_keyframe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>is_keyframe</name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE_IDR</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>priority</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>priority</name> <operator>=</operator> <name><name>nal_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_wb32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>nal_end</name> <operator>-</operator> <name>nal_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>nal_end</name> <operator>-</operator> <name>nal_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <name>nal_end</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_parse_avc_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>avc_packet</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>array_output_data</name></name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>serializer</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ref</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_output_serializer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avc_packet</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serialize_avc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avc_packet</name><operator>-&gt;</operator><name>keyframe</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avc_packet</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc_packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>bytes</name><operator>.</operator><name>array</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avc_packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>bytes</name><operator>.</operator><name>num</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avc_packet</name><operator>-&gt;</operator><name>drop_priority</name></name> <operator>=</operator> <call><name>get_drop_priority</name><argument_list>(<argument><expr><name><name>avc_packet</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>has_start_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_sps_pps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sps</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sps_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pps_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nal_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nal_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>nal_start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>nal_start</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>nal_start</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>nal_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sps</name> <operator>=</operator> <name>nal_start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sps_size</name> <operator>=</operator> <name>nal_end</name> <operator>-</operator> <name>nal_start</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_PPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pps</name> <operator>=</operator> <name>nal_start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pps_size</name> <operator>=</operator> <name>nal_end</name> <operator>-</operator> <name>nal_start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <name>nal_end</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_parse_avc_header</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>array_output_data</name></name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>serializer</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sps_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pps_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_output_serializer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_start_code</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_sps_pps</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name> <operator>||</operator> <operator>!</operator><name>pps</name> <operator>||</operator> <name>sps_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>s_w8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>sps</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_w8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_w8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0xe1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s_wb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>, <argument><expr><name>sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_w8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_wb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>s_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>, <argument><expr><name>pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>bytes</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>output</name><operator>.</operator><name>bytes</name><operator>.</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_extract_avc_headers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_packet_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>new_packet_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>header_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>header_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sei_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sei_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>new_packet</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>header</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>sei</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nal_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nal_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nal_codestart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>packet</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nal_end</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nal_codestart</name> <operator>=</operator> <name>nal_start</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nal_start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>nal_start</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>nal_start</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>nal_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nal_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SPS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBS_NAL_PPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>nal_codestart</name></expr></argument>,
<argument><expr><name>nal_end</name> <operator>-</operator> <name>nal_codestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SEI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>nal_codestart</name></expr></argument>,
<argument><expr><name>nal_end</name> <operator>-</operator> <name>nal_codestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><name>nal_codestart</name></expr></argument>,
<argument><expr><name>nal_end</name> <operator>-</operator> <name>nal_codestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <name>nal_end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>new_packet_data</name> <operator>=</operator> <name><name>new_packet</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>new_packet_size</name> <operator>=</operator> <name><name>new_packet</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>header_data</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>header_size</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sei_data</name> <operator>=</operator> <name><name>sei</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sei_size</name> <operator>=</operator> <name><name>sei</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
