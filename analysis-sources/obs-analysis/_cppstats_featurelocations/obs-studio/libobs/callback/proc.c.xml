<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\callback\proc.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/darray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc.h"</cpp:file></cpp:include>

<struct>struct <name>proc_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>decl_info</name></name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proc_handler_proc_t</name></type> <name>callback</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>proc_info_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_info</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decl_info_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pi</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>proc_handler</name> <block>{

<macro><name>DARRAY</name><argument_list>(<argument>struct proc_info</argument>)</argument_list></macro> <expr_stmt><expr><name>procs</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>proc_handler_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>proc_handler</name></name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>proc_handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>procs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>handler</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>proc_handler_destroy</name><parameter_list>(<parameter><decl><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>handler</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>handler</name><operator>-&gt;</operator><name>procs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>proc_info_free</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>procs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>procs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>proc_handler_add</name><parameter_list>(<parameter><decl><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decl_string</name></decl></parameter>,
<parameter><decl><type><name>proc_handler_proc_t</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handler</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>proc_info</name></name></type> <name>pi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>proc_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_decl_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pi</name><operator>.</operator><name>func</name></name></expr></argument>, <argument><expr><name>decl_string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Function declaration invalid: %s"</literal></expr></argument>,
<argument><expr><name>decl_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pi</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>procs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>proc_handler_call</name><parameter_list>(<parameter><decl><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handler</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>handler</name><operator>-&gt;</operator><name>procs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>proc_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>handler</name><operator>-&gt;</operator><name>procs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
