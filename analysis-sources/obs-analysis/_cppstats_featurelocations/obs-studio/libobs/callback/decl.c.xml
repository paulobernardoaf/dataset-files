<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\callback\decl.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/cf-parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>err_specifier_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"'$1' specifier already exists"</literal></expr></argument>, <argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>err_reserved_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"'$1' is a reserved name"</literal></expr></argument>, <argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>err_existing_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"'$1' already exists"</literal></expr></argument>, <argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_in_out_specifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>type</name> <operator>&amp;</operator> <name>CALL_PARAM_IN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err_specifier_exists</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>|=</operator> <name>CALL_PARAM_IN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>type</name> <operator>&amp;</operator> <name>CALL_PARAM_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err_specifier_exists</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>|=</operator> <name>CALL_PARAM_OUT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_OR_STORAGE</name></cpp:macro> <cpp:value>"type or storage specifier"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>call_param_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_return</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>CALL_PARAM_TYPE_INT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>CALL_PARAM_TYPE_FLOAT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>CALL_PARAM_TYPE_BOOL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>CALL_PARAM_TYPE_PTR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>CALL_PARAM_TYPE_STRING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>is_return</name> <operator>&amp;&amp;</operator> <call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>CALL_PARAM_TYPE_VOID</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_reserved_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>name_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>decl_info</name></name> <modifier>*</modifier></type><name>decl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>decl</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param_name</name> <init>= <expr><name><name>decl</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>param_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>decl_info</name></name> <modifier>*</modifier></type><name>decl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>decl_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name_ref</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>TYPE_OR_STORAGE</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>is_in_out_specifier</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name_ref</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>TYPE_OR_STORAGE</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>CALL_PARAM_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_go_to_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"parameter name"</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>name_exists</name><argument_list>(<argument><expr><name>decl</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err_existing_name</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reserved_name</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err_reserved_name</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>decl_info</name></name> <modifier>*</modifier></type><name>decl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>peek</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parse_param</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_CONTINUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cf_token_should_be</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decl_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errors</name> <init>= <expr><call><name>error_data_buildstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfp</name><operator>-&gt;</operator><name>error_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errors</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Errors/warnings for '%s':\n\n%s"</literal></expr></argument>,
<argument><expr><name>decl_string</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>parse_decl_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>decl_info</name></name> <modifier>*</modifier></type><name>decl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decl_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_parser</name></name></type> <name>cfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>ret_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>decl_param</name></name></type> <name>ret_param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>decl</name><operator>-&gt;</operator><name>decl_string</name></name> <operator>=</operator> <name>decl_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_param</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>CALL_PARAM_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_parser_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><name>decl_string</name></expr></argument>, <argument><expr><literal type="string">"declaration"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_get_name_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>, <argument><expr><literal type="string">"return type"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret_param</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"return type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"function name"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reserved_name</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err_reserved_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><call><name>error_data_has_errors</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfp</name><operator>.</operator><name>error_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name><name>ret_param</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>CALL_PARAM_TYPE_VOID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret_param</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decl_info_free</name><argument_list>(<argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_errors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>, <argument><expr><name>decl_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_parser_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>
</unit>
