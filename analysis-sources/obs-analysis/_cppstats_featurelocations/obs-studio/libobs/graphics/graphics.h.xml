<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\graphics.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/bmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objc/objc-runtime.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_MAX_TEXTURES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct_decl>struct <name>vec2</name>;</struct_decl>
<struct_decl>struct <name>vec3</name>;</struct_decl>
<struct_decl>struct <name>vec4</name>;</struct_decl>
<struct_decl>struct <name>quat</name>;</struct_decl>
<struct_decl>struct <name>axisang</name>;</struct_decl>
<struct_decl>struct <name>plane</name>;</struct_decl>
<struct_decl>struct <name>matrix3</name>;</struct_decl>
<struct_decl>struct <name>matrix4</name>;</struct_decl>

<enum>enum <name>gs_draw_mode</name> <block>{
<decl><name>GS_POINTS</name></decl>,
<decl><name>GS_LINES</name></decl>,
<decl><name>GS_LINESTRIP</name></decl>,
<decl><name>GS_TRIS</name></decl>,
<decl><name>GS_TRISTRIP</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_color_format</name> <block>{
<decl><name>GS_UNKNOWN</name></decl>,
<decl><name>GS_A8</name></decl>,
<decl><name>GS_R8</name></decl>,
<decl><name>GS_RGBA</name></decl>,
<decl><name>GS_BGRX</name></decl>,
<decl><name>GS_BGRA</name></decl>,
<decl><name>GS_R10G10B10A2</name></decl>,
<decl><name>GS_RGBA16</name></decl>,
<decl><name>GS_R16</name></decl>,
<decl><name>GS_RGBA16F</name></decl>,
<decl><name>GS_RGBA32F</name></decl>,
<decl><name>GS_RG16F</name></decl>,
<decl><name>GS_RG32F</name></decl>,
<decl><name>GS_R16F</name></decl>,
<decl><name>GS_R32F</name></decl>,
<decl><name>GS_DXT1</name></decl>,
<decl><name>GS_DXT3</name></decl>,
<decl><name>GS_DXT5</name></decl>,
<decl><name>GS_R8G8</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_zstencil_format</name> <block>{
<decl><name>GS_ZS_NONE</name></decl>,
<decl><name>GS_Z16</name></decl>,
<decl><name>GS_Z24_S8</name></decl>,
<decl><name>GS_Z32F</name></decl>,
<decl><name>GS_Z32F_S8X24</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_index_type</name> <block>{
<decl><name>GS_UNSIGNED_SHORT</name></decl>,
<decl><name>GS_UNSIGNED_LONG</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_cull_mode</name> <block>{
<decl><name>GS_BACK</name></decl>,
<decl><name>GS_FRONT</name></decl>,
<decl><name>GS_NEITHER</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_blend_type</name> <block>{
<decl><name>GS_BLEND_ZERO</name></decl>,
<decl><name>GS_BLEND_ONE</name></decl>,
<decl><name>GS_BLEND_SRCCOLOR</name></decl>,
<decl><name>GS_BLEND_INVSRCCOLOR</name></decl>,
<decl><name>GS_BLEND_SRCALPHA</name></decl>,
<decl><name>GS_BLEND_INVSRCALPHA</name></decl>,
<decl><name>GS_BLEND_DSTCOLOR</name></decl>,
<decl><name>GS_BLEND_INVDSTCOLOR</name></decl>,
<decl><name>GS_BLEND_DSTALPHA</name></decl>,
<decl><name>GS_BLEND_INVDSTALPHA</name></decl>,
<decl><name>GS_BLEND_SRCALPHASAT</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_depth_test</name> <block>{
<decl><name>GS_NEVER</name></decl>,
<decl><name>GS_LESS</name></decl>,
<decl><name>GS_LEQUAL</name></decl>,
<decl><name>GS_EQUAL</name></decl>,
<decl><name>GS_GEQUAL</name></decl>,
<decl><name>GS_GREATER</name></decl>,
<decl><name>GS_NOTEQUAL</name></decl>,
<decl><name>GS_ALWAYS</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_stencil_side</name> <block>{
<decl><name>GS_STENCIL_FRONT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>GS_STENCIL_BACK</name></decl>,
<decl><name>GS_STENCIL_BOTH</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_stencil_op_type</name> <block>{
<decl><name>GS_KEEP</name></decl>,
<decl><name>GS_ZERO</name></decl>,
<decl><name>GS_REPLACE</name></decl>,
<decl><name>GS_INCR</name></decl>,
<decl><name>GS_DECR</name></decl>,
<decl><name>GS_INVERT</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_cube_sides</name> <block>{
<decl><name>GS_POSITIVE_X</name></decl>,
<decl><name>GS_NEGATIVE_X</name></decl>,
<decl><name>GS_POSITIVE_Y</name></decl>,
<decl><name>GS_NEGATIVE_Y</name></decl>,
<decl><name>GS_POSITIVE_Z</name></decl>,
<decl><name>GS_NEGATIVE_Z</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_sample_filter</name> <block>{
<decl><name>GS_FILTER_POINT</name></decl>,
<decl><name>GS_FILTER_LINEAR</name></decl>,
<decl><name>GS_FILTER_ANISOTROPIC</name></decl>,
<decl><name>GS_FILTER_MIN_MAG_POINT_MIP_LINEAR</name></decl>,
<decl><name>GS_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</name></decl>,
<decl><name>GS_FILTER_MIN_POINT_MAG_MIP_LINEAR</name></decl>,
<decl><name>GS_FILTER_MIN_LINEAR_MAG_MIP_POINT</name></decl>,
<decl><name>GS_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</name></decl>,
<decl><name>GS_FILTER_MIN_MAG_LINEAR_MIP_POINT</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_address_mode</name> <block>{
<decl><name>GS_ADDRESS_CLAMP</name></decl>,
<decl><name>GS_ADDRESS_WRAP</name></decl>,
<decl><name>GS_ADDRESS_MIRROR</name></decl>,
<decl><name>GS_ADDRESS_BORDER</name></decl>,
<decl><name>GS_ADDRESS_MIRRORONCE</name></decl>,
}</block>;</enum>

<enum>enum <name>gs_texture_type</name> <block>{
<decl><name>GS_TEXTURE_2D</name></decl>,
<decl><name>GS_TEXTURE_3D</name></decl>,
<decl><name>GS_TEXTURE_CUBE</name></decl>,
}</block>;</enum>

<struct>struct <name>gs_device_loss</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>device_loss_release</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>device_loss_rebuild</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>gs_monitor_info</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rotation_degrees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cy</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>gs_tvertarray</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>gs_vb_data</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>points</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>normals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>tangents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>colors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_tvertarray</name></name> <modifier>*</modifier></type><name>tvarray</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>gs_vbdata_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>gs_vb_data</name> <operator>*</operator><operator>)</operator><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_vb_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gs_vbdata_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tangents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tvarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>gs_sampler_info</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>gs_sample_filter</name></name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_address_mode</name></name></type> <name>address_u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_address_mode</name></name></type> <name>address_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_address_mode</name></name></type> <name>address_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_anisotropy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>border_color</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>gs_display_mode</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>gs_rect</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cy</name></decl>;</decl_stmt>
}</block>;</struct>



<struct_decl>struct <name>gs_texture</name>;</struct_decl>
<struct_decl>struct <name>gs_stage_surface</name>;</struct_decl>
<struct_decl>struct <name>gs_zstencil_buffer</name>;</struct_decl>
<struct_decl>struct <name>gs_vertex_buffer</name>;</struct_decl>
<struct_decl>struct <name>gs_index_buffer</name>;</struct_decl>
<struct_decl>struct <name>gs_sampler_state</name>;</struct_decl>
<struct_decl>struct <name>gs_shader</name>;</struct_decl>
<struct_decl>struct <name>gs_swap_chain</name>;</struct_decl>
<struct_decl>struct <name>gs_timer</name>;</struct_decl>
<struct_decl>struct <name>gs_texrender</name>;</struct_decl>
<struct_decl>struct <name>gs_shader_param</name>;</struct_decl>
<struct_decl>struct <name>gs_effect</name>;</struct_decl>
<struct_decl>struct <name>gs_effect_technique</name>;</struct_decl>
<struct_decl>struct <name>gs_effect_pass</name>;</struct_decl>
<struct_decl>struct <name>gs_effect_param</name>;</struct_decl>
<struct_decl>struct <name>gs_device</name>;</struct_decl>
<struct_decl>struct <name>graphics_subsystem</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>gs_texture</name></name></type> <name>gs_texture_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_stage_surface</name></name></type> <name>gs_stagesurf_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_zstencil_buffer</name></name></type> <name>gs_zstencil_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_vertex_buffer</name></name></type> <name>gs_vertbuffer_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_index_buffer</name></name></type> <name>gs_indexbuffer_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_sampler_state</name></name></type> <name>gs_samplerstate_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_swap_chain</name></name></type> <name>gs_swapchain_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_timer</name></name></type> <name>gs_timer_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_timer_range</name></name></type> <name>gs_timer_range_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_texture_render</name></name></type> <name>gs_texrender_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_shader</name></name></type> <name>gs_shader_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_shader_param</name></name></type> <name>gs_sparam_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_effect</name></name></type> <name>gs_effect_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_effect_technique</name></name></type> <name>gs_technique_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_effect_pass</name></name></type> <name>gs_epass_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_effect_param</name></name></type> <name>gs_eparam_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_device</name></name></type> <name>gs_device_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>graphics_subsystem</name></name></type> <name>graphics_t</name>;</typedef>





<enum>enum <name>gs_shader_param_type</name> <block>{
<decl><name>GS_SHADER_PARAM_UNKNOWN</name></decl>,
<decl><name>GS_SHADER_PARAM_BOOL</name></decl>,
<decl><name>GS_SHADER_PARAM_FLOAT</name></decl>,
<decl><name>GS_SHADER_PARAM_INT</name></decl>,
<decl><name>GS_SHADER_PARAM_STRING</name></decl>,
<decl><name>GS_SHADER_PARAM_VEC2</name></decl>,
<decl><name>GS_SHADER_PARAM_VEC3</name></decl>,
<decl><name>GS_SHADER_PARAM_VEC4</name></decl>,
<decl><name>GS_SHADER_PARAM_INT2</name></decl>,
<decl><name>GS_SHADER_PARAM_INT3</name></decl>,
<decl><name>GS_SHADER_PARAM_INT4</name></decl>,
<decl><name>GS_SHADER_PARAM_MATRIX4X4</name></decl>,
<decl><name>GS_SHADER_PARAM_TEXTURE</name></decl>,
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>gs_shader_param_info</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>gs_shader_param_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>gs_shader_type</name> <block>{
<decl><name>GS_SHADER_VERTEX</name></decl>,
<decl><name>GS_SHADER_PIXEL</name></decl>,
}</block>;</enum>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_destroy</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>gs_shader_get_num_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_param_by_idx</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_param_by_name</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_viewproj_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_world_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_get_param_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_shader_param_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_bool</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_float</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_int</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_matrix3</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_matrix4</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_vec2</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_vec3</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_vec4</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_texture</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_val</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_default</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_shader_set_next_sampler</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>gs_effect_param_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_shader_param_type</name></name></type> <name>type</name></decl>;</decl_stmt>





}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_destroy</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_technique_t</name> <modifier>*</modifier></type><name>gs_effect_get_technique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_technique_t</name> <modifier>*</modifier></type>
<name>gs_effect_get_current_technique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>gs_technique_begin</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_technique_end</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_technique_begin_pass</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_technique_begin_pass_by_name</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_technique_end_pass</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_epass_t</name> <modifier>*</modifier></type><name>gs_technique_get_pass_by_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_epass_t</name> <modifier>*</modifier></type>
<name>gs_technique_get_pass_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>gs_effect_get_num_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_param_by_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_param_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>gs_param_get_num_annotations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_param_get_annotation_by_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>annotation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_param_get_annotation_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_effect_loop</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_update_params</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_viewproj_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_world_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_get_param_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_effect_param_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_bool</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_float</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_int</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_matrix4</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_vec2</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_vec3</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_vec4</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_texture</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_val</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_default</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>gs_effect_get_val_size</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>gs_effect_get_val</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>gs_effect_get_default_val_size</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>gs_effect_get_default_val</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_next_sampler</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_effect_set_color</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>argb</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EXPORT</name> <name>gs_texrender_t</name> <modifier>*</modifier></type><name>gs_texrender_create</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>zsformat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texrender_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_texrender_begin</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texrender_end</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texrender_reset</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texrender_get_texture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_BUILD_MIPMAPS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DYNAMIC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_RENDER_TARGET</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_GL_DUMMYTEX</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DUP_BUFFER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_SHARED_TEX</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_SHARED_KM_TEX</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_ERROR_FAIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_ERROR_MODULE_NOT_FOUND</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_ERROR_NOT_SUPPORTED</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<struct>struct <name>gs_window</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwnd</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>__unsafe_unretained</name> <name>id</name></type> <name>view</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>gs_init_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>gs_window</name></name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_backbuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>zsformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>adapter</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEVICE_OPENGL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEVICE_DIRECT3D_11</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gs_get_device_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>gs_get_device_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enum_adapters</name><parameter_list>(<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>gs_create</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>graphics</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>adapter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_destroy</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enter_context</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_leave_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>graphics_t</name> <modifier>*</modifier></type><name>gs_get_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>gs_get_device_obj</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_identity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_transpose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_rotquat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>rot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_rotaa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>axisang</name></name> <modifier>*</modifier></type><name>rot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_translate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_rotaa4f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_translate3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_matrix_scale3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_render_start</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_render_stop</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_draw_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>gs_render_save</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertex2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertex3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_normal3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_color</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texcoord</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertex2v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertex3v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_normal3v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_color4v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texcoord2v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>input_t</name> <modifier>*</modifier></type><name>gs_get_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_effect_t</name> <modifier>*</modifier></type><name>gs_get_effect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_effect_t</name> <modifier>*</modifier></type><name>gs_effect_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_effect_t</name> <modifier>*</modifier></type><name>gs_effect_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>effect_string</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_vertexshader_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_pixelshader_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint8_t</name> <modifier>*</modifier></type><name>gs_create_texture_file_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_FLIP_U</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_FLIP_V</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>








<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_draw_sprite</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_draw_sprite_subregion</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_draw_cube_backdrop</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>rot</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_reset_viewport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_2d_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_3d_mode</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>fovy</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zvar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_viewport_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_viewport_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texture_set_image</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_cubetexture_set_image</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_perspective</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>fovy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>aspect</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>zfar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_blend_state_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_blend_state_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_reset_blend_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EXPORT</name> <name>gs_swapchain_t</name> <modifier>*</modifier></type><name>gs_swapchain_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_resize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_get_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_get_width</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_get_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type>
<name>gs_cubetexture_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_voltexture_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_zstencil_t</name> <modifier>*</modifier></type><name>gs_zstencil_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_stagesurf_t</name> <modifier>*</modifier></type>
<name>gs_stagesurface_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_samplerstate_t</name> <modifier>*</modifier></type>
<name>gs_samplerstate_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_sampler_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_vertexshader_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_pixelshader_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>gs_vertexbuffer_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>gs_indexbuffer_create</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_index_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_timer_t</name> <modifier>*</modifier></type><name>gs_timer_create</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_timer_range_t</name> <modifier>*</modifier></type><name>gs_timer_range_create</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_texture_type</name></name></type> <name>gs_get_texture_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_vertexbuffer</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_indexbuffer</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_texture</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_samplerstate</name><parameter_list>(<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>samplerstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_vertexshader</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>vertshader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_pixelshader</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>pixelshader</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_default_samplerstate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b_3d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_get_vertex_shader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_get_pixel_shader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_get_render_target</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_zstencil_t</name> <modifier>*</modifier></type><name>gs_get_zstencil_target</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_render_target</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_cube_render_target</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_copy_texture</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_copy_texture_region</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_x</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>dst_y</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_y</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>src_w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_stage_texture</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_begin_frame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_begin_scene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_draw</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_draw_mode</name></name></type> <name>draw_mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start_vert</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_verts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_end_scene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_CLEAR_COLOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_CLEAR_DEPTH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_CLEAR_STENCIL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_load_swapchain</name><parameter_list>(<parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swapchain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_clear</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>clear_flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>color</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>stencil</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_present</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_cull_mode</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_cull_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_cull_mode</name></name></type> <name>gs_get_cull_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enable_blending</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enable_depth_test</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enable_stencil_test</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enable_stencil_write</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_enable_color</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_blend_function</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_blend_function_separate</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src_c</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest_c</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src_a</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest_a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_depth_function</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_depth_test</name></name></type> <name>test</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_stencil_function</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_stencil_side</name></name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_depth_test</name></name></type> <name>test</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_stencil_op</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_stencil_side</name></name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>fail</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>zfail</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>zpass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_viewport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_get_viewport</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_set_scissor_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_ortho</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>zfar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_frustum</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>zfar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_projection_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_projection_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_swapchain_destroy</name><parameter_list>(<parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swapchain</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_texture_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_texture_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_color_format</name></name></type>
<name>gs_texture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_texture_map</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texture_unmap</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_texture_is_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>gs_texture_get_obj</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_cubetexture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_cubetexture_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_color_format</name></name></type>
<name>gs_cubetexture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_voltexture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_voltexture_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_voltexture_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_voltexture_get_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_color_format</name></name></type>
<name>gs_voltexture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_stagesurface_destroy</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_stagesurface_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_stagesurface_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_color_format</name></name></type>
<name>gs_stagesurface_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_stagesurface_map</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_stagesurface_unmap</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_zstencil_destroy</name><parameter_list>(<parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_samplerstate_destroy</name><parameter_list>(<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>samplerstate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertexbuffer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertexbuffer_flush</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_vertexbuffer_flush_direct</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type>
<name>gs_vertexbuffer_get_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_indexbuffer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_indexbuffer_flush</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_indexbuffer_flush_direct</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>gs_indexbuffer_get_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>size_t</name></type>
<name>gs_indexbuffer_get_num_indices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>gs_index_type</name></name></type>
<name>gs_indexbuffer_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_timer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_timer_begin</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_timer_end</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_timer_get_data</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ticks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_timer_range_destroy</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_timer_range_begin</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_timer_range_end</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_timer_range_get_data</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>disjoint</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>frequency</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_nv12_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_USE_DEBUG_MARKERS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GS_USE_DEBUG_MARKERS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_DEFAULT</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_RENDER_VIDEO</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_MAIN_TEXTURE</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.25f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_DISPLAY</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_SOURCE</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">5.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_ITEM</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_ITEM_TEXTURE</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.25f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>GS_DEBUG_COLOR_CONVERT_FORMAT</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEBUG_MARKER_BEGIN</name><parameter_list>(<parameter><type><name>color</name></type></parameter>, <parameter><type><name>markername</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gs_debug_marker_begin(color, markername)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEBUG_MARKER_BEGIN_FORMAT</name><parameter_list>(<parameter><type><name>color</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gs_debug_marker_begin_format(color, format, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEBUG_MARKER_END</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>gs_debug_marker_end()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEBUG_MARKER_BEGIN</name><parameter_list>(<parameter><type><name>color</name></type></parameter>, <parameter><type><name>markername</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEBUG_MARKER_BEGIN_FORMAT</name><parameter_list>(<parameter><type><name>color</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_DEBUG_MARKER_END</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_debug_marker_begin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>markername</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_debug_marker_begin_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_debug_marker_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create_from_iosurface</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iosurf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_texture_rebind_iosurface</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iosurf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_WIN32</name></expr></cpp:elif>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_gdi_texture_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_shared_texture_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>gs_duplicator</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>gs_duplicator</name></name></type> <name>gs_duplicator_t</name>;</typedef>





<function_decl><type><name>EXPORT</name> <name>bool</name></type>
<name>gs_get_duplicator_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor_idx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_monitor_info</name></name> <modifier>*</modifier></type><name>monitor_info</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EXPORT</name> <name>gs_duplicator_t</name> <modifier>*</modifier></type><name>gs_duplicator_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_duplicator_destroy</name><parameter_list>(<parameter><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_duplicator_update_frame</name><parameter_list>(<parameter><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_duplicator_get_texture</name><parameter_list>(<parameter><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create_gdi</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>gs_texture_get_dc</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gdi_tex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_texture_release_dc</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gdi_tex</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EXPORT</name> <name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_open_shared</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_INVALID_HANDLE</name></cpp:macro> <cpp:value>(uint32_t) - 1</cpp:value></cpp:define>
<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>gs_texture_get_shared_handle</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS_WAIT_INFINITE</name></cpp:macro> <cpp:value>(uint32_t) - 1</cpp:value></cpp:define>





<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>gs_texture_acquire_sync</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>ms</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>gs_texture_release_sync</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_texture_create_nv12</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tex_y</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tex_uv</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>gs_stagesurface_create_nv12</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_register_loss_callbacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_device_loss</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_unregister_loss_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>gs_get_format_bpp</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GS_A8</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><name>GS_R8</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><name>GS_RGBA</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>GS_BGRX</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>GS_BGRA</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>GS_R10G10B10A2</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>GS_RGBA16</name></expr>:</case>
<return>return <expr><literal type="number">64</literal></expr>;</return>
<case>case <expr><name>GS_R16</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>
<case>case <expr><name>GS_RGBA16F</name></expr>:</case>
<return>return <expr><literal type="number">64</literal></expr>;</return>
<case>case <expr><name>GS_RGBA32F</name></expr>:</case>
<return>return <expr><literal type="number">128</literal></expr>;</return>
<case>case <expr><name>GS_RG16F</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>GS_RG32F</name></expr>:</case>
<return>return <expr><literal type="number">64</literal></expr>;</return>
<case>case <expr><name>GS_R16F</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>
<case>case <expr><name>GS_R32F</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>GS_DXT1</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>GS_DXT3</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><name>GS_DXT5</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><name>GS_R8G8</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>
<case>case <expr><name>GS_UNKNOWN</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gs_is_compressed_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>format</name> <operator>==</operator> <name>GS_DXT1</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>GS_DXT3</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>GS_DXT5</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>gs_get_total_levels</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>height</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>height</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&gt;</operator> <name>depth</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>depth</name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_levels</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_levels</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>num_levels</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
