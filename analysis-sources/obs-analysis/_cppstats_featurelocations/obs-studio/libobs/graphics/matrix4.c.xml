<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\matrix4.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quat.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>matrix4_from_matrix3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>w</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_from_quat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>norm</name> <init>= <expr><call><name>quat_dot</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>norm</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2.0f</literal> <operator>/</operator> <name>norm</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xx</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yy</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>zz</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xy</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xz</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yz</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wx</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wy</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wz</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>yy</name> <operator>+</operator> <name>zz</name><operator>)</operator></expr></argument>, <argument><expr><name>xy</name> <operator>+</operator> <name>wz</name></expr></argument>, <argument><expr><name>xz</name> <operator>-</operator> <name>wy</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>xy</name> <operator>-</operator> <name>wz</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>xx</name> <operator>+</operator> <name>zz</name><operator>)</operator></expr></argument>, <argument><expr><name>yz</name> <operator>+</operator> <name>wx</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>xz</name> <operator>+</operator> <name>wy</name></expr></argument>, <argument><expr><name>yz</name> <operator>-</operator> <name>wx</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>xx</name> <operator>+</operator> <name>yy</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_from_axisang</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>axisang</name></name> <modifier>*</modifier></type><name>aa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>quat</name></name></type> <name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>quat_from_axisang</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_from_quat</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>m1v</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>vec4</name> <operator>*</operator><operator>)</operator><name>m1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m2f</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>m2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name><name>m2f</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m2f</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>m2f</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>m2f</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vec4_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m1v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>matrix4</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_3x3_submatrix</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ti</name></decl>, <decl><type ref="prev"/><name>tj</name></decl>, <decl><type ref="prev"/><name>idst</name></decl>, <decl><type ref="prev"/><name>jdst</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ti</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ti</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ti</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ti</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idst</name> <operator>=</operator> <name>ti</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ti</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idst</name> <operator>=</operator> <name>ti</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>tj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tj</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>tj</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tj</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jdst</name> <operator>=</operator> <name>tj</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tj</name> <operator>&gt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jdst</name> <operator>=</operator> <name>tj</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>idst</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>jdst</name></expr>]</index></name> <operator>=</operator> <name><name>mf</name><index>[<expr><operator>(</operator><name>ti</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>tj</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>get_3x3_determinant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>-</operator>
<operator>(</operator><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>matrix4_determinant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>det</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>m3x3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <operator>-</operator><name>i</name></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><call><name>get_3x3_submatrix</name><argument_list>(<argument><expr><name>m3x3</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <call><name>get_3x3_determinant</name><argument_list>(<argument><expr><name>m3x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>mf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>det</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_translate3v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_from_vec3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_translate4v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_rotate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>matrix4_from_quat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_rotate_aa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>axisang</name></name> <modifier>*</modifier></type><name>aa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>matrix4_from_axisang</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_scale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_translate3v_i</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_from_vec3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_translate4v_i</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_rotate_i</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>matrix4_from_quat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_rotate_aa_i</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>axisang</name></name> <modifier>*</modifier></type><name>aa</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>matrix4_from_axisang</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_scale_i</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>matrix4_inv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>dstv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>det</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>m3x3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name> <init>= <expr><operator>*</operator><name>m</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>matrix4_inv</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dstv</name> <operator>=</operator> <operator>(</operator>struct <name>vec4</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>det</name> <operator>=</operator> <call><name>matrix4_determinant</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>det</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0005f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_3x3_submatrix</name><argument_list>(<argument><expr><name>m3x3</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstv</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>get_3x3_determinant</name><argument_list>(<argument><expr><name>m3x3</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>sign</name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix4_transpose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>temp</name> <init>= <expr><operator>*</operator><name>m</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>matrix4_transpose</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m128</name></type> <name>a0</name> <init>= <expr><call><name>_mm_unpacklo_ps</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>a1</name> <init>= <expr><call><name>_mm_unpacklo_ps</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>a2</name> <init>= <expr><call><name>_mm_unpackhi_ps</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>a3</name> <init>= <expr><call><name>_mm_unpackhi_ps</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_unpacklo_ps</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_unpackhi_ps</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_unpacklo_ps</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_unpackhi_ps</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
