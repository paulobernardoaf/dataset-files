<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\image-file.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnsgif/libnsgif.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>gs_image_file</name> <block>{
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_animated_gif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>frame_updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loaded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gif_animation</name></type> <name>gif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>gif_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>animation_frame_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>animation_frame_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_decoded_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>texture_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gif_bitmap_callback_vt</name></type> <name>bitmap_callbacks</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>gs_image_file2</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>gs_image_file</name></name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mem_usage</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>gs_image_file</name></name></type> <name>gs_image_file_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>gs_image_file2</name></name></type> <name>gs_image_file2_t</name>;</typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_image_file_init</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_image_file_free</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_image_file_init_texture</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>gs_image_file_tick</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>elapsed_time_ns</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_image_file_update_texture</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>gs_image_file2_init</name><parameter_list>(<parameter><decl><type><name>gs_image_file2_t</name> <modifier>*</modifier></type><name>if2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gs_image_file2_free</name><parameter_list>(<parameter><decl><type><name>gs_image_file2_t</name> <modifier>*</modifier></type><name>if2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if2</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>if2</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gs_image_file2_init_texture</name><parameter_list>(<parameter><decl><type><name>gs_image_file2_t</name> <modifier>*</modifier></type><name>if2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gs_image_file_init_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if2</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gs_image_file2_tick</name><parameter_list>(<parameter><decl><type><name>gs_image_file2_t</name> <modifier>*</modifier></type><name>if2</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>elapsed_time_ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gs_image_file_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if2</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>elapsed_time_ns</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gs_image_file2_update_texture</name><parameter_list>(<parameter><decl><type><name>gs_image_file2_t</name> <modifier>*</modifier></type><name>if2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gs_image_file_update_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if2</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
