<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\bounds.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec3.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDS_MAX_X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDS_MAX_Y</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDS_MAX_Z</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDS_OUTSIDE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDS_INSIDE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDS_PARTIAL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<struct>struct <name>bounds</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bounds_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bounds_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_scale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_merge_point</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_get_point</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_get_center</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_transform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>bounds_transform3x4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_intersection_ray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_intersection_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_plane_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_under_plane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bounds_inside</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>test</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator>
<name><name>test</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator>
<name><name>test</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bounds_vec3_inside</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>EPSILON</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>EPSILON</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>EPSILON</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>EPSILON</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>z</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>EPSILON</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>z</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>EPSILON</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_intersects</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_intersects_obb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>bounds_intersects_obb3x4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bounds_intersects_ray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>
<return>return <expr><call><name>bounds_intersection_ray</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bounds_intersects_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>
<return>return <expr><call><name>bounds_intersection_line</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>float</name></type> <name>bounds_min_dist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
