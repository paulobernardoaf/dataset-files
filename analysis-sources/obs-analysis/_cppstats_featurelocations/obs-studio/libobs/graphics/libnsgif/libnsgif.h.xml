<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\libnsgif\libnsgif.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBNSGIF_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBNSGIF_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><enum>enum <block>{
<decl><name>GIF_WORKING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>GIF_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GIF_INSUFFICIENT_FRAME_DATA</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>GIF_FRAME_DATA_ERROR</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>GIF_INSUFFICIENT_DATA</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>GIF_DATA_ERROR</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,
<decl><name>GIF_INSUFFICIENT_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,
<decl><name>GIF_FRAME_NO_DISPLAY</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>,
<decl><name>GIF_END_OF_FRAME</name> <init>= <expr><operator>-</operator><literal type="number">7</literal></expr></init></decl>
}</block></enum></type> <name>gif_result</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_MAX_LZW</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <name>gif_frame</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>display</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_delay</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_pointer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>virgin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>opaque</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>redraw_required</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>disposal_method</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>transparency</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>transparency_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>redraw_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>redraw_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>redraw_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>redraw_height</name></decl>;</decl_stmt> 
}</block></struct></type> <name>gif_frame</name>;</typedef>



<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>gif_bitmap_cb_create</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gif_bitmap_cb_destroy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>gif_bitmap_cb_get_buffer</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gif_bitmap_cb_set_opaque</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>opaque</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>gif_bitmap_cb_test_opaque</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gif_bitmap_cb_modified</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



<typedef>typedef <type><struct>struct <name>gif_bitmap_callback_vt</name> <block>{
<decl_stmt><decl><type><name>gif_bitmap_cb_create</name></type> <name>bitmap_create</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gif_bitmap_cb_destroy</name></type> <name>bitmap_destroy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gif_bitmap_cb_get_buffer</name></type> <name>bitmap_get_buffer</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>gif_bitmap_cb_set_opaque</name></type> <name>bitmap_set_opaque</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gif_bitmap_cb_test_opaque</name></type> <name>bitmap_test_opaque</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gif_bitmap_cb_modified</name></type> <name>bitmap_modified</name></decl>;</decl_stmt> 
}</block></struct></type> <name>gif_bitmap_callback_vt</name>;</typedef>



<typedef>typedef <type><struct>struct <name>gif_animation</name> <block>{
<decl_stmt><decl><type><name>gif_bitmap_callback_vt</name></type> <name>bitmap_callbacks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gif_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_count_partial</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gif_frame</name> <modifier>*</modifier></type><name>frames</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>decoded_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>frame_image</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>loop_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gif_result</name></type> <name>current_error</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_position</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_holders</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>background_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aspect_ratio</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>colour_table_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>global_colours</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>global_colour_table</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>local_colour_table</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>direct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>GIF_MAX_LZW</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stack</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>GIF_MAX_LZW</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stack_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code_size</name></decl>, <name>set_code_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_code</name></decl>, <name>max_code_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clear_code</name></decl>, <name>end_code</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbit</name></decl>, <name>lastbit</name>, <name>last_byte</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstcode</name></decl>, <name>oldcode</name>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zero_data_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>get_done</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>clear_image</name></decl>;</decl_stmt>
}</block></struct></type> <name>gif_animation</name>;</typedef>

<function_decl><type><name>void</name></type> <name>gif_create</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>gif_bitmap_callback_vt</name> <modifier>*</modifier></type><name>bitmap_callbacks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>gif_result</name></type> <name>gif_initialise</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>gif_result</name></type> <name>gif_decode_frame</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gif_finalise</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
