











#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>
#include "libnsgif.h"


#ifdef NDEBUG
#define LOG(x) ((void) 0)
#else
#define LOG(x) do { fprintf(stderr, x), fputc('\n', stderr); } while (0)
#endif 























































#define GIF_MAX_COLOURS 256



#define GIF_PROCESS_COLOURS 0xaa000000



#define GIF_INVALID_FRAME -1



#define GIF_TRANSPARENT_COLOUR 0x00



#define GIF_FRAME_COMBINE 1
#define GIF_FRAME_CLEAR 2
#define GIF_FRAME_RESTORE 3
#define GIF_FRAME_QUIRKS_RESTORE 4
#define GIF_IMAGE_SEPARATOR 0x2c
#define GIF_INTERLACE_MASK 0x40
#define GIF_COLOUR_TABLE_MASK 0x80
#define GIF_COLOUR_TABLE_SIZE_MASK 0x07
#define GIF_EXTENSION_INTRODUCER 0x21
#define GIF_EXTENSION_GRAPHIC_CONTROL 0xf9
#define GIF_DISPOSAL_MASK 0x1c
#define GIF_TRANSPARENCY_MASK 0x01
#define GIF_EXTENSION_COMMENT 0xfe
#define GIF_EXTENSION_PLAIN_TEXT 0x01
#define GIF_EXTENSION_APPLICATION 0xff
#define GIF_BLOCK_TERMINATOR 0x00
#define GIF_TRAILER 0x3b



static gif_result gif_initialise_sprite(gif_animation *gif, unsigned int width, unsigned int height);
static gif_result gif_initialise_frame(gif_animation *gif);
static gif_result gif_initialise_frame_extensions(gif_animation *gif, const int frame);
static gif_result gif_skip_frame_extensions(gif_animation *gif);
static unsigned int gif_interlaced_line(int height, int y);





static void gif_init_LZW(gif_animation *gif);
static bool gif_next_LZW(gif_animation *gif);
static int gif_next_code(gif_animation *gif, int code_size);

static const int maskTbl[16] = {0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f,
0x00ff, 0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff};



void gif_create(gif_animation *gif, gif_bitmap_callback_vt *bitmap_callbacks) {
memset(gif, 0, sizeof(gif_animation));
gif->bitmap_callbacks = *bitmap_callbacks;
gif->decoded_frame = GIF_INVALID_FRAME;
}















gif_result gif_initialise(gif_animation *gif, size_t size, unsigned char *data) {
unsigned char *gif_data;
unsigned int index;
gif_result return_value;







gif->buffer_size = (unsigned int)size;
gif->gif_data = data;



if (gif->buffer_size < 13) return GIF_INSUFFICIENT_DATA;



gif_data = gif->gif_data + gif->buffer_position;



if (gif->buffer_position == 0) {




gif->frame_image = NULL;
gif->frames = NULL;
gif->local_colour_table = NULL;
gif->global_colour_table = NULL;



gif->frame_count = 0;
gif->frame_count_partial = 0;
gif->decoded_frame = GIF_INVALID_FRAME;






if (strncmp((const char *) gif_data, "GIF", 3) != 0)
return GIF_DATA_ERROR;
gif_data += 3;






gif_data += 3;













gif->width = gif_data[0] | (gif_data[1] << 8);
gif->height = gif_data[2] | (gif_data[3] << 8);
gif->global_colours = (gif_data[4] & GIF_COLOUR_TABLE_MASK);
gif->colour_table_size = (2 << (gif_data[4] & GIF_COLOUR_TABLE_SIZE_MASK));
gif->background_index = gif_data[5];
gif->aspect_ratio = gif_data[6];
gif->loop_count = 1;
gif_data += 7;





if (((gif->width == 640) && (gif->height == 480)) ||
((gif->width == 640) && (gif->height == 512)) ||
((gif->width == 800) && (gif->height == 600)) ||
((gif->width == 1024) && (gif->height == 768)) ||
((gif->width == 1280) && (gif->height == 1024)) ||
((gif->width == 1600) && (gif->height == 1200)) ||
((gif->width == 0) || (gif->height == 0)) ||
((gif->width > 2048) || (gif->height > 2048))) {
gif->width = 1;
gif->height = 1;
}





gif->global_colour_table = (unsigned int *)calloc(GIF_MAX_COLOURS, sizeof(int));
gif->local_colour_table = (unsigned int *)calloc(GIF_MAX_COLOURS, sizeof(int));
if ((gif->global_colour_table == NULL) || (gif->local_colour_table == NULL)) {
gif_finalise(gif);
return GIF_INSUFFICIENT_MEMORY;
}




gif->global_colour_table[0] = GIF_PROCESS_COLOURS;




if (gif->buffer_size == 14) {
if (gif_data[0] == GIF_TRAILER)
return GIF_OK;
else
return GIF_INSUFFICIENT_DATA;
}



if ((gif->frames = (gif_frame *)malloc(sizeof(gif_frame))) == NULL) {
gif_finalise(gif);
return GIF_INSUFFICIENT_MEMORY;
}
gif->frame_holders = 1;



assert(gif->bitmap_callbacks.bitmap_create);
if ((gif->frame_image = gif->bitmap_callbacks.bitmap_create(gif->width, gif->height)) == NULL) {
gif_finalise(gif);
return GIF_INSUFFICIENT_MEMORY;
}



gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
}




if (gif->global_colour_table[0] == GIF_PROCESS_COLOURS) {


if (gif->global_colours) {
if (gif->buffer_size < (gif->colour_table_size * 3 + 12)) {
return GIF_INSUFFICIENT_DATA;
}
for (index = 0; index < gif->colour_table_size; index++) {







unsigned char *entry = (unsigned char *) &gif->
global_colour_table[index];

entry[0] = gif_data[0]; 
entry[1] = gif_data[1]; 
entry[2] = gif_data[2]; 
entry[3] = 0xff; 

gif_data += 3;
}
gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
} else {


unsigned int *entry = gif->global_colour_table;

entry[0] = 0x00000000;

((unsigned char *) entry)[3] = 0xff;

entry[1] = 0xffffffff;
}
}



while ((return_value = gif_initialise_frame(gif)) == GIF_WORKING);



if ((return_value == GIF_INSUFFICIENT_MEMORY) ||
(return_value == GIF_DATA_ERROR))
return return_value;




if ((return_value == GIF_INSUFFICIENT_DATA) && (gif->frame_count_partial > 0))
return GIF_INSUFFICIENT_FRAME_DATA;



return return_value;
}







static gif_result gif_initialise_sprite(gif_animation *gif, unsigned int width, unsigned int height) {
unsigned int max_width;
unsigned int max_height;
struct bitmap *buffer;



if ((width <= gif->width) && (height <= gif->height))
return GIF_OK;



max_width = (width > gif->width) ? width : gif->width;
max_height = (height > gif->height) ? height : gif->height;



assert(gif->bitmap_callbacks.bitmap_create);
if ((buffer = gif->bitmap_callbacks.bitmap_create(max_width, max_height)) == NULL)
return GIF_INSUFFICIENT_MEMORY;
assert(gif->bitmap_callbacks.bitmap_destroy);
gif->bitmap_callbacks.bitmap_destroy(gif->frame_image);
gif->frame_image = buffer;
gif->width = max_width;
gif->height = max_height;



gif->decoded_frame = GIF_INVALID_FRAME;
return GIF_OK;
}












static gif_result gif_initialise_frame(gif_animation *gif) {
int frame;
gif_frame *temp_buf;

unsigned char *gif_data, *gif_end;
int gif_bytes;
unsigned int flags = 0;
unsigned int width, height, offset_x, offset_y;
unsigned int block_size, colour_table_size;
bool first_image = true;
gif_result return_value;



frame = gif->frame_count;



gif_data = (unsigned char *)(gif->gif_data + gif->buffer_position);
gif_end = (unsigned char *)(gif->gif_data + gif->buffer_size);
gif_bytes = (unsigned int)(gif_end - gif_data);



if ((gif_bytes > 0) && (gif_data[0] == GIF_TRAILER)) return GIF_OK;




if (gif_bytes < 6) return GIF_INSUFFICIENT_DATA;




if (frame > 4096) return GIF_FRAME_DATA_ERROR;



if ((int)gif->frame_holders <= frame) {


if ((temp_buf = (gif_frame *)realloc(gif->frames,
(frame + 1) * sizeof(gif_frame))) == NULL)
return GIF_INSUFFICIENT_MEMORY;
gif->frames = temp_buf;
gif->frame_holders = frame + 1;
}




gif->frames[frame].frame_pointer = gif->buffer_position;
gif->frames[frame].display = false;
gif->frames[frame].virgin = true;
gif->frames[frame].disposal_method = 0;
gif->frames[frame].transparency = false;
gif->frames[frame].frame_delay = 100;
gif->frames[frame].redraw_required = false;



if (gif->decoded_frame == frame)
gif->decoded_frame = GIF_INVALID_FRAME;








gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
if ((return_value = gif_initialise_frame_extensions(gif, frame)) != GIF_OK)
return return_value;
gif_data = (gif->gif_data + gif->buffer_position);
gif_bytes = (unsigned int)(gif_end - gif_data);



if ((gif_bytes = (unsigned int)(gif_end - gif_data)) < 1)
return GIF_INSUFFICIENT_FRAME_DATA;
else if (gif_data[0] == GIF_TRAILER) {
gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
gif->frame_count = frame + 1;
return GIF_OK;
}



if (gif_data[0] != GIF_IMAGE_SEPARATOR) return GIF_FRAME_DATA_ERROR;



offset_x = gif_data[1] | (gif_data[2] << 8);
offset_y = gif_data[3] | (gif_data[4] << 8);
width = gif_data[5] | (gif_data[6] << 8);
height = gif_data[7] | (gif_data[8] << 8);




if (!first_image) {
if (gif->frames[frame].redraw_x > offset_x) {
gif->frames[frame].redraw_width += (gif->frames[frame].redraw_x - offset_x);
gif->frames[frame].redraw_x = offset_x;
}
if (gif->frames[frame].redraw_y > offset_y) {
gif->frames[frame].redraw_height += (gif->frames[frame].redraw_y - offset_y);
gif->frames[frame].redraw_y = offset_y;
}
if ((offset_x + width) > (gif->frames[frame].redraw_x + gif->frames[frame].redraw_width))
gif->frames[frame].redraw_width = (offset_x + width) - gif->frames[frame].redraw_x;
if ((offset_y + height) > (gif->frames[frame].redraw_y + gif->frames[frame].redraw_height))
gif->frames[frame].redraw_height = (offset_y + height) - gif->frames[frame].redraw_y;
} else {
first_image = false;
gif->frames[frame].redraw_x = offset_x;
gif->frames[frame].redraw_y = offset_y;
gif->frames[frame].redraw_width = width;
gif->frames[frame].redraw_height = height;
}




gif->frames[frame].redraw_required = ((gif->frames[frame].disposal_method == GIF_FRAME_CLEAR) ||
(gif->frames[frame].disposal_method == GIF_FRAME_RESTORE));



if (gif_initialise_sprite(gif, (offset_x + width), (offset_y + height)))
return GIF_INSUFFICIENT_MEMORY;



flags = gif_data[9];
colour_table_size = 2 << (flags & GIF_COLOUR_TABLE_SIZE_MASK);



gif_data += 10;
gif_bytes = (unsigned int)(gif_end - gif_data);
gif->frame_count_partial = frame + 1;



if (flags & GIF_COLOUR_TABLE_MASK) {
gif_data += 3 * colour_table_size;
if ((gif_bytes = (unsigned int)(gif_end - gif_data)) < 0)
return GIF_INSUFFICIENT_FRAME_DATA;
}



if (gif_data[0] > GIF_MAX_LZW)
return GIF_DATA_ERROR;



gif_data++;
if (--gif_bytes < 0)
return GIF_INSUFFICIENT_FRAME_DATA;




block_size = 0;
while (block_size != 1) {
block_size = gif_data[0] + 1;


if ((int)(gif_bytes - block_size) < 0) {






if (gif_bytes >= 2) {
gif_data[0] = 0;
gif_data[1] = GIF_TRAILER;
gif_bytes = 1;
++gif_data;
break;
} else
return GIF_INSUFFICIENT_FRAME_DATA;
} else {
gif_bytes -= block_size;
gif_data += block_size;
}
}



gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
gif->frame_count = frame + 1;
gif->frames[frame].display = true;



if (gif_bytes < 1)
return GIF_INSUFFICIENT_FRAME_DATA;
else
if (gif_data[0] == GIF_TRAILER) return GIF_OK;
return GIF_WORKING;
}






static gif_result gif_initialise_frame_extensions(gif_animation *gif, const int frame) {
unsigned char *gif_data, *gif_end;
int gif_bytes;
unsigned int block_size;



gif_data = (unsigned char *)(gif->gif_data + gif->buffer_position);
gif_end = (unsigned char *)(gif->gif_data + gif->buffer_size);



while (gif_data[0] == GIF_EXTENSION_INTRODUCER) {
++gif_data;
gif_bytes = (unsigned int)(gif_end - gif_data);



switch(gif_data[0]) {












case GIF_EXTENSION_GRAPHIC_CONTROL:
if (gif_bytes < 6) return GIF_INSUFFICIENT_FRAME_DATA;
gif->frames[frame].frame_delay = gif_data[3] | (gif_data[4] << 8);
if (gif_data[2] & GIF_TRANSPARENCY_MASK) {
gif->frames[frame].transparency = true;
gif->frames[frame].transparency_index = gif_data[5];
}
gif->frames[frame].disposal_method = ((gif_data[2] & GIF_DISPOSAL_MASK) >> 2);





if (gif->frames[frame].disposal_method == GIF_FRAME_QUIRKS_RESTORE)
gif->frames[frame].disposal_method = GIF_FRAME_RESTORE;
gif_data += (2 + gif_data[1]);
break;









case GIF_EXTENSION_APPLICATION:
if (gif_bytes < 17) return GIF_INSUFFICIENT_FRAME_DATA;
if ((gif_data[1] == 0x0b) &&
(strncmp((const char *) gif_data + 2,
"NETSCAPE2.0", 11) == 0) &&
(gif_data[13] == 0x03) &&
(gif_data[14] == 0x01)) {
gif->loop_count = gif_data[15] | (gif_data[16] << 8);
}
gif_data += (2 + gif_data[1]);
break;




case GIF_EXTENSION_COMMENT:
++gif_data;
break;





default:
gif_data += (2 + gif_data[1]);
}




gif_bytes = (unsigned int)(gif_end - gif_data);
block_size = 0;
while (gif_data[0] != GIF_BLOCK_TERMINATOR) {
block_size = gif_data[0] + 1;
if ((gif_bytes -= block_size) < 0)
return GIF_INSUFFICIENT_FRAME_DATA;
gif_data += block_size;
}
++gif_data;
}



gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
return GIF_OK;
}













gif_result gif_decode_frame(gif_animation *gif, unsigned int frame) {
unsigned int index = 0;
unsigned char *gif_data, *gif_end;
int gif_bytes;
unsigned int width, height, offset_x, offset_y;
unsigned int flags, colour_table_size, interlace;
unsigned int *colour_table;
unsigned int *frame_data = 0; 
unsigned int *frame_scanline;
unsigned int save_buffer_position;
gif_result return_value = GIF_OK;
unsigned int x, y, decode_y, burst_bytes;
int last_undisposed_frame = (frame - 1);
register unsigned char colour;



if (frame >= gif->frame_count_partial)
return GIF_INSUFFICIENT_DATA;



if (gif->frames[frame].display == false) {
gif->current_error = GIF_FRAME_NO_DISPLAY;
return GIF_OK;
}

if ((!gif->clear_image) && ((int)frame == gif->decoded_frame))
return GIF_OK;



gif_data = gif->gif_data + gif->frames[frame].frame_pointer;
gif_end = gif->gif_data + gif->buffer_size;
gif_bytes = (unsigned int)(gif_end - gif_data);




if (gif_bytes < 12) return GIF_INSUFFICIENT_FRAME_DATA;



save_buffer_position = gif->buffer_position;
gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);



if ((return_value = gif_skip_frame_extensions(gif)) != GIF_OK)
goto gif_decode_frame_exit;
gif_data = (gif->gif_data + gif->buffer_position);
gif_bytes = (unsigned int)(gif_end - gif_data);



if (gif_bytes < 12) {
return_value = GIF_INSUFFICIENT_FRAME_DATA;
goto gif_decode_frame_exit;
}















if (gif_data[0] != GIF_IMAGE_SEPARATOR) {
return_value = GIF_DATA_ERROR;
goto gif_decode_frame_exit;
}
offset_x = gif_data[1] | (gif_data[2] << 8);
offset_y = gif_data[3] | (gif_data[4] << 8);
width = gif_data[5] | (gif_data[6] << 8);
height = gif_data[7] | (gif_data[8] << 8);




if ((offset_x + width > gif->width) || (offset_y + height > gif->height)) {
return_value = GIF_DATA_ERROR;
goto gif_decode_frame_exit;
}



flags = gif_data[9];
colour_table_size = 2 << (flags & GIF_COLOUR_TABLE_SIZE_MASK);
interlace = flags & GIF_INTERLACE_MASK;



gif_data += 10;
gif_bytes = (unsigned int)(gif_end - gif_data);



if (flags & GIF_COLOUR_TABLE_MASK) {
if (gif_bytes < (int)(3 * colour_table_size)) {
return_value = GIF_INSUFFICIENT_FRAME_DATA;
goto gif_decode_frame_exit;
}
colour_table = gif->local_colour_table;
if (!gif->clear_image) {
for (index = 0; index < colour_table_size; index++) {







unsigned char *entry = 
(unsigned char *) &colour_table[index];

entry[0] = gif_data[0]; 
entry[1] = gif_data[1]; 
entry[2] = gif_data[2]; 
entry[3] = 0xff; 

gif_data += 3;
}
} else {
gif_data += 3 * colour_table_size;
}
gif_bytes = (unsigned int)(gif_end - gif_data);
} else {
colour_table = gif->global_colour_table;
}



if (gif_bytes < 1) {
return_value = GIF_INSUFFICIENT_FRAME_DATA;
goto gif_decode_frame_exit;
} else if (gif_data[0] == GIF_TRAILER) {
return_value = GIF_OK;
goto gif_decode_frame_exit;
}



assert(gif->bitmap_callbacks.bitmap_get_buffer);
frame_data = (void *)gif->bitmap_callbacks.bitmap_get_buffer(gif->frame_image);
if (!frame_data)
return GIF_INSUFFICIENT_MEMORY;



if (!gif->clear_image) {


if (gif_bytes < 2) {
return_value = GIF_INSUFFICIENT_FRAME_DATA;
goto gif_decode_frame_exit;


} else if ((gif_bytes == 2) && (gif_data[1] == GIF_TRAILER)) {
return_value = GIF_OK;
goto gif_decode_frame_exit;
}




if ((frame == 0) || (gif->decoded_frame == GIF_INVALID_FRAME)) {
memset((char*)frame_data, GIF_TRANSPARENT_COLOUR, gif->width * gif->height * sizeof(int));
gif->decoded_frame = frame;



} else if ((frame != 0) && (gif->frames[frame - 1].disposal_method == GIF_FRAME_CLEAR)) {
gif->clear_image = true;
if ((return_value = gif_decode_frame(gif, (frame - 1))) != GIF_OK)
goto gif_decode_frame_exit;
gif->clear_image = false;



} else if ((frame != 0) && (gif->frames[frame - 1].disposal_method == GIF_FRAME_RESTORE)) {
while ((last_undisposed_frame != -1) && (gif->frames[last_undisposed_frame--].disposal_method == GIF_FRAME_RESTORE)) {
}


if (last_undisposed_frame == -1) {

memset((char*)frame_data, GIF_TRANSPARENT_COLOUR, gif->width * gif->height * sizeof(int));
} else {
if ((return_value = gif_decode_frame(gif, last_undisposed_frame)) != GIF_OK)
goto gif_decode_frame_exit;


assert(gif->bitmap_callbacks.bitmap_get_buffer);
frame_data = (void *)gif->bitmap_callbacks.bitmap_get_buffer(gif->frame_image);
if (!frame_data)
return GIF_INSUFFICIENT_MEMORY;
}
}
gif->decoded_frame = frame;



gif->set_code_size = gif_data[0];
gif->buffer_position = (unsigned int)(gif_data - gif->gif_data + 1);



gif->code_size = gif->set_code_size + 1;
gif->clear_code = (1 << gif->set_code_size);
gif->end_code = gif->clear_code + 1;
gif->max_code_size = gif->clear_code << 1;
gif->max_code = gif->clear_code + 2;
gif->curbit = gif->lastbit = 0;
gif->last_byte = 2;
gif->get_done = false;
gif->direct = gif->buf;
gif_init_LZW(gif);



for (y = 0; y < height; y++) {
if (interlace)
decode_y = gif_interlaced_line(height, y) + offset_y;
else
decode_y = y + offset_y;
frame_scanline = frame_data + offset_x + (decode_y * gif->width);




x = width;
while (x > 0) {
burst_bytes = (unsigned int)(gif->stack_pointer - gif->stack);
if (burst_bytes > 0) {
if (burst_bytes > x)
burst_bytes = x;
x -= burst_bytes;
while (burst_bytes-- > 0) {
colour = *--gif->stack_pointer;
if (((gif->frames[frame].transparency) &&
(colour != gif->frames[frame].transparency_index)) ||
(!gif->frames[frame].transparency))
*frame_scanline = colour_table[colour];
frame_scanline++;
}
} else {
if (!gif_next_LZW(gif)) {


if (gif->current_error == GIF_END_OF_FRAME)
return_value = GIF_OK;
else
return_value = gif->current_error;
goto gif_decode_frame_exit;
}
}
}
}
} else {


if (gif->frames[frame].disposal_method == GIF_FRAME_CLEAR) {
for (y = 0; y < height; y++) {
frame_scanline = frame_data + offset_x + ((offset_y + y) * gif->width);
if (gif->frames[frame].transparency)
memset(frame_scanline, GIF_TRANSPARENT_COLOUR, width * 4);
else
memset(frame_scanline, colour_table[gif->background_index], width * 4);
}
}
}
gif_decode_frame_exit:



if (gif->frames[frame].virgin) {
if (gif->bitmap_callbacks.bitmap_test_opaque)
gif->frames[frame].opaque = gif->bitmap_callbacks.bitmap_test_opaque(gif->frame_image);
else
gif->frames[frame].opaque = false;
gif->frames[frame].virgin = false;
}
if (gif->bitmap_callbacks.bitmap_set_opaque)
gif->bitmap_callbacks.bitmap_set_opaque(gif->frame_image, gif->frames[frame].opaque);
if (gif->bitmap_callbacks.bitmap_modified)
gif->bitmap_callbacks.bitmap_modified(gif->frame_image);



gif->buffer_position = save_buffer_position;



return return_value;

}






static gif_result gif_skip_frame_extensions(gif_animation *gif) {
unsigned char *gif_data, *gif_end;
int gif_bytes;
unsigned int block_size;



gif_data = (unsigned char *)(gif->gif_data + gif->buffer_position);
gif_end = (unsigned char *)(gif->gif_data + gif->buffer_size);
gif_bytes = (unsigned int)(gif_end - gif_data);



while (gif_data[0] == GIF_EXTENSION_INTRODUCER) {
++gif_data;



switch(gif_data[0]) {



case GIF_EXTENSION_COMMENT:
++gif_data;
break;





default:
gif_data += (2 + gif_data[1]);
}




gif_bytes = (unsigned int)(gif_end - gif_data);
block_size = 0;
while (gif_data[0] != GIF_BLOCK_TERMINATOR) {
block_size = gif_data[0] + 1;
if ((gif_bytes -= block_size) < 0)
return GIF_INSUFFICIENT_FRAME_DATA;
gif_data += block_size;
}
++gif_data;
}



gif->buffer_position = (unsigned int)(gif_data - gif->gif_data);
return GIF_OK;
}

static unsigned int gif_interlaced_line(int height, int y) {
if ((y << 3) < height) return (y << 3);
y -= ((height + 7) >> 3);
if ((y << 3) < (height - 4)) return (y << 3) + 4;
y -= ((height + 3) >> 3);
if ((y << 2) < (height - 2)) return (y << 2) + 2;
y -= ((height + 1) >> 2);
return (y << 1) + 1;
}



void gif_finalise(gif_animation *gif) {


if (gif->frame_image) {
assert(gif->bitmap_callbacks.bitmap_destroy);
gif->bitmap_callbacks.bitmap_destroy(gif->frame_image);
}
gif->frame_image = NULL;
free(gif->frames);
gif->frames = NULL;
free(gif->local_colour_table);
gif->local_colour_table = NULL;
free(gif->global_colour_table);
gif->global_colour_table = NULL;
}




void gif_init_LZW(gif_animation *gif) {
int i;

gif->current_error = 0;
if (gif->clear_code >= (1 << GIF_MAX_LZW)) {
gif->stack_pointer = gif->stack;
gif->current_error = GIF_FRAME_DATA_ERROR;
return;
}


memset(gif->table, 0x00, (1 << GIF_MAX_LZW) * 8);
for (i = 0; i < gif->clear_code; ++i)
gif->table[1][i] = i;


gif->code_size = gif->set_code_size + 1;
gif->max_code_size = gif->clear_code << 1;
gif->max_code = gif->clear_code + 2;
gif->stack_pointer = gif->stack;
do {
gif->firstcode = gif->oldcode = gif_next_code(gif, gif->code_size);
} while (gif->firstcode == gif->clear_code);
*gif->stack_pointer++ =gif->firstcode;
}


static bool gif_next_LZW(gif_animation *gif) {
int code, incode;
int block_size;
int new_code;

code = gif_next_code(gif, gif->code_size);
if (code < 0) {
gif->current_error = code;
return false;
} else if (code == gif->clear_code) {
gif_init_LZW(gif);
return true;
} else if (code == gif->end_code) {

if (gif->zero_data_block) {
gif->current_error = GIF_FRAME_DATA_ERROR;
return false;
}
block_size = 0;
while (block_size != 1) {
block_size = gif->gif_data[gif->buffer_position] + 1;
gif->buffer_position += block_size;
}
gif->current_error = GIF_FRAME_DATA_ERROR;
return false;
}

incode = code;
if (code >= gif->max_code) {
*gif->stack_pointer++ = gif->firstcode;
code = gif->oldcode;
}





while (code >= gif->clear_code) {
*gif->stack_pointer++ = gif->table[1][code];
new_code = gif->table[0][code];
if (new_code < gif->clear_code) {
code = new_code;
break;
}
*gif->stack_pointer++ = gif->table[1][new_code];
code = gif->table[0][new_code];
if (code == new_code) {
gif->current_error = GIF_FRAME_DATA_ERROR;
return false;
}
}

*gif->stack_pointer++ = gif->firstcode = gif->table[1][code];

if ((code = gif->max_code) < (1 << GIF_MAX_LZW)) {
gif->table[0][code] = gif->oldcode;
gif->table[1][code] = gif->firstcode;
++gif->max_code;
if ((gif->max_code >= gif->max_code_size) && (gif->max_code_size < (1 << GIF_MAX_LZW))) {
gif->max_code_size = gif->max_code_size << 1;
++gif->code_size;
}
}
gif->oldcode = incode;
return true;
}

static int gif_next_code(gif_animation *gif, int code_size) {
int i, j, end, count, ret;
unsigned char *b;

(void)code_size;

end = gif->curbit + gif->code_size;
if (end >= gif->lastbit) {
if (gif->get_done)
return GIF_END_OF_FRAME;
gif->buf[0] = gif->direct[gif->last_byte - 2];
gif->buf[1] = gif->direct[gif->last_byte - 1];


gif->direct = gif->gif_data + gif->buffer_position;
gif->zero_data_block = ((count = gif->direct[0]) == 0);
if ((gif->buffer_position + count) >= gif->buffer_size)
return GIF_INSUFFICIENT_FRAME_DATA;
if (count == 0)
gif->get_done = true;
else {
gif->direct -= 1;
gif->buf[2] = gif->direct[2];
gif->buf[3] = gif->direct[3];
}
gif->buffer_position += count + 1;


gif->last_byte = 2 + count;
gif->curbit = (gif->curbit - gif->lastbit) + 16;
gif->lastbit = (2 + count) << 3;
end = gif->curbit + gif->code_size;
}

i = gif->curbit >> 3;
if (i < 2)
b = gif->buf;
else
b = gif->direct;

ret = b[i];
j = (end >> 3) - 1;
if (i <= j) {
ret |= (b[i + 1] << 8);
if (i < j)
ret |= (b[i + 2] << 16);
}
ret = (ret >> (gif->curbit % 8)) & maskTbl[gif->code_size];
gif->curbit += gif->code_size;
return ret;
}
