<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\plane.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec3.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>matrix3</name>;</struct_decl>
<struct_decl>struct <name>matrix4</name>;</struct_decl>

<struct>struct <name>plane</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>plane_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dist</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>plane_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>dist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>plane_setf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>plane_from_tri</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v3</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>plane_transform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>plane_transform3x4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>plane_intersection_ray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>plane_intersection_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>plane_tri_inside</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v3</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>precision</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>plane_line_inside</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>precision</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>plane_close</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>precision</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vec3_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>close_float</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>plane_coplanar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>precision</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>cos_angle</name> <init>= <expr><call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name>cos_angle</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>close_float</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name>cos_angle</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>close_float</name><argument_list>(<argument><expr><operator>-</operator><name><name>p1</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
