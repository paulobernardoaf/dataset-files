<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\bounds.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bounds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plane.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>bounds_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_scale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_min</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b1</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b2</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b1</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b2</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_merge_point</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_min</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_get_point</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>














<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_get_center</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_transform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bounds</name></name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bounds_get_point</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bounds_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bounds_transform3x4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bounds</name></name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bounds_get_point</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_transform3x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bounds_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_intersection_ray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t_max</name> <init>= <expr><name>M_INFINITE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t_min</name> <init>= <expr><operator>-</operator><name>M_INFINITE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>center</name></decl>, <decl><type ref="prev"/><name>max_offset</name></decl>, <decl><type ref="prev"/><name>box_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bounds_get_center</name><argument_list>(<argument><expr><operator>&amp;</operator><name>center</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>center</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>box_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>center</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e</name> <init>= <expr><name><name>box_offset</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>fi</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>f</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t1</name> <init>= <expr><operator>(</operator><name>e</name> <operator>+</operator> <name><name>max_offset</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>fi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t2</name> <init>= <expr><operator>(</operator><name>e</name> <operator>-</operator> <name><name>max_offset</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>fi</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>t_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t_min</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t_max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t_max</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>t_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t_min</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>t_max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t_max</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t_min</name> <operator>&gt;</operator> <name>t_max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t_max</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>-</operator><name>e</name> <operator>-</operator> <name><name>max_offset</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0.0f</literal> <operator>||</operator>
<operator>(</operator><operator>-</operator><name>e</name> <operator>+</operator> <name><name>max_offset</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t_min</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><name>t_min</name></expr> </then><else>: <expr><name>t_max</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_intersection_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>vec3_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <name>TINY_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec3_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bounds_intersection_ray</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>/=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_plane_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vmin</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vmax</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vmin</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vmax</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BOUNDS_OUTSIDE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vmax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BOUNDS_PARTIAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>BOUNDS_INSIDE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_under_plane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>vmin</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vmin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vmin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vmin</name><operator>.</operator><name>z</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>dist</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_intersects</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>test</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&lt;=</operator> <name>epsilon</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&lt;=</operator> <name>epsilon</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>test</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&lt;=</operator> <name>epsilon</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&lt;=</operator> <name>epsilon</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>test</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>&lt;=</operator> <name>epsilon</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>&lt;=</operator> <name>epsilon</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_intersects_obb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bounds</name></name></type> <name>b_tr</name></decl>, <decl><type ref="prev"/><name>test_tr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>m_inv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>matrix4_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_inv</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bounds_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_tr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bounds_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tr</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bounds_intersects</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_tr</name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>bounds_intersects</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_tr</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bounds_intersects_obb3x4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bounds</name></name></type> <name>b_tr</name></decl>, <decl><type ref="prev"/><name>test_tr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix3</name></name></type> <name>m_inv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>matrix3_transpose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_inv</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bounds_transform3x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_tr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bounds_transform3x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tr</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bounds_intersects</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_tr</name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>bounds_intersects</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_tr</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>vec3or_offset_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_abs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>bounds_min_dist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bounds</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>center</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vec_len</name> <init>= <expr><call><name>vec3or_offset_len</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>center_dist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bounds_get_center</name><argument_list>(<argument><expr><operator>&amp;</operator><name>center</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>center_dist</name> <operator>=</operator> <call><name>vec3_plane_dist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>center</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>dist</name></name> <operator>+</operator> <name>center_dist</name> <operator>-</operator> <name>vec_len</name></expr>;</return>
</block_content>}</block></function>
</unit>
