<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\vec3.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/sse-intrin.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>plane</name>;</struct_decl>
<struct_decl>struct <name>matrix3</name>;</struct_decl>
<struct_decl>struct <name>matrix4</name>;</struct_decl>
<struct_decl>struct <name>quat</name>;</struct_decl>

<struct>struct <name>vec3</name> <block>{
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>float</name></type> <name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>m</name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_set_ps</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_from_vec4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_add_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_sub</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_sub_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_div</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_div_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_addf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_add_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_subf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_sub_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_mulf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_divf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_div_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>vec3_dot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>mul</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>add</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_add_ps</name><argument_list>(<argument><expr><call><name>_mm_movehl_ps</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_add_ps</name><argument_list>(<argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name><name>add</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>add</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>add</name><operator>.</operator><name>x</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_cross</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>s1v1</name> <init>= <expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>s1v2</name> <init>= <expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>s2v1</name> <init>= <expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>s2v2</name> <init>= <expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_sub_ps</name><argument_list>(<argument><expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name>s1v1</name></expr></argument>, <argument><expr><name>s1v2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name>s2v1</name></expr></argument>, <argument><expr><name>s2v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_neg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>vec3_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dot_val</name> <init>= <expr><call><name>vec3_dot</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>dot_val</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>dot_val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>vec3_dist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dot_val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dot_val</name> <operator>=</operator> <call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>dot_val</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>dot_val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_norm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dot_val</name> <init>= <expr><call><name>vec3_dot</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dot_val</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>
?</condition><then> <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>dot_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vec3_close</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>test</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>test</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name>epsilon</name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>epsilon</name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name>epsilon</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_min</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_min_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_minf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_min_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_max</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_max_ps</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_maxf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>_mm_max_ps</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_abs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_floor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vec3_ceil</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>ceilf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>ceilf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name>ceilf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>float</name></type> <name>vec3_plane_dist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_transform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_rotate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_transform3x4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_mirror</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_mirrorv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>vec3_rand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>positive_only</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
