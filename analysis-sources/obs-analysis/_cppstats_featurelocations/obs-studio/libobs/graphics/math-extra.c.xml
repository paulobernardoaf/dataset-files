<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\graphics\math-extra.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-extra.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>polar_to_cart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>cart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinx</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinx_z</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name>sinx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cart</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>sinx_z</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cart</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>sinx_z</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cart</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cart_to_polar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>polar</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>polar</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>vec3_len</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name><name>polar</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec3_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>polar</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>asinf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>/</operator> <name><name>polar</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>polar</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>polar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>norm_to_polar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>norm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name><name>norm</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>norm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>asinf</name><argument_list>(<argument><expr><name><name>norm</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>polar_to_norm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>polar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sinx</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name><name>polar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>sinx</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>polar</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>sinx</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>polar</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>polar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>calc_torquef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>val1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>torque</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min_adjust</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>out</name> <init>= <expr><name>val1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>over</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val1</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>(</operator><name>val2</name> <operator>-</operator> <name>val1</name><operator>)</operator> <operator>*</operator> <name>torque</name></expr>;</expr_stmt>
<expr_stmt><expr><name>over</name> <operator>=</operator> <name>dist</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>over</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <name>min_adjust</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>min_adjust</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>dist</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&gt;</operator> <name>val2</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <operator>-</operator><name>min_adjust</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>-</operator><name>min_adjust</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>dist</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&lt;</operator> <name>val2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>calc_torque</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>torque</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min_adjust</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>orig_dist</name></decl>, <decl><type ref="prev"/><name>torque_dist</name></decl>, <decl><type ref="prev"/><name>adjust_dist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vec3_close</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_dist</name> <operator>=</operator> <call><name>vec3_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>orig_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>torque_dist</name> <operator>=</operator> <name>orig_dist</name> <operator>*</operator> <name>torque</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>torque_dist</name> <operator>&lt;</operator> <name>min_adjust</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>torque_dist</name> <operator>=</operator> <name>min_adjust</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>adjust_dist</name> <operator>=</operator> <name>torque_dist</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adjust_dist</name> <operator>&lt;=</operator> <operator>(</operator><name>orig_dist</name> <operator>-</operator> <name>LARGE_EPSILON</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec3_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>adjust_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>rand_float</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>positive_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>positive_only</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>RAND_MAX</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>RAND_MAX</name> <operator>*</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
