<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-source.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>obs_source_type</name> <block>{
<decl><name>OBS_SOURCE_TYPE_INPUT</name></decl>,
<decl><name>OBS_SOURCE_TYPE_FILTER</name></decl>,
<decl><name>OBS_SOURCE_TYPE_TRANSITION</name></decl>,
<decl><name>OBS_SOURCE_TYPE_SCENE</name></decl>,
}</block>;</enum>

<enum>enum <name>obs_balance_type</name> <block>{
<decl><name>OBS_BALANCE_TYPE_SINE_LAW</name></decl>,
<decl><name>OBS_BALANCE_TYPE_SQUARE_LAW</name></decl>,
<decl><name>OBS_BALANCE_TYPE_LINEAR</name></decl>,
}</block>;</enum>

<enum>enum <name>obs_icon_type</name> <block>{
<decl><name>OBS_ICON_TYPE_UNKNOWN</name></decl>,
<decl><name>OBS_ICON_TYPE_IMAGE</name></decl>,
<decl><name>OBS_ICON_TYPE_COLOR</name></decl>,
<decl><name>OBS_ICON_TYPE_SLIDESHOW</name></decl>,
<decl><name>OBS_ICON_TYPE_AUDIO_INPUT</name></decl>,
<decl><name>OBS_ICON_TYPE_AUDIO_OUTPUT</name></decl>,
<decl><name>OBS_ICON_TYPE_DESKTOP_CAPTURE</name></decl>,
<decl><name>OBS_ICON_TYPE_WINDOW_CAPTURE</name></decl>,
<decl><name>OBS_ICON_TYPE_GAME_CAPTURE</name></decl>,
<decl><name>OBS_ICON_TYPE_CAMERA</name></decl>,
<decl><name>OBS_ICON_TYPE_TEXT</name></decl>,
<decl><name>OBS_ICON_TYPE_MEDIA</name></decl>,
<decl><name>OBS_ICON_TYPE_BROWSER</name></decl>,
<decl><name>OBS_ICON_TYPE_CUSTOM</name></decl>,
}</block>;</enum>

<enum>enum <name>obs_media_state</name> <block>{
<decl><name>OBS_MEDIA_STATE_NONE</name></decl>,
<decl><name>OBS_MEDIA_STATE_PLAYING</name></decl>,
<decl><name>OBS_MEDIA_STATE_OPENING</name></decl>,
<decl><name>OBS_MEDIA_STATE_BUFFERING</name></decl>,
<decl><name>OBS_MEDIA_STATE_PAUSED</name></decl>,
<decl><name>OBS_MEDIA_STATE_STOPPED</name></decl>,
<decl><name>OBS_MEDIA_STATE_ENDED</name></decl>,
<decl><name>OBS_MEDIA_STATE_ERROR</name></decl>,
}</block>;</enum>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_VIDEO</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_AUDIO</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_ASYNC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_ASYNC_VIDEO</name></cpp:macro> <cpp:value>(OBS_SOURCE_ASYNC | OBS_SOURCE_VIDEO)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_CUSTOM_DRAW</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_INTERACTION</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_COMPOSITE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_DO_NOT_DUPLICATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_DEPRECATED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_DO_NOT_SELF_MONITOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_CAP_DISABLED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_CAP_OBSOLETE</name></cpp:macro> <cpp:value>OBS_SOURCE_CAP_DISABLED</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_MONITOR_BY_DEFAULT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_SUBMIX</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_CONTROLLABLE_MEDIA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>obs_source_enum_proc_t</name>)<parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>obs_source_audio_mix</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output_data</name></name></type> <name><name>output</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>obs_source_info</name> <block>{




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name><name>enum</name> <name>obs_source_type</name></name></type> <name>type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_flags</name></decl>;</decl_stmt>







<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_name</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>create</name>)<parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>get_width</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>get_height</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_defaults</name>)<parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>obs_properties_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_properties</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>update</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>activate</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>deactivate</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>show</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hide</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>video_tick</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>video_render</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>filter_video</name>)<parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>filter_audio</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>enum_active_sources</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>save</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>load</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mouse_click</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_mouse_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mouse_up</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>click_count</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mouse_move</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_mouse_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>mouse_leave</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mouse_wheel</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_mouse_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_delta</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>focus</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>focus</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>key_click</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_key_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>key_up</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter_remove</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_type_data</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>audio_render</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio_output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>enum_all_sources</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>transition_start</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>transition_stop</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_defaults2</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>obs_properties_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_properties2</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>audio_mix</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>audio_output</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name><name>enum</name> <name>obs_icon_type</name></name></type> <name>icon_type</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>media_play_pause</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>media_restart</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>media_stop</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>media_next</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>media_previous</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>media_get_duration</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>media_get_time</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>media_set_time</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>miliseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>obs_media_state</name></name></type> (<modifier>*</modifier><name>media_get_state</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unversioned_id</name></decl>;</decl_stmt> 
}</block>;</struct>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_register_source_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_register_source</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_register_source_s(info, sizeof(struct obs_source_info))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
