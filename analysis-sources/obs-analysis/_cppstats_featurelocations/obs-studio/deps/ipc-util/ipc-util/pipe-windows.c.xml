<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\ipc-util\ipc-util\pipe-windows.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pipe.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPC_PIPE_BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ipc_pipe_internal_create_events</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>create_full_access_security_descriptor</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>SECURITY_DESCRIPTOR_MIN_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitializeSecurityDescriptor</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>SECURITY_DESCRIPTOR_REVISION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetSecurityDescriptorDacl</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>sd</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ipc_pipe_internal_create_pipe</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>new_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>access</name> <init>= <expr><name>PIPE_ACCESS_DUPLEX</name> <operator>|</operator> <name>FILE_FLAG_OVERLAPPED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>flags</name> <init>= <expr><name>PIPE_TYPE_MESSAGE</name> <operator>|</operator> <name>PIPE_READMODE_MESSAGE</name> <operator>|</operator>
<name>PIPE_WAIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy_s</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat_s</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>create_full_access_security_descriptor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>sd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>CreateNamedPipeA</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>IPC_PIPE_BUF_SIZE</name></expr></argument>, <argument><expr><name>IPC_PIPE_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ipc_pipe_internal_ensure_capacity</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;=</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>read_data</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>read_data</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ipc_pipe_internal_append_bytes</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><name><name>pipe</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ipc_pipe_internal_ensure_capacity</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>read_data</name></name> <operator>+</operator> <name><name>pipe</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ipc_pipe_internal_io_pending</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name> <name>CALLBACK</name></type> <name>ipc_pipe_internal_server_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>IPC_PIPE_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWORD</name></type> <name>wait</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wait</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>pipe</name><operator>-&gt;</operator><name>read_callback</name></name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IPC_PIPE_BUF_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pipe</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ipc_pipe_internal_io_pending</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>wait</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wait</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>GetOverlappedResult</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pipe</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>||</operator> <operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ipc_pipe_internal_append_bytes</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>pipe</name><operator>-&gt;</operator><name>read_callback</name></name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>read_data</name></name></expr></argument>,
<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>pipe</name><operator>-&gt;</operator><name>read_callback</name></name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>ipc_pipe_internal_start_server_thread</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ipc_pipe_internal_server_thread</name></expr></argument>,
<argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>pipe</name><operator>-&gt;</operator><name>thread</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>ipc_pipe_internal_wait_for_connection</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>overlap</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pipe</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <call><name>ipc_pipe_internal_io_pending</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ipc_pipe_internal_open_pipe</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_client_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name> <init>= <expr><name>PIPE_READMODE_MESSAGE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>new_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy_s</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat_s</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>CreateFileA</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>SetNamedPipeHandleState</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>ipc_pipe_server_start</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>ipc_pipe_read_t</name></type> <name>read_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>read_callback</name></name> <operator>=</operator> <name>read_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ipc_pipe_internal_create_events</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ipc_pipe_internal_create_pipe</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ipc_pipe_internal_wait_for_connection</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ipc_pipe_internal_start_server_thread</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>ipc_pipe_server_free</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ipc_pipe_server_free</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_server_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pipe</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CancelIoEx</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pipe</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>ready_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>read_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pipe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ipc_pipe_client_open</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_client_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ipc_pipe_internal_open_pipe</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ipc_pipe_client_free</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ipc_pipe_client_free</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_client_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pipe</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pipe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ipc_pipe_client_write</name><parameter_list>(<parameter><decl><type><name>ipc_pipe_client_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pipe</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name> <operator>||</operator> <name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
