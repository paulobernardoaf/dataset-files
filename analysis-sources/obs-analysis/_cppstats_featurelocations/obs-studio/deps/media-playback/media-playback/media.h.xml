<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\media-playback\media-playback\media.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4244</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4204</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswscale/swscale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mp_video_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mp_audio_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_source_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mp_stop_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>mp_media</name> <block>{
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp_video_cb</name></type> <name>v_preload_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp_stop_cb</name></type> <name>stop_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp_video_cb</name></type> <name>v_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp_audio_cb</name></type> <name>a_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>scale_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>swscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>scale_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>scale_pic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_decode</name></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mp_decode</name></name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_local_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name></type> <name>obsframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cur_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>cur_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>force_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>play_sys_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_pts_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>base_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>interrupt_poll_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stopping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>looping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>kill</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>thread_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reset_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>mp_media</name></name></type> <name>mp_media_t</name>;</typedef>

<struct>struct <name>mp_media_info</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp_video_cb</name></type> <name>v_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp_video_cb</name></type> <name>v_preload_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp_audio_cb</name></type> <name>a_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp_stop_cb</name></type> <name>stop_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>force_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hardware_decoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_local_file</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>mp_media_init</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mp_media_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mp_media_free</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mp_media_play</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>loop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mp_media_stop</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mp_media_play_pause</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int64_t</name></type> <name>mp_get_current_time</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mp_media_seek_to</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&gt;=</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">57</literal><operator>,</operator> <literal type="number">48</literal><operator>,</operator> <literal type="number">101</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NEW_FFMPEG_DECODE_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
