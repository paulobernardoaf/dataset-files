<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\obs-scripting\obs-scripting.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/c99defs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-properties.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>obs_script</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>obs_script</name></name></type> <name>obs_script_t</name>;</typedef>

<enum>enum <name>obs_script_lang</name> <block>{
<decl><name>OBS_SCRIPT_LANG_UNKNOWN</name></decl>,
<decl><name>OBS_SCRIPT_LANG_LUA</name></decl>,
<decl><name>OBS_SCRIPT_LANG_PYTHON</name></decl>
}</block>;</enum>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>obs_scripting_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_scripting_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>obs_scripting_supported_formats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>scripting_log_handler_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_scripting_set_log_callback</name><parameter_list>(<parameter><decl><type><name>scripting_log_handler_t</name></type> <name>handler</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>obs_scripting_python_runtime_linked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>obs_scripting_python_loaded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>obs_scripting_load_python</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>python_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_script_t</name> <modifier>*</modifier></type><name>obs_script_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_script_destroy</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_script_get_description</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_script_get_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_script_get_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name><name>enum</name> <name>obs_script_lang</name></name></type> <name>obs_script_get_lang</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_script_get_properties</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_data_t</name> <modifier>*</modifier></type><name>obs_script_save</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>obs_data_t</name> <modifier>*</modifier></type><name>obs_script_get_settings</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_script_update</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>obs_script_loaded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>obs_script_reload</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
