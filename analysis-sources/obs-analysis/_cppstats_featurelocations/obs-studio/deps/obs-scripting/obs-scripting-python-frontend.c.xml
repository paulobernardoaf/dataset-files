<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\obs-scripting\obs-scripting-python-frontend.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-frontend-api.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-python.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>libobs_to_py</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>obs_obj</name></type></parameter>, <parameter><type><name>ownership</name></type></parameter>, <parameter><type><name>py_obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libobs_to_py_(#type " *", obs_obj, ownership, py_obj, NULL, __func__, __LINE__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>py_to_libobs</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>py_obj</name></type></parameter>, <parameter><type><name>libobs_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>py_to_libobs_(#type " *", py_obj, libobs_out, NULL, __func__, __LINE__)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_scene_names</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><call><name>obs_frontend_get_scene_names</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name> <init>= <expr><name>names</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_name</name> <init>= <expr><call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>py_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_scenes</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_frontend_source_list</name></name></type> <name>list</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_frontend_get_scenes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>sources</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>list</name><operator>.</operator><name>sources</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>py_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>sources</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_current_scene</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>obs_frontend_get_current_scene</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>py_source</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>set_current_scene</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>py_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_frontend_set_current_scene</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_transitions</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_frontend_source_list</name></name></type> <name>list</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_frontend_get_transitions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>sources</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>list</name><operator>.</operator><name>sources</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>py_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>sources</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_current_transition</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>obs_frontend_get_current_transition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>py_source</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>set_current_transition</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>py_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_frontend_set_current_transition</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_scene_collections</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><call><name>obs_frontend_get_scene_collections</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name> <init>= <expr><name>names</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_name</name> <init>= <expr><call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>py_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_current_scene_collection</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_frontend_get_current_scene_collection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>set_current_scene_collection</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_frontend_set_current_scene_collection</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_profiles</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><call><name>obs_frontend_get_profiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name> <init>= <expr><name>names</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_name</name> <init>= <expr><call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>py_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>get_current_profile</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_frontend_get_current_profile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>set_current_profile</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_frontend_set_current_profile</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>frontend_save_callback</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>save_data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>saving</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_frontend_remove_save_callback</name><argument_list>(<argument><expr><name>frontend_save_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_save_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>save_data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_save_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(Op)"</literal></expr></argument>, <argument><expr><name>py_save_data</name></expr></argument>, <argument><expr><name>saving</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>last_cb</name> <init>= <expr><name>cur_python_cb</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_python_cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>script</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_python_cb</name> <operator>=</operator> <name>last_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_save_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>remove_save_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=
<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_save_callback_defer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_frontend_add_save_callback</name><argument_list>(<argument><expr><name>frontend_save_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>add_save_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>add_save_callback_defer</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frontend_event_callback</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>obs_frontend_event</name></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_frontend_remove_event_callback</name><argument_list>(<argument><expr><name>frontend_event_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(i)"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>last_cb</name> <init>= <expr><name>cur_python_cb</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_python_cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>script</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_python_cb</name> <operator>=</operator> <name>last_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>remove_event_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=
<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_event_callback_defer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_frontend_add_event_callback</name><argument_list>(<argument><expr><name>frontend_event_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>add_event_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>add_event_callback_defer</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>add_python_frontend_funcs</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>funcs</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FUNC</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{"obs_frontend_" #c, c, METH_VARARGS, NULL}</cpp:value></cpp:define>

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_scene_names</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_scenes</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_current_scene</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>set_current_scene</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_transitions</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_current_transition</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>set_current_transition</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_scene_collections</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_current_scene_collection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>set_current_scene_collection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_profiles</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>get_current_profile</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>set_current_profile</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>remove_save_callback</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>add_save_callback</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>remove_event_callback</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><name>add_event_callback</name></expr></argument>)</argument_list></call></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEF_FUNC</name></cpp:undef>
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_functions_to_py_module</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
