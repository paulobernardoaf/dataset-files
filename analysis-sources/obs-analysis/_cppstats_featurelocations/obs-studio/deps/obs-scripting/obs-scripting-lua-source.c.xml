<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\obs-scripting\obs-scripting-lua-source.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cstrcache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_table_string_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: no item '%s' of type %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cstrcache_get</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_table_int_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_callback_from_table_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_reg_idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_reg_idx</name> <operator>=</operator> <name>LUA_REFNIL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isnil</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s: item '%s' is not a function"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_reg_idx</name> <operator>=</operator> <call><name>luaL_ref</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_table_string</name><parameter_list>(<parameter><type><name>script</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_table_string_(script, idx, name, __FUNCTION__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_table_int</name><parameter_list>(<parameter><type><name>script</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_table_int_(script, idx, name, __FUNCTION__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_callback_from_table</name><parameter_list>(<parameter><type><name>script</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>p_reg_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_callback_from_table_(script, idx, name, p_reg_idx, __FUNCTION__)</cpp:value></cpp:define>


<function><type><name>bool</name></type> <name>ls_get_libobs_obj_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lua_idx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>swig_type_info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG could not find type: %s%s%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>lua_idx</name></expr></argument>, <argument><expr><name>libobs_out</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SWIG_IsOK</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG failed to convert lua object to obs "</literal>
<literal type="string">"object: %s%s%s"</literal></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_get_libobs_obj</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>lua_index</name></type></parameter>, <parameter><type><name>obs_obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ls_get_libobs_obj_(ls-&gt;script, #type " *", lua_index, obs_obj, ls-&gt;id, __FUNCTION__, __LINE__)</cpp:value></cpp:define>



<function><type><name>bool</name></type> <name>ls_push_libobs_obj_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_in</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ownership</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>swig_type_info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG could not find type: %s%s%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SWIG_NewPointerObj</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>libobs_in</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ownership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_push_libobs_obj</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>obs_obj</name></type></parameter>, <parameter><type><name>ownership</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ls_push_libobs_obj_(ls-&gt;script, #type " *", obs_obj, ownership, ls-&gt;id, __FUNCTION__, __LINE__)</cpp:value></cpp:define>





<struct_decl>struct <name>obs_lua_data</name>;</struct_decl>

<struct>struct <name>obs_lua_source</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_get_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_get_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_get_defaults</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_get_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_activate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_deactivate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_show</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_hide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_video_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_video_render</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_load</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>definition_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>first_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_prev_next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_mutex_t</name></type> <name>lua_source_def_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>first_source_def</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>obs_lua_data</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lua_data_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_prev_next</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_func</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>, <parameter><type><name>rets</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>call_func_(ls-&gt;script, ls-&gt;func_##name, args, rets, #name, ls-&gt;display_name)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>have_func</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ls-&gt;func_##name != LUA_REFNIL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_push_data</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>lua_rawgeti(ls-&gt;script, LUA_REGISTRYINDEX, ld-&gt;lua_data_ref)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_pop</name><parameter_list>(<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_pop(ls-&gt;script, count)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lock_script</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>struct obs_lua_script *__data = ls-&gt;data; struct obs_lua_script *__prev_script = current_lua_script; current_lua_script = __data; pthread_mutex_lock(&amp;__data-&gt;mutex);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlock_script</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;__data-&gt;mutex); current_lua_script = __prev_script;</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_lua_source_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name>type_data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ls</name><operator>-&gt;</operator><name>display_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>obs_lua_source_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><call><name>obs_source_get_type_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>create</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lua_data_ref</name> <init>= <expr><call><name>luaL_ref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lua_data_ref</name> <operator>!=</operator> <name>LUA_REFNIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ls</name></name> <operator>=</operator> <name>ls</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>lua_data_ref</name></name> <operator>=</operator> <name>lua_data_ref</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>first_source</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>first_source</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>first_source</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>call_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>destroy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name><name>ld</name><operator>-&gt;</operator><name>lua_data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>lua_data_ref</name></name> <operator>=</operator> <name>LUA_REFNIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_destroy</name><argument_list>(<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>ld</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>p_prev_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>obs_lua_source_get_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>get_width</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>call_func</name><argument_list>(<argument><expr><name>get_width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_pop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>width</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>obs_lua_source_get_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>get_height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>call_func</name><argument_list>(<argument><expr><name>get_height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_pop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>height</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_get_defaults</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name>type_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>get_defaults</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>get_defaults</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_lua_source_get_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>get_properties</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>call_func</name><argument_list>(<argument><expr><name>get_properties</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_pop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_VOID_DATA_CALLBACK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void obs_lua_source_##name(void *data) { struct obs_lua_data *ld = data; struct obs_lua_source *ls = ld-&gt;ls; if (!have_func(name)) return; lock_script(); ls_push_data(); call_func(name, 1, 0); unlock_script(); }</cpp:value></cpp:define>











<macro><name>DEFINE_VOID_DATA_CALLBACK</name><argument_list>(<argument>activate</argument>)</argument_list></macro>
<macro><name>DEFINE_VOID_DATA_CALLBACK</name><argument_list>(<argument>deactivate</argument>)</argument_list></macro>
<macro><name>DEFINE_VOID_DATA_CALLBACK</name><argument_list>(<argument>show</argument>)</argument_list></macro>
<macro><name>DEFINE_VOID_DATA_CALLBACK</name><argument_list>(<argument>hide</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFINE_VOID_DATA_CALLBACK</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_video_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>video_tick</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>video_tick</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_video_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>video_render</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>gs_effect_t</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>video_render</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_save</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>save</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_load</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>ls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_func</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>source_type_unload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unref</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaL_unref(ls-&gt;script, LUA_REGISTRYINDEX, name); name = LUA_REFNIL</cpp:value></cpp:define>



<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_create</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_destroy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_get_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_get_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_get_defaults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_get_properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_activate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_deactivate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_hide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_video_tick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_video_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>func_load</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>unref</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_source_free_type_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name>type_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>source_type_unload</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>obs_enable_source_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>find_existing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name>first_source_def</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ls</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>existing</name> <operator>=</operator> <name>ls</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ls</name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>existing</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_register_source</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name></type> <name>ls</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_args1</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>is_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>get_table_string</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>existing</name> <operator>=</operator> <call><name>find_existing</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>existing</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>existing</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>existing</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>existing</name></expr> ?</condition><then> <expr><name>existing</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ls</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name>script</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>(</operator>enum <name>obs_source_type</name><operator>)</operator><call><name>get_table_int</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>=</operator> <call><name>get_table_int</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"output_flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"get_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>display_name</name></name> <operator>=</operator> <call><name>cstrcache_get</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>display_name</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>display_name</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>info</name><operator>.</operator><name>id</name></name> <operator>||</operator>
<operator>!</operator><name><name>info</name><operator>.</operator><name>output_flags</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_callback</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { get_callback_from_table(script, -1, #val, &amp;v-&gt;func_##val); info.val = obs_lua_source_##val; } while (false)</cpp:value></cpp:define>





<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>get_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>get_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>get_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>activate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>deactivate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>hide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>video_tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>video_render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_callback</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>get_callback</name></cpp:undef>

<expr_stmt><expr><call><name>get_callback_from_table</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get_defaults"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>func_get_defaults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>existing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ls</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>current_lua_script</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>mutexattr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutexattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutexattr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>.</operator><name>definition_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutexattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutexattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>type_data</name></name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ls</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>free_type_data</name></name> <operator>=</operator> <name>obs_lua_source_free_type_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>get_name</name></name> <operator>=</operator> <name>obs_lua_source_get_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>get_defaults2</name></name> <operator>=</operator> <name>obs_lua_source_get_defaults</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>type_data</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>first_source_def</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name>first_source_def</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_source_def</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>existing</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name>script</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>existing</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>current_lua_script</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_enable_source_type</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>first_source</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ld</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_func</name><argument_list>(<argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>=
<expr><call><name>obs_source_get_settings</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>create</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>lua_data_ref</name></name> <operator>=</operator>
<call><name>luaL_ref</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ld</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>existing</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>add_lua_source_functions</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"obslua"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"obs_register_source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>obs_lua_register_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>undef_source_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enable_source_type</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_data</name></name> <modifier>*</modifier></type><name>ld</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>first_source</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ld</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>call_destroy</name><argument_list>(<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>source_type_unload</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>definition_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>undef_lua_script_sources</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_source</name></name> <modifier>*</modifier></type><name>def</name> <init>= <expr><name>first_source_def</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>def</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>script</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undef_source_type</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>def</name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
