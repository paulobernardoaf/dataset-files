<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\obs-scripting\obs-scripting-logging.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>scripting_log_handler_t</name></type> <name>callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>script_log_va</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><literal type="string">"(Unknown)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>start_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_SCRIPT_LANG_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><name>lang</name> <operator>=</operator> <literal type="string">"(Unknown language)"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_SCRIPT_LANG_LUA</name></expr>:</case>
<expr_stmt><expr><name>lang</name> <operator>=</operator> <literal type="string">"Lua"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_SCRIPT_LANG_PYTHON</name></expr>:</case>
<expr_stmt><expr><name>lang</name> <operator>=</operator> <literal type="string">"Python"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>start_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[%s: %s] "</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>,
<argument><expr><name><name>script</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[Unknown Script] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <name>start_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>start_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>msg</name> <operator>+</operator> <name>start_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>script_log</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>script_log_va</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_scripting_set_log_callback</name><parameter_list>(<parameter><decl><type><name>scripting_log_handler_t</name></type> <name>handler</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>callback</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <name>log_param</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
