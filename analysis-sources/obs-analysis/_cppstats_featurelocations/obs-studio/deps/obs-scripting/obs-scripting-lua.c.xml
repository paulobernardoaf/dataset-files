<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\obs-scripting\obs-scripting-lua.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_BITS</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_DIR</name></cpp:macro> <cpp:value>"64bit"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_DIR</name></cpp:macro> <cpp:value>"32bit"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_EXT</name></cpp:macro> <cpp:value>"dylib"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_WIN32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_EXT</name></cpp:macro> <cpp:value>"dll"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_EXT</name></cpp:macro> <cpp:value>"so"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>startup_script_template</name> <init>= <expr><literal type="string">"\
for val in pairs(package.preload) do\n\
package.preload[val] = nil\n\
end\n\
package.cpath = package.cpath .. \";\" .. \"%s/Contents/MacOS/?.so\" .. \";\" .. \"%s\" .. \"/?."</literal> <name>SO_EXT</name>
<literal type="string">"\"\n\
require \"obslua\"\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_script_path_func</name> <init>= <expr><literal type="string">"\
function script_path()\n\
return \"%s\"\n\
end\n\
package.path = package.path .. \";\" .. script_path() .. \"/?.lua\"\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>startup_script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>tick_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>first_tick_script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lua_source_def_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_get_libobs_obj</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>lua_index</name></type></parameter>, <parameter><type><name>obs_obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ls_get_libobs_obj_(script, #type " *", lua_index, obs_obj, NULL, __FUNCTION__, __LINE__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_push_libobs_obj</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>obs_obj</name></type></parameter>, <parameter><type><name>ownership</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ls_push_libobs_obj_(script, #type " *", obs_obj, ownership, NULL, __FUNCTION__, __LINE__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_func</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>, <parameter><type><name>rets</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>call_func_(script, cb-&gt;reg_idx, args, rets, #name, __FUNCTION__)</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_hook_functions</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_remove_tick_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_remove_main_render_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UI_ENABLED</name></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>add_lua_frontend_funcs</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_lua_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><call><name>luaL_newstate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to create new lua state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_openlibs</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_ffi</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>luaL_dostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>startup_script</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"Error executing startup script 1: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>get_script_path_func</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>luaL_dostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"Error executing startup script 2: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_lua_source_functions</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_hook_functions</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UI_ENABLED</name></expr></cpp:if>
<expr_stmt><expr><call><name>add_lua_frontend_funcs</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>luaL_loadfile</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading file: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LUA_MULTRET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"Error running file: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lua_gettop</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>lua_isboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_tick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>first_tick_script</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <operator>&amp;</operator><name>first_tick_script</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first_tick_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <call><name>luaL_ref</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>=</operator> <call><name>luaL_ref</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>=</operator> <name>LUA_REFNIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <call><name>luaL_ref</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>LUA_REFNIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <call><name>luaL_ref</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>LUA_REFNIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_defaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><literal type="string">"Error calling "</literal>
<literal type="string">"script_defaults: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><literal type="string">"Error calling "</literal>
<literal type="string">"script_defaults: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>desc</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><literal type="string">"Error calling "</literal>
<literal type="string">"script_load: %s"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name>script</name></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>script</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>THREAD_LOCAL</name> <name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>current_lua_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>THREAD_LOCAL</name> <name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>current_lua_script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<struct>struct <name>lua_obs_timer</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_prev_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>timer_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>first_timer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lua_obs_timer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>first_timer</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name>first_timer</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first_timer</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lua_obs_timer_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>p_prev_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>timer</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type>
<name>lua_obs_timer_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name>timer</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timer_remove</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>find_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name>p_cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_cb</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func_</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reg_idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"timer_cb"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_timer_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>lua_obs_callback_extra_data</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_obs_timer_init</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timer_add</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ms</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ms</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback_extra</name><argument_list>(
<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>lua_obs_timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>lua_obs_callback_extra_data</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>ms</name> <operator>*</operator> <literal type="number">1000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>=</operator> <call><name>obs_get_video_frame_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_timer_init</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_main_render_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_remove_main_render_callback</name><argument_list>(<argument><expr><name>obs_lua_main_render_callback</name></expr></argument>,
<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>obs_lua_main_render_callback</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_remove_main_render_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_args1</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>is_function</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>find_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_add_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_add_main_render_callback</name><argument_list>(<argument><expr><name>obs_lua_main_render_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_add_main_render_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_args1</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>is_function</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_add_render</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_lua_tick_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_remove_tick_callback</name><argument_list>(<argument><expr><name>obs_lua_tick_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>obs_lua_tick_callback</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_remove_tick_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_args1</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>is_function</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>find_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_add_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_add_tick_callback</name><argument_list>(<argument><expr><name>obs_lua_tick_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_add_tick_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_args1</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>is_function</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_add_tick</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>calldata_signal_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal_handler_remove_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>calldata_signal_callback</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_signal_handler_disconnect</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>signal</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>find_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>cb_handler</name> <init>=
<expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cb_signal</name> <init>=
<expr><call><name>calldata_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"signal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb_signal</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>signal</name></expr></argument>, <argument><expr><name>cb_signal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>handler</name> <operator>==</operator> <name>cb_handler</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_next_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_connect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name> <init>= <expr><call><name>calldata_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"signal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>signal_handler_connect</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><name>calldata_signal_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_signal_handler_connect</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>signal</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"signal"</literal></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_connect</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>calldata_signal_callback_global</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>,
<parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal_handler_remove_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>calldata_signal_callback_global</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_signal_handler_disconnect_global</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>find_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>cb_handler</name> <init>=
<expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <name>cb_handler</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_next_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_connect_global</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>signal_handler_connect_global</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>calldata_signal_callback_global</name></expr></argument>,
<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obs_lua_signal_handler_connect_global</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_connect_global</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>enum_sources_proc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_source_get_ref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>enum_sources</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_enum_sources</name><argument_list>(<argument><expr><name>enum_sources_proc</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>source_enum_filters_proc</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_source_get_ref</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>source_enum_filters</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_enum_filters</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>source_enum_filters_proc</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>enum_items_proc</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_sceneitem_t</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scene_enum_items</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_scene_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scene</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_enum_items</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>enum_items_proc</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_hotkey_unregister</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_hotkey_unregister</name><argument_list>(<argument><expr><operator>(</operator><name>obs_hotkey_id</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_remove_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>obs_hotkey_id</name><operator>)</operator><call><name>calldata_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_hotkey_unregister</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hotkey_pressed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>pressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>hotkey_pressed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_hotkey_pressed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hotkey_pressed</name><argument_list>(<argument><expr><name>p_cb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_hotkey_unpressed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hotkey_pressed</name><argument_list>(<argument><expr><name>p_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hotkey_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_hotkey_pressed</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_hotkey_unpressed</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hotkey_unregister</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_args1</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>is_function</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>find_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hotkey_register_frontend</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>on_remove</name></name> <operator>=</operator> <name>on_remove_hotkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>obs_hotkey_register_frontend</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>hotkey_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_prop_clicked</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>button_prop_clicked</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>properties_add_button</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_button2</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>button_prop_clicked</name></expr></argument>,
<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>modified_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>, <parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,
<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>modified_callback</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>property_set_modified_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_function</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_property_set_modified_callback2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>modified_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_current_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_lua_cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>current_lua_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>calldata_source</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calldata_sceneitem</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>sceneitem</name> <init>= <expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_sceneitem_t</name></expr></argument>, <argument><expr><name>sceneitem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>source_list_release</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sceneitem_list_release</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_sceneitem_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>hook_print</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>current_lua_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>script_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hook_error</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>current_lua_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>script_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_script_log</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>current_lua_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_level</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>log_chunk</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>log_chunk</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endl</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>endl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>endl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>script_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>endl</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>endl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endl</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>script_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>log_chunk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hook_functions</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_func</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { lua_pushstring(script, name); lua_pushcfunction(script, func); lua_rawset(script, -3); } while (false)</cpp:value></cpp:define>






<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"_G"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"print"</literal></expr></argument>, <argument><expr><name>hook_print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>hook_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"obslua"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"script_log"</literal></expr></argument>, <argument><expr><name>lua_script_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"timer_remove"</literal></expr></argument>, <argument><expr><name>timer_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"timer_add"</literal></expr></argument>, <argument><expr><name>timer_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_enum_sources"</literal></expr></argument>, <argument><expr><name>enum_sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_source_enum_filters"</literal></expr></argument>, <argument><expr><name>source_enum_filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_scene_enum_items"</literal></expr></argument>, <argument><expr><name>scene_enum_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"source_list_release"</literal></expr></argument>, <argument><expr><name>source_list_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"sceneitem_list_release"</literal></expr></argument>, <argument><expr><name>sceneitem_list_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"calldata_source"</literal></expr></argument>, <argument><expr><name>calldata_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"calldata_sceneitem"</literal></expr></argument>, <argument><expr><name>calldata_sceneitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_add_main_render_callback"</literal></expr></argument>,
<argument><expr><name>obs_lua_add_main_render_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_remove_main_render_callback"</literal></expr></argument>,
<argument><expr><name>obs_lua_remove_main_render_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_add_tick_callback"</literal></expr></argument>, <argument><expr><name>obs_lua_add_tick_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_remove_tick_callback"</literal></expr></argument>, <argument><expr><name>obs_lua_remove_tick_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"signal_handler_connect"</literal></expr></argument>, <argument><expr><name>obs_lua_signal_handler_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"signal_handler_disconnect"</literal></expr></argument>,
<argument><expr><name>obs_lua_signal_handler_disconnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"signal_handler_connect_global"</literal></expr></argument>,
<argument><expr><name>obs_lua_signal_handler_connect_global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"signal_handler_disconnect_global"</literal></expr></argument>,
<argument><expr><name>obs_lua_signal_handler_disconnect_global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_hotkey_unregister"</literal></expr></argument>, <argument><expr><name>hotkey_unregister</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_hotkey_register_frontend"</literal></expr></argument>, <argument><expr><name>hotkey_register_frontend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_properties_add_button"</literal></expr></argument>, <argument><expr><name>properties_add_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"obs_property_set_modified_callback"</literal></expr></argument>,
<argument><expr><name>property_set_modified_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_func</name><argument_list>(<argument><expr><literal type="string">"remove_current_callback"</literal></expr></argument>, <argument><expr><name>remove_current_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>add_func</name></cpp:undef>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>lua_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><call><name>obs_get_video_frame_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>first_tick_script</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func_</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"tick"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timer</name> <operator>=</operator> <name>first_timer</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_timer</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>lua_obs_timer_cb</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_obs_timer_remove</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>elapsed</name> <init>= <expr><name>ts</name> <operator>-</operator> <name><name>timer</name><operator>-&gt;</operator><name>last_ts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>interval</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>timer_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>+=</operator> <name><name>timer</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>obs_lua_script_update</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>obs_lua_script_load</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name> <operator>=</operator> <call><name>load_lua_script</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_lua_script_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_script_t</name> <modifier>*</modifier></type><name>obs_lua_script_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBS_SCRIPT_LANG_LUA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <name>LUA_REFNIL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><ternary><condition><expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr> ?</condition><then> <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slash</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>settings</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_lua_script_load</name><argument_list>(<argument><expr><operator>(</operator><name>obs_script_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>obs_script_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>undef_lua_script_sources</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>obs_lua_script_unload</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>undef_lua_script_sources</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"script_unload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=
<expr><operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>first_callback</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>next</name> <init>=
<expr><operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_lua_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_lua_script_destroy</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>log_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_lua_script_update</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name> <operator>==</operator> <name>LUA_REFNIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>settings</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func_</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"script_update"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_lua_script_get_properties</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>==</operator> <name>LUA_REFNIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_func_</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"script_properties"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_get_libobs_obj</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_lua_script_save</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name> <operator>==</operator> <name>LUA_REFNIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push_libobs_obj</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func_</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"script_save"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_lua_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>obs_lua_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dep_paths</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>tmp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bundlePath</name> <init>= <expr><literal type="string">"./"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Class</name></type> <name>nsRunningApplication</name> <init>= <expr><call><name>objc_lookUpClass</name><argument_list>(<argument><expr><literal type="string">"NSRunningApplication"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEL</name></type> <name>currentAppSel</name> <init>= <expr><call><name>sel_getUid</name><argument_list>(<argument><expr><literal type="string">"currentApplication"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>id</name></type> (<modifier>*</modifier><name>running_app_func</name>)<parameter_list>(<parameter><decl><type><name>Class</name></type></decl></parameter>, <parameter><decl><type><name>SEL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>running_app_func</name></type> <name>operatingSystemName</name> <init>= <expr><operator>(</operator><name>running_app_func</name><operator>)</operator><name>objc_msgSend</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id</name></type> <name>app</name> <init>= <expr><call><name>operatingSystemName</name><argument_list>(<argument><expr><name>nsRunningApplication</name></expr></argument>, <argument><expr><name>currentAppSel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>id</name></type> (<modifier>*</modifier><name>bundle_url_func</name>)<parameter_list>(<parameter><decl><type><name>id</name></type></decl></parameter>, <parameter><decl><type><name>SEL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>bundle_url_func</name></type> <name>bundleURL</name> <init>= <expr><operator>(</operator><name>bundle_url_func</name><operator>)</operator><name>objc_msgSend</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id</name></type> <name>url</name> <init>= <expr><call><name>bundleURL</name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><call><name>sel_getUid</name><argument_list>(<argument><expr><literal type="string">"bundleURL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>id</name></type> (<modifier>*</modifier><name>url_path_func</name>)<parameter_list>(<parameter><decl><type><name>id</name></type></decl></parameter>, <parameter><decl><type><name>SEL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>url_path_func</name></type> <name>urlPath</name> <init>= <expr><operator>(</operator><name>url_path_func</name><operator>)</operator><name>objc_msgSend</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>path</name> <init>= <expr><call><name>urlPath</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>sel_getUid</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>id</name></type> (<modifier>*</modifier><name>string_func</name>)<parameter_list>(<parameter><decl><type><name>id</name></type></decl></parameter>, <parameter><decl><type><name>SEL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>string_func</name></type> <name>utf8String</name> <init>= <expr><operator>(</operator><name>string_func</name><operator>)</operator><name>objc_msgSend</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bundlePath</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>utf8String</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>sel_registerName</name><argument_list>(<argument><expr><literal type="string">"UTF8String"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>startup_script_template</name></expr></argument>, <argument><expr><name>bundlePath</name></expr></argument>, <argument><expr><name>SCRIPT_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startup_script</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dep_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_add_tick_callback</name><argument_list>(<argument><expr><name>lua_tick</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_lua_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_remove_tick_callback</name><argument_list>(<argument><expr><name>lua_tick</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>startup_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lua_source_def_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
