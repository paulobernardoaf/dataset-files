<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\obs-scripting\obs-scripting-lua.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4100</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4189</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4244</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4267</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWIG_TYPE_TABLE</name></cpp:macro> <cpp:value>obslua</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swig/swigluarun.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bmem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-callback.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[Lua] " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>



<struct_decl>struct <name>obs_lua_script</name>;</struct_decl>
<struct_decl>struct <name>lua_obs_callback</name>;</struct_decl>

<extern>extern THREAD_LOCAL struct lua_obs_callback *current_lua_cb;</extern>
<extern>extern THREAD_LOCAL struct obs_lua_script *current_lua_script;</extern>



<struct_decl>struct <name>lua_obs_callback</name>;</struct_decl>

<struct>struct <name>obs_lua_script</name> <block>{
<decl_stmt><decl><type><name>obs_script_t</name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>log_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>first_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>next_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_prev_next_tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>defined_sources</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lock_callback</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>struct obs_lua_script *__last_script = current_lua_script; struct lua_obs_callback *__last_callback = current_lua_cb; current_lua_cb = cb; current_lua_script = (struct obs_lua_script *)cb-&gt;base.script; pthread_mutex_lock(&amp;current_lua_script-&gt;mutex);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlock_callback</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;current_lua_script-&gt;mutex); current_lua_script = __last_script; current_lua_cb = __last_callback;</cpp:value></cpp:define>






<struct>struct <name>lua_obs_callback</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_idx</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type>
<name>add_lua_obs_callback_extra</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stack_idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>current_lua_script</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=
<expr><call><name>add_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>first_callback</name></name></expr></argument>, <argument><expr><operator>(</operator><name>obs_script_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>extra_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>stack_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>reg_idx</name></name> <operator>=</operator> <call><name>luaL_ref</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name>script</name></expr>;</expr_stmt>
<return>return <expr><name>cb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>add_lua_obs_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stack_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>add_lua_obs_callback_extra</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>stack_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>lua_obs_callback_extra_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type>
<name>lua_obs_callback_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>obs_lua_script</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>script</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type>
<name>find_next_lua_obs_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stack_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>current_lua_script</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <ternary><condition><expr><name>cb</name></expr> ?</condition><then> <expr><operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>next</name></name></expr>
</then><else>: <expr><operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>first_callback</name></name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reg_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><call><name>lua_rawequal</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stack_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>(</operator>struct <name>lua_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>cb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>find_lua_obs_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stack_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>find_next_lua_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stack_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>remove_lua_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>remove_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_unref</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reg_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>just_free_lua_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>just_free_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_lua_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lua_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>is_ptr</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lua_isuserdata</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lua_isnil</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_table</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lua_istable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_function</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>param_cb</name>)<parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>verify_args1_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>param_cb</name></type> <name>param1_check</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Wrong number of parameters for %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>param1_check</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Wrong parameter type for parameter %d of %s"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verify_args1</name><parameter_list>(<parameter><type><name>script</name></type></parameter>, <parameter><type><name>param1_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>verify_args1_(script, param1_check, __FUNCTION__)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>call_func_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rets</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reg_idx</name> <operator>==</operator> <name>LUA_REFNIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_lua_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>current_lua_script</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name>reg_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_insert</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>rets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>script_warn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to call %s for %s: %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>display_name</name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>ls_get_libobs_obj_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lua_idx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ls_push_libobs_obj_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_in</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ownership</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>add_lua_source_functions</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
