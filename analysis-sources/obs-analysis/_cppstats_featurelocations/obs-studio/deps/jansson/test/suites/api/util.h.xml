<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\test\suites\api\util.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson_private_config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>failhdr</name></cpp:macro> <cpp:value>fprintf(stderr, "%s:%d: ", __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fail</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { failhdr; fprintf(stderr, "%s\n", msg); exit(1); } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_errors</name><parameter_list>(<parameter><type><name>texts_</name></type></parameter>, <parameter><type><name>num_</name></type></parameter>, <parameter><type><name>source_</name></type></parameter>, <parameter><type><name>line_</name></type></parameter>, <parameter><type><name>column_</name></type></parameter>, <parameter><type><name>position_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i_, found_ = 0; for(i_ = 0; i_ &lt; num_; i_++) { if(strcmp(error.text, texts_[i_]) == 0) { found_ = 1; break; } } if (!found_) { failhdr; if (num_ == 1) { fprintf(stderr, "text: \"%s\" != \"%s\"\n", error.text, texts_[0]); } else { fprintf(stderr, "text: \"%s\" does not match\n", error.text); } exit(1); } if(strcmp(error.source, source_) != 0) { failhdr; fprintf(stderr, "source: \"%s\" != \"%s\"\n", error.source, source_); exit(1); } if(error.line != line_) { failhdr; fprintf(stderr, "line: %d != %d\n", error.line, line_); exit(1); } if(error.column != column_) { failhdr; fprintf(stderr, "column: %d != %d\n", error.column, column_); exit(1); } if(error.position != position_) { failhdr; fprintf(stderr, "position: %d != %d\n", error.position, position_); exit(1); } } while(0)</cpp:value></cpp:define>










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_error</name><parameter_list>(<parameter><type><name>text_</name></type></parameter>, <parameter><type><name>source_</name></type></parameter>, <parameter><type><name>line_</name></type></parameter>, <parameter><type><name>column_</name></type></parameter>, <parameter><type><name>position_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_errors(&amp;text_, 1, source_, line_, column_, position_)</cpp:value></cpp:define>



<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>run_tests</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETLOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
