<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\test\suites\api\test_load_callback.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<struct>struct <name>my_source</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>my_str</name><index>[]</index></name> <init>= <expr><literal type="string">"[\"A\", {\"B\": \"C\", \"e\": false}, 1, null, \"foo\"]"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>greedy_reader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_source</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>buflen</name></expr>;</expr_stmt>
<return>return <expr><name>buflen</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_tests</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_source</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>my_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_load_callback</name><argument_list>(<argument><expr><name>greedy_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_callback failed on a valid callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>my_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_load_callback</name><argument_list>(<argument><expr><name>greedy_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_callback should have failed on an incomplete stream, but it didn't"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;callback&gt;"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_callback returned an invalid error source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"']' expected near end of file"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_callback returned an invalid error message for an unclosed top-level array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_load_callback</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_callback should have failed on NULL load callback, but it didn't"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"wrong arguments"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_callback returned an invalid error message for a NULL load callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
