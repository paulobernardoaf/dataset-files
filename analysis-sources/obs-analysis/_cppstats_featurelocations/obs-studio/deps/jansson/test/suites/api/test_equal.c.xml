<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\test\suites\api\test_equal.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_equal_simple</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two NULLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_true</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>json_equal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"identical objects are not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value1</name> <operator>||</operator> <operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create integers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two equal integers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal integers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_real</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_real</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value1</name> <operator>||</operator> <operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create reals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two equal reals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_real</name><argument_list>(<argument><expr><literal type="number">3.141592</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create an real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal reals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value1</name> <operator>||</operator> <operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two equal strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create an string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_equal_array</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>array2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array1</name> <operator>=</operator> <call><name>json_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array2</name> <operator>=</operator> <call><name>json_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array1</name> <operator>||</operator> <operator>!</operator><name>array2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create arrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two empty arrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array2</name></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array2</name></expr></argument>, <argument><expr><call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array2</name></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two equal arrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_array_remove</name><argument_list>(<argument><expr><name>array2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal arrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array2</name></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal arrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>array1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_equal_object</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>object1</name> <operator>=</operator> <call><name>json_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>object2</name> <operator>=</operator> <call><name>json_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>object1</name> <operator>||</operator> <operator>!</operator><name>object2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two empty objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two equal objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_object_del</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_object_del</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>json_equal</name><argument_list>(<argument><expr><name>object1</name></expr></argument>, <argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>object1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_equal_complex</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>complex_json</name> <init>=
<expr><literal type="string">"{"</literal>
<literal type="string">" \"integer\": 1, "</literal>
<literal type="string">" \"real\": 3.141592, "</literal>
<literal type="string">" \"string\": \"foobar\", "</literal>
<literal type="string">" \"true\": true, "</literal>
<literal type="string">" \"object\": {"</literal>
<literal type="string">" \"array-in-object\": [1,true,\"foo\",{}],"</literal>
<literal type="string">" \"object-in-object\": {\"foo\": \"bar\"}"</literal>
<literal type="string">" },"</literal>
<literal type="string">" \"array\": [\"foo\", false, null, 1.234]"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>complex_json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>complex_json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value1</name> <operator>||</operator> <operator>!</operator><name>value2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to parse JSON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_equal fails for two inequal strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_tests</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_equal_simple</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_equal_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_equal_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_equal_complex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
