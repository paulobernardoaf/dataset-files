<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\doc\github_commits.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>(256 * 1024)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_FORMAT</name></cpp:macro> <cpp:value>"https://api.github.com/repos/%s/%s/commits"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type> <name>newline_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newline</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newline</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>newline</name> <operator>-</operator> <name>text</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>write_result</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>write_response</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>write_result</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator>struct <name>write_result</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name> <operator>*</operator> <name>nmemb</name> <operator>&gt;=</operator> <name>BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: too small buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>result</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>size</name> <operator>*</operator> <name>nmemb</name></expr>;</expr_stmt>

<return>return <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>write_result</name></name></type> <name>write_result</name> <init>= <expr><block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>,
<expr><operator>.</operator><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"User-Agent: Jansson-Tutorial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>write_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: unable to request data from %s:\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">200</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: server responded with code %ld\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><index>[<expr><name><name>write_result</name><operator>.</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>curl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>headers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><name>URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s USER REPOSITORY\n\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"List commits at USER's REPOSITORY.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>URL_SIZE</name></expr></argument>, <argument><expr><name>URL_FORMAT</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>request</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: on line %d: %s\n"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: root is not an array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sha</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>commit</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message_text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>json_array_get</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: commit data %d is not an object\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sha</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"sha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: commit %d: sha is not a string\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: commit %d: commit is not an object\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: commit %d: message is not a string\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>message_text</name> <operator>=</operator> <call><name>json_string_value</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.8s %.*s\n"</literal></expr></argument>,
<argument><expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>newline_offset</name><argument_list>(<argument><expr><name>message_text</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>message_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
