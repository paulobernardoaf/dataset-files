<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\value.c">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson_private_config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>isnan</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>int</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>x</name> <operator>!=</operator> <name>x</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>isinf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>int</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>void</name></type> <name>json_init</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>json_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>uint32_t</name></type> <name>hashtable_seed</name></decl>;</decl_stmt>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_object</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>jsonp_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>json_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hashtable_seed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>json_object_seed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>json_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>JSON_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hashtable_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>json</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_delete_object</name><parameter_list>(<parameter><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hashtable_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>json_object_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>object</name><operator>-&gt;</operator><name>hashtable</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_object_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hashtable_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_set_new_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>json</name> <operator>==</operator> <name>value</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hashtable_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_set_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><call><name>utf8_check_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>json_object_set_new_nocheck</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_del</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hashtable_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_clear</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashtable_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_update</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<macro><name>json_object_foreach</name><argument_list>(<argument>other</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>json_object_set_nocheck</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_update_existing</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<macro><name>json_object_foreach</name><argument_list>(<argument>other</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_object_set_nocheck</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_update_missing</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<macro><name>json_object_foreach</name><argument_list>(<argument>other</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_object_get</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_object_set_nocheck</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>json_object_iter</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hashtable_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>json_object_iter_at</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hashtable_iter_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>json_object_iter_next</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hashtable_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_object_iter_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>iter</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>hashtable_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_object_iter_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>iter</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><call><name>hashtable_iter_value</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_object_iter_set_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>iter</name> <operator>||</operator> <operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashtable_iter_set</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>json_object_key_to_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>hashtable_key_to_iter</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>json_object_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_object_size</name><argument_list>(<argument><expr><name>object1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>json_object_size</name><argument_list>(<argument><expr><name>object2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<macro><name>json_object_foreach</name><argument_list>(<argument>object1</argument>, <argument>key</argument>, <argument>value1</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>object2</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_object_copy</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>json_object_foreach</name><argument_list>(<argument>object</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>json_object_set_nocheck</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_object_deep_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter</name><argument_list>(<argument><expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>json_object_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_object_iter_value</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_object_set_new_nocheck</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter_next</name><argument_list>(<argument><expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>jsonp_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>json_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>JSON_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>json_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>json</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_delete_array</name><parameter_list>(<parameter><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>json_array_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>entries</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_array_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_array_set_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>json</name> <operator>==</operator> <name>value</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>array_move</name><parameter_list>(<parameter><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>dest</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>json_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>array_copy</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dpos</name></decl></parameter>,
<parameter><decl><type><name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>spos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>dpos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>spos</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>json_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>json_array_grow</name><parameter_list>(<parameter><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>amount</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_table</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>new_table</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>amount</name> <operator>&lt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_table</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>amount</name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_table</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>json_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_table</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>new_table</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_copy</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>old_table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>old_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>old_table</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_array_append_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>json</name> <operator>==</operator> <name>value</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_array_grow</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_array_insert_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_table</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>json</name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_table</name> <operator>=</operator> <call><name>json_array_grow</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>old_table</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>old_table</name> <operator>!=</operator> <name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_copy</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>old_table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_copy</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>old_table</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
<argument><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>old_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>array_move</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_array_remove</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>array_move</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_array_clear</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_array_extend</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other_json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>other_json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>other_json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_array_grow</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>other</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_incref</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>array_copy</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>entries</name></name> <operator>+=</operator> <name><name>other</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>json_array_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>array1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>!=</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_array_get</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_array_get</name><argument_list>(<argument><expr><name>array2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_array_copy</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_array_append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>json_array_get</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_array_deep_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>json_deep_copy</name><argument_list>(<argument><expr><call><name>json_array_get</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>string_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>own</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_string_t</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>own</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>jsonp_strndup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>json_string_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>own</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>json_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>string</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>JSON_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>string</name><operator>-&gt;</operator><name>json</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_string_nocheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>string_create</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_stringn_nocheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>string_create</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>json_t</name> <modifier>*</modifier></type><name>jsonp_stringn_nocheck_own</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>string_create</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_stringn</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_stringn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <operator>!</operator><call><name>utf8_check_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_stringn_nocheck</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_string_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_to_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>json_string_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_to_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>length</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_string_set_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_string_setn_nocheck</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_string_setn_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_string_t</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dup</name> <operator>=</operator> <call><name>jsonp_strndup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>json_to_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>dup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_string_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_string_setn</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_string_setn</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <operator>!</operator><call><name>utf8_check_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_string_setn_nocheck</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_delete_string</name><parameter_list>(<parameter><decl><type><name>json_string_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>json_string_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>string1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>string2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_string_t</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>json_to_string</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>json_to_string</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>s1</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_string_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_string_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>json_to_string</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>json_stringn_nocheck</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_integer</name><parameter_list>(<parameter><decl><type><name>json_int_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_integer_t</name> <modifier>*</modifier></type><name>integer</name> <init>= <expr><call><name>jsonp_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>json_integer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>integer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>integer</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>JSON_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>integer</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>integer</name><operator>-&gt;</operator><name>json</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_int_t</name></type> <name>json_integer_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_to_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_integer_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>json_int_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_to_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_delete_integer</name><parameter_list>(<parameter><decl><type><name>json_integer_t</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>json_integer_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>integer1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>integer2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>json_integer_value</name><argument_list>(<argument><expr><name>integer1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>json_integer_value</name><argument_list>(<argument><expr><name>integer2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_integer_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>json_integer</name><argument_list>(<argument><expr><call><name>json_integer_value</name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_real</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_real_t</name> <modifier>*</modifier></type><name>real</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>real</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>json_real_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>real</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>real</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>JSON_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>real</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>real</name><operator>-&gt;</operator><name>json</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>json_real_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_to_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_real_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_to_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_delete_real</name><parameter_list>(<parameter><decl><type><name>json_real_t</name> <modifier>*</modifier></type><name>real</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>json_real_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>real1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>real2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>json_real_value</name><argument_list>(<argument><expr><name>real1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>json_real_value</name><argument_list>(<argument><expr><name>real2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json_real_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>real</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>json_real</name><argument_list>(<argument><expr><call><name>json_real_value</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>double</name></type> <name>json_number_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>json_is_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><call><name>json_integer_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>json_is_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>json_real_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_true</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>json_t</name></type> <name>the_true</name> <init>= <expr><block>{<expr><name>JSON_TRUE</name></expr>, <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>the_true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_false</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>json_t</name></type> <name>the_false</name> <init>= <expr><block>{<expr><name>JSON_FALSE</name></expr>, <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>the_false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>json_t</name></type> <name>the_null</name> <init>= <expr><block>{<expr><name>JSON_NULL</name></expr>, <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>the_null</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>json_delete</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>JSON_OBJECT</name></expr>:</case>
<expr_stmt><expr><call><name>json_delete_object</name><argument_list>(<argument><expr><call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JSON_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>json_delete_array</name><argument_list>(<argument><expr><call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JSON_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>json_delete_string</name><argument_list>(<argument><expr><call><name>json_to_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JSON_INTEGER</name></expr>:</case>
<expr_stmt><expr><call><name>json_delete_integer</name><argument_list>(<argument><expr><call><name>json_to_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JSON_REAL</name></expr>:</case>
<expr_stmt><expr><call><name>json_delete_real</name><argument_list>(<argument><expr><call><name>json_to_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>


</block_content>}</block></function>




<function><type><name>int</name></type> <name>json_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json1</name> <operator>||</operator> <operator>!</operator><name>json2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>json1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>json_typeof</name><argument_list>(<argument><expr><name>json2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>json1</name> <operator>==</operator> <name>json2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>json1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>JSON_OBJECT</name></expr>:</case>
<return>return <expr><call><name>json_object_equal</name><argument_list>(<argument><expr><name>json1</name></expr></argument>, <argument><expr><name>json2</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_ARRAY</name></expr>:</case>
<return>return <expr><call><name>json_array_equal</name><argument_list>(<argument><expr><name>json1</name></expr></argument>, <argument><expr><name>json2</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_STRING</name></expr>:</case>
<return>return <expr><call><name>json_string_equal</name><argument_list>(<argument><expr><name>json1</name></expr></argument>, <argument><expr><name>json2</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_INTEGER</name></expr>:</case>
<return>return <expr><call><name>json_integer_equal</name><argument_list>(<argument><expr><name>json1</name></expr></argument>, <argument><expr><name>json2</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_REAL</name></expr>:</case>
<return>return <expr><call><name>json_real_equal</name><argument_list>(<argument><expr><name>json1</name></expr></argument>, <argument><expr><name>json2</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_copy</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>JSON_OBJECT</name></expr>:</case>
<return>return <expr><call><name>json_object_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_ARRAY</name></expr>:</case>
<return>return <expr><call><name>json_array_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_STRING</name></expr>:</case>
<return>return <expr><call><name>json_string_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_INTEGER</name></expr>:</case>
<return>return <expr><call><name>json_integer_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_REAL</name></expr>:</case>
<return>return <expr><call><name>json_real_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_TRUE</name></expr>:</case>
<case>case <expr><name>JSON_FALSE</name></expr>:</case>
<case>case <expr><name>JSON_NULL</name></expr>:</case>
<return>return <expr><name>json</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_deep_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>JSON_OBJECT</name></expr>:</case>
<return>return <expr><call><name>json_object_deep_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_ARRAY</name></expr>:</case>
<return>return <expr><call><name>json_array_deep_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>JSON_STRING</name></expr>:</case>
<return>return <expr><call><name>json_string_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_INTEGER</name></expr>:</case>
<return>return <expr><call><name>json_integer_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_REAL</name></expr>:</case>
<return>return <expr><call><name>json_real_copy</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>JSON_TRUE</name></expr>:</case>
<case>case <expr><name>JSON_FALSE</name></expr>:</case>
<case>case <expr><name>JSON_NULL</name></expr>:</case>
<return>return <expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><name>json</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
