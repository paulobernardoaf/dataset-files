<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\load.c">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_STATE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_STATE_EOF</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_STATE_ERROR</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_INVALID</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_EOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_STRING</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_INTEGER</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_REAL</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_TRUE</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_FALSE</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_NULL</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_isupper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('A' &lt;= (c) &amp;&amp; (c) &lt;= 'Z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_islower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('a' &lt;= (c) &amp;&amp; (c) &lt;= 'z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_isalpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(l_isupper(c) || l_islower(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_isdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('0' &lt;= (c) &amp;&amp; (c) &lt;= '9')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_isxdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(l_isdigit(c) || ('A' &lt;= (c) &amp;&amp; (c) &lt;= 'F') || ('a' &lt;= (c) &amp;&amp; (c) &lt;= 'f'))</cpp:value></cpp:define>





<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>get_func</name></type> <name>get</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>, <name>last_column</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>position</name></decl>;</decl_stmt>
}</block></struct></type> <name>stream_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>stream_t</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>strbuffer_t</name></type> <name>saved_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name>string</name></decl>;</struct>
<decl_stmt><decl><type><name>json_int_t</name></type> <name>integer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>real</name></decl>;</decl_stmt>
}</block> <decl><name>value</name></decl>;</union>
}</block></struct></type> <name>lex_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stream_to_lex</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of(stream, lex_t, stream)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>error_set</name><parameter_list>(<parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg_text</name><index>[<expr><name>JSON_ERROR_TEXT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg_with_context</name><index>[<expr><name>JSON_ERROR_TEXT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>msg_text</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg_text</name></expr></argument>, <argument><expr><name>JSON_ERROR_TEXT_LENGTH</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_text</name><index>[<expr><name>JSON_ERROR_TEXT_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>lex</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>saved_text</name> <init>= <expr><call><name>strbuffer_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>position</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>saved_text</name> <operator>&amp;&amp;</operator> <name><name>saved_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg_with_context</name></expr></argument>, <argument><expr><name>JSON_ERROR_TEXT_LENGTH</name></expr></argument>,
<argument><expr><literal type="string">"%s near '%s'"</literal></expr></argument>, <argument><expr><name>msg_text</name></expr></argument>, <argument><expr><name>saved_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_with_context</name><index>[<expr><name>JSON_ERROR_TEXT_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>msg_with_context</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>STREAM_STATE_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>msg_text</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg_with_context</name></expr></argument>, <argument><expr><name>JSON_ERROR_TEXT_LENGTH</name></expr></argument>,
<argument><expr><literal type="string">"%s near end of file"</literal></expr></argument>, <argument><expr><name>msg_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_with_context</name><index>[<expr><name>JSON_ERROR_TEXT_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>msg_with_context</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jsonp_error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>stream_init</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>get_func</name></type> <name>get</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get</name></name> <operator>=</operator> <name>get</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STREAM_STATE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_get</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>STREAM_STATE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STREAM_STATE_EOF</name></expr>;</expr_stmt>
<return>return <expr><name>STREAM_STATE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xFF</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>utf8_check_first</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>utf8_check_full</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>last_column</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>utf8_check_first</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>column</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

<label><name>out</name>:</label>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STREAM_STATE_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>stream_to_lex</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unable to decode byte 0x%x"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>STREAM_STATE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_unget</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>STREAM_STATE_EOF</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>STREAM_STATE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>position</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>line</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>last_column</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>utf8_check_first</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>column</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>]</index></name> <operator>==</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lex_get</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stream_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_save</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuffer_append_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lex_get_save</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>stream_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <name>STREAM_STATE_EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>STREAM_STATE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lex_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_unget</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stream_unget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_unget_unsave</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <name>STREAM_STATE_EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>STREAM_STATE_ERROR</name></expr>)</condition> <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>stream_unget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>d</name> <operator>=</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>strbuffer_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_save_cached</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buffer_pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lex_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buffer_pos</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buffer_pos</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_free_string</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>decode_unicode_escape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>l_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>l_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_scan_string</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>STREAM_STATE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>STREAM_STATE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"premature end of input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"unexpected newline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"control character 0x%x"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>l_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid escape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator>
<name>c</name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid escape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>








<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strbuffer_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_unicode_escape</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid Unicode escape '%.6s'"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0xD800</literal> <operator>&lt;=</operator> <name>value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xDBFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value2</name> <init>= <expr><call><name>decode_unicode_escape</name><argument_list>(<argument><expr><operator>++</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>value2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid Unicode escape '%.6s'"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0xDC00</literal> <operator>&lt;=</operator> <name>value2</name> <operator>&amp;&amp;</operator> <name>value2</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>value</name> <operator>-</operator> <literal type="number">0xD800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>value2</name> <operator>-</operator> <literal type="number">0xDC00</literal><operator>)</operator> <operator>+</operator>
<literal type="number">0x10000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>,
<argument><expr><literal type="string">"invalid Unicode '\\u%04X\\u%04X'"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid Unicode '\\u%04X'"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><literal type="number">0xDC00</literal> <operator>&lt;=</operator> <name>value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid Unicode '\\u%04X'"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>utf8_encode</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <case>case <expr><literal type="char">'/'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>t</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>t</name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_STRING</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>lex_free_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JANSSON_USING_CMAKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JSON_INTEGER_IS_LONG_LONG</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_strtoint</name></cpp:macro> <cpp:value>_strtoi64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_strtoint</name></cpp:macro> <cpp:value>strtoll</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_strtoint</name></cpp:macro> <cpp:value>strtol</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lex_scan_number</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>saved_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>doubleval</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>lex</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_DECODE_INT_AS_REAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'e'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>json_int_t</name></type> <name>intval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_text</name> <operator>=</operator> <call><name>strbuffer_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>intval</name> <operator>=</operator> <call><name>json_strtoint</name><argument_list>(<argument><expr><name>saved_text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>intval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"too big negative integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"too big integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>==</operator> <name>saved_text</name> <operator>+</operator> <name><name>lex</name><operator>-&gt;</operator><name>saved_text</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INTEGER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>intval</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lex_unget</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lex_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>jsonp_strtod</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doubleval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"real number overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_REAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>real</name></name> <operator>=</operator> <name>doubleval</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lex_scan</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>==</operator> <name>TOKEN_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lex_free_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>STREAM_STATE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_EOF</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>STREAM_STATE_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INVALID</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lex_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lex_scan_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>l_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lex_scan_number</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>l_isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>saved_text</name></decl>;</decl_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lex_get_save</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><call><name>l_isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>lex_unget_unsave</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_text</name> <operator>=</operator> <call><name>strbuffer_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>saved_text</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>saved_text</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>saved_text</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>


<expr_stmt><expr><call><name>lex_save_cached</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>out</name>:</label>
<return>return <expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lex_steal_string</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>==</operator> <name>TOKEN_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lex_init</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>get_func</name></type> <name>get</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>get</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>TOKEN_INVALID</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lex_close</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>==</operator> <name>TOKEN_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lex_free_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuffer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>saved_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>parse_value</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>parse_object</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>json_object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>object</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <name>TOKEN_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"string or '}' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>lex_steal_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"NUL byte in object key not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSON_REJECT_DUPLICATES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"duplicate object key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"':' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>parse_value</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_object_set_nocheck</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"'}' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>object</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>parse_array</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>json_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>array</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>parse_value</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>elem</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_array_append</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"']' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>array</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>parse_value</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name>JSON_PARSER_MAX_DEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"maximum parsing depth reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TOKEN_STRING</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_ALLOW_NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"\\u0000 is not allowed without JSON_ALLOW_NUL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>jsonp_stringn_nocheck_own</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>TOKEN_INTEGER</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_integer</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>TOKEN_REAL</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_real</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>TOKEN_TRUE</name></expr>:</case>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_true</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOKEN_FALSE</name></expr>:</case>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_false</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOKEN_NULL</name></expr>:</case>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>parse_array</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOKEN_INVALID</name></expr>:</case>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"invalid token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"unexpected token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>json</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>parse_json</name><parameter_list>(<parameter><decl><type><name>lex_t</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_DECODE_ANY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"'[' or '{' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_value</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_DISABLE_EOF_CHECK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lex_scan</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token</name></name> <operator>!=</operator> <name>TOKEN_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="string">"end of file expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>lex</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>position</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>string_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_get</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string_data_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>string_data_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_loads</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lex_t</name></type> <name>lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string_data_t</name></type> <name>stream_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"wrong arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>string_get</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>stream_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>buffer_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>buffer_get</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buffer_data_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_loadb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lex_t</name></type> <name>lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buffer_data_t</name></type> <name>stream_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"wrong arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>buffer_get</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>stream_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_loadf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lex_t</name></type> <name>lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"&lt;stream&gt;"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"wrong arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><operator>(</operator><name>get_func</name><operator>)</operator><name>fgetc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"wrong arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unable to open %s: %s"</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_loadf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUF_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>MAX_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_load_callback_t</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>callback_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>callback_get</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_data_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>MAX_BUF_LEN</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_load_callback</name><parameter_list>(<parameter><decl><type><name>json_load_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lex_t</name></type> <name>lex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>callback_data_t</name></type> <name>stream_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stream_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_data</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"&lt;callback&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"wrong arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><operator>(</operator><name>get_func</name><operator>)</operator><name>callback_get</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lex_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
