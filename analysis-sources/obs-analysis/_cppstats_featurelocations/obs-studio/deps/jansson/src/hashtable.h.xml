<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\hashtable.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HASHTABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHTABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson.h"</cpp:file></cpp:include>

<struct>struct <name>hashtable_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>hashtable_pair</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name></type> <name>ordered_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>hashtable_bucket</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>hashtable</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_bucket</name></name> <modifier>*</modifier></type><name>buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>order</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_list</name></name></type> <name>ordered_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>hashtable_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashtable_key_to_iter</name><parameter_list>(<parameter><type><name>key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(container_of(key_, struct hashtable_pair, key)-&gt;ordered_list))</cpp:value></cpp:define>













<function_decl><type><name>int</name></type> <name>hashtable_init</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>hashtable_close</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>int</name></type> <name>hashtable_set</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hashtable_get</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>hashtable_del</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>hashtable_clear</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_at</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_next</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>hashtable_iter_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
