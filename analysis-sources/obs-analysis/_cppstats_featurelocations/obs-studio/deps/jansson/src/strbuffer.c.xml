<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\strbuffer.c">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuffer.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRBUFFER_MIN_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRBUFFER_FACTOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRBUFFER_SIZE_MAX</name></cpp:macro> <cpp:value>((size_t)-1)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>strbuffer_init</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>STRBUFFER_MIN_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>strbuffer_close</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>strbuffer_clear</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strbuffer_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>strbuffer_steal_value</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>strbuffer_append_byte</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>byte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>strbuffer_append_bytes</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;=</operator> <name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_value</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>STRBUFFER_SIZE_MAX</name> <operator>/</operator> <name>STRBUFFER_FACTOR</name>
<operator>||</operator> <name>size</name> <operator>&gt;</operator> <name>STRBUFFER_SIZE_MAX</name> <operator>-</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>STRBUFFER_SIZE_MAX</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>STRBUFFER_FACTOR</name></expr></argument>,
<argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>, <argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>new_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>strbuffer_pop</name><parameter_list>(<parameter><decl><type><name>strbuffer_t</name> <modifier>*</modifier></type><name>strbuff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name><index>[<expr><operator>--</operator><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>strbuff</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>strbuff</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="char">'\0'</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
