<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\dump.c">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INTEGER_STR_LENGTH</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REAL_STR_LENGTH</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_TO_INDENT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &amp; 0x1F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_TO_PRECISION</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((f) &gt;&gt; 11) &amp; 0x1F)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_to_strbuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>strbuffer_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_to_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>whitespace</name><index>[]</index></name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_indent</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>json_dump_callback_t</name></type> <name>dump</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>FLAGS_TO_INDENT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ws_count</name> <init>= <expr><call><name>FLAGS_TO_INDENT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>n_spaces</name> <init>= <expr><name>depth</name> <operator>*</operator> <name>ws_count</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>n_spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur_n</name> <init>= <expr><ternary><condition><expr><name>n_spaces</name> <operator>&lt;</operator> <sizeof>sizeof <name>whitespace</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>n_spaces</name></expr> </then><else>: <expr><sizeof>sizeof <name>whitespace</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>cur_n</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n_spaces</name> <operator>-=</operator> <name>cur_n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>space</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_COMPACT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>json_dump_callback_t</name></type> <name>dump</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>codepoint</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>pos</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>end</name> <operator>&lt;</operator> <name>lim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>utf8_iterate</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>lim</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>codepoint</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>codepoint</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_ESCAPE_SLASH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>codepoint</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_ENSURE_ASCII</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>codepoint</name> <operator>&gt;</operator> <literal type="number">0x7F</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>!=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>end</name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>codepoint</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\\\"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\\""</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\b"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\f"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\n"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\r"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\t"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"\\/"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\u%04X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if>


<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><name>codepoint</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0xD800</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0xffc00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0xDC00</literal> <operator>|</operator> <operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x003ff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\u%04X\\u%04X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>first</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>pos</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>json_dump_callback_t</name></type> <name>dump</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>JSON_NULL</name></expr>:</case>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>JSON_TRUE</name></expr>:</case>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>JSON_FALSE</name></expr>:</case>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>JSON_INTEGER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_INTEGER_STR_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_INTEGER_STR_LENGTH</name></expr></argument>,
<argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>,
<argument><expr><call><name>json_integer_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;=</operator> <name>MAX_INTEGER_STR_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>JSON_REAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_REAL_STR_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name>json_real_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>jsonp_dtostr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_REAL_STR_LENGTH</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><call><name>FLAGS_TO_PRECISION</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>JSON_STRING</name></expr>:</case>
<return>return <expr><call><name>dump_string</name><argument_list>(<argument><expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>json_string_length</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>JSON_ARRAY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>


<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_to_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>visited</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>array_error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>array_error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>array_error</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>do_dump</name><argument_list>(<argument><expr><call><name>json_array_get</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>array_error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>array_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>array_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>array_error</name>:</label>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>JSON_OBJECT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>json_object_t</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>separator_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSON_COMPACT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="string">":"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>separator_length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="string">": "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>separator_length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_to_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>visited</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter</name><argument_list>(<argument><expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>iter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSON_SORT_KEYS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>json_object_size</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>keys</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>iter</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>json_object_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter_next</name><argument_list>(<argument><expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><name>json</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>separator</name></expr></argument>, <argument><expr><name>separator_length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>do_dump</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>object_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>object_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>object_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<while>while<condition>(<expr><name>iter</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>json_object_iter_next</name><argument_list>(<argument><expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><name>json</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>json_object_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dump_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>separator</name></expr></argument>, <argument><expr><name>separator_length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>do_dump</name><argument_list>(<argument><expr><call><name>json_object_iter_value</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>next</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>dump_indent</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>object_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dump</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>object_error</name>:</label>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>json_dumps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>strbuffer_t</name></type> <name>strbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_dump_callback</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>dump_to_strbuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>strbuff</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>jsonp_strdup</name><argument_list>(<argument><expr><call><name>strbuffer_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuffer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_dumpf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>json_dump_callback</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>dump_to_file</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>output</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_dump_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_dumpf</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_dump_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>json_dump_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSON_ENCODE_ANY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>do_dump</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
