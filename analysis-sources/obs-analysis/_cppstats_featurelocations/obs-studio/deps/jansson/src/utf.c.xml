<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\utf.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>utf8_encode</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>codepoint</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x7C0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x03F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0xF000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x0FC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x003F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0x10FFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x1C0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x03F000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x000FC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x00003F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>utf8_check_first</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>byte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>byte</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <literal type="number">0xBF</literal></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0xC0</literal> <operator>||</operator> <name>u</name> <operator>==</operator> <literal type="number">0xC1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><literal type="number">0xC2</literal> <operator>&lt;=</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0xE0</literal> <operator>&lt;=</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <literal type="number">0xEF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><literal type="number">0xF0</literal> <operator>&lt;=</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <literal type="number">0xF4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>utf8_check_full</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>codepoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>u</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x80</literal> <operator>||</operator> <name>u</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xBF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0x10FFFF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0xD800</literal> <operator>&lt;=</operator> <name>value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <literal type="number">0x10000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>codepoint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>codepoint</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8_iterate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>codepoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bufsize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>buffer</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>utf8_check_first</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <name>bufsize</name> <operator>||</operator> <operator>!</operator><call><name>utf8_check_full</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>codepoint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>codepoint</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buffer</name> <operator>+</operator> <name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>utf8_check_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>utf8_check_first</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <name>length</name> <operator>-</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>utf8_check_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
