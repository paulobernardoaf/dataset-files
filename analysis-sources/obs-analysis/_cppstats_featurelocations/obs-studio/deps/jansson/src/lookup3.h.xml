<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\lookup3.h">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson_private_config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BYTE_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i486__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i586__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i686__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>vax</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MIPSEL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_BIG_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BYTE_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BIG_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__BYTE_ORDER</name> <operator>==</operator> <name>__BIG_ENDIAN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>sparc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>POWERPC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>mc68000</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_BIG_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_BIG_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashsize</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)1&lt;&lt;(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmask</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(hashsize(n)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rot</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;&lt;(k)) | ((x)&gt;&gt;(32-(k))))</cpp:value></cpp:define>













































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ a -= c; a ^= rot(c, 4); c += b; b -= a; b ^= rot(a, 6); a += c; c -= b; c ^= rot(b, 8); b += a; a -= c; a ^= rot(c,16); c += b; b -= a; b ^= rot(a,19); a += c; c -= b; c ^= rot(b, 4); b += a; }</cpp:value></cpp:define>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>final</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ c ^= b; c -= rot(b,14); a ^= c; a -= rot(c,11); b ^= a; b -= rot(a,25); c ^= b; c -= rot(b,16); a ^= c; a -= rot(c,4); b ^= a; b -= rot(a,14); c ^= b; c -= rot(b,24); }</cpp:value></cpp:define>





































<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>hashlittle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>initval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> 
<union>union <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union> 


<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0xdeadbeef</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>length</name><operator>)</operator> <operator>+</operator> <name>initval</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>HASH_LITTLE_ENDIAN</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VALGRIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_MASKING_TRICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>address_sanitizer</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_MASKING_TRICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SANITIZE_ADDRESS__</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_MASKING_TRICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_MASKING_TRICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k8</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_MASKING_TRICK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch<condition>(<expr><name>length</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr> :</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffffff</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffff</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr> :</case> <return>return <expr><name>c</name></expr>;</return> 
</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><name>k8</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>k</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>length</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">9</literal></expr> :</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr> :</case> <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>HASH_LITTLE_ENDIAN</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k8</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>k8</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>k</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>length</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr> :</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr> :</case> <return>return <expr><name>c</name></expr>;</return> 
</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<switch>switch<condition>(<expr><name>length</name></expr>)</condition> 
<block>{<block_content>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>c</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">9</literal></expr> :</case> <expr_stmt><expr><name>c</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<case>case <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>b</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><name>a</name><operator>+=</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr> :</case> <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>
</unit>
