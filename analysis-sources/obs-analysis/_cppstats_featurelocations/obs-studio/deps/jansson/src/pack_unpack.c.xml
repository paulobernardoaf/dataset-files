<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\jansson\src\pack_unpack.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>token</name></decl>;</decl_stmt>
}</block></struct></type> <name>token_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>token_t</name></type> <name>prev_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>token_t</name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>token_t</name></type> <name>next_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>scanner_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>token</name><parameter_list>(<parameter><type><name>scanner</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((scanner)-&gt;token.token)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>type_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"object"</literal></expr>,
<expr><literal type="string">"array"</literal></expr>,
<expr><literal type="string">"string"</literal></expr>,
<expr><literal type="string">"integer"</literal></expr>,
<expr><literal type="string">"real"</literal></expr>,
<expr><literal type="string">"true"</literal></expr>,
<expr><literal type="string">"false"</literal></expr>,
<expr><literal type="string">"null"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>type_name</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type_names[json_typeof(x)]</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>unpack_value_starters</name><index>[]</index></name> <init>= <expr><literal type="string">"{[siIbfFOon"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scanner_init</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_token</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>token_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>token_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_token</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>token_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>next_token</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_token</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>token</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_token</name><operator>.</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_token</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_token</name><operator>.</operator><name>line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>column</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>


<while>while<condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>column</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token</name></name> <operator>=</operator> <operator>*</operator><name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prev_token</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_token</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>token</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_token</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_error</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_error_vset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>column</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>pos</name></name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_error_set_source</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>pack</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>read_string</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>purpose</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>strbuffer_t</name></type> <name>strbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"NULL string argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>utf8_check_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Invalid UTF-8 %s"</literal></expr></argument>, <argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"NULL string argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuffer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;internal&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuffer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>utf8_check_string</name><argument_list>(<argument><expr><name><name>strbuff</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>strbuff</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Invalid UTF-8 %s"</literal></expr></argument>, <argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuffer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name><name>strbuff</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>strbuffer_steal_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>pack_object</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>json_object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected end of format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected format 's', got '%c'"</literal></expr></argument>, <argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>read_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><literal type="string">"object key"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>pack</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ours</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_object_set_new_nocheck</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;internal&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to add key \"%s\""</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ours</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ours</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>object</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>pack_array</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>json_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected end of format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>pack</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;internal&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to append to array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>array</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>pack_string</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nullable</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nullable</name> <operator>=</operator> <call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nullable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>read_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>nullable</name></expr> ?</condition><then> <expr><call><name>json_null</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ours</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>jsonp_stringn_nocheck_own</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>json_stringn_nocheck</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>pack</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<return>return <expr><call><name>pack_object</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<return>return <expr><call><name>pack_array</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 
<return>return <expr><call><name>pack_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 
<return>return <expr><call><name>json_null</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 
<return>return <expr><ternary><condition><expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>json_true</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>json_false</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 
<return>return <expr><call><name>json_integer</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 
<return>return <expr><call><name>json_integer</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>json_int_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 
<return>return <expr><call><name>json_real</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nullable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nullable</name> <operator>=</operator> <call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nullable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>json_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>&amp;&amp;</operator> <name>nullable</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>json_null</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>json_incref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nullable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nullable</name> <operator>=</operator> <call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nullable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>json_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>&amp;&amp;</operator> <name>nullable</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>json_null</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>json</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected format character '%c'"</literal></expr></argument>,
<argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>unpack</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_object</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotopt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>hashtable_t</name></type> <name>key_set</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hashtable_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_set</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;internal&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected object, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>strict</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected '}' after '%c', got '%c'"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>strict</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'!'</literal></expr> </then><else>: <expr><literal type="char">'*'</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected end of format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strict</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'!'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected format 's', got '%c'"</literal></expr></argument>, <argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"NULL object key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <name>gotopt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>opt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Object item not found: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unpack</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashtable_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_set</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_null</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>strict</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_STRICT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>strict</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <name>strict</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_unrecognized_keys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>strbuffer_t</name></type> <name>unrecognized_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>unpacked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>gotopt</name></expr>)</condition> <block>{<block_content>

<macro><name>json_object_foreach</name><argument_list>(<argument>root</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>hashtable_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_set</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unpacked</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_unrecognized_keys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_unrecognized_keys</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>unpacked</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>json_object_size</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>key_set</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unpacked</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotopt</name></expr>)</condition> <block>{<block_content>

<macro><name>json_object_foreach</name><argument_list>(<argument>root</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>hashtable_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_set</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_unrecognized_keys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_unrecognized_keys</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuffer_append_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>,
<argument><expr><literal type="string">"%li object item(s) left unpacked: %s"</literal></expr></argument>,
<argument><expr><name>unpacked</name></expr></argument>, <argument><expr><call><name>strbuffer_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuffer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unrecognized_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>hashtable_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_array</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected array, got %s"</literal></expr></argument>, <argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>strict</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected ']' after '%c', got '%c'"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>strict</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'!'</literal></expr> </then><else>: <expr><literal type="char">'*'</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected end of format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strict</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'!'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>unpack_value_starters</name></expr></argument>, <argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected format character '%c'"</literal></expr></argument>,
<argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_array_get</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Array index %lu out of range"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unpack</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>strict</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_STRICT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>strict</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <name>strict</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>json_array_size</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"%li array item(s) left unpacked"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack</name><parameter_list>(<parameter><decl><type><name>scanner_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<return>return <expr><call><name>unpack_object</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<return>return <expr><call><name>unpack_array</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected string, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len_target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str_target</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str_target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"NULL string argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_target</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len_target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;args&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"NULL string length argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str_target</name> <operator>=</operator> <call><name>json_string_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len_target</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len_target</name> <operator>=</operator> <call><name>json_string_length</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_integer</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected integer, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>json_integer_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_integer</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected integer, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>json_int_t</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>json_int_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <call><name>json_integer_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_boolean</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected true or false, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <call><name>json_is_true</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_real</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected real, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>double</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <call><name>json_real_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_number</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected real or integer, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>double</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <call><name>json_number_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSON_VALIDATE_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>, <argument><expr><name>json_t</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>json_is_null</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;validation&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Expected null, got %s"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected format character '%c'"</literal></expr></argument>,
<argument><expr><call><name>token</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_vpack_ex</name><parameter_list>(<parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scanner_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fmt</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"NULL or empty format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scanner_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap_copy</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ap_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Garbage after format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_pack_ex</name><parameter_list>(<parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_vpack_ex</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>json_pack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_vpack_ex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_vunpack_ex</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scanner_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap_copy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"&lt;root&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"NULL root value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fmt</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jsonp_error_set</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"NULL or empty format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jsonp_error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scanner_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap_copy</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unpack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ap_copy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Garbage after format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_unpack_ex</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>json_vunpack_ex</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>json_unpack</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>json_vunpack_ex</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
