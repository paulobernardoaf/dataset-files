<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libff\libff\ff-demuxer.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-demuxer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/avstring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavdevice/avdevice.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavfilter/avfilter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-compat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_AV_SYNC_TYPE</name></cpp:macro> <cpp:value>AV_SYNC_VIDEO_MASTER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_FRAME_QUEUE_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FRAME_QUEUE_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_PACKET_QUEUE_SIZE</name></cpp:macro> <cpp:value>(5 * 16 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PACKET_QUEUE_SIZE</name></cpp:macro> <cpp:value>(5 * 256 * 1024)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>demux_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque_demuxer</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>ff_demuxer_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avdevice_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avfilter_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>demuxer</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_demuxer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>demuxer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>=</operator> <name>DEFAULT_AV_SYNC_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>frame_drop</name></name> <operator>=</operator> <name>AVDISCARD_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>audio_frame_queue_size</name></name> <operator>=</operator> <name>AUDIO_FRAME_QUEUE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>video_frame_queue_size</name></name> <operator>=</operator> <name>VIDEO_FRAME_QUEUE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>audio_packet_queue_size</name></name> <operator>=</operator> <name>AUDIO_PACKET_QUEUE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>video_packet_queue_size</name></name> <operator>=</operator> <name>VIDEO_PACKET_QUEUE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>is_hw_decoding</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>demuxer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_demuxer_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_format</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input_format</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>input_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>demuxer_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>demux_thread</name></expr></argument>,
<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_demuxer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>demuxer_thread_result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>demuxer_thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>demuxer_thread_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>input</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>input_format</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_decoder_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_decoder_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_demuxer_set_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
<parameter><decl><type><name>ff_callback_frame</name></type> <name>frame</name></decl></parameter>,
<parameter><decl><type><name>ff_callback_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>ff_callback_initialize</name></type> <name>initialize</name></decl></parameter>,
<parameter><decl><type><name>ff_callback_frame</name></type> <name>frame_initialize</name></decl></parameter>,
<parameter><decl><type><name>ff_callback_frame</name></type> <name>frame_free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>callbacks</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>-&gt;</operator><name>initialize</name></name> <operator>=</operator> <name>initialize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>-&gt;</operator><name>frame_initialize</name></name> <operator>=</operator> <name>frame_initialize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>-&gt;</operator><name>frame_free</name></name> <operator>=</operator> <name>frame_free</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>demuxer_interrupted_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>opaque</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator>struct <name>ff_demuxer</name> <operator>*</operator><operator>)</operator><name>opaque</name><operator>)</operator><operator>-&gt;</operator><name>abort</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>ff_external_clock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>opaque</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_clock_sync_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>==</operator> <name>AV_SYNC_VIDEO_MASTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>=</operator> <name>AV_SYNC_AUDIO_MASTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>==</operator> <name>AV_SYNC_AUDIO_MASTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>=</operator> <name>AV_SYNC_VIDEO_MASTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SYNC_AUDIO_MASTER</name></expr>:</case>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_clock</name></name> <operator>=</operator> <name>ff_decoder_clock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SYNC_VIDEO_MASTER</name></expr>:</case>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_clock</name></name> <operator>=</operator> <name>ff_decoder_clock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SYNC_EXTERNAL_MASTER</name></expr>:</case>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_clock</name></name> <operator>=</operator> <name>ff_external_clock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVHWAccel</name> <modifier>*</modifier></type><name>find_hwaccel_codec</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>hwaccel</name> <operator>=</operator> <call><name>av_hwaccel_next</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>hwaccel</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_VDA_VLD</name> <operator>||</operator>
<name><name>hwaccel</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name> <operator>||</operator>
<name><name>hwaccel</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_VAAPI_VLD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>hwaccel</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>get_hwaccel_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fmt</name></expr>;</expr_stmt>


<return>return <expr><name>AV_PIX_FMT_YUV420P</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>initialize_decoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec_context</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>hwaccel_decoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>=</operator> <call><name>ff_decoder_init</name><argument_list>(
<argument><expr><name>codec_context</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>audio_packet_queue_size</name></name></expr></argument>,
<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>audio_frame_queue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>hwaccel_decoder</name></name> <operator>=</operator> <name>hwaccel_decoder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>frame_drop</name></name> <operator>=</operator>
<name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>frame_drop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>natural_sync_clock</name></name> <operator>=</operator>
<name>AV_SYNC_AUDIO_MASTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>audio_callbacks</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_callbacks_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>audio_callbacks</name></name></expr></argument>,
<argument><expr><name>codec_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_decoder_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>=</operator> <call><name>ff_decoder_init</name><argument_list>(
<argument><expr><name>codec_context</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>video_packet_queue_size</name></name></expr></argument>,
<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>video_frame_queue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>hwaccel_decoder</name></name> <operator>=</operator> <name>hwaccel_decoder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>frame_drop</name></name> <operator>=</operator>
<name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>frame_drop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>natural_sync_clock</name></name> <operator>=</operator>
<name>AV_SYNC_VIDEO_MASTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>video_callbacks</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_callbacks_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>video_callbacks</name></name></expr></argument>,
<argument><expr><name>codec_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_decoder_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> (<modifier>*</modifier><name>AVGetFormatCb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_decoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options_dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hwaccel_decoder</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>codec_context</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>codec_context</name><operator>-&gt;</operator><name>refcounted_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PNG</name> <operator>||</operator>
<name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TIFF</name> <operator>||</operator>
<name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_JPEG2000</name> <operator>||</operator>
<name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WEBP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codec_context</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>is_hw_decoding</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><call><name>find_hwaccel_codec</name><argument_list>(<argument><expr><name>codec_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hwaccel</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec_vda</name> <init>=
<expr><call><name>avcodec_find_decoder_by_name</name><argument_list>(<argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_vda</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVGetFormatCb</name></type> <name>original_get_format</name> <init>=
<expr><name><name>codec_context</name><operator>-&gt;</operator><name>get_format</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>codec_context</name><operator>-&gt;</operator><name>get_format</name></name> <operator>=</operator> <name>get_hwaccel_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec_context</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>hwaccel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>codec_context</name></expr></argument>, <argument><expr><name>codec_vda</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>options_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"no hardware decoder found for"</literal>
<literal type="string">" codec with id %d"</literal></expr></argument>,
<argument><expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec_context</name><operator>-&gt;</operator><name>get_format</name></name> <operator>=</operator>
<name>original_get_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec_context</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <name>codec_vda</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hwaccel_decoder</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder_by_name</name><argument_list>(<argument><expr><literal type="string">"libvpx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder_by_name</name><argument_list>(<argument><expr><literal type="string">"libvpx-vp9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"no decoder found for"</literal>
<literal type="string">" codec with id %d"</literal></expr></argument>,
<argument><expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avcodec_open2</name><argument_list>(<argument><expr><name>codec_context</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options_dict</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"unable to open decoder"</literal>
<literal type="string">" with codec id %d"</literal></expr></argument>,
<argument><expr><name><name>codec_context</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>initialize_decoder</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>, <argument><expr><name>codec_context</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
<argument><expr><name>hwaccel_decoder</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_demuxer_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put_flush_packet</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put_flush_packet</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_demuxer_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet</name></name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><call><name>ff_clock_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>sync_type</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>sync_clock</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_clock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>clock</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_clock_retain</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_clock_retain</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>open_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>,
<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>format_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>input_format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOInterruptCB</name></type> <name>interrupted_callback</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interrupted_callback</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>demuxer_interrupted_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interrupted_callback</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>demuxer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>format_context</name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>format_context</name><operator>)</operator><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name>interrupted_callback</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>input_format</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>input_format</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"unable to find input "</literal>
<literal type="string">"format %s"</literal></expr></argument>,
<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avformat_open_input</name><argument_list>(<argument><expr><name>format_context</name></expr></argument>, <argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>input_format</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>custom_options</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><operator>*</operator><name>format_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_decoder_start_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_decoder</name></name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>start_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>decoder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>,
<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_and_initialize_stream_decoders</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>format_context</name> <init>= <expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>audio_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>video_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>format_context</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>format_context</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codec</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>video_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>video_stream</name> <operator>=</operator> <name><name>format_context</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>audio_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>audio_stream</name> <operator>=</operator> <name><name>format_context</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>default_stream_index</name> <init>=
<expr><call><name>av_find_default_stream_index</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>default_stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>=
<expr><name><name>format_context</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>default_stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>=</operator> <name>AV_SYNC_AUDIO_MASTER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>clock</name><operator>.</operator><name>sync_type</name></name> <operator>=</operator> <name>AV_SYNC_VIDEO_MASTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>video_stream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_decoder</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>, <argument><expr><name>video_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_stream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_decoder</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>, <argument><expr><name>audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_clock_sync_type</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>format_context</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>format_context</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>st_start_time</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st_start_time</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,
<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>st_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>format_context</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>&gt;</operator> <name><name>format_context</name><operator>-&gt;</operator><name>start_time</name></name> <operator>||</operator>
<name>start_time</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>format_context</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_decoder_start_time</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>, <argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_decoder_start_time</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>, <argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_callbacks_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>audio_callbacks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_decoder_start</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_decoder_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_clock_sync_type</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_callbacks_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>video_callbacks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_decoder_start</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_decoder_free</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_clock_sync_type</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>set_clock_sync_type</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_request</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>seek_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_target</name> <init>= <expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seek_stream</name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seek_stream</name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seek_stream</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seek_target</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>seek_target</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>,
<argument><expr><name><name>seek_stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_seek_frame</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seek_target</name></expr></argument>,
<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to seek stream: %s"</literal></expr></argument>,
<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_request</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_demuxer_flush</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_demuxer_reset</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_request</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seek_beginning</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name><operator>-&gt;</operator><name>duration</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>=</operator> <name>AVSEEK_FLAG_FRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>=</operator> <name>AVSEEK_FLAG_BACKWARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>=</operator> <name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_request</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>seek_flush</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"looping media %s"</literal></expr></argument>, <argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>demux_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name> <init>= <expr><operator>(</operator>struct <name>ff_demuxer</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet</name></name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>open_input</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dump_format</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_and_initialize_stream_decoders</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_demuxer_reset</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>demuxer</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handle_seek</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_decoder_full</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ff_decoder_full</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_read_frame</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name><operator>-&gt;</operator><name>pb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>io_context</name> <init>=
<expr><name><name>demuxer</name><operator>-&gt;</operator><name>format_context</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io_context</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io_context</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>is_looping</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seek_beginning</name><argument_list>(<argument><expr><name>demuxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"av_read_frame() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_decoder_accept</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ff_decoder_accept</name><argument_list>(<argument><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>audio_decoder</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>video_decoder</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><name><name>demuxer</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
