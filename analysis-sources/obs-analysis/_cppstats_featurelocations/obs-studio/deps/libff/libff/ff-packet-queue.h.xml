<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libff\libff\ff-packet-queue.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-clock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PACKET_FAIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PACKET_EMPTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PACKET_SUCCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ff_packet</name> <block>{
<decl_stmt><decl><type><name>AVPacket</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ff_packet_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet</name></name></type> <name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ff_packet_queue</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet_list</name></name> <modifier>*</modifier></type><name>first_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet_list</name></name> <modifier>*</modifier></type><name>last_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet</name></name></type> <name>flush_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>abort</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ff_packet_queue</name></name></type> <name>ff_packet_queue_t</name>;</typedef>

<function_decl><type><name>bool</name></type> <name>packet_queue_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_queue_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_queue_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>packet_queue_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ff_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>packet_queue_put_flush_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>packet_queue_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ff_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>packet_queue_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
