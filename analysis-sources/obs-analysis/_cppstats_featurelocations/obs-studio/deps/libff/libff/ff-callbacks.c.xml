<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libff\libff\ff-callbacks.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-callbacks.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>ff_callbacks_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ff_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>frame</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>callbacks</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_callbacks_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>format</name></name><argument_list>(<argument><expr><name>codec_context</name></expr></argument>, <argument><expr><name><name>callbacks</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_callbacks_initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>initialize</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>initialize</name></name><argument_list>(<argument><expr><name><name>callbacks</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_callbacks_frame_initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>frame_initialize</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>frame_initialize</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>callbacks</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_callbacks_frame_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>frame_free</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>frame_free</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>callbacks</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
