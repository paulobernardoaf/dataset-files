<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libff\libff\ff-util.h">















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>ff_codec_type</name> <block>{ <decl><name>FF_CODEC_AUDIO</name></decl>, <decl><name>FF_CODEC_VIDEO</name></decl>, <decl><name>FF_CODEC_UNKNOWN</name></decl> }</block>;</enum>

<struct_decl>struct <name>ff_format_desc</name>;</struct_decl>
<struct_decl>struct <name>ff_codec_desc</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>ff_init</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_name_from_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type>
<name>ff_codec_supported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ignore_compatability</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_codec_desc_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_desc_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_desc_long_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>ff_codec_type</name></name></type> <name>ff_codec_desc_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ff_codec_desc_is_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_desc_base_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_codec_desc_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type>
<name>ff_codec_desc_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>ff_format_supported</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_format_desc_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_long_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_mime_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_extensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ff_format_desc_has_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ff_format_desc_has_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_format_desc_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_format_desc_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ff_format_desc_get_default_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ff_codec_type</name></name></type> <name>codec_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type>
<name>ff_format_desc_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
