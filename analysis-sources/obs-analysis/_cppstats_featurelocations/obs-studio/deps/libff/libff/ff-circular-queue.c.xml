<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libff\libff\ff-circular-queue.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-circular-queue.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>queue_fetch_or_alloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>cq</name><operator>-&gt;</operator><name>item_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_circular_queue_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_circular_queue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>item_size</name></name> <operator>=</operator> <name>item_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>capacity</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>write_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>read_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail2</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail1</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_circular_queue_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>queue_lock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_signal</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_unlock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_circular_queue_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_circular_queue_abort</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cq</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_circular_queue_wait_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>queue_lock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cq</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cq</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cq</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>queue_wait</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>queue_unlock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ff_circular_queue_peek_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>queue_fetch_or_alloc</name><argument_list>(<argument><expr><name>cq</name></expr></argument>, <argument><expr><name><name>cq</name><operator>-&gt;</operator><name>write_index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_circular_queue_advance_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>cq</name><operator>-&gt;</operator><name>write_index</name></name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>write_index</name></name> <operator>=</operator> <operator>(</operator><name><name>cq</name><operator>-&gt;</operator><name>write_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>cq</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_lock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>cq</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_unlock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ff_circular_queue_peek_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>queue_fetch_or_alloc</name><argument_list>(<argument><expr><name>cq</name></expr></argument>, <argument><expr><name><name>cq</name><operator>-&gt;</operator><name>read_index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_circular_queue_advance_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cq</name><operator>-&gt;</operator><name>read_index</name></name> <operator>=</operator> <operator>(</operator><name><name>cq</name><operator>-&gt;</operator><name>read_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>cq</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_lock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cq</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_signal</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_unlock</name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
