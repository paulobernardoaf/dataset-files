<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libff\libff\ff-util.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4244</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4204</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavdevice/avdevice.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/log.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ff_format_desc</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>audio_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>video_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVCodecTag</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>codec_tags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ff_codec_desc</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ff_codec_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>ff_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>av_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_name_from_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_codecs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier></type><name>codecs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>codec_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_next</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>codecs</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>codec_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVCodecDescriptor</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codecs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unable to allocate sorted codec "</literal>
<literal type="string">"array with size %d"</literal></expr></argument>,
<argument><expr><name>codec_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_next</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codecs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>codec_count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>descs</name> <operator>=</operator> <name>codecs</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>next_codec_for_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&gt;=</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_prev</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>av_codec_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> <call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>found_prev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_prev</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>av_codec_next</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> <call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>prev</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_codec_to_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_compatability</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_compatability</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tag</name> <init>=
<expr><call><name>av_codec_get_tag</name><argument_list>(<argument><expr><name><name>format_desc</name><operator>-&gt;</operator><name>codec_tags</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_codec_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>long_name</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>long_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>base_codec</name> <init>= <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>base_codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>base_name</name></name> <operator>=</operator> <name><name>base_codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>FF_CODEC_AUDIO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>FF_CODEC_VIDEO</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>FF_CODEC_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>current</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>current</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_codecs_for_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ignore_compatability</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>codec</name> <operator>=</operator> <call><name>next_codec_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_codec_to_list</name><argument_list>(<argument><expr><name>format_desc</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>,
<argument><expr><name>ignore_compatability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type>
<name>ff_codec_supported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ignore_compatability</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier></type><name>codecs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_codecs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codecs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>codecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_codecs_for_id</name><argument_list>(<argument><expr><name>format_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name>ignore_compatability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_desc_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_desc_long_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>long_name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_codec_desc_is_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>alias</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_codec_desc_base_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>base_name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>ff_codec_type</name></name></type> <name>ff_codec_desc_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>type</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FF_CODEC_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type>
<name>ff_codec_desc_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_codec_desc_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>id</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>AV_CODEC_ID_NONE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_codec_desc_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>codec_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>codec_desc</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_codec_desc</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_output_device</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avclass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avclass</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVUTIL_VERSION_INT</name> <operator>&gt;=</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">52</literal><operator>,</operator> <literal type="number">66</literal><operator>,</operator> <literal type="number">101</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>avclass</name><operator>-&gt;</operator><name>category</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>:</case>
<case>case <expr><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT</name></expr>:</case>
<case>case <expr><name>AV_CLASS_CATEGORY_DEVICE_OUTPUT</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name><name>avclass</name><operator>-&gt;</operator><name>category</name></name> <operator>==</operator> <name>AV_CLASS_CATEGORY_OUTPUT</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>ff_format_supported</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVFORMAT_VERSION_INT</name> <operator>&gt;=</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>output_format</name> <operator>=</operator> <call><name>av_muxer_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><operator>(</operator><name>output_format</name> <operator>=</operator> <call><name>av_oformat_next</name><argument_list>(<argument><expr><name>output_format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_output_device</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_format_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>video_codec</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>video_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>long_name</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>long_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mime_type</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>mime_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>extensions</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>extensions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>codec_tags</name></name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>current</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>desc</name></expr>;</return>
</block_content>}</block></while>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_long_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>long_name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_mime_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>mime_type</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_format_desc_extensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>extensions</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_format_desc_has_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_format_desc_has_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>video_codec</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_format_desc_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_format_desc_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>video_codec</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type>
<name>ff_format_desc_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_encoder_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>format_desc</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ff_format_desc_get_default_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ff_codec_type</name></name></type> <name>codec_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>codec_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_CODEC_AUDIO</name></expr>:</case>
<return>return <expr><call><name>get_encoder_name</name><argument_list>(<argument><expr><name>format_desc</name></expr></argument>, <argument><expr><name><name>format_desc</name><operator>-&gt;</operator><name>audio_codec</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FF_CODEC_VIDEO</name></expr>:</case>
<return>return <expr><call><name>get_encoder_name</name><argument_list>(<argument><expr><name>format_desc</name></expr></argument>, <argument><expr><name><name>format_desc</name><operator>-&gt;</operator><name>video_codec</name></name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_format_desc_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>format_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>format_desc</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ff_format_desc</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function></block_content></block></function>
</unit>
