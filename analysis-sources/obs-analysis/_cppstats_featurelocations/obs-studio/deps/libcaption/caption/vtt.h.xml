<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libcaption\caption\vtt.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBCAPTION_VTT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBCAPTION_VTT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"caption.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eia608.h"</cpp:file></cpp:include>

<enum>enum <name>VTT_BLOCK_TYPE</name> <block>{
<decl><name>VTT_REGION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VTT_STYLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VTT_NOTE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VTT_CUE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>


<typedef>typedef <type><struct>struct <name>_vtt_block_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_vtt_block_t</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>VTT_BLOCK_TYPE</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>cue_settings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>cue_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>text_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>block_text</name></decl>;</decl_stmt>
}</block></struct></type> <name>vtt_block_t</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_vtt_t</name> <block>{
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>region_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>region_tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>style_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>style_tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>cue_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>cue_tail</name></decl>;</decl_stmt>
}</block></struct></type> <name>vtt_t</name>;</typedef>




<function_decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt_new</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>vtt_free</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_block_new</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>VTT_BLOCK_TYPE</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>vtt_cue_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>vtt_style_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>vtt_region_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>_vtt_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srt_mode</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_cue_next</name><parameter_list>(<parameter><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</return> </block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>vtt_block_data</name><parameter_list>(<parameter><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>utf8_char_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>block</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vtt_block_t</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vtt_crack_time</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>tt</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>hh</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>mm</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ms</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>tt</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ss</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>tt</name><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>mm</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>tt</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>hh</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>tt</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>





<function_decl><type><name>int</name></type> <name>vtt_cue_to_caption_frame</name><parameter_list>(<parameter><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>cue</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_cue_from_caption_frame</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>vtt_dump</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
