<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libcaption\src\eia608.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eia608.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>int</name></type> <name><name>eia608_row_map</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>eia608_reverse_row_map</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>eia608_style_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"white"</literal></expr>,
<expr><literal type="string">"green"</literal></expr>,
<expr><literal type="string">"blue"</literal></expr>,
<expr><literal type="string">"cyan"</literal></expr>,
<expr><literal type="string">"red"</literal></expr>,
<expr><literal type="string">"yellow"</literal></expr>,
<expr><literal type="string">"magenta"</literal></expr>,
<expr><literal type="string">"italics"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>eia608_row_pramble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>eia608_reverse_row_map</name><index>[<expr><name>row</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><call><name>eia608_parity</name><argument_list>(<argument><expr><literal type="number">0x1040</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>chan</name></expr> ?</condition><then> <expr><literal type="number">0x0800</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>row</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0700</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>row</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0020</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x001E</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>underline</name></expr> ?</condition><then> <expr><literal type="number">0x0001</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>eia608_row_column_pramble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>eia608_row_pramble</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><literal type="number">0x10</literal> <operator>|</operator> <operator>(</operator><name>col</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>uint16_t</name></type> <name>eia608_row_style_pramble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>eia608_row_pramble</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>uint16_t</name></type> <name>eia608_midrow_change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>eia608_parity</name><argument_list>(<argument><expr><literal type="number">0x1120</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>chan</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>style</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000E</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>underline</name> <operator>&amp;</operator> <literal type="number">0x0001</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>eia608_parse_preamble</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name><modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>underline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>eia608_row_map</name><index>[<expr><operator>(</operator><operator>(</operator><literal type="number">0x0700</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">0x0020</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>chan</name><operator>)</operator> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0800</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>underline</name><operator>)</operator> <operator>=</operator> <literal type="number">0x0001</literal> <operator>&amp;</operator> <name>cc_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x0010</literal> <operator>&amp;</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>style</name><operator>)</operator> <operator>=</operator> <name>eia608_style_white</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">0x000E</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>style</name><operator>)</operator> <operator>=</operator> <operator>(</operator><literal type="number">0x000E</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>eia608_parse_midrowchange</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name><modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>underline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>chan</name><operator>)</operator> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0800</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x1120</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7770</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>style</name><operator>)</operator> <operator>=</operator> <operator>(</operator><literal type="number">0x000E</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>underline</name><operator>)</operator> <operator>=</operator> <literal type="number">0x0001</literal> <operator>&amp;</operator> <name>cc_data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>eia608_control_t</name></type> <name>eia608_parse_control</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x0200</literal> <operator>&amp;</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cc</name><operator>)</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>cc_data</name> <operator>&amp;</operator> <literal type="number">0x0800</literal></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>eia608_control_t</name><operator>)</operator><operator>(</operator><literal type="number">0x177F</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cc</name><operator>)</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>cc_data</name> <operator>&amp;</operator> <literal type="number">0x0800</literal></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>cc_data</name> <operator>&amp;</operator> <literal type="number">0x0100</literal></expr> ?</condition><then> <expr><literal type="number">0x02</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>eia608_control_t</name><operator>)</operator><operator>(</operator><literal type="number">0x167F</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>eia608_control_command</name><parameter_list>(<parameter><decl><type><name>eia608_control_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x0800</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>f</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x0100</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eia608_tab_offset_0</name> <operator>==</operator> <operator>(</operator><name>eia608_control_t</name><operator>)</operator><operator>(</operator><name>cmd</name> <operator>&amp;</operator> <literal type="number">0xFFC0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>eia608_control_t</name><operator>)</operator><call><name>eia608_parity</name><argument_list>(<argument><expr><name>cmd</name> <operator>|</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>eia608_control_t</name><operator>)</operator><call><name>eia608_parity</name><argument_list>(<argument><expr><name>cmd</name> <operator>|</operator> <name>c</name> <operator>|</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>utf8_from_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name>EIA608_CHAR_COUNT</name> <operator>&gt;</operator> <name>idx</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>eia608_char_map</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>eia608_to_index</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>c2</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>chan</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc_data</name> <operator>&amp;=</operator> <literal type="number">0x7F7F</literal></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>cc_data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc_data</name> <operator>&amp;=</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x0020</literal> <operator>&lt;=</operator> <name>cc_data</name> <operator>&amp;&amp;</operator> <literal type="number">0x0080</literal> <operator>&gt;</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>c2</name><operator>)</operator> <operator>=</operator> <name>cc_data</name> <operator>-</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><operator>*</operator><name>chan</name><operator>)</operator> <operator>=</operator> <name>cc_data</name> <operator>&amp;</operator> <literal type="number">0x0800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc_data</name> <operator>=</operator> <name>cc_data</name> <operator>&amp;</operator> <literal type="number">0xF7FF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eia608_is_specialna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator> <operator>=</operator> <name>cc_data</name> <operator>-</operator> <literal type="number">0x1130</literal> <operator>+</operator> <literal type="number">0x60</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x1220</literal> <operator>&lt;=</operator> <name>cc_data</name> <operator>&amp;&amp;</operator> <literal type="number">0x1240</literal> <operator>&gt;</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator> <operator>=</operator> <name>cc_data</name> <operator>-</operator> <literal type="number">0x1220</literal> <operator>+</operator> <literal type="number">0x70</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x1320</literal> <operator>&lt;=</operator> <name>cc_data</name> <operator>&amp;&amp;</operator> <literal type="number">0x1340</literal> <operator>&gt;</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator> <operator>=</operator> <name>cc_data</name> <operator>-</operator> <literal type="number">0x1320</literal> <operator>+</operator> <literal type="number">0x90</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>eia608_to_utf8</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>eia608_to_index</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>utf8_char_copy</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><call><name>utf8_from_index</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>utf8_char_copy</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><call><name>utf8_from_index</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>eia608_from_basicna</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>bna1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>bna2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>bna1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>bna2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>eia608_parity</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">0xFF00</literal> <operator>&amp;</operator> <name>bna1</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">0xFF00</literal> <operator>&amp;</operator> <name>bna2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>uint16_t</name></type> <name>_eia608_from_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>uint16_t</name></type> <name>eia608_from_utf8_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cc_data</name> <init>= <expr><call><name>_eia608_from_utf8</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cc_data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chan</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc_data</name> <operator>|=</operator> <literal type="number">0x0800</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>eia608_parity</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>eia608_from_utf8_2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cc1</name> <init>= <expr><call><name>_eia608_from_utf8</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cc2</name> <init>= <expr><call><name>_eia608_from_utf8</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>eia608_from_basicna</name><argument_list>(<argument><expr><name>cc1</name></expr></argument>, <argument><expr><name>cc2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>eia608_dump</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_style_t</name></type> <name>style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>text</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>char1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>char2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>char1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>char2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>chan</name></decl>, <decl><type ref="prev"/><name>underline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eia608_parity_varify</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"parity failed"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>eia608_parity_strip</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"pad"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"basicna"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eia608_to_utf8</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_specialna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"specialna"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eia608_to_utf8</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_westeu</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"westeu"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eia608_to_utf8</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_xds</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"xds"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_midrowchange</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"midrowchange"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_norpak</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"norpak"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_preamble</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"preamble"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eia608_parse_preamble</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"preamble %d %d %d %d %d\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_control</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>eia608_parse_control</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<default>default:</default>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"unknown_control"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_tab_offset_0</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_tab_offset_0"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_tab_offset_1</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_tab_offset_1"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_tab_offset_2</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_tab_offset_2"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_tab_offset_3</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_tab_offset_3"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_resume_caption_loading</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_resume_caption_loading"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_backspace</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_backspace"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_alarm_off</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_alarm_off"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_alarm_on</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_alarm_on"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_delete_to_end_of_row</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_delete_to_end_of_row"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_roll_up_2</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_roll_up_2"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_roll_up_3</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_roll_up_3"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_roll_up_4</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_roll_up_4"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_resume_direct_captioning</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_resume_direct_captioning"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_text_restart</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_text_restart"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_text_resume_text_display</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_text_resume_text_display"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_erase_display_memory</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_erase_display_memory"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_carriage_return</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_carriage_return"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_erase_non_displayed_memory</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_erase_non_displayed_memory"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>eia608_control_end_of_caption</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"eia608_control_end_of_caption"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"unhandled"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cc %04X (%04X) '%s' '%s' (%s)\n"</literal></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>, <argument><expr><call><name>eia608_parity_strip</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>char1</name></expr></argument>, <argument><expr><name>char2</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
