<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libcaption\src\utf8.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>utf8_char_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>n</name> <init>= <expr><name>c</name> <operator>+</operator> <call><name>utf8_char_length</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <name>c</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>utf8_char_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <literal type="number">0x00</literal> <operator>==</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>_utf8_char_length</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>_utf8_char_length</name><index>[<expr><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>utf8_char_whitespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0xC2</literal> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="number">0xA0</literal> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>size_t</name></type> <name>utf8_string_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>utf8_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>char_length</name></decl>, <decl><type ref="prev"/><name>byts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>utf8_char_count</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>--</operator><name>size</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>char_length</name> <operator>=</operator> <call><name>utf8_char_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>char_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>byts</name> <operator>+=</operator> <name>char_length</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>byts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>utf8_char_copy</name><parameter_list>(<parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>utf8_char_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>bytes</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>utf8_size_t</name></type> <name>utf8_char_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>utf8_size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr><operator>,</operator> <expr><name>i</name> <operator>+=</operator> <name>bytes</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>bytes</name> <operator>=</operator> <call><name>utf8_char_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>utf8_trimmed_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>utf8_size_t</name></type> <name>charcters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>split_at</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <name>charcters</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf8_char_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>l</name></expr><operator>,</operator> <expr><name>data</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf8_char_whitespace</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>split_at</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>split_at</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>_utf8_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="char">'\r'</literal> <operator>==</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><literal type="char">'\n'</literal> <operator>==</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'\n'</literal> <operator>==</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><literal type="char">'\r'</literal> <operator>==</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> 
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>utf8_line_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>!=</operator> <name><name>data</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <call><name>_utf8_newline</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name> <operator>+</operator> <name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>utf8_size_t</name></type> <name>utf8_wrap_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>utf8_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>char_length</name></decl>, <decl><type ref="prev"/><name>char_count</name></decl>, <decl><type ref="prev"/><name>split_at</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_count</name> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>char_count</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_utf8_newline</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>char_count</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>utf8_char_whitespace</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>split_at</name> <operator>=</operator> <name>char_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>char_length</name> <operator>=</operator> <call><name>utf8_char_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>char_length</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>split_at</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>utf8_line_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf8_line_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition>;</do>

<return>return <expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>utf8_load_text_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>file_size</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>||</operator> <name>file_size</name> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>utf8_char_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>pos</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file_size</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>size</name><operator>)</operator></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><operator>*</operator><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>strnstr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>char</name><modifier>*</modifier></type> <name>strnstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>length2</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>string1</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>length2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>string1</name></expr></argument>, <argument><expr><name>string2</name></expr></argument>, <argument><expr><name>length2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>string1</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>string1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
