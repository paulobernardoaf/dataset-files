<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libcaption\src\caption.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"caption.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eia608.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>caption_frame_buffer_clear</name><parameter_list>(<parameter><decl><type><name>caption_frame_buffer_t</name><modifier>*</modifier></type> <name>buff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>caption_frame_buffer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>caption_frame_state_clear</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>(</operator><name>caption_frame_state_t</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SCREEN_ROWS</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><name>void</name></type> <name>caption_frame_init</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xds_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>xds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caption_frame_state_clear</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caption_frame_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caption_frame_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>caption_frame_cell_t</name><modifier>*</modifier></type> <name>frame_buffer_cell</name><parameter_list>(<parameter><decl><type><name>caption_frame_buffer_t</name><modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buff</name> <operator>||</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name>row</name> <operator>||</operator> <name>SCREEN_ROWS</name> <operator>&lt;=</operator> <name>row</name> <operator>||</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name>col</name> <operator>||</operator> <name>SCREEN_COLS</name> <operator>&lt;=</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>buff</name><operator>-&gt;</operator><name>cell</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>uint16_t</name></type> <name>_eia608_from_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl> 
<function><type><name>int</name></type> <name>caption_frame_write_char</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>||</operator> <operator>!</operator><call><name>_eia608_from_utf8</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>caption_frame_cell_t</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cell</name> <operator>&amp;&amp;</operator> <call><name>utf8_char_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>uln</name></name> <operator>=</operator> <name>underline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>sty</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>caption_frame_read_char</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name><modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>underline</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>caption_frame_cell_t</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cell</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>style</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>style</name><operator>)</operator> <operator>=</operator> <name>eia608_style_white</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>underline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>underline</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EIA608_CHAR_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>style</name><operator>)</operator> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>sty</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>underline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>underline</name><operator>)</operator> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>uln</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_carriage_return</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name>SCREEN_ROWS</name> <operator>&lt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LIBCAPTION_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name> <operator>-</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;=</operator> <name>r</name> <operator>||</operator> <operator>!</operator><call><name>caption_frame_rollup</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>caption_frame_cell_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SCREEN_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>caption_frame_cell_t</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>SCREEN_ROWS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>caption_frame_cell_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SCREEN_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>eia608_write_char</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>c</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>SCREEN_ROWS</name> <operator>&lt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name>SCREEN_COLS</name> <operator>&lt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>caption_frame_write_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sty</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uln</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_end</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>caption_frame_buffer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caption_frame_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>LIBCAPTION_READY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_decode_preamble</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_style_t</name></type> <name>sty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>chn</name></decl>, <decl><type ref="prev"/><name>uln</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eia608_parse_preamble</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uln</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sty</name></name> <operator>=</operator> <name>sty</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uln</name></name> <operator>=</operator> <name>uln</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_decode_midrowchange</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_style_t</name></type> <name>sty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chn</name></decl>, <decl><type ref="prev"/><name>unl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eia608_parse_midrowchange</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sty</name></name> <operator>=</operator> <name>sty</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uln</name></name> <operator>=</operator> <name>unl</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_backspace</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caption_frame_write_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>eia608_style_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EIA608_CHAR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_READY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_delete_to_end_of_row</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>SCREEN_COLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>caption_frame_write_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>eia608_style_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EIA608_CHAR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>





<return>return <expr><name>LIBCAPTION_READY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_decode_control</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_control_t</name></type> <name>cmd</name> <init>= <expr><call><name>eia608_parse_control</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eia608_control_resume_direct_captioning</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

<case>case <expr><name>eia608_control_erase_display_memory</name></expr>:</case>
<expr_stmt><expr><call><name>caption_frame_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_READY</name></expr>;</return>


<case>case <expr><name>eia608_control_roll_up_2</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

<case>case <expr><name>eia608_control_roll_up_3</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

<case>case <expr><name>eia608_control_roll_up_4</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

<case>case <expr><name>eia608_control_carriage_return</name></expr>:</case>
<return>return <expr><call><name>caption_frame_carriage_return</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>eia608_control_backspace</name></expr>:</case>
<return>return <expr><call><name>caption_frame_backspace</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>eia608_control_delete_to_end_of_row</name></expr>:</case>
<return>return <expr><call><name>caption_frame_delete_to_end_of_row</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>eia608_control_resume_caption_loading</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

<case>case <expr><name>eia608_control_erase_non_displayed_memory</name></expr>:</case>
<expr_stmt><expr><call><name>caption_frame_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

<case>case <expr><name>eia608_control_end_of_caption</name></expr>:</case>
<return>return <expr><call><name>caption_frame_end</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>eia608_tab_offset_0</name></expr>:</case>
<case>case <expr><name>eia608_tab_offset_1</name></expr>:</case>
<case>case <expr><name>eia608_tab_offset_2</name></expr>:</case>
<case>case <expr><name>eia608_tab_offset_3</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <operator>(</operator><name>cmd</name> <operator>-</operator> <name>eia608_tab_offset_0</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>


<default>default:</default>
<case>case <expr><name>eia608_control_alarm_off</name></expr>:</case>
<case>case <expr><name>eia608_control_alarm_on</name></expr>:</case>
<case>case <expr><name>eia608_control_text_restart</name></expr>:</case>
<case>case <expr><name>eia608_control_text_resume_text_display</name></expr>:</case>
<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_decode_text</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>char1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>char2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chars</name> <init>= <expr><call><name>eia608_to_utf8</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>char2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eia608_is_westeu</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>caption_frame_backspace</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>chars</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eia608_write_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>char1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <name>chars</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eia608_write_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>char2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>caption_frame_decode</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eia608_parity_varify</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eia608_is_padding</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_OK</name></expr>;</expr_stmt>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>||</operator> <name>LIBCAPTION_READY</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>eia608_is_specialna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eia608_is_control</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>cc_data</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>cc_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_OK</name></expr>;</expr_stmt>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>cc_data</name></name> <operator>=</operator> <name>cc_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>xds</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>xds_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>xds</name></name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_xds</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>xds_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>xds</name></name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_control</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>caption_frame_decode_control</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eia608_is_specialna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eia608_is_westeu</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_OK</name></expr>;</expr_stmt>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>caption_frame_decode_text</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>LIBCAPTION_OK</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;&amp;</operator> <call><name>caption_frame_painton</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_READY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_preamble</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>caption_frame_decode_preamble</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_midrowchange</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>caption_frame_decode_midrowchange</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>caption_frame_from_text</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>caption_frame_init</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <call><name>utf8_char_whitespace</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name>utf8_char_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>s</name></expr><operator>,</operator> <expr><name>size</name> <operator>-=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>


<decl_stmt><decl><type><name>utf8_size_t</name></type> <name>char_count</name> <init>= <expr><call><name>utf8_wrap_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>SCREEN_COLS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>char_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>char_length</name> <init>= <expr><call><name>utf8_char_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>caption_frame_write_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name>eia608_style_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>char_length</name></expr><operator>,</operator> <expr><name>size</name> <operator>-=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>char_length</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <ternary><condition><expr><name>char_count</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><call><name>caption_frame_end</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>caption_frame_to_text</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>uln</name></decl>, <decl><type ref="prev"/><name>crlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_style_t</name></type> <name>sty</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crlf</name> <operator>+=</operator> <name>count</name></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>SCREEN_COLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>chr</name> <init>= <expr><call><name>caption_frame_read_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <call><name>utf8_char_length</name><argument_list>(<argument><expr><name>chr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>count</name> <operator>||</operator> <operator>!</operator><call><name>utf8_char_whitespace</name><argument_list>(<argument><expr><name>chr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>crlf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\r\n\0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>crlf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>utf8_char_copy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>s</name></expr><operator>,</operator> <expr><name>size</name> <operator>+=</operator> <name>s</name></expr><operator>,</operator> <expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>caption_frame_dump_buffer</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" timestamp: %f\n row: %02d col: %02d roll-up: %d\n"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><call><name>caption_frame_rollup</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" 00000000001111111111222222222233\t 00000000001111111111222222222233\n"</literal>
<literal type="string">" 01234567890123456789012345678901\t 01234567890123456789012345678901\n"</literal>
<literal type="string">" %s--------------------------------%s\t %s--------------------------------%s\n"</literal></expr></argument>,
<argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT</name></expr></argument>, <argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT</name></expr></argument>,
<argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT</name></expr></argument>, <argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%02d%s"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>EIA608_CHAR_VERTICAL_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>SCREEN_COLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>caption_frame_cell_t</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>utf8_char_copy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>cell</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>EIA608_CHAR_SPACE</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\t%02d%s"</literal></expr></argument>, <argument><expr><name>EIA608_CHAR_VERTICAL_LINE</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>EIA608_CHAR_VERTICAL_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>SCREEN_COLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>caption_frame_cell_t</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>frame_buffer_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>utf8_char_copy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>cell</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>EIA608_CHAR_SPACE</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>EIA608_CHAR_VERTICAL_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s--------------------------------%s\t %s--------------------------------%s\n"</literal></expr></argument>,
<argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_UP_AND_RIGHT</name></expr></argument>, <argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_UP_AND_LEFT</name></expr></argument>,
<argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_UP_AND_RIGHT</name></expr></argument>, <argument><expr><name>EIA608_CHAR_BOX_DRAWINGS_LIGHT_UP_AND_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr><operator>,</operator> <expr><name>buf</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>caption_frame_dump</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>utf8_char_t</name></type> <name><name>buff</name><index>[<expr><name>CAPTION_FRAME_DUMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>caption_frame_dump_buffer</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
