<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\libcaption\src\srt.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>srt_t</name><modifier>*</modifier></type> <name>srt_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vtt_new</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>srt_free</name><parameter_list>(<parameter><decl><type><name>srt_t</name><modifier>*</modifier></type> <name>srt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vtt_free</name><argument_list>(<argument><expr><name>srt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vtt_t</name><modifier>*</modifier></type> <name>srt_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_vtt_parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>srt_dump</name><parameter_list>(<parameter><decl><type><name>srt_t</name><modifier>*</modifier></type> <name>srt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>block</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <name><name>srt</name><operator>-&gt;</operator><name>cue_head</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>block</name></expr>;</condition> <incr><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hh1</name></decl>, <decl><type ref="prev"/><name>hh2</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>ss1</name></decl>, <decl><type ref="prev"/><name>ss2</name></decl>, <decl><type ref="prev"/><name>ms1</name></decl>, <decl><type ref="prev"/><name>ms2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vtt_crack_time</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vtt_crack_time</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02d\r\n%d:%02d:%02d,%03d --&gt; %02d:%02d:%02d,%03d\r\n%s\r\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>hh1</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>ss1</name></expr></argument>, <argument><expr><name>ms1</name></expr></argument>, <argument><expr><name>hh2</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>ss2</name></expr></argument>, <argument><expr><name>ms2</name></expr></argument>, <argument><expr><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
