<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\common\tuklib_physmem.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_physmem.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSMISC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dpmi.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib$routines.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syidef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ssdef.h&gt;</cpp:file></cpp:include>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/systemcfg.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_SYSCONF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_SYSCTL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_GETSYSINFO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/hal_sysinfo.h&gt;</cpp:file></cpp:include>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_PSTAT_GETSTATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/pstat.h&gt;</cpp:file></cpp:include>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_GETINVENT_R</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;invent.h&gt;</cpp:file></cpp:include>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_SYSINFO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>extern</specifier> <name>uint64_t</name></type>
<name>tuklib_physmem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetVersion</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>HMODULE</name></type> <name>kernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kernel32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>gmse</name>)<parameter_list>(<parameter><decl><type><name>LPMEMORYSTATUSEX</name></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>GetProcAddress</name><argument_list>(
<argument><expr><name>kernel32</name></expr></argument>, <literal type="string">"GlobalMemoryStatusEx"</literal>)</argument_list></call></expr></init>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>gmse</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>meminfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meminfo</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>meminfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meminfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>meminfo</name><operator>.</operator><name>ullTotalPhys</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>MEMORYSTATUS</name></type> <name>meminfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meminfo</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>meminfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalMemoryStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>meminfo</name><operator>.</operator><name>dwTotalPhys</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mem</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DosQuerySysInfo</name><argument_list>(<argument><expr><name>QSV_TOTPHYSMEM</name></expr></argument>, <argument><expr><name>QSV_TOTPHYSMEM</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>__dpmi_free_mem_info</name></type> <name>meminfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__dpmi_get_free_memory_information</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meminfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>meminfo</name><operator>.</operator><name>total_number_of_physical_pages</name></name>
<operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>meminfo</name><operator>.</operator><name>total_number_of_physical_pages</name></name> <operator>*</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>vms_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>SYI$_MEMSIZE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIB$GETSYI</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vms_mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>SS$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>vms_mem</name> <operator>*</operator> <literal type="number">8192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>_system_configuration</name><operator>.</operator><name>physmem</name></name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_SYSCONF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>pagesize</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>pages</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PHYS_PAGES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pagesize</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pages</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pagesize</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pages</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_SYSCTL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CTL_HW</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HW_PHYSMEM64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>HW_PHYSMEM64</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>HW_PHYSMEM</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
}</block> <decl><name>mem</name></decl>;</union>
<decl_stmt><decl><type><name>size_t</name></type> <name>mem_ptr_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem</name><operator>.</operator><name>u64</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_ptr_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>mem_ptr_size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>mem</name><operator>.</operator><name>u64</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mem_ptr_size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>mem</name><operator>.</operator><name>u32</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_GETSYSINFO</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>int</name></type> <name>memkb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsysinfo</name><argument_list>(<argument><expr><name>GSI_PHYSMEM</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>memkb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memkb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>memkb</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_PSTAT_GETSTATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>pst_static</name></name></type> <name>pst</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pstat_getstatic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pst</name><operator>.</operator><name>physical_memory</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pst</name><operator>.</operator><name>page_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_GETINVENT_R</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>inv_state_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setinvent_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>inventory_t</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>getinvent_r</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>inv_class</name></name> <operator>==</operator> <name>INV_MEMORY</name>
<operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>inv_type</name></name> <operator>==</operator> <name>INV_MAIN_MB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>i</name><operator>-&gt;</operator><name>inv_state</name></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>endinvent_r</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_PHYSMEM_SYSINFO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>sysinfo</name></name></type> <name>si</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>si</name><operator>.</operator><name>totalram</name></name> <operator>*</operator> <name><name>si</name><operator>.</operator><name>mem_unit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
