<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\common\tuklib_integer.h">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_INTEGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUKLIB_INTEGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_common.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BYTESWAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;byteswap.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSWAP_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap16</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap_16(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSWAP_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap32</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap_32(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSWAP_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap64</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap_64(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_BYTEORDER_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/byteorder.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap16</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSWAP_16(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap32</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSWAP_32(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap64</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSWAP_64(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BE_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv16be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BE_16(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BE_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv32be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BE_32(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BE_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv64be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BE_64(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LE_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv16le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LE_16(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LE_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv32le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LE_32(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LE_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv64le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LE_64(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bswap16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap16</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint16_t)(num) &lt;&lt; 8) | ((uint16_t)(num) &gt;&gt; 8))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bswap32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap32</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (((uint32_t)(num) &lt;&lt; 24) ) | (((uint32_t)(num) &lt;&lt; 8) &amp; UINT32_C(0x00FF0000)) | (((uint32_t)(num) &gt;&gt; 8) &amp; UINT32_C(0x0000FF00)) | (((uint32_t)(num) &gt;&gt; 24) ) )</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bswap64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bswap64</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (((uint64_t)(num) &lt;&lt; 56) ) | (((uint64_t)(num) &lt;&lt; 40) &amp; UINT64_C(0x00FF000000000000)) | (((uint64_t)(num) &lt;&lt; 24) &amp; UINT64_C(0x0000FF0000000000)) | (((uint64_t)(num) &lt;&lt; 8) &amp; UINT64_C(0x000000FF00000000)) | (((uint64_t)(num) &gt;&gt; 8) &amp; UINT64_C(0x00000000FF000000)) | (((uint64_t)(num) &gt;&gt; 24) &amp; UINT64_C(0x0000000000FF0000)) | (((uint64_t)(num) &gt;&gt; 40) &amp; UINT64_C(0x000000000000FF00)) | (((uint64_t)(num) &gt;&gt; 56) ) )</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv16be</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv16be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t)(num))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv32be</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv32be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(num))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv64be</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv64be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(num))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv16le</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv16le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap16(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv32le</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv32le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap32(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv64le</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv64le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap64(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv16be</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv16be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap16(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv32be</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv32be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap32(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv64be</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv64be</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap64(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv16le</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv16le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t)(num))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv32le</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv32le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(num))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>conv64le</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv64le</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(num))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>read16be</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>conv16be</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>read16le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>conv16le</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>read32be</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>conv32be</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>read32le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>conv32le</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>read64be</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>conv64be</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>read64le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>conv64le</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write16be</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write16ne((buf), conv16be(num))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write16le</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write16ne((buf), conv16le(num))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write32be</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write32ne((buf), conv32be(num))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write32le</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write32ne((buf), conv32le(num))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write64be</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write64ne((buf), conv64be(num))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write64le</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write64ne((buf), conv64le(num))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>write16ne</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>write32ne</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>write64ne</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_FAST_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_read16be</name></cpp:macro> <cpp:value>read16be</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_read16le</name></cpp:macro> <cpp:value>read16le</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_read32be</name></cpp:macro> <cpp:value>read32be</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_read32le</name></cpp:macro> <cpp:value>read32le</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_write16be</name></cpp:macro> <cpp:value>write16be</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_write16le</name></cpp:macro> <cpp:value>write16le</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_write32be</name></cpp:macro> <cpp:value>write32be</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unaligned_write32le</name></cpp:macro> <cpp:value>write32le</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>unaligned_read16be</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>unaligned_read16le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>unaligned_read32be</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>unaligned_read32le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>unaligned_write16be</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>unaligned_write16le</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>unaligned_write32be</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>unaligned_write32le</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>bsr32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_bit_scan_reverse</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>TUKLIB_GNUC_REQ</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>UINT_MAX</name> <operator>==</operator> <name>UINT32_MAX</name></expr></cpp:elif>




<return>return <expr><call><name>__builtin_clz</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">31U</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<asm>__asm__("bsrl %1, %0" : "=r" (i) : "rm" (n));</asm>
<return>return <expr><name>i</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:elif>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>(</operator><name>DWORD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xFFFF0000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xF0000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xC0000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>clz32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_bit_scan_reverse</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">31U</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>TUKLIB_GNUC_REQ</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>UINT_MAX</name> <operator>==</operator> <name>UINT32_MAX</name></expr></cpp:elif>
<return>return <expr><call><name>__builtin_clz</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<asm>__asm__("bsrl %1, %0\n\t"
"xorl $31, %0"
: "=r" (i) : "rm" (n));</asm>
<return>return <expr><name>i</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>(</operator><name>DWORD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name> <operator>^</operator> <literal type="number">31U</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xFFFF0000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xF0000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xC0000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>ctz32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_bit_scan_forward</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>TUKLIB_GNUC_REQ</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>UINT_MAX</name> <operator>&gt;=</operator> <name>UINT32_MAX</name></expr></cpp:elif>
<return>return <expr><call><name>__builtin_ctz</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<asm>__asm__("bsfl %1, %0" : "=r" (i) : "rm" (n));</asm>
<return>return <expr><name>i</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanForward</name><argument_list>(<argument><expr><operator>(</operator><name>DWORD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x0000FFFF</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x000000FF</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x0000000F</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x00000003</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bsf32</name></cpp:macro> <cpp:value>ctz32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
