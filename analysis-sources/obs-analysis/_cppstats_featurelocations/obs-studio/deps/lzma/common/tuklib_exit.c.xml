<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\common\tuklib_exit.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_gettext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_progname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_exit.h"</cpp:file></cpp:include>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>tuklib_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err_status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>err_status</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ferror_err</name> <init>= <expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fclose_err</name> <init>= <expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ferror_err</name> <operator>||</operator> <name>fclose_err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>err_status</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s: %s\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Writing to standard "</literal>
<literal type="string">"output failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>fclose_err</name></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown error"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>err_status</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ferror_err</name> <init>= <expr><call><name>ferror</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fclose_err</name> <init>= <expr><call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fclose_err</name> <operator>||</operator> <name>ferror_err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>err_status</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
