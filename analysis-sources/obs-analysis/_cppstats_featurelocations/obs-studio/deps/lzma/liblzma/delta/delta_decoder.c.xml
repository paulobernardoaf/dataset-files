<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\delta\delta_decoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta_private.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_buffer</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>distance</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>distance</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>coder</name><operator>-&gt;</operator><name>history</name><index>[<expr><operator>(</operator><name>distance</name> <operator>+</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>delta_decode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,
<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_buffer</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>out_start</name></expr></argument>, <argument><expr><operator>*</operator><name>out_pos</name> <operator>-</operator> <name>out_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_delta_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>delta_decode</name></expr>;</expr_stmt>
<return>return <expr><call><name>lzma_delta_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_delta_props_decode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>props_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>props_size</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_options_delta</name> <modifier>*</modifier></type><name>opt</name>
<init>= <expr><call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_delta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LZMA_DELTA_TYPE_BYTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>options</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
