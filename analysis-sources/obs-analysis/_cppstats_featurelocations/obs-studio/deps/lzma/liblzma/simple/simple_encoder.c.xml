<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\simple\simple_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_encoder.h"</cpp:file></cpp:include>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_simple_props_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_bcj</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>opt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_simple_props_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_bcj</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unaligned_write32le</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>start_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
