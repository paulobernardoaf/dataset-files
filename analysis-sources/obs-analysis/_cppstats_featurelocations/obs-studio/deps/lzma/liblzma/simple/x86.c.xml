<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\simple\x86.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_private.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Test86MSByte</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b) == 0 || (b) == 0xFF)</cpp:value></cpp:define>


<struct>struct <name>lzma_simple_s</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_pos</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>x86_code</name><parameter_list>(<parameter><decl><type><name>lzma_simple</name> <modifier>*</modifier></type><name>simple</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>now_pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name><name>MASK_TO_ALLOWED_STATUS</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
<init>= <expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>MASK_TO_BIT_NUMBER</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
<init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_mask</name> <init>= <expr><name><name>simple</name><operator>-&gt;</operator><name>prev_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_pos</name> <init>= <expr><name><name>simple</name><operator>-&gt;</operator><name>prev_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>now_pos</name> <operator>-</operator> <name>prev_pos</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <name>now_pos</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>limit</name> <init>= <expr><name>size</name> <operator>-</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>buffer_pos</name> <operator>&lt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><name><name>buffer</name><index>[<expr><name>buffer_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0xE8</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <literal type="number">0xE9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>buffer_pos</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>offset</name> <init>= <expr><name>now_pos</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>buffer_pos</name><operator>)</operator>
<operator>-</operator> <name>prev_pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <name>now_pos</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>buffer_pos</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>prev_mask</name> <operator>&amp;=</operator> <literal type="number">0x77</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Test86MSByte</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>MASK_TO_ALLOWED_STATUS</name><index>[<expr><operator>(</operator><name>prev_mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>prev_mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>src</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dest</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_encoder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>src</name> <operator>+</operator> <operator>(</operator><name>now_pos</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>
<name>buffer_pos</name><operator>)</operator> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>src</name> <operator>-</operator> <operator>(</operator><name>now_pos</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>
<name>buffer_pos</name><operator>)</operator> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>MASK_TO_BIT_NUMBER</name><index>[
<expr><name>prev_mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Test86MSByte</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dest</name> <operator>^</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name>
<operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>buffer_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>buffer_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_mask</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Test86MSByte</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_mask</name> <operator>|=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>simple</name><operator>-&gt;</operator><name>prev_mask</name></name> <operator>=</operator> <name>prev_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>simple</name><operator>-&gt;</operator><name>prev_pos</name></name> <operator>=</operator> <name>prev_pos</name></expr>;</expr_stmt>

<return>return <expr><name>buffer_pos</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>x86_coder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_simple_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>x86_code</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_simple</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>is_encoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>simple</name><operator>-&gt;</operator><name>prev_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>simple</name><operator>-&gt;</operator><name>prev_pos</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_simple_x86_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>x86_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_simple_x86_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>x86_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
