<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\simple\simple_private.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_SIMPLE_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_SIMPLE_PRIVATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_coder.h"</cpp:file></cpp:include>


<typedef>typedef <type><name><name>struct</name> <name>lzma_simple_s</name></name></type> <name>lzma_simple</name>;</typedef>

<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>end_was_reached</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>is_encoder</name></decl>;</decl_stmt>



<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>lzma_simple</name> <modifier>*</modifier></type><name>simple</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>now_pos</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>lzma_simple</name> <modifier>*</modifier></type><name>simple</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>now_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>filtered</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>extern</specifier> <name>lzma_ret</name></type> <name>lzma_simple_coder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,
<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,
<parameter><function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>lzma_simple</name> <modifier>*</modifier></type><name>simple</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>now_pos</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>simple_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>unfiltered_max</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
