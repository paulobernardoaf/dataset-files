<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\check\crc32_small.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>lzma_crc32_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>crc32_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>poly32</name> <init>= <expr><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xEDB88320</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>poly32</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>lzma_crc32_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_crc32_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mythread_once</name><argument_list>(<argument><expr><name>crc32_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(uint32_t</extern>)
<macro><name>lzma_crc32</name><argument_list>(<argument>const uint8_t *buf</argument>, <argument>size_t size</argument>, <argument>uint32_t crc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_crc32_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>~</operator><name>crc</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>lzma_crc32_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>~</operator><name>crc</name></expr>;</return>
</block_content>}</block>
</unit>
