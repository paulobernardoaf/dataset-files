<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\check\check.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>


<extern>extern LZMA_API(lzma_bool</extern>)
<macro><name>lzma_check_is_supported</name><argument_list>(<argument>lzma_check type</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>type</name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_CHECK_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lzma_bool</name></type> <name><name>available_checks</name><index>[<expr><name>LZMA_CHECK_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>true</name></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>true</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>false</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>true</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>false</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>true</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>false</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>available_checks</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>type</name><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(uint32_t</extern>)
<macro><name>lzma_check_size</name><argument_list>(<argument>lzma_check type</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>type</name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_CHECK_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT32_MAX</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>check_sizes</name><index>[<expr><name>LZMA_CHECK_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>check_sizes</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>type</name><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_check_init</name><parameter_list>(<parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>lzma_check</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_CHECK_NONE</name></expr>:</case>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_CRC32</name></expr>:</case>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_CRC64</name></expr>:</case>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_SHA256</name></expr>:</case>
<expr_stmt><expr><call><name>lzma_sha256_init</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_check_update</name><parameter_list>(<parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>lzma_check</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_CRC32</name></expr>:</case>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <call><name>lzma_crc32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_CRC64</name></expr>:</case>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc64</name></name> <operator>=</operator> <call><name>lzma_crc64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_SHA256</name></expr>:</case>
<expr_stmt><expr><call><name>lzma_sha256_update</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_check_finish</name><parameter_list>(<parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>lzma_check</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_CRC32</name></expr>:</case>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>conv32le</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_CRC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_CRC64</name></expr>:</case>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>conv64le</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crc64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHECK_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_CHECK_SHA256</name></expr>:</case>
<expr_stmt><expr><call><name>lzma_sha256_finish</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return;</return>
</block_content>}</block></function>
</unit>
