<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\check\crc64_fast.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc_macros.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; 56)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1</name></cpp:macro> <cpp:value>A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<extern>extern LZMA_API(uint64_t</extern>)
<macro><name>lzma_crc64</name><argument_list>(<argument>const uint8_t *buf</argument>, <argument>size_t size</argument>, <argument>uint64_t crc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>~</operator><name>crc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>bswap64</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>lzma_crc64_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>^</operator> <call><name>A1</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <call><name>S8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>&amp;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator>
<operator>^</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>tmp</name> <init>= <expr><name>crc</name> <operator>^</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>lzma_crc64_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><call><name>A</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <name><name>lzma_crc64_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>B</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <call><name>S32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call>
<operator>^</operator> <name><name>lzma_crc64_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>C</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <name><name>lzma_crc64_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>D</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>lzma_crc64_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>^</operator> <call><name>A1</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <call><name>S8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>bswap64</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>~</operator><name>crc</name></expr>;</return>
</block_content>}</block>
</unit>
