<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\api\lzma\block.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<typedef>typedef <type><struct>struct <block>{
















<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_size</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_BLOCK_HEADER_SIZE_MIN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_BLOCK_HEADER_SIZE_MAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>


















<decl_stmt><decl><type><name>lzma_check</name></type> <name>check</name></decl>;</decl_stmt>






















































<decl_stmt><decl><type><name>lzma_vli</name></type> <name>compressed_size</name></decl>;</decl_stmt>























<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>



























<decl_stmt><decl><type><name>lzma_filter</name> <modifier>*</modifier></type><name>filters</name></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>raw_check</name><index>[<expr><name>LZMA_CHECK_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>reserved_int3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>reserved_int4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>reserved_int5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>reserved_int6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>reserved_int7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>reserved_int8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool8</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_block</name>;</typedef>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzma_block_header_size_decode</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)(b) + 1) * 4)</cpp:value></cpp:define>























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_header_size</name><argument_list>(<argument>lzma_block *block</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>




















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_header_encode</name><argument_list>(
<argument>const lzma_block *block</argument>, <argument>uint8_t *out</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>






































<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_header_decode</name><argument_list>(<argument>lzma_block *block</argument>,
<argument>lzma_allocator *allocator</argument>, <argument>const uint8_t *in</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>





























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_compressed_size</name><argument_list>(
<argument>lzma_block *block</argument>, <argument>lzma_vli unpadded_size</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>













<extern>extern LZMA_API(lzma_vli</extern>) <macro><name>lzma_block_unpadded_size</name><argument_list>(<argument>const lzma_block *block</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>











<extern>extern LZMA_API(lzma_vli</extern>) <macro><name>lzma_block_total_size</name><argument_list>(<argument>const lzma_block *block</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>
















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_encoder</name><argument_list>(
<argument>lzma_stream *strm</argument>, <argument>lzma_block *block</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_decoder</name><argument_list>(
<argument>lzma_stream *strm</argument>, <argument>lzma_block *block</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>








<extern>extern LZMA_API(size_t</extern>) <macro><name>lzma_block_buffer_bound</name><argument_list>(<argument>size_t uncompressed_size</argument>)</argument_list></macro>
<expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>







































<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_buffer_encode</name><argument_list>(
<argument>lzma_block *block</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *in</argument>, <argument>size_t in_size</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>





























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_block_buffer_decode</name><argument_list>(
<argument>lzma_block *block</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *in</argument>, <argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>
</unit>
