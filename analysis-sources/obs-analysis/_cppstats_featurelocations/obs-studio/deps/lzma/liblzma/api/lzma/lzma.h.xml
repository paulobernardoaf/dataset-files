<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\api\lzma\lzma.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_FILTER_LZMA1</name></cpp:macro> <cpp:value>LZMA_VLI_C(0x4000000000000001)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_FILTER_LZMA2</name></cpp:macro> <cpp:value>LZMA_VLI_C(0x21)</cpp:value></cpp:define>

















<typedef>typedef <type><enum>enum <block>{
<decl><name>LZMA_MF_HC3</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,










<decl><name>LZMA_MF_HC4</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,










<decl><name>LZMA_MF_BT2</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,








<decl><name>LZMA_MF_BT3</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,










<decl><name>LZMA_MF_BT4</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>









}</block></enum></type> <name>lzma_match_finder</name>;</typedef>
















<extern>extern LZMA_API(lzma_bool</extern>) <macro><name>lzma_mf_is_supported</name><argument_list>(<argument>lzma_match_finder match_finder</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>








<typedef>typedef <type><enum>enum <block>{
<decl><name>LZMA_MODE_FAST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,







<decl><name>LZMA_MODE_NORMAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>







}</block></enum></type> <name>lzma_mode</name>;</typedef>














<extern>extern LZMA_API(lzma_bool</extern>) <macro><name>lzma_mode_is_supported</name><argument_list>(<argument>lzma_mode mode</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>













<typedef>typedef <type><struct>struct <block>{































<decl_stmt><decl><type><name>uint32_t</name></type> <name>dict_size</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_DICT_SIZE_MIN</name></cpp:macro> <cpp:value>UINT32_C(4096)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_DICT_SIZE_DEFAULT</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 23)</cpp:value></cpp:define>




















<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>preset_dict</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>uint32_t</name></type> <name>preset_dict_size</name></decl>;</decl_stmt>


























<decl_stmt><decl><type><name>uint32_t</name></type> <name>lc</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_LCLP_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_LCLP_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_LC_DEFAULT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>








<decl_stmt><decl><type><name>uint32_t</name></type> <name>lp</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_LP_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>





















<decl_stmt><decl><type><name>uint32_t</name></type> <name>pb</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PB_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PB_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PB_DEFAULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<decl_stmt><decl><type><name>lzma_mode</name></type> <name>mode</name></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>uint32_t</name></type> <name>nice_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_match_finder</name></type> <name>mf</name></decl>;</decl_stmt>





























<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr2</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_options_lzma</name>;</typedef>



















<extern>extern LZMA_API(lzma_bool</extern>) <macro><name>lzma_lzma_preset</name><argument_list>(
<argument>lzma_options_lzma *options</argument>, <argument>uint32_t preset</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>
</unit>
