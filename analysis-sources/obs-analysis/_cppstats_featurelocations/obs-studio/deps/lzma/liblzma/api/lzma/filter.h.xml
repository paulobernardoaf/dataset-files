<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\api\lzma\filter.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_FILTERS_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
















<typedef>typedef <type><struct>struct <block>{










<decl_stmt><decl><type><name>lzma_vli</name></type> <name>id</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_filter</name>;</typedef>












<extern>extern LZMA_API(lzma_bool</extern>) <macro><name>lzma_filter_encoder_is_supported</name><argument_list>(<argument>lzma_vli id</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>








<extern>extern LZMA_API(lzma_bool</extern>) <macro><name>lzma_filter_decoder_is_supported</name><argument_list>(<argument>lzma_vli id</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>





























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_filters_copy</name><argument_list>(<argument>const lzma_filter *src</argument>,
<argument>lzma_filter *dest</argument>, <argument>lzma_allocator *allocator</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

















<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_raw_encoder_memusage</name><argument_list>(<argument>const lzma_filter *filters</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

















<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_raw_decoder_memusage</name><argument_list>(<argument>const lzma_filter *filters</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>



















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_raw_encoder</name><argument_list>(
<argument>lzma_stream *strm</argument>, <argument>const lzma_filter *filters</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_raw_decoder</name><argument_list>(
<argument>lzma_stream *strm</argument>, <argument>const lzma_filter *filters</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>




























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_filters_update</name><argument_list>(
<argument>lzma_stream *strm</argument>, <argument>const lzma_filter *filters</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>





























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_raw_buffer_encode</name><argument_list>(
<argument>const lzma_filter *filters</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *in</argument>, <argument>size_t in_size</argument>, <argument>uint8_t *out</argument>,
<argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>




















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_raw_buffer_decode</name><argument_list>(
<argument>const lzma_filter *filters</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *in</argument>, <argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>





















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_properties_size</name><argument_list>(
<argument>uint32_t *size</argument>, <argument>const lzma_filter *filter</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>
























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_properties_encode</name><argument_list>(
<argument>const lzma_filter *filter</argument>, <argument>uint8_t *props</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>























<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_properties_decode</name><argument_list>(
<argument>lzma_filter *filter</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *props</argument>, <argument>size_t props_size</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>





















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_filter_flags_size</name><argument_list>(
<argument>uint32_t *size</argument>, <argument>const lzma_filter *filter</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>




















<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_filter_flags_encode</name><argument_list>(<argument>const lzma_filter *filter</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>













<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_filter_flags_decode</name><argument_list>(
<argument>lzma_filter *filter</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *in</argument>, <argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>
</unit>
