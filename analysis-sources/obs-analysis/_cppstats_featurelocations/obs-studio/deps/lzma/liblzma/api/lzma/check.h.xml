<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\api\lzma\check.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<typedef>typedef <type><enum>enum <block>{
<decl><name>LZMA_CHECK_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,






<decl><name>LZMA_CHECK_CRC32</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,






<decl><name>LZMA_CHECK_CRC64</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,






<decl><name>LZMA_CHECK_SHA256</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>





}</block></enum></type> <name>lzma_check</name>;</typedef>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_CHECK_ID_MAX</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>












<extern>extern LZMA_API(lzma_bool</extern>) <macro><name>lzma_check_is_supported</name><argument_list>(<argument>lzma_check check</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>












<extern>extern LZMA_API(uint32_t</extern>) <macro><name>lzma_check_size</name><argument_list>(<argument>lzma_check check</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_CHECK_SIZE_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
















<extern>extern LZMA_API(uint32_t</extern>) <macro><name>lzma_crc32</name><argument_list>(
<argument>const uint8_t *buf</argument>, <argument>size_t size</argument>, <argument>uint32_t crc</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>









<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_crc64</name><argument_list>(
<argument>const uint8_t *buf</argument>, <argument>size_t size</argument>, <argument>uint64_t crc</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>















<extern>extern LZMA_API(lzma_check</extern>) <macro><name>lzma_get_check</name><argument_list>(<argument>const lzma_stream *strm</argument>)</argument_list></macro>
<expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>
</unit>
