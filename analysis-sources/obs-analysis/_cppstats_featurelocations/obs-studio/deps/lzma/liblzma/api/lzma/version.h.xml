<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\api\lzma\version.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_MAJOR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_MINOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_PATCH</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY</name></cpp:macro> <cpp:value>LZMA_VERSION_STABILITY_STABLE</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_VERSION_COMMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_COMMIT</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY_ALPHA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY_BETA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY_STABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION</name></cpp:macro> <cpp:value>(LZMA_VERSION_MAJOR * UINT32_C(10000000) + LZMA_VERSION_MINOR * UINT32_C(10000) + LZMA_VERSION_PATCH * UINT32_C(10) + LZMA_VERSION_STABILITY)</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LZMA_VERSION_STABILITY</name> <operator>==</operator> <name>LZMA_VERSION_STABILITY_ALPHA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY_STRING</name></cpp:macro> <cpp:value>"alpha"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LZMA_VERSION_STABILITY</name> <operator>==</operator> <name>LZMA_VERSION_STABILITY_BETA</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY_STRING</name></cpp:macro> <cpp:value>"beta"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LZMA_VERSION_STABILITY</name> <operator>==</operator> <name>LZMA_VERSION_STABILITY_STABLE</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STABILITY_STRING</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Incorrect LZMA_VERSION_STABILITY</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STRING_C_</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>, <parameter><type><name>stability</name></type></parameter>, <parameter><type><name>commit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#major "." #minor "." #patch stability commit</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STRING_C</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>, <parameter><type><name>stability</name></type></parameter>, <parameter><type><name>commit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LZMA_VERSION_STRING_C_(major, minor, patch, stability, commit)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VERSION_STRING</name></cpp:macro> <cpp:value>LZMA_VERSION_STRING_C( LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, LZMA_VERSION_PATCH, LZMA_VERSION_STABILITY_STRING, LZMA_VERSION_COMMIT)</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL_RC</name></expr></argument>)</argument_list></call></expr></cpp:if>








<extern>extern LZMA_API(uint32_t</extern>) <macro><name>lzma_version_number</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>








<extern>extern LZMA_API(const char *</extern>) <macro><name>lzma_version_string</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_const</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
