<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\filter_common.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_common.h"</cpp:file></cpp:include>


<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>options_size</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>non_last_ok</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>last_ok</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>changes_size</name></decl>;</decl_stmt>

}</block> <decl><name><name>features</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_ENCODER_LZMA1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_LZMA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA1</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_lzma</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>true</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_LZMA2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_LZMA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA2</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_lzma</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>true</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_X86</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_bcj</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_POWERPC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_POWERPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_POWERPC</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_bcj</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_IA64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_IA64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_IA64</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_bcj</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_ARM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_ARM</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_bcj</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_ARMTHUMB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_ARMTHUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_ARMTHUMB</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_bcj</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_SPARC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_SPARC</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_bcj</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_DELTA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECODER_DELTA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_DELTA</name></expr>,
<expr><operator>.</operator><name>options_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_delta</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>non_last_ok</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>last_ok</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>changes_size</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_filters_copy</name><argument_list>(<argument>const lzma_filter *src</argument>, <argument>lzma_filter *dest</argument>,
<argument>lzma_allocator *allocator</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>LZMA_FILTERS_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OPTIONS_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>








<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OPTIONS_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>options_size</name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_MEM_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>,
<argument><expr><name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>options_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>LZMA_FILTERS_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

<label><name>error</name>:</label>

<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>validate_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filters</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>changes_size_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>non_last_ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>last_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>non_last_ok</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>non_last_ok</name> <operator>=</operator> <name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>non_last_ok</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_ok</name> <operator>=</operator> <name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last_ok</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes_size_count</name> <operator>+=</operator> <name><name>features</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes_size</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>filters</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition>;</do>




<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>LZMA_FILTERS_MAX</name> <operator>||</operator> <operator>!</operator><name>last_ok</name> <operator>||</operator> <name>changes_size_count</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_raw_coder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>lzma_filter_find</name></type> <name>coder_find</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>validate_chain</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lzma_filter_info</name></type> <name><name>filters</name><index>[<expr><name>LZMA_FILTERS_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_encoder</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>j</name> <init>= <expr><name>count</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_filter_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fc</name>
<init>= <expr><call><name>coder_find</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fc</name><operator>-&gt;</operator><name>init</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>init</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_filter_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fc</name>
<init>= <expr><call><name>coder_find</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fc</name><operator>-&gt;</operator><name>init</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>init</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>filters</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_next_filter_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>uint64_t</name></type>
<name>lzma_raw_coder_memusage</name><parameter_list>(<parameter><decl><type><name>lzma_filter_find</name></type> <name>coder_find</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>validate_chain</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_filter_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fc</name>
<init>= <expr><call><name>coder_find</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>memusage</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>total</name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>usage</name>
<init>= <expr><call><name><name>fc</name><operator>-&gt;</operator><name>memusage</name></name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>usage</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>usage</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>filters</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition>;</do>



<return>return <expr><name>total</name> <operator>+</operator> <name>LZMA_MEMUSAGE_BASE</name></expr>;</return>
</block_content>}</block></function>
</unit>
