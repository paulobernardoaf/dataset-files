<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\filter_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma2_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta_encoder.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>id</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_init_function</name></type> <name>init</name></decl>;</decl_stmt>



<function_decl><type><name>uint64_t</name></type> (<modifier>*</modifier><name>memusage</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>lzma_vli</name></type> (<modifier>*</modifier><name>chunk_size</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>props_size_get</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>props_size_fixed</name></decl>;</decl_stmt>







<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>props_encode</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>lzma_filter_encoder</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lzma_filter_encoder</name></type> <name><name>encoders</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_LZMA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA1</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma_encoder_memusage</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>, 
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_fixed</name> <operator>=</operator> <literal type="number">5</literal></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_LZMA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA2</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma2_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma2_encoder_memusage</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>, 
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_fixed</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma2_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_X86</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_x86_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_size</name></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_POWERPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_POWERPC</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_powerpc_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_size</name></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_IA64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_IA64</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_ia64_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_size</name></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_ARM</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_arm_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_size</name></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_ARMTHUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_ARMTHUMB</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_armthumb_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_size</name></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_SPARC</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_sparc_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_size</name></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_simple_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_DELTA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_DELTA</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_delta_encoder_init</name></expr>,
<expr><operator>.</operator><name>memusage</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_delta_coder_memusage</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_get</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>props_size_fixed</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>props_encode</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_delta_props_encode</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>lzma_filter_encoder</name> <modifier>*</modifier></type>
<name>encoder_find</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>encoders</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>encoders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>encoders</name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_bool</extern>)
<macro><name>lzma_filter_encoder_is_supported</name><argument_list>(<argument>lzma_vli id</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>encoder_find</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_filters_update</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>const lzma_filter *filters</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>update</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lzma_raw_encoder_memusage</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>filters</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>lzma_filter</name></type> <name><name>reversed_filters</name><index>[<expr><name>LZMA_FILTERS_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reversed_filters</name><index>[<expr><name>count</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>reversed_filters</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>

<return>return <expr><call><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>reversed_filters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_raw_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lzma_raw_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>(</operator><name>lzma_filter_find</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>encoder_find</name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_raw_encoder</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>const lzma_filter *options</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_strm_init</name><argument_list>(<argument><expr><name>lzma_raw_coder_init</name></expr></argument>, <argument><expr><name>strm</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><operator>(</operator><name>lzma_filter_find</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>encoder_find</name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_SYNC_FLUSH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(uint64_t</extern>)
<macro><name>lzma_raw_encoder_memusage</name><argument_list>(<argument>const lzma_filter *filters</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>lzma_raw_coder_memusage</name><argument_list>(
<argument><expr><operator>(</operator><name>lzma_filter_find</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>encoder_find</name><operator>)</operator></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>



























<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_properties_size</name><argument_list>(<argument>uint32_t *size</argument>, <argument>const lzma_filter *filter</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_filter_encoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fe</name> <init>= <expr><call><name>encoder_find</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<return>return <expr><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;=</operator> <name>LZMA_VLI_MAX</name></expr>
?</condition><then> <expr><name>LZMA_OPTIONS_ERROR</name></expr> </then><else>: <expr><name>LZMA_PROG_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>props_size_get</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>props_size_fixed</name></name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>fe</name><operator>-&gt;</operator><name>props_size_get</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_properties_encode</name><argument_list>(<argument>const lzma_filter *filter</argument>, <argument>uint8_t *props</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_filter_encoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fe</name> <init>= <expr><call><name>encoder_find</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>props_encode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>fe</name><operator>-&gt;</operator><name>props_encode</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
