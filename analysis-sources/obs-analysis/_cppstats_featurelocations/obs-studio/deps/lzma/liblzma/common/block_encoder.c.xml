<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\block_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>


<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>next</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>lzma_block</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>SEQ_CODE</name></decl>,
<decl><name>SEQ_PADDING</name></decl>,
<decl><name>SEQ_CHECK</name></decl>,
}</block> <decl><name>sequence</name></decl>;</enum>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>compressed_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_check_state</name></type> <name>check</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>block_encode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>LZMA_VLI_MAX</name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&lt;</operator> <name>in_size</name> <operator>-</operator> <operator>*</operator><name>in_pos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEQ_CODE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_start</name> <init>= <expr><operator>*</operator><name>in_pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_used</name> <init>= <expr><operator>*</operator><name>in_pos</name> <operator>-</operator> <name>in_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_used</name> <init>= <expr><operator>*</operator><name>out_pos</name> <operator>-</operator> <name>out_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>COMPRESSED_SIZE_MAX</name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&lt;</operator> <name>out_used</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>+=</operator> <name>out_used</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name>in_used</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_check_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>check</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>,
<argument><expr><name>in</name> <operator>+</operator> <name>in_start</name></expr></argument>, <argument><expr><name>in_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>LZMA_SYNC_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>action</name> <operator>==</operator> <name>LZMA_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_PADDING</name></expr>;</expr_stmt>
</block_content>}</block>



<case>case <expr><name>SEQ_PADDING</name></expr>:</case>



<while>while <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&gt;=</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>*</operator><name>out_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>out_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>check</name></name> <operator>==</operator> <name>LZMA_CHECK_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_check_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>check</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CHECK</name></expr>;</expr_stmt>



<case>case <expr><name>SEQ_CHECK</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>check_size</name> <init>= <expr><call><name>lzma_check_size</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>check</name><operator>.</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>check_size</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>check_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>raw_check</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>check</name><operator>.</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>,
<argument><expr><name>check_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>block_encoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>block_encoder_update</name><argument_list>(<argument><expr><name>lzma_coder</name> <operator>*</operator><name>coder</name></expr></argument>, <argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lzma_filter</name> <operator>*</operator><name>filters</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lzma_filter</name> <operator>*</operator><name>reversed_filters</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>!=</operator> <name>SEQ_CODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>lzma_next_filter_update</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>reversed_filters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_block_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><name>lzma_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_coder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lzma_block_encoder_init</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>check</name></name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_CHECK_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzma_check_is_supported</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_UNSUPPORTED_CHECK</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>block_encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>block_encoder_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>&amp;</operator><name>block_encoder_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lzma_check_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>check</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>lzma_raw_encoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_block_encoder</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>lzma_block *block</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_strm_init</name><argument_list>(<argument><expr><name>lzma_block_encoder_init</name></expr></argument>, <argument><expr><name>strm</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
