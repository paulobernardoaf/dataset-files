<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\filter_flags_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_encoder.h"</cpp:file></cpp:include>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_filter_flags_size</name><argument_list>(<argument>uint32_t *size</argument>, <argument>const lzma_filter *filter</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <name>LZMA_FILTER_RESERVED_START</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_properties_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>+=</operator> <call><name>lzma_vli_size</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lzma_vli_size</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_filter_flags_encode</name><argument_list>(<argument>const lzma_filter *filter</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <name>LZMA_FILTER_RESERVED_START</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_vli_encode</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>props_size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_properties_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>props_size</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_vli_encode</name><argument_list>(<argument><expr><name>props_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>props_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_properties_encode</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>props_size</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
