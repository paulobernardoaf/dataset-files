<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\block_buffer_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma2_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADERS_BOUND</name></cpp:macro> <cpp:value>((1 + 1 + 2 * LZMA_VLI_BYTES_MAX + 3 + 4 + LZMA_CHECK_SIZE_MAX + 3) &amp; ~3)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>lzma_vli</name></type>
<name>lzma2_bound</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>uncompressed_size</name> <operator>&gt;</operator> <name>COMPRESSED_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>overhead</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uncompressed_size</name> <operator>+</operator> <name>LZMA2_CHUNK_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>/</operator> <name>LZMA2_CHUNK_MAX</name><operator>)</operator>
<operator>*</operator> <name>LZMA2_HEADER_UNCOMPRESSED</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>COMPRESSED_SIZE_MAX</name> <operator>-</operator> <name>overhead</name> <operator>&lt;</operator> <name>uncompressed_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>uncompressed_size</name> <operator>+</operator> <name>overhead</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(size_t</extern>)
<macro><name>lzma_block_buffer_bound</name><argument_list>(<argument>size_t uncompressed_size</argument>)</argument_list></macro>
<block>{<block_content>





<decl_stmt><decl><type><name>lzma_vli</name></type> <name>lzma2_size</name> <init>= <expr><call><name>lzma2_bound</name><argument_list>(<argument><expr><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lzma2_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>lzma2_size</name> <operator>=</operator> <operator>(</operator><name>lzma2_size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><call><name>LZMA_VLI_C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZE_MAX</name> <operator>&lt;</operator> <name>LZMA_VLI_MAX</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name>SIZE_MAX</name> <operator>-</operator> <name>HEADERS_BOUND</name> <operator>&lt;</operator> <name>lzma2_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>HEADERS_BOUND</name> <operator>+</operator> <name>lzma2_size</name></expr>;</return>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>block_encode_uncompressed</name><parameter_list>(<parameter><decl><type><name>lzma_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>lzma_options_lzma</name></type> <name>lzma2</name> <init>= <expr><block>{
<expr><operator>.</operator><name>dict_size</name> <operator>=</operator> <name>LZMA_DICT_SIZE_MIN</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_filter</name></type> <name><name>filters</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <operator>&amp;</operator><name>lzma2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>lzma_filter</name> <modifier>*</modifier></type><name>filters_orig</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>filters</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_block_header_size</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>filters_orig</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <call><name>lzma2_bound</name><argument_list>(<argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name>
<operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>filters_orig</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_block_header_encode</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>filters_orig</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>filters_orig</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>in_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>control</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><name>in_pos</name> <operator>&lt;</operator> <name>in_size</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>control</name></expr>;</expr_stmt>
<expr_stmt><expr><name>control</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_size</name>
<init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>in_size</name> <operator>-</operator> <name>in_pos</name></expr></argument>, <argument><expr><name>LZMA2_CHUNK_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>copy_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>copy_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>out_pos</name> <operator>+</operator> <name>copy_size</name> <operator>&lt;=</operator> <name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>in_pos</name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_pos</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>out_pos</name> <operator>&lt;=</operator> <name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>block_encode_normal</name><parameter_list>(<parameter><decl><type><name>lzma_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <call><name>lzma2_bound</name><argument_list>(<argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name>in_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_block_header_size</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name> <operator>&lt;=</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_size</name> <operator>=</operator> <operator>*</operator><name>out_pos</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>raw_encoder</name> <init>= <expr><name>LZMA_NEXT_CODER_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_raw_encoder_init</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>raw_encoder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>raw_encoder</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>raw_encoder</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,
<argument><expr><name>LZMA_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raw_encoder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name>
<operator>=</operator> <operator>*</operator><name>out_pos</name> <operator>-</operator> <operator>(</operator><name>out_start</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_block_header_encode</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>out_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_PROG_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_BUF_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>=</operator> <name>out_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_block_buffer_encode</name><argument_list>(<argument>lzma_block *block</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>const uint8_t *in</argument>, <argument>size_t in_size</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>in_size</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>out</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>out_pos</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>&gt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>check</name></name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_CHECK_ID_MAX</name>
<operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzma_check_is_supported</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_UNSUPPORTED_CHECK</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>out_size</name> <operator>-=</operator> <operator>(</operator><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>check_size</name> <init>= <expr><call><name>lzma_check_size</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>check_size</name> <operator>!=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name> <operator>&lt;=</operator> <name>check_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_size</name> <operator>-=</operator> <name>check_size</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>block_encode_normal</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_BUF_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>block_encode_uncompressed</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>out_pos</name> <operator>&lt;=</operator> <name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>check_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>lzma_check_state</name></type> <name>check</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lzma_check_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_check_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_check_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>raw_check</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>.</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>, <argument><expr><name>check_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name><name>check</name><operator>.</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>, <argument><expr><name>check_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>check_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
