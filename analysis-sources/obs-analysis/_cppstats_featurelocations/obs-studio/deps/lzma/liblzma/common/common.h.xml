<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\common.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mythread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuklib_integer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DLL_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_API_EXPORT</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_API_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_VISIBILITY</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_API_EXPORT</name></cpp:macro> <cpp:value>__attribute__((__visibility__("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_API_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_API</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LZMA_API_EXPORT type LZMA_API_CALL</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>likely</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(expr, true)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlikely</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(expr, false)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>likely</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlikely</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_BUFFER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_MEMUSAGE_BASE</name></cpp:macro> <cpp:value>(UINT64_C(1) &lt;&lt; 15)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_FILTER_RESERVED_START</name></cpp:macro> <cpp:value>(LZMA_VLI_C(1) &lt;&lt; 62)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_SUPPORTED_FLAGS</name></cpp:macro> <cpp:value>( LZMA_TELL_NO_CHECK | LZMA_TELL_UNSUPPORTED_CHECK | LZMA_TELL_ANY_CHECK | LZMA_CONCATENATED )</cpp:value></cpp:define>








<typedef>typedef <type><name><name>struct</name> <name>lzma_coder_s</name></name></type> <name>lzma_coder</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>lzma_next_coder_s</name></name></type> <name>lzma_next_coder</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>lzma_filter_info_s</name></name></type> <name>lzma_filter_info</name>;</typedef>



<typedef>typedef <function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>lzma_init_function</name>)<parameter_list>(
<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>lzma_code_function</name>)<parameter_list>(
<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>,
<parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lzma_end_function</name>)<parameter_list>(
<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<struct>struct <name>lzma_filter_info_s</name> <block>{


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>id</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_init_function</name></type> <name>init</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>lzma_next_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_vli</name></type> <name>id</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uintptr_t</name></type> <name>init</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_code_function</name></type> <name>code</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>lzma_end_function</name></type> <name>end</name></decl>;</decl_stmt>



<function_decl><type><name>lzma_check</name></type> (<modifier>*</modifier><name>get_check</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>memconfig</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>memusage</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>old_memlimit</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>new_memlimit</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>update</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>reversed_filters</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_NEXT_CODER_INIT</name></cpp:macro> <cpp:value>(lzma_next_coder){ .coder = NULL, .init = (uintptr_t)(NULL), .id = LZMA_VLI_UNKNOWN, .code = NULL, .end = NULL, .get_check = NULL, .memconfig = NULL, .update = NULL, }</cpp:value></cpp:define>














<struct>struct <name>lzma_internal_s</name> <block>{

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>next</name></decl>;</decl_stmt>





<enum>enum <block>{
<decl><name>ISEQ_RUN</name></decl>,
<decl><name>ISEQ_SYNC_FLUSH</name></decl>,
<decl><name>ISEQ_FULL_FLUSH</name></decl>,
<decl><name>ISEQ_FINISH</name></decl>,
<decl><name>ISEQ_END</name></decl>,
<decl><name>ISEQ_ERROR</name></decl>,
}</block> <decl><name>sequence</name></decl>;</enum>




<decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name><name>supported_actions</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>allow_buf_error</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>lzma_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
lzma_attribute<parameter_list>(<parameter/></parameter_list>(__malloc__</function_decl>)) <expr_stmt><expr><call><name>lzma_attr_alloc_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>extern</specifier> <name>lzma_ret</name></type> <name>lzma_strm_init</name><parameter_list>(<parameter><decl><type><name>lzma_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>extern</specifier> <name>lzma_ret</name></type> <name>lzma_next_filter_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,
<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>lzma_ret</name></type> <name>lzma_next_filter_update</name><parameter_list>(
<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>reversed_filters</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_next_end</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>lzma_bufcpy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>return_if_error</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const lzma_ret ret_ = (expr); if (ret_ != LZMA_OK) return ret_; } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzma_next_coder_init</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>next</name></type></parameter>, <parameter><type><name>allocator</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((uintptr_t)(func) != (next)-&gt;init) lzma_next_end(next, allocator); (next)-&gt;init = (uintptr_t)(func); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzma_next_strm_init</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>strm</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return_if_error(lzma_strm_init(strm)); const lzma_ret ret_ = func(&amp;(strm)-&gt;internal-&gt;next, (strm)-&gt;allocator, __VA_ARGS__); if (ret_ != LZMA_OK) { lzma_end(strm); return ret_; } } while (0)</cpp:value></cpp:define>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
