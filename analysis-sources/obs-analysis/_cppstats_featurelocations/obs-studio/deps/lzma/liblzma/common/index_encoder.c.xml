<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\index_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>


<struct>struct <name>lzma_coder_s</name> <block>{
<enum>enum <block>{
<decl><name>SEQ_INDICATOR</name></decl>,
<decl><name>SEQ_COUNT</name></decl>,
<decl><name>SEQ_UNPADDED</name></decl>,
<decl><name>SEQ_UNCOMPRESSED</name></decl>,
<decl><name>SEQ_NEXT</name></decl>,
<decl><name>SEQ_PADDING</name></decl>,
<decl><name>SEQ_CRC32</name></decl>,
}</block> <decl><name>sequence</name></decl>;</enum>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_index_iter</name></type> <name>iter</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc32</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>index_encode</name><argument_list>(<argument><expr><name>lzma_coder</name> <operator>*</operator><name>coder</name></expr></argument>,
<argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>restrict</specifier> <name>in</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size_t</name> <operator>*</operator><specifier>restrict</specifier> <name>in_pos</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size_t</name> <name>in_size</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><specifier>restrict</specifier> <name>out</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><specifier>restrict</specifier> <name>out_pos</name></expr></argument>,
<argument><expr><name>size_t</name> <name>out_size</name></expr></argument>,
<argument><expr><name>lzma_action</name> <name>action</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><name>LZMA_OK</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEQ_INDICATOR</name></expr>:</case>
<expr_stmt><expr><name><name>out</name><index>[<expr><operator>*</operator><name>out_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>out_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_COUNT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEQ_COUNT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>count</name> <init>= <expr><call><name>lzma_index_block_count</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_vli_encode</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_NEXT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>SEQ_NEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>lzma_index_iter_next</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>LZMA_INDEX_ITER_BLOCK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>lzma_index_padding_size</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_PADDING</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_UNPADDED</name></expr>;</expr_stmt>



<case>case <expr><name>SEQ_UNPADDED</name></expr>:</case>
<case>case <expr><name>SEQ_UNCOMPRESSED</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>SEQ_UNPADDED</name></expr>
?</condition><then> <expr><name><name>coder</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>block</name><operator>.</operator><name>unpadded_size</name></name></expr>
</then><else>: <expr><name><name>coder</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>block</name><operator>.</operator><name>uncompressed_size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_vli_encode</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><operator>++</operator><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>SEQ_PADDING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <call><name>lzma_crc32</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>out_start</name></expr></argument>,
<argument><expr><operator>*</operator><name>out_pos</name> <operator>-</operator> <name>out_start</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CRC32</name></expr>;</expr_stmt>



<case>case <expr><name>SEQ_CRC32</name></expr>:</case>


<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>==</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>*</operator><name>out_pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>crc32</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
<operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>out_pos</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>;</do>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>
</block_content>}</block></switch></block_content></block></while>

<label><name>out</name>:</label>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <call><name>lzma_crc32</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>out_start</name></expr></argument>,
<argument><expr><operator>*</operator><name>out_pos</name> <operator>-</operator> <name>out_start</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_encoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_encoder_reset</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_index_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_INDICATOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_index_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_coder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lzma_index_encoder_init</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>index_encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>index_encoder_end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>index_encoder_reset</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_index_encoder</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_strm_init</name><argument_list>(<argument><expr><name>lzma_index_encoder_init</name></expr></argument>, <argument><expr><name>strm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_index_buffer_encode</name><argument_list>(<argument>const lzma_index *i</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out_pos</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>&gt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <call><name>lzma_index_size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>lzma_coder</name></type> <name>coder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>index_encoder_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>index_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>LZMA_RUN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>=</operator> <name>out_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_PROG_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>
</unit>
