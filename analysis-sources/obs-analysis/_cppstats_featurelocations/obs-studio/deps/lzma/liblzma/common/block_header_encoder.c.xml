<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\block_header_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_block_header_size</name><argument_list>(<argument>lzma_block *block</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>add</name> <init>= <expr><call><name>lzma_vli_size</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>add</name> <init>= <expr><call><name>lzma_vli_size</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>LZMA_FILTERS_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>add</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_filter_flags_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_block_header_encode</name><argument_list>(<argument>const lzma_block *block</argument>, <argument>uint8_t *out</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lzma_block_unpadded_size</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>!</operator><call><name>lzma_vli_is_valid</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_size</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>header_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>out_size</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_pos</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_vli_encode</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_vli_encode</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>filter_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filter_count</name> <operator>==</operator> <name>LZMA_FILTERS_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_filter_flags_encode</name><argument_list>(
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>filters</name></name> <operator>+</operator> <name>filter_count</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>filters</name><index>[<expr><operator>++</operator><name>filter_count</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>filter_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memzero</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name> <operator>-</operator> <name>out_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>unaligned_write32le</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>out_size</name></expr></argument>, <argument><expr><call><name>lzma_crc32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
