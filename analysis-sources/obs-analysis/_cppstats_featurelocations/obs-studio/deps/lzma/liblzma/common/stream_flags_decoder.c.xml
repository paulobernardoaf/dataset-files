<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\stream_flags_decoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_flags_common.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>stream_flags_decode</name><parameter_list>(<parameter><decl><type><name>lzma_stream_flags</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>check</name></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_stream_header_decode</name><argument_list>(<argument>lzma_stream_flags *options</argument>, <argument>const uint8_t *in</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>lzma_header_magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_header_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_FORMAT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>crc</name> <init>= <expr><call><name>lzma_crc32</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_header_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>LZMA_STREAM_FLAGS_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <call><name>unaligned_read32le</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_header_magic</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <name>LZMA_STREAM_FLAGS_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stream_flags_decode</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_header_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>backward_size</name></name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_stream_footer_decode</name><argument_list>(<argument>lzma_stream_flags *options</argument>, <argument>const uint8_t *in</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>LZMA_STREAM_FLAGS_SIZE</name></expr></argument>,
<argument><expr><name>lzma_footer_magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_footer_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_FORMAT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>crc</name> <init>= <expr><call><name>lzma_crc32</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>LZMA_STREAM_FLAGS_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <call><name>unaligned_read32le</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stream_flags_decode</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>backward_size</name></name> <operator>=</operator> <call><name>unaligned_read32le</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>backward_size</name></name> <operator>=</operator> <operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>backward_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
