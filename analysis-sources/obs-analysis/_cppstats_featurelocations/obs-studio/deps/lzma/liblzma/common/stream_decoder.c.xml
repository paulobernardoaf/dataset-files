<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\stream_decoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_decoder.h"</cpp:file></cpp:include>


<struct>struct <name>lzma_coder_s</name> <block>{
<enum>enum <block>{
<decl><name>SEQ_STREAM_HEADER</name></decl>,
<decl><name>SEQ_BLOCK_HEADER</name></decl>,
<decl><name>SEQ_BLOCK</name></decl>,
<decl><name>SEQ_INDEX</name></decl>,
<decl><name>SEQ_STREAM_FOOTER</name></decl>,
<decl><name>SEQ_STREAM_PADDING</name></decl>,
}</block> <decl><name>sequence</name></decl>;</enum>




<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>block_decoder</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_block</name></type> <name>block_options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_stream_flags</name></type> <name>stream_flags</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_index_hash</name> <modifier>*</modifier></type><name>index_hash</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>memlimit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>memusage</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>tell_no_check</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>tell_unsupported_check</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>tell_any_check</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>concatenated</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>first_stream</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>LZMA_BLOCK_HEADER_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>stream_decoder_reset</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name> <operator>=</operator> <call><name>lzma_index_hash_init</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_STREAM_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>stream_decode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<while>while <condition>(<expr><name>true</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEQ_STREAM_HEADER</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,
<argument><expr><name>LZMA_STREAM_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_stream_header_decode</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>stream_flags</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>LZMA_FORMAT_ERROR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>first_stream</name></name></expr>
?</condition><then> <expr><name>LZMA_DATA_ERROR</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>first_stream</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>check</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_BLOCK_HEADER</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>tell_no_check</name></name> <operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>check</name></name>
<operator>==</operator> <name>LZMA_CHECK_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_NO_CHECK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>tell_unsupported_check</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>lzma_check_is_supported</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_UNSUPPORTED_CHECK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>tell_any_check</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_GET_CHECK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>



<case>case <expr><name>SEQ_BLOCK_HEADER</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&gt;=</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><operator>*</operator><name>in_pos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_INDEX</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>header_size</name></name>
<operator>=</operator> <call><name>lzma_block_header_size_decode</name><argument_list>(
<argument><expr><name><name>in</name><index>[<expr><operator>*</operator><name>in_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>header_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>lzma_filter</name></type> <name><name>filters</name><index>[<expr><name>LZMA_FILTERS_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>filters</name></name> <operator>=</operator> <name>filters</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_block_header_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>memusage</name> <init>= <expr><call><name>lzma_raw_decoder_memusage</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>memusage</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OPTIONS_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>memusage</name></name> <operator>=</operator> <name>memusage</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>memusage</name> <operator>&gt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>memlimit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_MEMLIMIT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_block_decoder_init</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_decoder</name></name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LZMA_FILTERS_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_BLOCK</name></expr>;</expr_stmt>
</block_content>}</block>



<case>case <expr><name>SEQ_BLOCK</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>block_decoder</name><operator>.</operator><name>code</name></name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block_decoder</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,
<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_index_hash_append</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name></expr></argument>,
<argument><expr><call><name>lzma_block_unpadded_size</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_BLOCK_HEADER</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>SEQ_INDEX</name></expr>:</case> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&gt;=</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_index_hash_decode</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_STREAM_FOOTER</name></expr>;</expr_stmt>
</block_content>}</block>



<case>case <expr><name>SEQ_STREAM_FOOTER</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,
<argument><expr><name>LZMA_STREAM_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>lzma_stream_flags</name></type> <name>footer_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_stream_footer_decode</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>footer_flags</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>LZMA_FORMAT_ERROR</name></expr>
?</condition><then> <expr><name>LZMA_DATA_ERROR</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>lzma_index_hash_size</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name><name>footer_flags</name><operator>.</operator><name>backward_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_stream_flags_compare</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>stream_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>footer_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>concatenated</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_STREAM_PADDING</name></expr>;</expr_stmt>
</block_content>}</block>



<case>case <expr><name>SEQ_STREAM_PADDING</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>concatenated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&gt;=</operator> <name>in_size</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>LZMA_FINISH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><ternary><condition><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>LZMA_STREAM_END</name></expr>
</then><else>: <expr><name>LZMA_DATA_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><operator>*</operator><name>in_pos</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>in_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>in_pos</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>stream_decoder_reset</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>
</block_content>}</block></switch></block_content></block></while>


</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>stream_decoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_decoder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_index_hash_end</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_check</name></type>
<name>stream_decoder_get_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>coder</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>check</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>stream_decoder_memconfig</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>memusage</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>old_memlimit</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>new_memlimit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>memusage</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>memusage</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>old_memlimit</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>memlimit</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_memlimit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_memlimit</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>memusage</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEMLIMIT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>memlimit</name></name> <operator>=</operator> <name>new_memlimit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_stream_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>memlimit</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_coder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lzma_stream_decoder_init</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>memlimit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>LZMA_SUPPORTED_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_decoder_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>get_check</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_decoder_get_check</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>memconfig</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_decoder_memconfig</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>block_decoder</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>index_hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>memlimit</name></name> <operator>=</operator> <name>memlimit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>memusage</name></name> <operator>=</operator> <name>LZMA_MEMUSAGE_BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>tell_no_check</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LZMA_TELL_NO_CHECK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>tell_unsupported_check</name></name>
<operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LZMA_TELL_UNSUPPORTED_CHECK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>tell_any_check</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LZMA_TELL_ANY_CHECK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>concatenated</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LZMA_CONCATENATED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>first_stream</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>stream_decoder_reset</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_stream_decoder</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>uint64_t memlimit</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_strm_init</name><argument_list>(<argument><expr><name>lzma_stream_decoder_init</name></expr></argument>, <argument><expr><name>strm</name></expr></argument>, <argument><expr><name>memlimit</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
