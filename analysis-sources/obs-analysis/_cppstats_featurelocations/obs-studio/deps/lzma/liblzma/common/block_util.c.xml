<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\block_util.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_block_compressed_size</name><argument_list>(<argument>lzma_block *block</argument>, <argument>lzma_vli unpadded_size</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lzma_block_unpadded_size</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>container_size</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>header_size</name></name>
<operator>+</operator> <call><name>lzma_check_size</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>unpadded_size</name> <operator>&lt;=</operator> <name>container_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>compressed_size</name> <init>= <expr><name>unpadded_size</name> <operator>-</operator> <name>container_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name>
<operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <name>compressed_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <name>compressed_size</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_block_unpadded_size</name><argument_list>(<argument>const lzma_block *block</argument>)</argument_list></macro>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name> <operator>&lt;</operator> <name>LZMA_BLOCK_HEADER_SIZE_MIN</name>
<operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name> <operator>&gt;</operator> <name>LZMA_BLOCK_HEADER_SIZE_MAX</name>
<operator>||</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>header_size</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator>
<operator>||</operator> <operator>!</operator><call><name>lzma_vli_is_valid</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>check</name></name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_CHECK_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_VLI_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>unpadded_size</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>compressed_size</name></name>
<operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>header_size</name></name>
<operator>+</operator> <call><name>lzma_check_size</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>check</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unpadded_size</name> <operator>&gt;=</operator> <name>UNPADDED_SIZE_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unpadded_size</name> <operator>&gt;</operator> <name>UNPADDED_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>unpadded_size</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_block_total_size</name><argument_list>(<argument>const lzma_block *block</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>unpadded_size</name> <init>= <expr><call><name>lzma_block_unpadded_size</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unpadded_size</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unpadded_size</name> <operator>=</operator> <call><name>vli_ceil4</name><argument_list>(<argument><expr><name>unpadded_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>unpadded_size</name></expr>;</return>
</block_content>}</block>
</unit>
