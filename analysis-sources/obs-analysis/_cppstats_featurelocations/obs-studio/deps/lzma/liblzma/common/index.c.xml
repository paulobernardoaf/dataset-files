<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\index.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_flags_common.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_GROUP_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREALLOC_MAX</name></cpp:macro> <cpp:value>((SIZE_MAX - sizeof(index_group)) / sizeof(index_record))</cpp:value></cpp:define>



<typedef>typedef <type><name><name>struct</name> <name>index_tree_node_s</name></name></type> <name>index_tree_node</name>;</typedef>
<struct>struct <name>index_tree_node_s</name> <block>{



<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>compressed_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
}</block>;</struct>



<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>leftmost</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>rightmost</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

}</block></struct></type> <name>index_tree</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_vli</name></type> <name>unpadded_sum</name></decl>;</decl_stmt>
}</block></struct></type> <name>index_record</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>index_tree_node</name></type> <name>node</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>number_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>last</name></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>index_record</name></type> <name><name>records</name><index>[]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>index_group</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>index_tree_node</name></type> <name>node</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>number</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>block_number_base</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>index_tree</name></type> <name>groups</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>record_count</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>lzma_stream_flags</name></type> <name>stream_flags</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_vli</name></type> <name>stream_padding</name></decl>;</decl_stmt>

}</block></struct></type> <name>index_stream</name>;</typedef>


<struct>struct <name>lzma_index_s</name> <block>{



<decl_stmt><decl><type><name>index_tree</name></type> <name>streams</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>total_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>record_count</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>prealloc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint32_t</name></type> <name>checks</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_tree_init</name><parameter_list>(<parameter><decl><type><name>index_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>leftmost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>rightmost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_tree_node_end</name><parameter_list>(<parameter><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>index_tree_node_end</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>free_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>index_tree_node_end</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>free_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>free_func</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_tree_end</name><parameter_list>(<parameter><decl><type><name>index_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>index_tree_node_end</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>free_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_tree_append</name><parameter_list>(<parameter><decl><type><name>index_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>rightmost</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>tree</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>leftmost</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>rightmost</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rightmost</name><operator>-&gt;</operator><name>uncompressed_base</name></name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>uncompressed_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rightmost</name><operator>-&gt;</operator><name>compressed_base</name></name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>compressed_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>rightmost</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>rightmost</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>uint32_t</name></type> <name>up</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name> <operator>^</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>bsr32</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>up</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>ctz32</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>up</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>


<decl_stmt><decl><type><name>index_tree_node</name> <modifier>*</modifier></type><name>pivot</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>pivot</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>pivot</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pivot</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>pivot</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pivot</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>pivot</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>index_tree_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>index_tree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>node</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>index_tree_locate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>index_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_tree_node</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_tree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>leftmost</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>tree</name><operator>-&gt;</operator><name>leftmost</name><operator>-&gt;</operator><name>uncompressed_base</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>uncompressed_base</name></name> <operator>&gt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>index_stream</name> <modifier>*</modifier></type>
<name>index_stream_init</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>compressed_base</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_base</name></decl></parameter>,
<parameter><decl><type><name>lzma_vli</name></type> <name>stream_number</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>block_number_base</name></decl></parameter>,
<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name> <operator>=</operator> <name>uncompressed_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name> <operator>=</operator> <name>compressed_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>stream_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_number_base</name></name> <operator>=</operator> <name>block_number_base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>index_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_stream_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>index_tree_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_index</name> <modifier>*</modifier></type>
<name>index_init_plain</name><parameter_list>(<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>index_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>prealloc</name></name> <operator>=</operator> <name>INDEX_GROUP_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_index *</extern>)
<macro><name>lzma_index_init</name><argument_list>(<argument>lzma_allocator *allocator</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>index_init_plain</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>index_stream_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>index_tree_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(void</extern>)
<macro><name>lzma_index_end</name><argument_list>(<argument>lzma_index *i</argument>, <argument>lzma_allocator *allocator</argument>)</argument_list></macro>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>index_tree_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_stream_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_index_prealloc</name><parameter_list>(<parameter><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>records</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>records</name> <operator>&gt;</operator> <name>PREALLOC_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>records</name> <operator>=</operator> <name>PREALLOC_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>prealloc</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>records</name><operator>)</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(uint64_t</extern>)
<macro><name>lzma_index_memusage</name><argument_list>(<argument>lzma_vli streams</argument>, <argument>lzma_vli blocks</argument>)</argument_list></macro>
<block>{<block_content>







<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alloc_overhead</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>stream_base</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_stream</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_group</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>alloc_overhead</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>group_base</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_group</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <name>INDEX_GROUP_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_record</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <name>alloc_overhead</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>groups</name>
<init>= <expr><operator>(</operator><name>blocks</name> <operator>+</operator> <name>INDEX_GROUP_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>INDEX_GROUP_SIZE</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>streams_mem</name> <init>= <expr><name>streams</name> <operator>*</operator> <name>stream_base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>groups_mem</name> <init>= <expr><name>groups</name> <operator>*</operator> <name>group_base</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>index_base</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_index</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>alloc_overhead</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>limit</name> <init>= <expr><name>UINT64_MAX</name> <operator>-</operator> <name>index_base</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>streams</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>streams</name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>||</operator> <name>blocks</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name>
<operator>||</operator> <name>streams</name> <operator>&gt;</operator> <name>limit</name> <operator>/</operator> <name>stream_base</name>
<operator>||</operator> <name>groups</name> <operator>&gt;</operator> <name>limit</name> <operator>/</operator> <name>group_base</name>
<operator>||</operator> <name>limit</name> <operator>-</operator> <name>streams_mem</name> <operator>&lt;</operator> <name>groups_mem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>index_base</name> <operator>+</operator> <name>streams_mem</name> <operator>+</operator> <name>groups_mem</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(uint64_t</extern>)
<macro><name>lzma_index_memused</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>lzma_index_memusage</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_block_count</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_stream_count</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>count</name></name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_size</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>index_size</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_total_size</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_stream_size</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>

<return>return <expr><name>LZMA_STREAM_HEADER_SIZE</name> <operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>total_size</name></name>
<operator>+</operator> <call><name>index_size</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</return>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>lzma_vli</name></type>
<name>index_file_size</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>compressed_base</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>unpadded_sum</name></decl></parameter>,
<parameter><decl><type><name>lzma_vli</name></type> <name>record_count</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl></parameter>,
<parameter><decl><type><name>lzma_vli</name></type> <name>stream_padding</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>lzma_vli</name></type> <name>file_size</name> <init>= <expr><name>compressed_base</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>LZMA_STREAM_HEADER_SIZE</name>
<operator>+</operator> <name>stream_padding</name> <operator>+</operator> <call><name>vli_ceil4</name><argument_list>(<argument><expr><name>unpadded_sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_VLI_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>file_size</name> <operator>+=</operator> <call><name>index_size</name><argument_list>(<argument><expr><name>record_count</name></expr></argument>, <argument><expr><name>index_list_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_VLI_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>file_size</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_file_size</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_group</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>index_file_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>g</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>unpadded_sum</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_vli</extern>)
<macro><name>lzma_index_uncompressed_size</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(uint32_t</extern>)
<macro><name>lzma_index_checks</name><argument_list>(<argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>checks</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>checks</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checks</name> <operator>|=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>check</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>checks</name></expr>;</return>
</block_content>}</block>


<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_index_padding_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>LZMA_VLI_C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>index_size_unpadded</name><argument_list>(
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_index_stream_flags</name><argument_list>(<argument>lzma_index *i</argument>, <argument>const lzma_stream_flags *stream_flags</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>stream_flags</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_stream_flags_compare</name><argument_list>(
<argument><expr><name>stream_flags</name></expr></argument>, <argument><expr><name>stream_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream_flags</name></name> <operator>=</operator> <operator>*</operator><name>stream_flags</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_index_stream_padding</name><argument_list>(<argument>lzma_index *i</argument>, <argument>lzma_vli stream_padding</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>stream_padding</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name>
<operator>||</operator> <operator>(</operator><name>stream_padding</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>old_stream_padding</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lzma_index_file_size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>stream_padding</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name> <operator>=</operator> <name>old_stream_padding</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name> <operator>=</operator> <name>stream_padding</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_index_append</name><argument_list>(<argument>lzma_index *i</argument>, <argument>lzma_allocator *allocator</argument>,
<argument>lzma_vli unpadded_size</argument>, <argument>lzma_vli uncompressed_size</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>unpadded_size</name> <argument_list type="generic">&lt; <argument><expr><name>UNPADDED_SIZE_MIN</name>
<operator>||</operator> <name>unpadded_size</name></expr></argument> &gt;</argument_list></name> <name>UNPADDED_SIZE_MAX</name>
<operator>||</operator> <name>uncompressed_size</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>index_group</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>compressed_base</name> <init>= <expr><ternary><condition><expr><name>g</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><call><name>vli_ceil4</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>unpadded_sum</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>uncompressed_base</name> <init>= <expr><ternary><condition><expr><name>g</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>index_list_size_add</name> <init>= <expr><call><name>lzma_vli_size</name><argument_list>(<argument><expr><name>unpadded_size</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>lzma_vli_size</name><argument_list>(<argument><expr><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>index_file_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name></expr></argument>,
<argument><expr><name>compressed_base</name> <operator>+</operator> <name>unpadded_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>record_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>+</operator> <name>index_list_size_add</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream_padding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>index_size</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>+</operator> <name>index_list_size_add</name></expr></argument>)</argument_list></call>
<operator>&gt;</operator> <name>LZMA_BACKWARD_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_group</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>prealloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>prealloc</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>prealloc</name></name> <operator>=</operator> <name>INDEX_GROUP_SIZE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name> <operator>=</operator> <name>uncompressed_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name> <operator>=</operator> <name>compressed_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>number_base</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>record_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>index_tree_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name>
<operator>=</operator> <name>uncompressed_base</name> <operator>+</operator> <name>uncompressed_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>unpadded_sum</name>
<operator>=</operator> <name>compressed_base</name> <operator>+</operator> <name>unpadded_size</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>+=</operator> <name>index_list_size_add</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+=</operator> <call><name>vli_ceil4</name><argument_list>(<argument><expr><name>unpadded_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>i</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>+=</operator> <name>index_list_size_add</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>



<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>file_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_vli</name></type> <name>block_number_add</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>stream_number_add</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>index_tree</name> <modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>

}</block></struct></type> <name>index_cat_info</name>;</typedef>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_cat_helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>index_cat_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>left</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>right</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>index_cat_helper</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>file_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>number</name></name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>stream_number_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>block_number_base</name></name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>block_number_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>index_tree_append</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>index_cat_helper</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_index_cat</name><argument_list>(<argument>lzma_index *restrict dest</argument>, <argument>lzma_index *restrict src</argument>,
<argument>lzma_allocator *allocator</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>dest_file_size</name> <init>= <expr><call><name>lzma_index_file_size</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>dest_file_size</name> <operator>+</operator> <call><name>lzma_index_file_size</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name>
<operator>||</operator> <name><name>dest</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>uncompressed_size</name></name>
<operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>







<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>dest_size</name> <init>= <expr><call><name>index_size_unpadded</name><argument_list>(
<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>src_size</name> <init>= <expr><call><name>index_size_unpadded</name><argument_list>(
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vli_ceil4</name><argument_list>(<argument><expr><name>dest_size</name> <operator>+</operator> <name>src_size</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LZMA_BACKWARD_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>



<block>{<block_content>
<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>index_group</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>left</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>right</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>index_group</name> <modifier>*</modifier></type><name>newg</name> <init>= <expr><call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_group</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>newg</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newg</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newg</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newg</name><operator>-&gt;</operator><name>number_base</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>number_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newg</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name><name>newg</name><operator>-&gt;</operator><name>allocated</name></name>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>newg</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>root</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>newg</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>root</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>newg</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>newg</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>



<decl_stmt><decl><type><specifier>const</specifier> <name>index_cat_info</name></type> <name>info</name> <init>= <expr><block>{
<expr><operator>.</operator><name>uncompressed_size</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>,
<expr><operator>.</operator><name>file_size</name> <operator>=</operator> <name>dest_file_size</name></expr>,
<expr><operator>.</operator><name>stream_number_add</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>count</name></name></expr>,
<expr><operator>.</operator><name>block_number_add</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>record_count</name></name></expr>,
<expr><operator>.</operator><name>streams</name> <operator>=</operator> <operator>&amp;</operator><name><name>dest</name><operator>-&gt;</operator><name>streams</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>index_cat_helper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>root</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>record_count</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>index_list_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>checks</name></name> <operator>=</operator> <call><name>lzma_index_checks</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>src</name><operator>-&gt;</operator><name>checks</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>



<function><type><specifier>static</specifier> <name>index_stream</name> <modifier>*</modifier></type>
<name>index_dup_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>record_count</name></name> <operator>&gt;</operator> <name>PREALLOC_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>index_stream_init</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>number</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>block_number_base</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>dest</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>index_list_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>stream_flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>stream_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>stream_padding</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>stream_padding</name></name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>index_group</name> <modifier>*</modifier></type><name>destg</name> <init>= <expr><call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_group</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>record_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>destg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>index_stream_end</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>destg</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destg</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destg</name><operator>-&gt;</operator><name>number_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destg</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destg</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>record_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>index_group</name> <modifier>*</modifier></type><name>srcg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>destg</name><operator>-&gt;</operator><name>records</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>srcg</name><operator>-&gt;</operator><name>records</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>srcg</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>index_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>srcg</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srcg</name> <operator>=</operator> <call><name>index_tree_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srcg</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>srcg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name><name>destg</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>index_tree_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>destg</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_index *</extern>)
<macro><name>lzma_index_dup</name><argument_list>(<argument>const lzma_index *src</argument>, <argument>lzma_allocator *allocator</argument>)</argument_list></macro>
<block>{<block_content>

<decl_stmt><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>index_init_plain</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>index_list_size</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>srcstream</name>
<init>= <expr><operator>(</operator><specifier>const</specifier> <name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>leftmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>index_stream</name> <modifier>*</modifier></type><name>deststream</name> <init>= <expr><call><name>index_dup_stream</name><argument_list>(
<argument><expr><name>srcstream</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>deststream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_index_end</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>index_tree_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>deststream</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcstream</name> <operator>=</operator> <call><name>index_tree_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srcstream</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>srcstream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block>



<enum>enum <block>{
<decl><name>ITER_INDEX</name></decl>,
<decl><name>ITER_STREAM</name></decl>,
<decl><name>ITER_GROUP</name></decl>,
<decl><name>ITER_RECORD</name></decl>,
<decl><name>ITER_METHOD</name></decl>,
}</block>;</enum>



<enum>enum <block>{
<decl><name>ITER_METHOD_NORMAL</name></decl>,
<decl><name>ITER_METHOD_NEXT</name></decl>,
<decl><name>ITER_METHOD_LEFTMOST</name></decl>,
}</block>;</enum>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>iter_set_info</name><parameter_list>(<parameter><decl><type><name>lzma_index_iter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_INDEX</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_STREAM</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_group</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>record</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_RECORD</name></expr>]</index></name><operator>.</operator><name>s</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_METHOD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>ITER_METHOD_LEFTMOST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>rightmost</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>node</name></name>
<operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_METHOD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>ITER_METHOD_NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>root</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_METHOD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>ITER_METHOD_NEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>root</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_METHOD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>ITER_METHOD_LEFTMOST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>block_count</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>compressed_offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>uncompressed_offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_flags</name><operator>.</operator><name>version</name></name> <operator>==</operator> <name>UINT32_MAX</name></expr>
?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>stream_flags</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>padding</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream_padding</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>compressed_size</name></name> <operator>=</operator> <call><name>index_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_group</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator>
<name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>rightmost</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>compressed_size</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>LZMA_STREAM_HEADER_SIZE</name>
<operator>+</operator> <call><name>index_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>record_count</name></name></expr></argument>,
<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>vli_ceil4</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>unpadded_sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>uncompressed_size</name></name>
<operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>number_in_stream</name></name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>number_base</name></name> <operator>+</operator> <name>record</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>number_in_file</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>number_in_stream</name></name>
<operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>block_number_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>compressed_stream_offset</name></name>
<operator>=</operator> <ternary><condition><expr><name>record</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>group</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>compressed_base</name></name></expr>
</then><else>: <expr><call><name>vli_ceil4</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>records</name><index>[
<expr><name>record</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>unpadded_sum</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>uncompressed_stream_offset</name></name>
<operator>=</operator> <ternary><condition><expr><name>record</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>group</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name></expr>
</then><else>: <expr><name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>record</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>uncompressed_size</name></name>
<operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>record</name></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name>
<operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>uncompressed_stream_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>unpadded_size</name></name>
<operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>record</name></expr>]</index></name><operator>.</operator><name>unpadded_sum</name>
<operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>compressed_stream_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>total_size</name></name> <operator>=</operator> <call><name>vli_ceil4</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>unpadded_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>compressed_stream_offset</name></name>
<operator>+=</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>compressed_file_offset</name></name>
<operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>compressed_stream_offset</name></name>
<operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>compressed_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>uncompressed_file_offset</name></name>
<operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>uncompressed_stream_offset</name></name>
<operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>uncompressed_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(void</extern>)
<macro><name>lzma_index_iter_init</name><argument_list>(<argument>lzma_index_iter *iter</argument>, <argument>const lzma_index *i</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_INDEX</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_index_iter_rewind</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>


<extern>extern LZMA_API(void</extern>)
<macro><name>lzma_index_iter_rewind</name><argument_list>(<argument>lzma_index_iter *iter</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_STREAM</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_RECORD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_METHOD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>ITER_METHOD_NORMAL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_bool</extern>)
<macro><name>lzma_index_iter_next</name><argument_list>(<argument>lzma_index_iter *iter</argument>, <argument>lzma_index_iter_mode mode</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>mode</name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_INDEX_ITER_NONEMPTY_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_INDEX</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_STREAM</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>index_group</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>record</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_RECORD</name></expr>]</index></name><operator>.</operator><name>s</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>LZMA_INDEX_ITER_STREAM</name></expr>)</condition> <block>{<block_content>


<switch>switch <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_METHOD</name></expr>]</index></name><operator>.</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ITER_METHOD_NORMAL</name></expr>:</case>
<expr_stmt><expr><name>group</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ITER_METHOD_NEXT</name></expr>:</case>
<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>index_tree_next</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ITER_METHOD_LEFTMOST</name></expr>:</case>
<expr_stmt><expr><name>group</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator>
<name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>index_stream</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>leftmost</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <name>LZMA_INDEX_ITER_BLOCK</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>index_tree_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>group</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>group</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>record</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>record</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>record</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>index_tree_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<do>do <block>{<block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>index_tree_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <name>LZMA_INDEX_ITER_BLOCK</name>
<operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><name>group</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>index_group</name> <operator>*</operator><operator>)</operator><operator>(</operator>
<name><name>stream</name><operator>-&gt;</operator><name>groups</name><operator>.</operator><name>leftmost</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LZMA_INDEX_ITER_NONEMPTY_BLOCK</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name>
<operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>record</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name>
<operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>record</name></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_STREAM</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_RECORD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>record</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iter_set_info</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_bool</extern>)
<macro><name>lzma_index_iter_locate</name><argument_list>(<argument>lzma_index_iter *iter</argument>, <argument>lzma_vli target</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_INDEX</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&lt;=</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>index_stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>index_tree_locate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stream</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>-=</operator> <name><name>stream</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>uncompressed_base</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>index_group</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>index_tree_locate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>right</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pos</name> <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>uncompressed_sum</name> <operator>&lt;=</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_STREAM</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_GROUP</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>internal</name><index>[<expr><name>ITER_RECORD</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iter_set_info</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block>
</unit>
