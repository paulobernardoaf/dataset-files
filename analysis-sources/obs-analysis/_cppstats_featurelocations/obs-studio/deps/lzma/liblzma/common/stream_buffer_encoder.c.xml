<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\common\stream_buffer_encoder.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_BOUND</name></cpp:macro> <cpp:value>((1 + 1 + 2 * LZMA_VLI_BYTES_MAX + 4 + 3) &amp; ~3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADERS_BOUND</name></cpp:macro> <cpp:value>(2 * LZMA_STREAM_HEADER_SIZE + INDEX_BOUND)</cpp:value></cpp:define>


<extern>extern LZMA_API(size_t</extern>)
<macro><name>lzma_stream_buffer_bound</name><argument_list>(<argument>size_t uncompressed_size</argument>)</argument_list></macro>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>block_bound</name> <init>= <expr><call><name>lzma_block_buffer_bound</name><argument_list>(<argument><expr><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>block_bound</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>my_min</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>, <argument><expr><name>LZMA_VLI_MAX</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>block_bound</name> <operator>&lt;</operator> <name>HEADERS_BOUND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>block_bound</name> <operator>+</operator> <name>HEADERS_BOUND</name></expr>;</return>
</block_content>}</block>


<extern>extern LZMA_API(lzma_ret</extern>)
<macro><name>lzma_stream_buffer_encode</name><argument_list>(<argument>lzma_filter *filters</argument>, <argument>lzma_check check</argument>,
<argument>lzma_allocator *allocator</argument>, <argument>const uint8_t *in</argument>, <argument>size_t in_size</argument>,
<argument>uint8_t *out</argument>, <argument>size_t *out_pos_ptr</argument>, <argument>size_t out_size</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filters</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>check</name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_CHECK_ID_MAX</name>
<operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>in_size</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>out</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>out_pos_ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>out_pos_ptr</name> <operator>&gt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzma_check_is_supported</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_UNSUPPORTED_CHECK</name></expr>;</return></block_content></block></if></if_stmt>








<decl_stmt><decl><type><name>size_t</name></type> <name>out_pos</name> <init>= <expr><operator>*</operator><name>out_pos_ptr</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>-</operator> <name>out_pos</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>out_size</name> <operator>-=</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lzma_stream_flags</name></type> <name>stream_flags</name> <init>= <expr><block>{
<expr><operator>.</operator><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>check</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_stream_header_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_flags</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>out_pos</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_pos</name> <operator>+=</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lzma_block</name></type> <name>block</name> <init>= <expr><block>{
<expr><operator>.</operator><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>check</name></expr>,
<expr><operator>.</operator><name>filters</name> <operator>=</operator> <name>filters</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_block_buffer_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<block>{<block_content>



<decl_stmt><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>lzma_index_init</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><name>LZMA_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_index_append</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><call><name>lzma_block_unpadded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>block</name><operator>.</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_index_buffer_encode</name><argument_list>(
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream_flags</name><operator>.</operator><name>backward_size</name></name> <operator>=</operator> <call><name>lzma_index_size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_index_end</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><call><name>lzma_stream_footer_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_flags</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>out_pos</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_pos</name> <operator>+=</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>out_pos_ptr</name> <operator>=</operator> <name>out_pos</name></expr>;</expr_stmt>
<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block>
</unit>
