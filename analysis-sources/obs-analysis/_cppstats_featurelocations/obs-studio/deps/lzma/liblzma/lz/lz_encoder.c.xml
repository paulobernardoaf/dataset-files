<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lz\lz_encoder.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder_hash.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder_hash_table.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_lz_encoder</name></type> <name>lz</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_mf</name></type> <name>mf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>move_window</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>&gt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>keep_size_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>move_offset</name>
<init>= <expr><operator>(</operator><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>keep_size_before</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>&gt;</operator> <name>move_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>move_size</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>-</operator> <name>move_offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>move_offset</name> <operator>+</operator> <name>move_size</name> <operator>&lt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>move_offset</name></expr></argument>, <argument><expr><name>move_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>move_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-=</operator> <name>move_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>-=</operator> <name>move_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>-=</operator> <name>move_offset</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>fill_window</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>in_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_pos</name></name> <operator>&lt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>write_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_pos</name></name> <operator>&gt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>keep_size_after</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_window</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>mf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>write_pos</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>write_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>write_pos</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>action</name> <operator>!=</operator> <name>LZMA_RUN</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr>
?</condition><then> <expr><name>LZMA_STREAM_END</name></expr> </then><else>: <expr><name>LZMA_OK</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_pos</name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>write_pos</name></name> <operator>=</operator> <name>write_pos</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_limit</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>write_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>write_pos</name></name> <operator>&gt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>keep_size_after</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_limit</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>write_pos</name></name>
<operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>keep_size_after</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_pos</name></name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_limit</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pending</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>pending</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_pos</name></name> <operator>&gt;=</operator> <name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_pos</name></name> <operator>-=</operator> <name>pending</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>mf</name></name></expr></argument>, <argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>lz_encode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>in_pos</name> <operator>&lt;</operator> <name>in_size</name> <operator>||</operator> <name>action</name> <operator>!=</operator> <name>LZMA_RUN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>LZMA_RUN</name> <operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_pos</name></name>
<operator>&gt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>read_limit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>fill_window</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>mf</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>LZMA_RUN</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>lz_encoder_prepare</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>&lt;</operator> <name>LZMA_DICT_SIZE_MIN</name>
<operator>||</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name>
<operator>&gt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator>
<operator>||</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>&gt;</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>keep_size_before</name></name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>before_size</name></name> <operator>+</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>keep_size_after</name></name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>after_size</name></name>
<operator>+</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>;</expr_stmt>












<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserve</name> <init>= <expr><name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reserve</name> <operator>&gt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reserve</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reserve</name> <operator>+=</operator> <operator>(</operator><name><name>lz_options</name><operator>-&gt;</operator><name>before_size</name></name> <operator>+</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>match_len_max</name></name>
<operator>+</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>after_size</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>old_size</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>keep_size_before</name></name> <operator>+</operator> <name>reserve</name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>keep_size_after</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>old_size</name> <operator>!=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>match_len_max</name></name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>nice_len</name></name></expr>;</expr_stmt>
















<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name><name>lz_options</name><operator>-&gt;</operator><name>match_finder</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_MF_HC3</name></expr>:</case>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_hc3_find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_hc3_skip</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_MF_HC4</name></expr>:</case>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_hc4_find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_hc4_skip</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_MF_BT2</name></expr>:</case>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_bt2_find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_bt2_skip</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_MF_BT3</name></expr>:</case>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_bt3_find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_bt3_skip</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA_MF_BT4</name></expr>:</case>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_bt4_find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_mf_bt4_skip</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>hash_bytes</name> <init>= <expr><name><name>lz_options</name><operator>-&gt;</operator><name>match_finder</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_bytes</name> <operator>&gt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_bt</name> <init>= <expr><operator>(</operator><name><name>lz_options</name><operator>-&gt;</operator><name>match_finder</name></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_bytes</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hs</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>hs</name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hs</name> <operator>|=</operator> <name>hs</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hs</name> <operator>|=</operator> <name>hs</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hs</name> <operator>|=</operator> <name>hs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hs</name> <operator>|=</operator> <name>hs</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hs</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hs</name> <operator>|=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hs</name> <operator>&gt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash_bytes</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hs</name> <operator>=</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hs</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash_mask</name></name> <operator>=</operator> <name>hs</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>hs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_bytes</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hs</name> <operator>+=</operator> <name>HASH_2_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_bytes</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hs</name> <operator>+=</operator> <name>HASH_3_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>










<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hs</name> <operator>&lt;</operator> <name>UINT32_MAX</name> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>old_count</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>sons_count</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name> <operator>=</operator> <name>hs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>sons_count</name></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_bt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>sons_count</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>new_count</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>sons_count</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>old_count</name> <operator>!=</operator> <name>new_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_bt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>lz_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alloc_count</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>sons_count</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UINT32_MAX</name> <operator>&gt;=</operator> <name>SIZE_MAX</name> <operator>/</operator> <literal type="number">4</literal></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>alloc_count</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><name>alloc_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>son</name></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>cyclic_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<expr_stmt><expr><call><name>memzero</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>=</operator> <call><name>my_min</name><argument_list>(<argument><expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict_size</name></name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict</name></name>
<operator>+</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name></expr></argument>,
<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>LZMA_SYNC_FLUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>LZMA_RUN</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>uint64_t</name></type>
<name>lzma_lz_encoder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>lzma_mf</name></type> <name>mf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>hash</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>hash_size_sum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>sons_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lz_encoder_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lz_options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>mf</name><operator>.</operator><name>hash_size_sum</name></name> <operator>+</operator> <name><name>mf</name><operator>.</operator><name>sons_count</name></name><operator>)</operator>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>mf</name><operator>.</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>lz_encoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>end</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>end</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>lz_encoder_update</name><argument_list>(<argument><expr><name>lzma_coder</name> <operator>*</operator><name>coder</name></expr></argument>, <argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lzma_filter</name> <operator>*</operator><name>filters_null</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lzma_filter</name> <operator>*</operator><name>reversed_filters</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>options_update</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>options_update</name></name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>reversed_filters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_next_filter_update</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>reversed_filters</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_lz_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,
<parameter><function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>lz_init</name>)<parameter_list>(<parameter><decl><type><name>lzma_lz_encoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>,
<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>lzma_crc32_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>lz_encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>lz_encoder_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>&amp;</operator><name>lz_encoder_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>hash_size_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mf</name><operator>.</operator><name>sons_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>lzma_lz_options</name></type> <name>lz_options</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lz_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lz</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lz_options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>lz_encoder_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mf</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lz_options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>lz_encoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mf</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lz_options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>lzma_next_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>filters</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<extern>extern LZMA_API(lzma_bool</extern>)
<macro><name>lzma_mf_is_supported</name><argument_list>(<argument>lzma_match_finder mf</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mf</name> <operator>==</operator> <name>LZMA_MF_HC3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mf</name> <operator>==</operator> <name>LZMA_MF_HC4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mf</name> <operator>==</operator> <name>LZMA_MF_BT2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mf</name> <operator>==</operator> <name>LZMA_MF_BT3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mf</name> <operator>==</operator> <name>LZMA_MF_BT4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>
</unit>
