<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lz\lz_decoder.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_decoder.h"</cpp:file></cpp:include>


<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_dict</name></type> <name>dict</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_lz_decoder</name></type> <name>lz</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>next_finished</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>this_finished</name></decl>;</decl_stmt>





<struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>LZMA_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>temp</name></decl>;</struct>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>lz_decoder_reset</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>full</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>need_reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>decode_buffer</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dict_start</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name>
<operator>+</operator> <call><name>my_min</name><argument_list>(<argument><expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>code</name></name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_size</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name>dict_start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>copy_size</name> <operator>&lt;=</operator> <name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>dict_start</name></expr></argument>,
<argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>need_reset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lz_decoder_reset</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name> <operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>==</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name> <operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>==</operator> <name>out_size</name>
<operator>||</operator> <name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>lz_decode</name><argument_list>(<argument><expr><name>lzma_coder</name> <operator>*</operator><name>coder</name></expr></argument>,
<argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>restrict</specifier> <name>in</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><specifier>restrict</specifier> <name>in_pos</name></expr></argument>,
<argument><expr><name>size_t</name> <name>in_size</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><specifier>restrict</specifier> <name>out</name></expr></argument>,
<argument><expr><name>size_t</name> <operator>*</operator><specifier>restrict</specifier> <name>out_pos</name></expr></argument>, <argument><expr><name>size_t</name> <name>out_size</name></expr></argument>,
<argument><expr><name>lzma_action</name> <name>action</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>decode_buffer</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<while>while <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>next_finished</name></name>
<operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><name>LZMA_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>next_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name> <operator>||</operator> <name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>this_finished</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>next_finished</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>decode_buffer</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>this_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>next_finished</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>lz_decoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>end</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>end</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_lz_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,
<parameter><function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>lz_init</name>)<parameter_list>(<parameter><decl><type><name>lzma_lz_decoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>,
<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>lz_decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>lz_decoder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lz</name></name> <operator>=</operator> <name>LZMA_LZ_DECODER_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>lzma_lz_options</name></type> <name>lz_options</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lz_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lz</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lz_options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name> <operator>=</operator> <operator>(</operator><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>lz_options</name><operator>.</operator><name>dict_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name>
<operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>lz_options</name><operator>.</operator><name>dict_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lz_decoder_reset</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>lz_options</name><operator>.</operator><name>preset_dict</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>lz_options</name><operator>.</operator><name>preset_dict_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_size</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name><name>lz_options</name><operator>.</operator><name>preset_dict_size</name></name></expr></argument>,
<argument><expr><name><name>lz_options</name><operator>.</operator><name>dict_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>offset</name> <init>= <expr><name><name>lz_options</name><operator>.</operator><name>preset_dict_size</name></name> <operator>-</operator> <name>copy_size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>lz_options</name><operator>.</operator><name>preset_dict</name></name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>copy_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name>copy_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next_finished</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>this_finished</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>temp</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<return>return <expr><call><name>lzma_next_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,
<argument><expr><name>filters</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>uint64_t</name></type>
<name>lzma_lz_decoder_memusage</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>dictionary_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>dictionary_size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_lz_decoder_uncompressed</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>set_uncompressed</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lz</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
