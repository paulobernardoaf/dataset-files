<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lz\lz_encoder_mf.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder_hash.h"</cpp:file></cpp:include>





<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_mf_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count_ptr</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><call><name><name>mf</name><operator>-&gt;</operator><name>find</name></name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_best</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>len_best</name> <operator>=</operator> <name><name>matches</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>==</operator> <name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>limit</name> <init>= <expr><call><name>mf_avail</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>p1</name> <operator>-</operator> <name><name>matches</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dist</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len_best</name> <operator>&lt;</operator> <name>limit</name>
<operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><name>len_best</name></expr>]</index></name> <operator>==</operator> <name><name>p2</name><index>[<expr><name>len_best</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len_best</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count_ptr</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>



<expr_stmt><expr><operator>++</operator><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr>;</expr_stmt>

<return>return <expr><name>len_best</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_HASH_VALUE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_NORMALIZE_POS</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>















<function><type><specifier>static</specifier> <name>void</name></type>
<name>normalize</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>MUST_NORMALIZE_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>subvalue</name>
<init>= <expr><operator>(</operator><name>MUST_NORMALIZE_POS</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash_size_sum</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>sons_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>










<if_stmt><if>if <condition>(<expr><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>subvalue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>EMPTY_HASH_VALUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>subvalue</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name>subvalue</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>move_pos</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>mf</name><operator>-&gt;</operator><name>cyclic_pos</name></name> <operator>==</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>cyclic_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>&lt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>normalize</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type>
<name>move_pending</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>&lt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>mf</name><operator>-&gt;</operator><name>pending</name></name></expr>;</expr_stmt>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>header</name><parameter_list>(<parameter><type><name>is_bt</name></type></parameter>, <parameter><type><name>len_min</name></type></parameter>, <parameter><type><name>ret_op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint32_t len_limit = mf_avail(mf); if (mf-&gt;nice_len &lt;= len_limit) { len_limit = mf-&gt;nice_len; } else if (len_limit &lt; (len_min) || (is_bt &amp;&amp; mf-&gt;action == LZMA_SYNC_FLUSH)) { assert(mf-&gt;action != LZMA_RUN); move_pending(mf); ret_op; } const uint8_t *cur = mf_ptr(mf); const uint32_t pos = mf-&gt;read_pos + mf-&gt;offset</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>header_find</name><parameter_list>(<parameter><type><name>is_bt</name></type></parameter>, <parameter><type><name>len_min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>header(is_bt, len_min, return 0); uint32_t matches_count = 0</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>header_skip</name><parameter_list>(<parameter><type><name>is_bt</name></type></parameter>, <parameter><type><name>len_min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>header(is_bt, len_min, continue)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_find</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>len_best</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { matches_count = func(len_limit, pos, cur, cur_match, mf-&gt;depth, mf-&gt;son, mf-&gt;cyclic_pos, mf-&gt;cyclic_size, matches + matches_count, len_best) - matches; move_pos(mf); return matches_count; } while (0)</cpp:value></cpp:define>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC4</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function><type><specifier>static</specifier> <name>lzma_match</name> <modifier>*</modifier></type>
<name>hc_find_func</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_limit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cur_match</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>son</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cyclic_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cyclic_size</name></decl></parameter>,
<parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>len_best</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>son</name><index>[<expr><name>cyclic_pos</name></expr>]</index></name> <operator>=</operator> <name>cur_match</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta</name> <init>= <expr><name>pos</name> <operator>-</operator> <name>cur_match</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>delta</name> <operator>&gt;=</operator> <name>cyclic_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>matches</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pb</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>delta</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_match</name> <operator>=</operator> <name><name>son</name><index>[<expr><name>cyclic_pos</name> <operator>-</operator> <name>delta</name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>delta</name> <operator>&gt;</operator> <name>cyclic_pos</name></expr> ?</condition><then> <expr><name>cyclic_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len_best</name></expr>]</index></name> <operator>==</operator> <name><name>cur</name><index>[<expr><name>len_best</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>pb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>++</operator><name>len</name> <operator>!=</operator> <name>len_limit</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>matches</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>len_limit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>matches</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hc_find</name><parameter_list>(<parameter><type><name>len_best</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>call_find(hc_find_func, len_best)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hc_skip</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { mf-&gt;son[mf-&gt;cyclic_pos] = cur_match; move_pos(mf); } while (0)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_mf_hc3_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>header_find</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_3_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta2</name> <init>= <expr><name>pos</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_best</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta2</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cur</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><name>len_best</name> <operator>!=</operator> <name>len_limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>len_best</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cur</name> <operator>+</operator> <name>len_best</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len_best</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len_best</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>==</operator> <name>len_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hc_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hc_find</name><argument_list>(<argument><expr><name>len_best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_mf_hc3_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mf_avail</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_pending</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_3_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name>
<init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hc_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>amount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_HC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_mf_hc4_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>header_find</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_4_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta2</name> <init>= <expr><name>pos</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta3</name>
<init>= <expr><name>pos</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_3_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr> ]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_3_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_best</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta2</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cur</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta2</name> <operator>!=</operator> <name>delta3</name> <operator>&amp;&amp;</operator> <name>delta3</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cur</name> <operator>-</operator> <name>delta3</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><name>matches_count</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>delta3</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matches_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><name>len_best</name> <operator>!=</operator> <name>len_limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>len_best</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cur</name> <operator>+</operator> <name>len_best</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len_best</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len_best</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>==</operator> <name>len_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hc_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>matches_count</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hc_find</name><argument_list>(<argument><expr><name>len_best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_mf_hc4_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mf_avail</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_pending</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_4_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name>
<init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_3_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hc_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>amount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>lzma_match</name> <modifier>*</modifier></type>
<name>bt_find_func</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_limit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cur_match</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>son</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cyclic_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cyclic_size</name></decl></parameter>,
<parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>len_best</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr0</name> <init>= <expr><name>son</name> <operator>+</operator> <operator>(</operator><name>cyclic_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr1</name> <init>= <expr><name>son</name> <operator>+</operator> <operator>(</operator><name>cyclic_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta</name> <init>= <expr><name>pos</name> <operator>-</operator> <name>cur_match</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>delta</name> <operator>&gt;=</operator> <name>cyclic_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr0</name> <operator>=</operator> <name>EMPTY_HASH_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <name>EMPTY_HASH_VALUE</name></expr>;</expr_stmt>
<return>return <expr><name>matches</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pair</name> <init>= <expr><name>son</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cyclic_pos</name> <operator>-</operator> <name>delta</name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>delta</name> <operator>&gt;</operator> <name>cyclic_pos</name></expr> ?</condition><then> <expr><name>cyclic_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pb</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>len0</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>++</operator><name>len</name> <operator>!=</operator> <name>len_limit</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>matches</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>len_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr0</name> <operator>=</operator> <name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>matches</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <name>cur_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>pair</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_match</name> <operator>=</operator> <operator>*</operator><name>ptr1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr0</name> <operator>=</operator> <name>cur_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr0</name> <operator>=</operator> <name>pair</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_match</name> <operator>=</operator> <operator>*</operator><name>ptr0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len0</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>bt_skip_func</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_limit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cur_match</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>son</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cyclic_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cyclic_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr0</name> <init>= <expr><name>son</name> <operator>+</operator> <operator>(</operator><name>cyclic_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr1</name> <init>= <expr><name>son</name> <operator>+</operator> <operator>(</operator><name>cyclic_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta</name> <init>= <expr><name>pos</name> <operator>-</operator> <name>cur_match</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>delta</name> <operator>&gt;=</operator> <name>cyclic_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr0</name> <operator>=</operator> <name>EMPTY_HASH_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <name>EMPTY_HASH_VALUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name>son</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cyclic_pos</name> <operator>-</operator> <name>delta</name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>delta</name> <operator>&gt;</operator> <name>cyclic_pos</name></expr> ?</condition><then> <expr><name>cyclic_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>len0</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>++</operator><name>len</name> <operator>!=</operator> <name>len_limit</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>len_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr0</name> <operator>=</operator> <name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cur</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <name>cur_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>pair</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_match</name> <operator>=</operator> <operator>*</operator><name>ptr1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr0</name> <operator>=</operator> <name>cur_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr0</name> <operator>=</operator> <name>pair</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_match</name> <operator>=</operator> <operator>*</operator><name>ptr0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len0</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bt_find</name><parameter_list>(<parameter><type><name>len_best</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>call_find(bt_find_func, len_best)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bt_skip</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { bt_skip_func(len_limit, pos, cur, cur_match, mf-&gt;depth, mf-&gt;son, mf-&gt;cyclic_pos, mf-&gt;cyclic_size); move_pos(mf); } while (0)</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_mf_bt2_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>header_find</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_2_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bt_find</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_mf_bt2_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>header_skip</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_2_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>amount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_mf_bt3_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>header_find</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_3_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta2</name> <init>= <expr><name>pos</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_best</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta2</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cur</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><name>len_best</name> <operator>!=</operator> <name>len_limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>len_best</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cur</name> <operator>+</operator> <name>len_best</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len_best</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len_best</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>==</operator> <name>len_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bt_find</name><argument_list>(<argument><expr><name>len_best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_mf_bt3_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>header_skip</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_3_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name>
<init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>amount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MF_BT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>extern</specifier> <name>uint32_t</name></type>
<name>lzma_mf_bt4_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>header_find</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_4_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta2</name> <init>= <expr><name>pos</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>delta3</name>
<init>= <expr><name>pos</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_3_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_3_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_best</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta2</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cur</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta2</name> <operator>!=</operator> <name>delta3</name> <operator>&amp;&amp;</operator> <name>delta3</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>cyclic_size</name></name>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cur</name> <operator>-</operator> <name>delta3</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matches</name><index>[<expr><name>matches_count</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>delta3</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matches_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><name>len_best</name> <operator>!=</operator> <name>len_limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>len_best</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cur</name> <operator>+</operator> <name>len_best</name> <operator>-</operator> <name>delta2</name><operator>)</operator> <operator>!=</operator> <name><name>cur</name><index>[<expr><name>len_best</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len_best</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>==</operator> <name>len_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>matches_count</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_best</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len_best</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bt_find</name><argument_list>(<argument><expr><name>len_best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_mf_bt4_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>header_skip</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_4_calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_match</name>
<init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>hash_2_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_3_HASH_SIZE</name> <operator>+</operator> <name>hash_3_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>FIX_4_HASH_SIZE</name> <operator>+</operator> <name>hash_value</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>amount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
