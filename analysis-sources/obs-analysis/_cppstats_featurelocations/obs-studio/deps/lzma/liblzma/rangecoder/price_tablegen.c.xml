<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\rangecoder\price_tablegen.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"price.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>rc_prices</name><index>[<expr><name>RC_PRICE_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_price_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>RC_MOVE_REDUCING_BITS</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <name>RC_BIT_MODEL_TOTAL</name></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>RC_MOVE_REDUCING_BITS</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cycles_bits</name> <init>= <expr><name>RC_BIT_PRICE_SHIFT_BITS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cycles_bits</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>*=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_count</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>w</name> <operator>&gt;=</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>bit_count</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rc_prices</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <name>RC_MOVE_REDUCING_BITS</name></expr>]</index></name>
<operator>=</operator> <operator>(</operator><name>RC_BIT_MODEL_TOTAL_BITS</name> <operator>&lt;&lt;</operator> <name>cycles_bits</name><operator>)</operator>
<operator>-</operator> <literal type="number">15</literal> <operator>-</operator> <name>bit_count</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_price_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* This file has been automatically generated by "</literal>
<literal type="string">"price_tablegen.c. */\n\n"</literal>
<literal type="string">"#include \"range_encoder.h\"\n\n"</literal>
<literal type="string">"const uint8_t lzma_rc_prices["</literal>
<literal type="string">"RC_PRICE_TABLE_SIZE] = {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>array_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_rc_prices</name></expr></argument>)</argument_list></sizeof>
<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>lzma_rc_prices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>array_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name><name>rc_prices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>array_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>init_price_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_price_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
