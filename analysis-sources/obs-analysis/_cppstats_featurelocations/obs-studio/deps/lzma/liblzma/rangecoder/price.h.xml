<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\rangecoder\price.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_PRICE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PRICE_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_MOVE_REDUCING_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_BIT_PRICE_SHIFT_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_PRICE_TABLE_SIZE</name></cpp:macro> <cpp:value>(RC_BIT_MODEL_TOTAL &gt;&gt; RC_MOVE_REDUCING_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_INFINITY_PRICE</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 30)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>lzma_rc_prices</name><index>[<expr><name>RC_PRICE_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rc_bit_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>probability</name></type> <name>prob</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lzma_rc_prices</name><index>[<expr><operator>(</operator><name>prob</name> <operator>^</operator> <operator>(</operator><operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>bit</name><operator>)</operator>
<operator>&amp;</operator> <operator>(</operator><name>RC_BIT_MODEL_TOTAL</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RC_MOVE_REDUCING_BITS</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rc_bit_0_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>probability</name></type> <name>prob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lzma_rc_prices</name><index>[<expr><name>prob</name> <operator>&gt;&gt;</operator> <name>RC_MOVE_REDUCING_BITS</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rc_bit_1_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>probability</name></type> <name>prob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lzma_rc_prices</name><index>[<expr><operator>(</operator><name>prob</name> <operator>^</operator> <operator>(</operator><name>RC_BIT_MODEL_TOTAL</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name>RC_MOVE_REDUCING_BITS</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rc_bittree_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>probability</name> <modifier>*</modifier><specifier>const</specifier></type> <name>probs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit_levels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>price</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>symbol</name> <operator>+=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>bit_levels</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name> <init>= <expr><name>symbol</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>symbol</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_price</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>symbol</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>;</do>

<return>return <expr><name>price</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rc_bittree_reverse_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>probability</name> <modifier>*</modifier><specifier>const</specifier></type> <name>probs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>bit_levels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>price</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>model_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name> <init>= <expr><name>symbol</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>symbol</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_price</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>model_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>model_index</name> <operator>=</operator> <operator>(</operator><name>model_index</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>bit_levels</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>price</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rc_direct_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>bits</name> <operator>&lt;&lt;</operator> <name>RC_BIT_PRICE_SHIFT_BITS</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
