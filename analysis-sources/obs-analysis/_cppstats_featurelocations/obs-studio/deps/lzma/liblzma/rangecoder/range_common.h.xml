<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\rangecoder\range_common.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_RANGE_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_RANGE_COMMON_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_SHIFT_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_TOP_BITS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_TOP_VALUE</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; RC_TOP_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_BIT_MODEL_TOTAL_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_BIT_MODEL_TOTAL</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; RC_BIT_MODEL_TOTAL_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_MOVE_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_reset</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>prob = RC_BIT_MODEL_TOTAL &gt;&gt; 1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bittree_reset</name><parameter_list>(<parameter><type><name>probs</name></type></parameter>, <parameter><type><name>bit_levels</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (uint32_t bt_i = 0; bt_i &lt; (1 &lt;&lt; (bit_levels)); ++bt_i) bit_reset((probs)[bt_i])</cpp:value></cpp:define>


























<typedef>typedef <type><name>uint16_t</name></type> <name>probability</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
