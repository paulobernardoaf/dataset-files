<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\rangecoder\range_decoder.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_RANGE_DECODER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_RANGE_DECODER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range_common.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_bytes_left</name></decl>;</decl_stmt>
}</block></struct></type> <name>lzma_range_decoder</name>;</typedef>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>rc_read_init</name><parameter_list>(<parameter><decl><type><name>lzma_range_decoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>init_bytes_left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>in</name><index>[<expr><operator>*</operator><name>in_pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>in_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>rc</name><operator>-&gt;</operator><name>init_bytes_left</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_to_local</name><parameter_list>(<parameter><type><name>range_decoder</name></type></parameter>, <parameter><type><name>in_pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lzma_range_decoder rc = range_decoder; size_t rc_in_pos = (in_pos); uint32_t rc_bound</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_from_local</name><parameter_list>(<parameter><type><name>range_decoder</name></type></parameter>, <parameter><type><name>in_pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { range_decoder = rc; in_pos = rc_in_pos; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_reset</name><parameter_list>(<parameter><type><name>range_decoder</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (range_decoder).range = UINT32_MAX; (range_decoder).code = 0; (range_decoder).init_bytes_left = 5; } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_is_finished</name><parameter_list>(<parameter><type><name>range_decoder</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((range_decoder).code == 0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_normalize</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (rc.range &lt; RC_TOP_VALUE) { if (unlikely(rc_in_pos == in_size)) { coder-&gt;sequence = seq; goto out; } rc.range &lt;&lt;= RC_SHIFT_BITS; rc.code = (rc.code &lt;&lt; RC_SHIFT_BITS) | in[rc_in_pos++]; } } while (0)</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_if_0</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rc_normalize(seq); rc_bound = (rc.range &gt;&gt; RC_BIT_MODEL_TOTAL_BITS) * (prob); if (rc.code &lt; rc_bound)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_update_0</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rc.range = rc_bound; prob += (RC_BIT_MODEL_TOTAL - (prob)) &gt;&gt; RC_MOVE_BITS; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_update_1</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rc.range -= rc_bound; rc.code -= rc_bound; prob -= (prob) &gt;&gt; RC_MOVE_BITS; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_bit_last</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>, <parameter><type><name>action0</name></type></parameter>, <parameter><type><name>action1</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rc_if_0(prob, seq) { rc_update_0(prob); action0; } else { rc_update_1(prob); action1; } } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_bit</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>, <parameter><type><name>action0</name></type></parameter>, <parameter><type><name>action1</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rc_bit_last(prob, symbol &lt;&lt;= 1; action0, symbol = (symbol &lt;&lt; 1) + 1; action1, seq);</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_bit_case</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>, <parameter><type><name>action0</name></type></parameter>, <parameter><type><name>action1</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case seq: rc_bit(prob, action0, action1, seq)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc_direct</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rc_normalize(seq); rc.range &gt;&gt;= 1; rc.code -= rc.range; rc_bound = UINT32_C(0) - (rc.code &gt;&gt; 31); rc.code += rc.range &amp; rc_bound; dest = (dest &lt;&lt; 1) + (rc_bound + 1); } while (0)</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
