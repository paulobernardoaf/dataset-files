<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\rangecoder\range_encoder.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_RANGE_ENCODER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_RANGE_ENCODER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"price.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_SYMBOLS_MAX</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cache</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>


<enum>enum <block>{
<decl><name>RC_BIT_0</name></decl>,
<decl><name>RC_BIT_1</name></decl>,
<decl><name>RC_DIRECT_0</name></decl>,
<decl><name>RC_DIRECT_1</name></decl>,
<decl><name>RC_FLUSH</name></decl>,
}</block> <decl><name><name>symbols</name><index>[<expr><name>RC_SYMBOLS_MAX</name></expr>]</index></name></decl>;</enum>


<decl_stmt><decl><type><name>probability</name> <modifier>*</modifier></type><name><name>probs</name><index>[<expr><name>RC_SYMBOLS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_range_encoder</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rc_reset</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rc_bit</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>probability</name> <modifier>*</modifier></type><name>prob</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>probs</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>prob</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>rc</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rc_bittree</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>probability</name> <modifier>*</modifier></type><name>probs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>bit_count</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>model_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>symbol</name> <operator>&gt;&gt;</operator> <operator>--</operator><name>bit_count</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>probs</name><index>[<expr><name>model_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>model_index</name> <operator>=</operator> <operator>(</operator><name>model_index</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>bit_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rc_bittree_reverse</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>probability</name> <modifier>*</modifier></type><name>probs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>bit_count</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>model_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name> <init>= <expr><name>symbol</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>symbol</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>probs</name><index>[<expr><name>model_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>model_index</name> <operator>=</operator> <operator>(</operator><name>model_index</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>bit_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rc_direct</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name>
<operator>=</operator> <name>RC_DIRECT_0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <operator>--</operator><name>bit_count</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>bit_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rc_flush</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>RC_FLUSH</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>rc_shift_low</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>low</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">0xFF000000</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>==</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>*</operator><name>out_pos</name></expr>]</index></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>cache</name></name> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>out_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name><name>rc</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>rc</name><operator>-&gt;</operator><name>cache_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>RC_SHIFT_BITS</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>rc_encode</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <name>RC_SYMBOLS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;</operator> <name>RC_TOP_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rc_shift_low</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <name>RC_SHIFT_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RC_BIT_0</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>probability</name></type> <name>prob</name> <init>= <expr><operator>*</operator><name><name>rc</name><operator>-&gt;</operator><name>probs</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;</operator> <name>RC_BIT_MODEL_TOTAL_BITS</name><operator>)</operator>
<operator>*</operator> <name>prob</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prob</name> <operator>+=</operator> <operator>(</operator><name>RC_BIT_MODEL_TOTAL</name> <operator>-</operator> <name>prob</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RC_MOVE_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>rc</name><operator>-&gt;</operator><name>probs</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>prob</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RC_BIT_1</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>probability</name></type> <name>prob</name> <init>= <expr><operator>*</operator><name><name>rc</name><operator>-&gt;</operator><name>probs</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bound</name> <init>= <expr><name>prob</name> <operator>*</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>range</name></name>
<operator>&gt;&gt;</operator> <name>RC_BIT_MODEL_TOTAL_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name>bound</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <name>bound</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prob</name> <operator>-=</operator> <name>prob</name> <operator>&gt;&gt;</operator> <name>RC_MOVE_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>rc</name><operator>-&gt;</operator><name>probs</name><index>[<expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>prob</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RC_DIRECT_0</name></expr>:</case>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RC_DIRECT_1</name></expr>:</case>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RC_FLUSH</name></expr>:</case>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>


<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rc_shift_low</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>;</do>



<expr_stmt><expr><call><name>rc_reset</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>++</operator><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>rc_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>rc</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
