<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lzma\lzma_encoder_optimum_normal.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fastpos.h"</cpp:file></cpp:include>






<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>get_literal_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>prev_byte</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>match_mode</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>match_byte</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>probability</name> <modifier>*</modifier><specifier>const</specifier></type> <name>subcoder</name> <init>= <expr><call><name>literal_subcoder</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_context_bits</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_pos_mask</name></name></expr></argument>,
<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>prev_byte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>price</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>price</name> <operator>=</operator> <call><name>rc_bittree_price</name><argument_list>(<argument><expr><name>subcoder</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>symbol</name> <operator>+=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>match_byte</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>match_bit</name> <init>= <expr><name>match_byte</name> <operator>&amp;</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>subcoder_index</name>
<init>= <expr><name>offset</name> <operator>+</operator> <name>match_bit</name> <operator>+</operator> <operator>(</operator><name>symbol</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>symbol</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_price</name><argument_list>(<argument><expr><name><name>subcoder</name><index>[<expr><name>subcoder_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>match_byte</name> <operator>^</operator> <name>symbol</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>price</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>get_len_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_length_encoder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lencoder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><name><name>lencoder</name><operator>-&gt;</operator><name>prices</name><index>[<expr><name>pos_state</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <name>MATCH_LEN_MIN</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>get_short_rep_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>coder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_lzma_state</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>get_pure_rep_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>rep_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_lzma_state</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>price</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rep_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>price</name> <operator>=</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>price</name> <operator>=</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rep_index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>rc_bit_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep2</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>,
<argument><expr><name>rep_index</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>price</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>get_rep_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>rep_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_lzma_state</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_len_price</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>get_pure_rep_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>rep_index</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>get_pos_len_price</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_coder</name> <modifier>*</modifier><specifier>const</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_to_pos_state</name> <init>= <expr><call><name>get_len_to_pos_state</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>price</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>FULL_DISTANCES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>price</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>distances_prices</name><index>[<expr><name>len_to_pos_state</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_slot</name> <init>= <expr><call><name>get_pos_slot_2</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>price</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_slot_prices</name><index>[<expr><name>len_to_pos_state</name></expr>]</index><index>[<expr><name>pos_slot</name></expr>]</index></name>
<operator>+</operator> <name><name>coder</name><operator>-&gt;</operator><name>align_prices</name><index>[<expr><name>pos</name> <operator>&amp;</operator> <name>ALIGN_MASK</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>price</name> <operator>+=</operator> <call><name>get_len_price</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>match_len_encoder</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>price</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_distances_prices</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>len_to_pos_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>len_to_pos_state</name> <operator>&lt;</operator> <name>LEN_TO_POS_STATES</name></expr>;</condition>
<incr><expr><operator>++</operator><name>len_to_pos_state</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pos_slot_prices</name>
<init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>pos_slot_prices</name><index>[<expr><name>len_to_pos_state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>pos_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>pos_slot</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>dist_table_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pos_slot</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos_slot_prices</name><index>[<expr><name>pos_slot</name></expr>]</index></name> <operator>=</operator> <call><name>rc_bittree_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_slot</name><index>[<expr><name>len_to_pos_state</name></expr>]</index></name></expr></argument>,
<argument><expr><name>POS_SLOT_BITS</name></expr></argument>, <argument><expr><name>pos_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>pos_slot</name> <init>= <expr><name>END_POS_MODEL_INDEX</name></expr></init></decl>;</init>
<condition><expr><name>pos_slot</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>dist_table_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pos_slot</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos_slot_prices</name><index>[<expr><name>pos_slot</name></expr>]</index></name> <operator>+=</operator> <call><name>rc_direct_price</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator><name>pos_slot</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>ALIGN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>START_POS_MODEL_INDEX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>distances_prices</name><index>[<expr><name>len_to_pos_state</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>
<operator>=</operator> <name><name>pos_slot_prices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>




<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>START_POS_MODEL_INDEX</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FULL_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_slot</name> <init>= <expr><call><name>get_pos_slot</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>footer_bits</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pos_slot</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>base</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>|</operator> <operator>(</operator><name>pos_slot</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>footer_bits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>price</name> <init>= <expr><call><name>rc_bittree_reverse_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_special</name></name> <operator>+</operator> <name>base</name> <operator>-</operator> <name>pos_slot</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>footer_bits</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>len_to_pos_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>len_to_pos_state</name> <operator>&lt;</operator> <name>LEN_TO_POS_STATES</name></expr>;</condition>
<incr><expr><operator>++</operator><name>len_to_pos_state</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>distances_prices</name><index>[<expr><name>len_to_pos_state</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>
<operator>=</operator> <name>price</name> <operator>+</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_slot_prices</name><index>[
<expr><name>len_to_pos_state</name></expr>]</index><index>[<expr><name>pos_slot</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>match_price_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_align_prices</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALIGN_TABLE_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>align_prices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rc_bittree_reverse_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name></name></expr></argument>, <argument><expr><name>ALIGN_BITS</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>align_price_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>make_literal</name><parameter_list>(<parameter><decl><type><name>lzma_optimal</name> <modifier>*</modifier></type><name>optimal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>optimal</name><operator>-&gt;</operator><name>back_prev</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>optimal</name><operator>-&gt;</operator><name>prev_1_is_literal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>make_short_rep</name><parameter_list>(<parameter><decl><type><name>lzma_optimal</name> <modifier>*</modifier></type><name>optimal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>optimal</name><operator>-&gt;</operator><name>back_prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>optimal</name><operator>-&gt;</operator><name>prev_1_is_literal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_short_rep</name><parameter_list>(<parameter><type><name>optimal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((optimal).back_prev == 0)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>backward</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>len_res</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>back_res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts_end_index</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_mem</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>pos_prev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>back_mem</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>back_prev</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>make_literal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_mem</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_mem</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>pos_mem</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_mem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name>
<operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_mem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name>
<operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>pos_prev_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_mem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>back_prev</name>
<operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>back_prev_2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_prev</name> <init>= <expr><name>pos_mem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>back_cur</name> <init>= <expr><name>back_mem</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>back_mem</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name>back_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_mem</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name>pos_prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>=</operator> <name>back_cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>pos_prev</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>cur</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>back_prev</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>helper1</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>back_res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>len_res</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>nice_len</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_main</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>matches_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_main</name> <operator>=</operator> <call><name>mf_find</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches_count</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_main</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches_count</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_avail</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><call><name>mf_avail</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MATCH_LEN_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_avail</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rep_lens</name><index>[<expr><name>REP_DISTANCES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep_max_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_back</name> <init>= <expr><name>buf</name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>not_equal_16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_back</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep_lens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_test</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>len_test</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>len_test</name> <operator>&lt;</operator> <name>buf_avail</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len_test</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len_test</name></expr>]</index></name></expr>;</condition>
<incr><expr><operator>++</operator><name>len_test</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>rep_lens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>len_test</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len_test</name> <operator>&gt;</operator> <name><name>rep_lens</name><index>[<expr><name>rep_max_index</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rep_max_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>rep_lens</name><index>[<expr><name>rep_max_index</name></expr>]</index></name> <operator>&gt;=</operator> <name>nice_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>rep_max_index</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name><name>rep_lens</name><index>[<expr><name>rep_max_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>*</operator><name>len_res</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len_main</name> <operator>&gt;=</operator> <name>nice_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dist</name>
<operator>+</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name>len_main</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>len_main</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>current_byte</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>match_byte</name> <init>= <expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len_main</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>current_byte</name> <operator>!=</operator> <name>match_byte</name>
<operator>&amp;&amp;</operator> <name><name>rep_lens</name><index>[<expr><name>rep_max_index</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name> <init>= <expr><name>position</name> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <call><name>rc_bit_0_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>get_literal_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>!</operator><call><name>is_literal_state</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>match_byte</name></expr></argument>, <argument><expr><name>current_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_literal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>match_price</name> <init>= <expr><call><name>rc_bit_1_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>rep_match_price</name> <init>= <expr><name>match_price</name>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>match_byte</name> <operator>==</operator> <name>current_byte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>short_rep_price</name> <init>= <expr><name>rep_match_price</name>
<operator>+</operator> <call><name>get_short_rep_price</name><argument_list>(
<argument><expr><name>coder</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>short_rep_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>short_rep_price</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_short_rep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_end</name> <init>= <expr><call><name>my_max</name><argument_list>(<argument><expr><name>len_main</name></expr></argument>, <argument><expr><name><name>rep_lens</name><index>[<expr><name>rep_max_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len_end</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>back_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>backs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><name>len_end</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>RC_INFINITY_PRICE</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>;</do>


<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep_len</name> <init>= <expr><name><name>rep_lens</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rep_len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>price</name> <init>= <expr><name>rep_match_price</name> <operator>+</operator> <call><name>get_pure_rep_price</name><argument_list>(
<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_price</name> <init>= <expr><name>price</name>
<operator>+</operator> <call><name>get_len_price</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name></name></expr></argument>,
<argument><expr><name>rep_len</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>rep_len</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>rep_len</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>rep_len</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>rep_len</name></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>rep_len</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>rep_len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>;</do>
</block_content>}</block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>normal_match_price</name> <init>= <expr><name>match_price</name>
<operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name><name>rep_lens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>rep_lens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>len_main</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

<for>for<control>(<init>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>dist</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_price</name> <init>= <expr><name>normal_match_price</name>
<operator>+</operator> <call><name>get_pos_len_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>,
<argument><expr><name>dist</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>back_prev</name>
<operator>=</operator> <name>dist</name> <operator>+</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>matches_count</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>len_end</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>helper2</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>reps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>len_end</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>nice_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_avail_full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>matches_count</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>matches_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_len</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_prev</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>pos_prev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>pos_prev</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>pos_prev_2</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>back_prev_2</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_long_rep</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_match</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>update_literal</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_prev</name> <operator>==</operator> <name>cur</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_short_rep</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_short_rep</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_literal</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name>
<operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos_prev</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>pos_prev_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>back_prev_2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_long_rep</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>back_prev</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_long_rep</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_match</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name><name>backs</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>pos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name><name>backs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name><name>backs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>pos_prev</name></expr>]</index></name><operator>.</operator><name><name>backs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name><name>backs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_price</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>price</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>current_byte</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>match_byte</name> <init>= <expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>-</operator> <name><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name> <init>= <expr><name>position</name> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_1_price</name> <init>= <expr><name>cur_price</name>
<operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>get_literal_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>!</operator><call><name>is_literal_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>match_byte</name></expr></argument>, <argument><expr><name>current_byte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>next_is_literal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_1_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_1_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_literal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_is_literal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>match_price</name> <init>= <expr><name>cur_price</name>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>rep_match_price</name> <init>= <expr><name>match_price</name>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>match_byte</name> <operator>==</operator> <name>current_byte</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>&lt;</operator> <name>cur</name>
<operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>short_rep_price</name> <init>= <expr><name>rep_match_price</name>
<operator>+</operator> <call><name>get_short_rep_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>short_rep_price</name> <operator>&lt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>short_rep_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_short_rep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_is_literal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_avail_full</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len_end</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_avail</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>buf_avail_full</name></expr></argument>, <argument><expr><name>nice_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_is_literal</name> <operator>&amp;&amp;</operator> <name>match_byte</name> <operator>!=</operator> <name>current_byte</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_back</name> <init>= <expr><name>buf</name> <operator>-</operator> <name><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>limit</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>buf_avail_full</name></expr></argument>, <argument><expr><name>nice_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_test</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len_test</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len_test</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len_test</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len_test</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>--</operator><name>len_test</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_test</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state_2</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>update_literal</name><argument_list>(<argument><expr><name>state_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state_next</name> <init>= <expr><operator>(</operator><name>position</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>next_rep_match_price</name> <init>= <expr><name>cur_and_1_price</name>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state_2</name></expr>]</index><index>[<expr><name>pos_state_next</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state_2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>offset</name> <init>= <expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len_test</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len_end</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><operator>++</operator><name>len_end</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>RC_INFINITY_PRICE</name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_price</name> <init>= <expr><name>next_rep_match_price</name>
<operator>+</operator> <call><name>get_rep_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len_test</name></expr></argument>,
<argument><expr><name>state_2</name></expr></argument>, <argument><expr><name>pos_state_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>prev_2</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>rep_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>rep_index</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>rep_index</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_back</name> <init>= <expr><name>buf</name> <operator>-</operator> <name><name>reps</name><index>[<expr><name>rep_index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>not_equal_16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_back</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_test</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>len_test</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>len_test</name> <operator>&lt;</operator> <name>buf_avail</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len_test</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len_test</name></expr>]</index></name></expr>;</condition>
<incr><expr><operator>++</operator><name>len_test</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<while>while <condition>(<expr><name>len_end</name> <operator>&lt;</operator> <name>cur</name> <operator>+</operator> <name>len_test</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><operator>++</operator><name>len_end</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>RC_INFINITY_PRICE</name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_test_temp</name> <init>= <expr><name>len_test</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>price</name> <init>= <expr><name>rep_match_price</name> <operator>+</operator> <call><name>get_pure_rep_price</name><argument_list>(
<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>rep_index</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_price</name> <init>= <expr><name>price</name>
<operator>+</operator> <call><name>get_len_price</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name></name></expr></argument>,
<argument><expr><name>len_test</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>=</operator> <name>rep_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len_test</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>len_test</name> <operator>=</operator> <name>len_test_temp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rep_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_len</name> <operator>=</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_test_2</name> <init>= <expr><name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>limit</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>buf_avail_full</name></expr></argument>,
<argument><expr><name>len_test_2</name> <operator>+</operator> <name>nice_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>len_test_2</name> <operator>&lt;</operator> <name>limit</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len_test_2</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len_test_2</name></expr>]</index></name></expr>;</condition>
<incr><expr><operator>++</operator><name>len_test_2</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>len_test_2</name> <operator>-=</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_test_2</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state_2</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>update_long_rep</name><argument_list>(<argument><expr><name>state_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_state_next</name> <init>= <expr><operator>(</operator><name>position</name> <operator>+</operator> <name>len_test</name><operator>)</operator> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_literal_price</name> <init>= <expr><name>price</name>
<operator>+</operator> <call><name>get_len_price</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name></name></expr></argument>,
<argument><expr><name>len_test</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state_2</name></expr>]</index><index>[<expr><name>pos_state_next</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>get_literal_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <name>len_test</name></expr></argument>,
<argument><expr><name><name>buf</name><index>[<expr><name>len_test</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name><name>buf_back</name><index>[<expr><name>len_test</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>len_test</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_literal</name><argument_list>(<argument><expr><name>state_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos_state_next</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>next_rep_match_price</name> <init>= <expr><name>cur_and_len_literal_price</name>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state_2</name></expr>]</index><index>[<expr><name>pos_state_next</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state_2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>offset</name> <init>= <expr><name>cur</name> <operator>+</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len_test_2</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len_end</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><operator>++</operator><name>len_end</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>RC_INFINITY_PRICE</name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_price</name> <init>= <expr><name>next_rep_match_price</name>
<operator>+</operator> <call><name>get_rep_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len_test_2</name></expr></argument>,
<argument><expr><name>state_2</name></expr></argument>, <argument><expr><name>pos_state_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name> <operator>+</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>prev_2</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>pos_prev_2</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>back_prev_2</name> <operator>=</operator> <name>rep_index</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&gt;</operator> <name>buf_avail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name>buf_avail</name></expr>;</expr_stmt>

<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>new_len</name> <operator>&gt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>matches_count</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&gt;=</operator> <name>start_len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>normal_match_price</name> <init>= <expr><name>match_price</name>
<operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len_end</name> <operator>&lt;</operator> <name>cur</name> <operator>+</operator> <name>new_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><operator>++</operator><name>len_end</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>RC_INFINITY_PRICE</name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>start_len</name> <operator>&gt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>len_test</name> <init>= <expr><name>start_len</name></expr></init></decl>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>len_test</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_back</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_and_len_price</name> <init>= <expr><name>normal_match_price</name>
<operator>+</operator> <call><name>get_pos_len_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>,
<argument><expr><name>cur_back</name></expr></argument>, <argument><expr><name>len_test</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>back_prev</name>
<operator>=</operator> <name>cur_back</name> <operator>+</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>cur</name> <operator>+</operator> <name>len_test</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_test</name> <operator>==</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_back</name> <init>= <expr><name>buf</name> <operator>-</operator> <name>cur_back</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_test_2</name> <init>= <expr><name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>limit</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>buf_avail_full</name></expr></argument>,
<argument><expr><name>len_test_2</name> <operator>+</operator> <name>nice_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>len_test_2</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator>
<name><name>buf</name><index>[<expr><name>len_test_2</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len_test_2</name></expr>]</index></name></expr>;</condition>
<incr><expr><operator>++</operator><name>len_test_2</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>len_test_2</name> <operator>-=</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_test_2</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state_2</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>update_match</name><argument_list>(<argument><expr><name>state_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_state_next</name>
<init>= <expr><operator>(</operator><name>position</name> <operator>+</operator> <name>len_test</name><operator>)</operator> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_and_len_literal_price</name> <init>= <expr><name>cur_and_len_price</name>
<operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state_2</name></expr>]</index><index>[<expr><name>pos_state_next</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>get_literal_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>,
<argument><expr><name>position</name> <operator>+</operator> <name>len_test</name></expr></argument>,
<argument><expr><name><name>buf</name><index>[<expr><name>len_test</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>true</name></expr></argument>,
<argument><expr><name><name>buf_back</name><index>[<expr><name>len_test</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>buf</name><index>[<expr><name>len_test</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_literal</name><argument_list>(<argument><expr><name>state_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_state_next</name> <operator>=</operator> <operator>(</operator><name>pos_state_next</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>next_rep_match_price</name>
<init>= <expr><name>cur_and_len_literal_price</name>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state_2</name></expr>]</index><index>[<expr><name>pos_state_next</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state_2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>offset</name> <init>= <expr><name>cur</name> <operator>+</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len_test_2</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len_end</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><operator>++</operator><name>len_end</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>RC_INFINITY_PRICE</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>cur_and_len_price</name> <operator>=</operator> <name>next_rep_match_price</name>
<operator>+</operator> <call><name>get_rep_price</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len_test_2</name></expr></argument>,
<argument><expr><name>state_2</name></expr></argument>, <argument><expr><name>pos_state_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_and_len_price</name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>price</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>=</operator> <name>cur_and_len_price</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>pos_prev</name> <operator>=</operator> <name>cur</name> <operator>+</operator> <name>len_test</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>back_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>prev_1_is_literal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>prev_2</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>pos_prev_2</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>back_prev_2</name>
<operator>=</operator> <name>cur_back</name> <operator>+</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>matches_count</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>len_end</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_lzma_optimum_normal</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>back_res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>len_res</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opts_end_index</name></name> <operator>!=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name></expr>]</index></name><operator>.</operator><name>pos_prev</name>
<operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name></expr>]</index></name><operator>.</operator><name>back_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>opts</name><index>[
<expr><name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name></expr>]</index></name><operator>.</operator><name>pos_prev</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>match_price_count</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_distances_prices</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>align_price_count</name></name> <operator>&gt;=</operator> <name>ALIGN_TABLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_align_prices</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_end</name> <init>= <expr><call><name>helper1</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><name>back_res</name></expr></argument>, <argument><expr><name>len_res</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len_end</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reps</name><index>[<expr><name>REP_DISTANCES</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>reps</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cur</name> <operator>&lt;</operator> <name>len_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>cur</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cur</name> <operator>&lt;</operator> <name>OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>=</operator> <call><name>mf_find</name><argument_list>(
<argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>matches_count</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>&gt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len_end</name> <operator>=</operator> <call><name>helper2</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>reps</name></expr></argument>, <argument><expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len_end</name></expr></argument>,
<argument><expr><name>position</name> <operator>+</operator> <name>cur</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr></argument>,
<argument><expr><call><name>my_min</name><argument_list>(<argument><expr><call><name>mf_avail</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>OPTS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>backward</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>len_res</name></expr></argument>, <argument><expr><name>back_res</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>
</unit>
