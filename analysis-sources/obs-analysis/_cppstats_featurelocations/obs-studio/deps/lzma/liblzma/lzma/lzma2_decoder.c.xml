<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lzma\lzma2_decoder.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma2_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_decoder.h"</cpp:file></cpp:include>


<struct>struct <name>lzma_coder_s</name> <block>{
<enum>enum <name>sequence</name> <block>{
<decl><name>SEQ_CONTROL</name></decl>,
<decl><name>SEQ_UNCOMPRESSED_1</name></decl>,
<decl><name>SEQ_UNCOMPRESSED_2</name></decl>,
<decl><name>SEQ_COMPRESSED_0</name></decl>,
<decl><name>SEQ_COMPRESSED_1</name></decl>,
<decl><name>SEQ_PROPERTIES</name></decl>,
<decl><name>SEQ_LZMA</name></decl>,
<decl><name>SEQ_COPY</name></decl>,
}</block> <decl><name>sequence</name></decl>;</enum>


<decl_stmt><decl><type><name><name>enum</name> <name>sequence</name></name></type> <name>next_sequence</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_lz_decoder</name></type> <name>lzma</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>compressed_size</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>need_properties</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>need_dictionary_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_options_lzma</name></type> <name>options</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>lzma2_decode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dict</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<while>while <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&lt;</operator> <name>in_size</name> <operator>||</operator> <name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>SEQ_LZMA</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEQ_CONTROL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>control</name> <init>= <expr><name><name>in</name><index>[<expr><operator>*</operator><name>in_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>in_pos</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>control</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>control</name> <operator>&gt;=</operator> <literal type="number">0xE0</literal> <operator>||</operator> <name>control</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>control</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <operator>(</operator><name>control</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_UNCOMPRESSED_1</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>control</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>next_sequence</name></name> <operator>=</operator> <name>SEQ_PROPERTIES</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>next_sequence</name></name> <operator>=</operator> <name>SEQ_LZMA</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>control</name> <operator>&gt;=</operator> <literal type="number">0xA0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>control</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_COMPRESSED_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>next_sequence</name></name> <operator>=</operator> <name>SEQ_COPY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_reset</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>SEQ_UNCOMPRESSED_1</name></expr>:</case>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_UNCOMPRESSED_2</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEQ_UNCOMPRESSED_2</name></expr>:</case>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_COMPRESSED_0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>set_uncompressed</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEQ_COMPRESSED_0</name></expr>:</case>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_COMPRESSED_1</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEQ_COMPRESSED_1</name></expr>:</case>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>+=</operator> <name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>next_sequence</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEQ_PROPERTIES</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>lzma_lzma_lclppb_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_LZMA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEQ_LZMA</name></expr>:</case> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_start</name> <init>= <expr><operator>*</operator><name>in_pos</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>coder</name></name></expr></argument>,
<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_used</name> <init>= <expr><operator>*</operator><name>in_pos</name> <operator>-</operator> <name>in_start</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>in_used</name> <operator>&gt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>-=</operator> <name>in_used</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CONTROL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>SEQ_COPY</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>dict_write</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CONTROL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>
</block_content>}</block></switch></block_content></block></while>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>lzma2_decoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lzma_ret</name></type>
<name>lzma2_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_lz_decoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma2_decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma2_decoder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lzma</name></name> <operator>=</operator> <name>LZMA_LZ_DECODER_INIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>opt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CONTROL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_lzma_decoder_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lzma</name></name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>lz_options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_lzma2_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>init</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_lz_decoder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lzma2_decoder_init</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>uint64_t</name></type>
<name>lzma_lzma2_decoder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <call><name>lzma_lzma_decoder_memusage_nocheck</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>
<name>lzma_lzma2_props_decode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>props_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>props_size</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_options_lzma</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>lzma_alloc</name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_lzma</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>|</operator> <operator>(</operator><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>&lt;&lt;=</operator> <name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>options</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
