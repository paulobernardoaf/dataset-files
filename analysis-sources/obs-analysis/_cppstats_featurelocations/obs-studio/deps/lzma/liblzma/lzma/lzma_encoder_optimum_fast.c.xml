<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lzma\lzma_encoder_optimum_fast.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder_private.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_pair</name><parameter_list>(<parameter><type><name>small_dist</name></type></parameter>, <parameter><type><name>big_dist</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((big_dist) &gt;&gt; 7) &gt; (small_dist))</cpp:value></cpp:define>



<function><type><specifier>extern</specifier> <name>void</name></type>
<name>lzma_lzma_optimum_fast</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>back_res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>len_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>nice_len</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>nice_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len_main</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>matches_count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_main</name> <operator>=</operator> <call><name>mf_find</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches_count</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_main</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches_count</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches_count</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>mf_ptr</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_avail</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><call><name>mf_avail</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MATCH_LEN_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_avail</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_back</name> <init>= <expr><name>buf</name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>not_equal_16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_back</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>buf_avail</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>nice_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>rep_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rep_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rep_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>len_main</name> <operator>&gt;=</operator> <name>nice_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dist</name>
<operator>+</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name>len_main</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>len_main</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>back_main</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len_main</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>back_main</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dist</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>matches_count</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len_main</name> <operator>==</operator>
<name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>change_pair</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[
<expr><name>matches_count</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dist</name></expr></argument>,
<argument><expr><name>back_main</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>matches_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_main</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>back_main</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>matches_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dist</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len_main</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>back_main</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len_main</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rep_len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rep_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>len_main</name>
<operator>||</operator> <operator>(</operator><name>rep_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>len_main</name>
<operator>&amp;&amp;</operator> <name>back_main</name> <operator>&gt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>rep_len</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>len_main</name>
<operator>&amp;&amp;</operator> <name>back_main</name> <operator>&gt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>rep_index</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name>rep_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>rep_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_main</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>buf_avail</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>=</operator> <call><name>mf_find</name><argument_list>(<argument><expr><name>mf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>matches_count</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>new_dist</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>matches</name><index>[
<expr><name><name>coder</name><operator>-&gt;</operator><name>matches_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dist</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>&gt;=</operator> <name>len_main</name>
<operator>&amp;&amp;</operator> <name>new_dist</name> <operator>&lt;</operator> <name>back_main</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>==</operator> <name>len_main</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>change_pair</name><argument_list>(<argument><expr><name>back_main</name></expr></argument>, <argument><expr><name>new_dist</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>&gt;</operator> <name>len_main</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>longest_match_length</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>len_main</name>
<operator>&amp;&amp;</operator> <name>len_main</name> <operator>&gt;=</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>change_pair</name><argument_list>(<argument><expr><name>new_dist</name></expr></argument>, <argument><expr><name>back_main</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>limit</name> <init>= <expr><name>len_main</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_back</name> <init>= <expr><name>buf</name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>not_equal_16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_back</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>limit</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name><name>buf_back</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>back_res</name> <operator>=</operator> <name>back_main</name> <operator>+</operator> <name>REP_DISTANCES</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_res</name> <operator>=</operator> <name>len_main</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>len_main</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>
</unit>
