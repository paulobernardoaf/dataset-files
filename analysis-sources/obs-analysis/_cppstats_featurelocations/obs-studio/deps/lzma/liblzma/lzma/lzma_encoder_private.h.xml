<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\lzma\liblzma\lzma\lzma_encoder_private.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_LZMA_ENCODER_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_LZMA_ENCODER_PRIVATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_FAST_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>not_equal_16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(const uint16_t *)(a) != *(const uint16_t *)(b))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>not_equal_16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)[0] != (b)[0] || (a)[1] != (b)[1])</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>probability</name></type> <name>choice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name>choice2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>low</name><index>[<expr><name>POS_STATES_MAX</name></expr>]</index><index>[<expr><name>LEN_LOW_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>mid</name><index>[<expr><name>POS_STATES_MAX</name></expr>]</index><index>[<expr><name>LEN_MID_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>high</name><index>[<expr><name>LEN_HIGH_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>prices</name><index>[<expr><name>POS_STATES_MAX</name></expr>]</index><index>[<expr><name>LEN_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>table_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>counters</name><index>[<expr><name>POS_STATES_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_length_encoder</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>prev_1_is_literal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prev_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_prev_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>back_prev_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>price</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_prev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>back_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>backs</name><index>[<expr><name>REP_DISTANCES</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_optimal</name>;</typedef>


<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_range_encoder</name></type> <name>rc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reps</name><index>[<expr><name>REP_DISTANCES</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lzma_match</name></type> <name><name>matches</name><index>[<expr><name>MATCH_LEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>matches_count</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>longest_match_length</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>fast_mode</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>is_initialized</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>is_flushed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>literal_context_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>literal_pos_mask</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>probability</name></type> <name><name>literal</name><index>[<expr><name>LITERAL_CODERS_MAX</name></expr>]</index><index>[<expr><name>LITERAL_CODER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>is_match</name><index>[<expr><name>STATES</name></expr>]</index><index>[<expr><name>POS_STATES_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep0</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep1</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep2</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep0_long</name><index>[<expr><name>STATES</name></expr>]</index><index>[<expr><name>POS_STATES_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>pos_slot</name><index>[<expr><name>LEN_TO_POS_STATES</name></expr>]</index><index>[<expr><name>POS_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>pos_special</name><index>[<expr><name>FULL_DISTANCES</name> <operator>-</operator> <name>END_POS_MODEL_INDEX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>probability</name></type> <name><name>pos_align</name><index>[<expr><name>ALIGN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lzma_length_encoder</name></type> <name>match_len_encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_length_encoder</name></type> <name>rep_len_encoder</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pos_slot_prices</name><index>[<expr><name>LEN_TO_POS_STATES</name></expr>]</index><index>[<expr><name>POS_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>distances_prices</name><index>[<expr><name>LEN_TO_POS_STATES</name></expr>]</index><index>[<expr><name>FULL_DISTANCES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dist_table_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>match_price_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>align_prices</name><index>[<expr><name>ALIGN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>align_price_count</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>opts_end_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>opts_current_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_optimal</name></type> <name><name>opts</name><index>[<expr><name>OPTS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_lzma_optimum_fast</name><parameter_list>(
<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>back_res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>len_res</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_lzma_optimum_normal</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>,
<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>back_res</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>len_res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
