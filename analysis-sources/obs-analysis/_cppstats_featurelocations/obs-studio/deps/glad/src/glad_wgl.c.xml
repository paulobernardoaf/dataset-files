<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\glad\src\glad_wgl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/glad_wgl.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namez</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>libGL</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNWGLGETPROCADDRESSPROC_PRIVATE</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>PFNWGLGETPROCADDRESSPROC_PRIVATE</name></type> <name>gladGetProcAddressPtr</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>open_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"opengl32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gladGetProcAddressPtr</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPROCADDRESSPROC_PRIVATE</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(
<argument><expr><name>libGL</name></expr></argument>, <argument><expr><literal type="string">"wglGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>gladGetProcAddressPtr</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>close_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>libGL</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETPROCADDRESSPROC_PRIVATE</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>PFNGLXGETPROCADDRESSPROC_PRIVATE</name></type> <name>gladGetProcAddressPtr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>open_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>NAMES</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"../Frameworks/OpenGL.framework/OpenGL"</literal></expr>,
<expr><literal type="string">"/Library/Frameworks/OpenGL.framework/OpenGL"</literal></expr>,
<expr><literal type="string">"/System/Library/Frameworks/OpenGL.framework/OpenGL"</literal></expr>,
<expr><literal type="string">"/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>NAMES</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"libGL.so.1"</literal></expr>, <expr><literal type="string">"libGL.so"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>NAMES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>NAMES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name><name>NAMES</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>RTLD_NOW</name> <operator>|</operator> <name>RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>gladGetProcAddressPtr</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETPROCADDRESSPROC_PRIVATE</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>,
<argument><expr><literal type="string">"glXGetProcAddressARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>gladGetProcAddressPtr</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>close_gl</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier>
<name>void</name><modifier>*</modifier></type> <name>get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namez</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>gladGetProcAddressPtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gladGetProcAddressPtr</name><argument_list>(<argument><expr><name>namez</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>, <argument><expr><name>namez</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>, <argument><expr><name>namez</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gladLoadWGL</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>open_gl</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gladLoadWGLLoader</name><argument_list>(<argument><expr><operator>(</operator><name>GLADloadproc</name><operator>)</operator><name>get_proc</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_gl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>HDC</name></type> <name>GLADWGLhdc</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>terminator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>wglGetExtensionsStringEXT</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wglGetExtensionsStringARB</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wglGetExtensionsStringARB</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>GLADWGLhdc</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name>wglGetExtensionsStringEXT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name>wglGetExtensionsStringARB</name><argument_list>(<argument><expr><name>GLADWGLhdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>extensions</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>loc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>terminator</name> <operator>=</operator> <name>loc</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>loc</name> <operator>==</operator> <name>extensions</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>loc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_VERSION_1_0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_multisample_coverage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_I3D_image_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_I3D_swap_frame_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_DX_interop2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_float_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_delay_before_swap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_OML_sync_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_pixel_format_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_create_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_swap_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_gpu_affinity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_pixel_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_extensions_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_video_capture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_render_texture_rectangle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_create_context_es_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_robustness_share_group_isolation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_render_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_depth_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_swap_control_tear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_pixel_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_I3D_genlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_DX_interop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_3DL_stereo_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_pbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_display_color_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_video_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_robustness_application_isolation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_3DFX_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_I3D_gamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_copy_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_present_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_create_context_es2_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_create_context_robustness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_make_current_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_extensions_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_render_depth_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ATI_pixel_format_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_create_context_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_swap_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_I3D_digital_video_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_pbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_NV_vertex_array_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_AMD_gpu_association</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_pixel_format_packed_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_EXT_make_current_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_I3D_swap_frame_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_WGL_ARB_buffer_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEIMAGEBUFFERI3DPROC</name></type> <name>glad_wglCreateImageBufferI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDESTROYIMAGEBUFFERI3DPROC</name></type> <name>glad_wglDestroyImageBufferI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC</name></type> <name>glad_wglAssociateImageBufferEventsI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC</name></type> <name>glad_wglReleaseImageBufferEventsI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETFRAMEUSAGEI3DPROC</name></type> <name>glad_wglGetFrameUsageI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBEGINFRAMETRACKINGI3DPROC</name></type> <name>glad_wglBeginFrameTrackingI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENDFRAMETRACKINGI3DPROC</name></type> <name>glad_wglEndFrameTrackingI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYFRAMETRACKINGI3DPROC</name></type> <name>glad_wglQueryFrameTrackingI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDELAYBEFORESWAPNVPROC</name></type> <name>glad_wglDelayBeforeSwapNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETSYNCVALUESOMLPROC</name></type> <name>glad_wglGetSyncValuesOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETMSCRATEOMLPROC</name></type> <name>glad_wglGetMscRateOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSWAPBUFFERSMSCOMLPROC</name></type> <name>glad_wglSwapBuffersMscOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSWAPLAYERBUFFERSMSCOMLPROC</name></type> <name>glad_wglSwapLayerBuffersMscOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLWAITFORMSCOMLPROC</name></type> <name>glad_wglWaitForMscOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLWAITFORSBCOMLPROC</name></type> <name>glad_wglWaitForSbcOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATECONTEXTATTRIBSARBPROC</name></type> <name>glad_wglCreateContextAttribsARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLJOINSWAPGROUPNVPROC</name></type> <name>glad_wglJoinSwapGroupNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBINDSWAPBARRIERNVPROC</name></type> <name>glad_wglBindSwapBarrierNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYSWAPGROUPNVPROC</name></type> <name>glad_wglQuerySwapGroupNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYMAXSWAPGROUPSNVPROC</name></type> <name>glad_wglQueryMaxSwapGroupsNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYFRAMECOUNTNVPROC</name></type> <name>glad_wglQueryFrameCountNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRESETFRAMECOUNTNVPROC</name></type> <name>glad_wglResetFrameCountNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENUMGPUSNVPROC</name></type> <name>glad_wglEnumGpusNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENUMGPUDEVICESNVPROC</name></type> <name>glad_wglEnumGpuDevicesNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEAFFINITYDCNVPROC</name></type> <name>glad_wglCreateAffinityDCNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENUMGPUSFROMAFFINITYDCNVPROC</name></type> <name>glad_wglEnumGpusFromAffinityDCNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDELETEDCNVPROC</name></type> <name>glad_wglDeleteDCNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETPIXELFORMATATTRIBIVEXTPROC</name></type> <name>glad_wglGetPixelFormatAttribivEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETPIXELFORMATATTRIBFVEXTPROC</name></type> <name>glad_wglGetPixelFormatAttribfvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCHOOSEPIXELFORMATEXTPROC</name></type> <name>glad_wglChoosePixelFormatEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name></type> <name>glad_wglGetExtensionsStringARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBINDVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglBindVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC</name></type> <name>glad_wglEnumerateVideoCaptureDevicesNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglLockVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglQueryVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglReleaseVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBINDTEXIMAGEARBPROC</name></type> <name>glad_wglBindTexImageARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASETEXIMAGEARBPROC</name></type> <name>glad_wglReleaseTexImageARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSETPBUFFERATTRIBARBPROC</name></type> <name>glad_wglSetPbufferAttribARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETPIXELFORMATATTRIBIVARBPROC</name></type> <name>glad_wglGetPixelFormatAttribivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETPIXELFORMATATTRIBFVARBPROC</name></type> <name>glad_wglGetPixelFormatAttribfvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCHOOSEPIXELFORMATARBPROC</name></type> <name>glad_wglChoosePixelFormatARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENABLEGENLOCKI3DPROC</name></type> <name>glad_wglEnableGenlockI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDISABLEGENLOCKI3DPROC</name></type> <name>glad_wglDisableGenlockI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLISENABLEDGENLOCKI3DPROC</name></type> <name>glad_wglIsEnabledGenlockI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGENLOCKSOURCEI3DPROC</name></type> <name>glad_wglGenlockSourceI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGENLOCKSOURCEI3DPROC</name></type> <name>glad_wglGetGenlockSourceI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGENLOCKSOURCEEDGEI3DPROC</name></type> <name>glad_wglGenlockSourceEdgeI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGENLOCKSOURCEEDGEI3DPROC</name></type> <name>glad_wglGetGenlockSourceEdgeI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGENLOCKSAMPLERATEI3DPROC</name></type> <name>glad_wglGenlockSampleRateI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGENLOCKSAMPLERATEI3DPROC</name></type> <name>glad_wglGetGenlockSampleRateI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGENLOCKSOURCEDELAYI3DPROC</name></type> <name>glad_wglGenlockSourceDelayI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGENLOCKSOURCEDELAYI3DPROC</name></type> <name>glad_wglGetGenlockSourceDelayI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC</name></type> <name>glad_wglQueryGenlockMaxSourceDelayI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXSETRESOURCESHAREHANDLENVPROC</name></type> <name>glad_wglDXSetResourceShareHandleNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXOPENDEVICENVPROC</name></type> <name>glad_wglDXOpenDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXCLOSEDEVICENVPROC</name></type> <name>glad_wglDXCloseDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXREGISTEROBJECTNVPROC</name></type> <name>glad_wglDXRegisterObjectNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXUNREGISTEROBJECTNVPROC</name></type> <name>glad_wglDXUnregisterObjectNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXOBJECTACCESSNVPROC</name></type> <name>glad_wglDXObjectAccessNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXLOCKOBJECTSNVPROC</name></type> <name>glad_wglDXLockObjectsNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXUNLOCKOBJECTSNVPROC</name></type> <name>glad_wglDXUnlockObjectsNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSETSTEREOEMITTERSTATE3DLPROC</name></type> <name>glad_wglSetStereoEmitterState3DL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEPBUFFEREXTPROC</name></type> <name>glad_wglCreatePbufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETPBUFFERDCEXTPROC</name></type> <name>glad_wglGetPbufferDCEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASEPBUFFERDCEXTPROC</name></type> <name>glad_wglReleasePbufferDCEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDESTROYPBUFFEREXTPROC</name></type> <name>glad_wglDestroyPbufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYPBUFFEREXTPROC</name></type> <name>glad_wglQueryPbufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglCreateDisplayColorTableEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLLOADDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglLoadDisplayColorTableEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBINDDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglBindDisplayColorTableEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglDestroyDisplayColorTableEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETVIDEODEVICENVPROC</name></type> <name>glad_wglGetVideoDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASEVIDEODEVICENVPROC</name></type> <name>glad_wglReleaseVideoDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBINDVIDEOIMAGENVPROC</name></type> <name>glad_wglBindVideoImageNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASEVIDEOIMAGENVPROC</name></type> <name>glad_wglReleaseVideoImageNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSENDPBUFFERTOVIDEONVPROC</name></type> <name>glad_wglSendPbufferToVideoNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETVIDEOINFONVPROC</name></type> <name>glad_wglGetVideoInfoNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGAMMATABLEPARAMETERSI3DPROC</name></type> <name>glad_wglGetGammaTableParametersI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSETGAMMATABLEPARAMETERSI3DPROC</name></type> <name>glad_wglSetGammaTableParametersI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGAMMATABLEI3DPROC</name></type> <name>glad_wglGetGammaTableI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSETGAMMATABLEI3DPROC</name></type> <name>glad_wglSetGammaTableI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCOPYIMAGESUBDATANVPROC</name></type> <name>glad_wglCopyImageSubDataNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENUMERATEVIDEODEVICESNVPROC</name></type> <name>glad_wglEnumerateVideoDevicesNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBINDVIDEODEVICENVPROC</name></type> <name>glad_wglBindVideoDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYCURRENTCONTEXTNVPROC</name></type> <name>glad_wglQueryCurrentContextNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLMAKECONTEXTCURRENTARBPROC</name></type> <name>glad_wglMakeContextCurrentARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETCURRENTREADDCARBPROC</name></type> <name>glad_wglGetCurrentReadDCARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name></type> <name>glad_wglGetExtensionsStringEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSWAPINTERVALEXTPROC</name></type> <name>glad_wglSwapIntervalEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETSWAPINTERVALEXTPROC</name></type> <name>glad_wglGetSwapIntervalEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC</name></type> <name>glad_wglGetDigitalVideoParametersI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC</name></type> <name>glad_wglSetDigitalVideoParametersI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEPBUFFERARBPROC</name></type> <name>glad_wglCreatePbufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETPBUFFERDCARBPROC</name></type> <name>glad_wglGetPbufferDCARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRELEASEPBUFFERDCARBPROC</name></type> <name>glad_wglReleasePbufferDCARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDESTROYPBUFFERARBPROC</name></type> <name>glad_wglDestroyPbufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYPBUFFERARBPROC</name></type> <name>glad_wglQueryPbufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLALLOCATEMEMORYNVPROC</name></type> <name>glad_wglAllocateMemoryNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLFREEMEMORYNVPROC</name></type> <name>glad_wglFreeMemoryNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGPUIDSAMDPROC</name></type> <name>glad_wglGetGPUIDsAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETGPUINFOAMDPROC</name></type> <name>glad_wglGetGPUInfoAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETCONTEXTGPUIDAMDPROC</name></type> <name>glad_wglGetContextGPUIDAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC</name></type> <name>glad_wglCreateAssociatedContextAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC</name></type> <name>glad_wglCreateAssociatedContextAttribsAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC</name></type> <name>glad_wglDeleteAssociatedContextAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC</name></type> <name>glad_wglMakeAssociatedContextCurrentAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC</name></type> <name>glad_wglGetCurrentAssociatedContextAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC</name></type> <name>glad_wglBlitContextFramebufferAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLMAKECONTEXTCURRENTEXTPROC</name></type> <name>glad_wglMakeContextCurrentEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETCURRENTREADDCEXTPROC</name></type> <name>glad_wglGetCurrentReadDCEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLENABLEFRAMELOCKI3DPROC</name></type> <name>glad_wglEnableFrameLockI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDISABLEFRAMELOCKI3DPROC</name></type> <name>glad_wglDisableFrameLockI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLISENABLEDFRAMELOCKI3DPROC</name></type> <name>glad_wglIsEnabledFrameLockI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLQUERYFRAMELOCKMASTERI3DPROC</name></type> <name>glad_wglQueryFrameLockMasterI3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEBUFFERREGIONARBPROC</name></type> <name>glad_wglCreateBufferRegionARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDELETEBUFFERREGIONARBPROC</name></type> <name>glad_wglDeleteBufferRegionARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLSAVEBUFFERREGIONARBPROC</name></type> <name>glad_wglSaveBufferRegionARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLRESTOREBUFFERREGIONARBPROC</name></type> <name>glad_wglRestoreBufferRegionARB</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_I3D_image_buffer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_I3D_image_buffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCreateImageBufferI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEIMAGEBUFFERI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateImageBufferI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDestroyImageBufferI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDESTROYIMAGEBUFFERI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDestroyImageBufferI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglAssociateImageBufferEventsI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglAssociateImageBufferEventsI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleaseImageBufferEventsI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleaseImageBufferEventsI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_I3D_swap_frame_usage</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_I3D_swap_frame_usage</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetFrameUsageI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETFRAMEUSAGEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetFrameUsageI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglBeginFrameTrackingI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBEGINFRAMETRACKINGI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBeginFrameTrackingI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglEndFrameTrackingI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENDFRAMETRACKINGI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEndFrameTrackingI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryFrameTrackingI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYFRAMETRACKINGI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryFrameTrackingI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_delay_before_swap</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_delay_before_swap</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglDelayBeforeSwapNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDELAYBEFORESWAPNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDelayBeforeSwapNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_OML_sync_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_OML_sync_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetSyncValuesOML</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETSYNCVALUESOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetSyncValuesOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetMscRateOML</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETMSCRATEOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetMscRateOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSwapBuffersMscOML</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSWAPBUFFERSMSCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSwapBuffersMscOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSwapLayerBuffersMscOML</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSWAPLAYERBUFFERSMSCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSwapLayerBuffersMscOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglWaitForMscOML</name> <operator>=</operator> <operator>(</operator><name>PFNWGLWAITFORMSCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglWaitForMscOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglWaitForSbcOML</name> <operator>=</operator> <operator>(</operator><name>PFNWGLWAITFORSBCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglWaitForSbcOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_create_context</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_create_context</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCreateContextAttribsARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATECONTEXTATTRIBSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateContextAttribsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_swap_group</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_swap_group</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglJoinSwapGroupNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLJOINSWAPGROUPNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglJoinSwapGroupNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglBindSwapBarrierNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBINDSWAPBARRIERNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBindSwapBarrierNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQuerySwapGroupNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYSWAPGROUPNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQuerySwapGroupNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryMaxSwapGroupsNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYMAXSWAPGROUPSNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryMaxSwapGroupsNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryFrameCountNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYFRAMECOUNTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryFrameCountNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglResetFrameCountNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRESETFRAMECOUNTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglResetFrameCountNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_gpu_affinity</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_gpu_affinity</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglEnumGpusNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENUMGPUSNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnumGpusNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglEnumGpuDevicesNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENUMGPUDEVICESNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnumGpuDevicesNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglCreateAffinityDCNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEAFFINITYDCNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateAffinityDCNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglEnumGpusFromAffinityDCNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENUMGPUSFROMAFFINITYDCNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnumGpusFromAffinityDCNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDeleteDCNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDELETEDCNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDeleteDCNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_EXT_pixel_format</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_EXT_pixel_format</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetPixelFormatAttribivEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPIXELFORMATATTRIBIVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribivEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetPixelFormatAttribfvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPIXELFORMATATTRIBFVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribfvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglChoosePixelFormatEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCHOOSEPIXELFORMATEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglChoosePixelFormatEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_extensions_string</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_extensions_string</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetExtensionsStringARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_video_capture</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_video_capture</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglBindVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBINDVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBindVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglEnumerateVideoCaptureDevicesNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnumerateVideoCaptureDevicesNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglLockVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglLockVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleaseVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleaseVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_render_texture</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_render_texture</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglBindTexImageARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBINDTEXIMAGEARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBindTexImageARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleaseTexImageARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASETEXIMAGEARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleaseTexImageARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSetPbufferAttribARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSETPBUFFERATTRIBARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSetPbufferAttribARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_pixel_format</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_pixel_format</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetPixelFormatAttribivARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPIXELFORMATATTRIBIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetPixelFormatAttribfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPIXELFORMATATTRIBFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglChoosePixelFormatARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCHOOSEPIXELFORMATARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglChoosePixelFormatARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_I3D_genlock</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_I3D_genlock</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglEnableGenlockI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENABLEGENLOCKI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnableGenlockI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDisableGenlockI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDISABLEGENLOCKI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDisableGenlockI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglIsEnabledGenlockI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLISENABLEDGENLOCKI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglIsEnabledGenlockI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGenlockSourceI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGENLOCKSOURCEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGenlockSourceI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetGenlockSourceI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGENLOCKSOURCEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGenlockSourceI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGenlockSourceEdgeI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGENLOCKSOURCEEDGEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGenlockSourceEdgeI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetGenlockSourceEdgeI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGENLOCKSOURCEEDGEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGenlockSourceEdgeI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGenlockSampleRateI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGENLOCKSAMPLERATEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGenlockSampleRateI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetGenlockSampleRateI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGENLOCKSAMPLERATEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGenlockSampleRateI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGenlockSourceDelayI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGENLOCKSOURCEDELAYI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGenlockSourceDelayI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetGenlockSourceDelayI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGENLOCKSOURCEDELAYI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGenlockSourceDelayI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryGenlockMaxSourceDelayI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryGenlockMaxSourceDelayI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_DX_interop</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_DX_interop</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglDXSetResourceShareHandleNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXSETRESOURCESHAREHANDLENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXSetResourceShareHandleNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXOpenDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXOPENDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXOpenDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXCloseDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXCLOSEDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXCloseDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXRegisterObjectNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXREGISTEROBJECTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXRegisterObjectNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXUnregisterObjectNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXUNREGISTEROBJECTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXUnregisterObjectNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXObjectAccessNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXOBJECTACCESSNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXObjectAccessNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXLockObjectsNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXLOCKOBJECTSNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXLockObjectsNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDXUnlockObjectsNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDXUNLOCKOBJECTSNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDXUnlockObjectsNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_3DL_stereo_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_3DL_stereo_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglSetStereoEmitterState3DL</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSETSTEREOEMITTERSTATE3DLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSetStereoEmitterState3DL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_EXT_pbuffer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_EXT_pbuffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCreatePbufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEPBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreatePbufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetPbufferDCEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPBUFFERDCEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetPbufferDCEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleasePbufferDCEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASEPBUFFERDCEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleasePbufferDCEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDestroyPbufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDESTROYPBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDestroyPbufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryPbufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYPBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryPbufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_EXT_display_color_table</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_EXT_display_color_table</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCreateDisplayColorTableEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateDisplayColorTableEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglLoadDisplayColorTableEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLLOADDISPLAYCOLORTABLEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglLoadDisplayColorTableEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglBindDisplayColorTableEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBINDDISPLAYCOLORTABLEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBindDisplayColorTableEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDestroyDisplayColorTableEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDestroyDisplayColorTableEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_video_output</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_video_output</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetVideoDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETVIDEODEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetVideoDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleaseVideoDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASEVIDEODEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleaseVideoDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglBindVideoImageNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBINDVIDEOIMAGENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBindVideoImageNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleaseVideoImageNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASEVIDEOIMAGENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleaseVideoImageNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSendPbufferToVideoNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSENDPBUFFERTOVIDEONVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSendPbufferToVideoNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetVideoInfoNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETVIDEOINFONVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetVideoInfoNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_I3D_gamma</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_I3D_gamma</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetGammaTableParametersI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGAMMATABLEPARAMETERSI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGammaTableParametersI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSetGammaTableParametersI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSETGAMMATABLEPARAMETERSI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSetGammaTableParametersI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetGammaTableI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGAMMATABLEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGammaTableI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSetGammaTableI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSETGAMMATABLEI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSetGammaTableI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_copy_image</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_copy_image</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCopyImageSubDataNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCOPYIMAGESUBDATANVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCopyImageSubDataNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_present_video</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_present_video</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglEnumerateVideoDevicesNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENUMERATEVIDEODEVICESNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnumerateVideoDevicesNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglBindVideoDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBINDVIDEODEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBindVideoDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryCurrentContextNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYCURRENTCONTEXTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryCurrentContextNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_make_current_read</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_make_current_read</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglMakeContextCurrentARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLMAKECONTEXTCURRENTARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglMakeContextCurrentARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetCurrentReadDCARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETCURRENTREADDCARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetCurrentReadDCARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_EXT_extensions_string</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_EXT_extensions_string</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetExtensionsStringEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_EXT_swap_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_EXT_swap_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglSwapIntervalEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSWAPINTERVALEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetSwapIntervalEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETSWAPINTERVALEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_I3D_digital_video_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_I3D_digital_video_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetDigitalVideoParametersI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetDigitalVideoParametersI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSetDigitalVideoParametersI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSetDigitalVideoParametersI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_pbuffer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_pbuffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCreatePbufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEPBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreatePbufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetPbufferDCARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPBUFFERDCARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetPbufferDCARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglReleasePbufferDCARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRELEASEPBUFFERDCARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglReleasePbufferDCARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDestroyPbufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDESTROYPBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDestroyPbufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryPbufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYPBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryPbufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_NV_vertex_array_range</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_NV_vertex_array_range</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglAllocateMemoryNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLALLOCATEMEMORYNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglAllocateMemoryNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglFreeMemoryNV</name> <operator>=</operator> <operator>(</operator><name>PFNWGLFREEMEMORYNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglFreeMemoryNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_AMD_gpu_association</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_AMD_gpu_association</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglGetGPUIDsAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGPUIDSAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGPUIDsAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetGPUInfoAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETGPUINFOAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetGPUInfoAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetContextGPUIDAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETCONTEXTGPUIDAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetContextGPUIDAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglCreateAssociatedContextAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateAssociatedContextAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglCreateAssociatedContextAttribsAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateAssociatedContextAttribsAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDeleteAssociatedContextAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDeleteAssociatedContextAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglMakeAssociatedContextCurrentAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglMakeAssociatedContextCurrentAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetCurrentAssociatedContextAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetCurrentAssociatedContextAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglBlitContextFramebufferAMD</name> <operator>=</operator> <operator>(</operator><name>PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglBlitContextFramebufferAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_EXT_make_current_read</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_EXT_make_current_read</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglMakeContextCurrentEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLMAKECONTEXTCURRENTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglMakeContextCurrentEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglGetCurrentReadDCEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETCURRENTREADDCEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetCurrentReadDCEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_I3D_swap_frame_lock</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_I3D_swap_frame_lock</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglEnableFrameLockI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLENABLEFRAMELOCKI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglEnableFrameLockI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDisableFrameLockI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDISABLEFRAMELOCKI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDisableFrameLockI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglIsEnabledFrameLockI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLISENABLEDFRAMELOCKI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglIsEnabledFrameLockI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglQueryFrameLockMasterI3D</name> <operator>=</operator> <operator>(</operator><name>PFNWGLQUERYFRAMELOCKMASTERI3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglQueryFrameLockMasterI3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_WGL_ARB_buffer_region</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_buffer_region</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_wglCreateBufferRegionARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATEBUFFERREGIONARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglCreateBufferRegionARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglDeleteBufferRegionARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLDELETEBUFFERREGIONARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglDeleteBufferRegionARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglSaveBufferRegionARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLSAVEBUFFERREGIONARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglSaveBufferRegionARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_wglRestoreBufferRegionARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLRESTOREBUFFERREGIONARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglRestoreBufferRegionARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>find_extensionsWGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>GLAD_WGL_NV_multisample_coverage</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_multisample_coverage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_I3D_image_buffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_I3D_image_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_I3D_swap_frame_usage</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_I3D_swap_frame_usage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_DX_interop2</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_DX_interop2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_float_buffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_float_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_delay_before_swap</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_delay_before_swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_OML_sync_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_OML_sync_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_pixel_format_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_pixel_format_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_create_context</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_swap_group</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_swap_group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_gpu_affinity</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_gpu_affinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_pixel_format</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_pixel_format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_extensions_string</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_extensions_string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_video_capture</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_video_capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_render_texture_rectangle</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_render_texture_rectangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_create_context_es_profile</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_create_context_es_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_robustness_share_group_isolation</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_robustness_share_group_isolation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_render_texture</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_render_texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_depth_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_depth_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_swap_control_tear</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_swap_control_tear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_pixel_format</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_pixel_format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_I3D_genlock</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_I3D_genlock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_DX_interop</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_DX_interop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_3DL_stereo_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_3DL_stereo_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_pbuffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_pbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_display_color_table</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_display_color_table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_video_output</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_video_output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_robustness_application_isolation</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_robustness_application_isolation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_3DFX_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_3DFX_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_I3D_gamma</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_I3D_gamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_framebuffer_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_copy_image</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_copy_image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_framebuffer_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_present_video</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_present_video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_create_context_es2_profile</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_create_context_es2_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_create_context_robustness</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context_robustness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_make_current_read</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_make_current_read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_extensions_string</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_extensions_string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_render_depth_texture</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_render_depth_texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ATI_pixel_format_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ATI_pixel_format_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_create_context_profile</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_swap_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_swap_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_I3D_digital_video_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_I3D_digital_video_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_pbuffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_pbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_NV_vertex_array_range</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_NV_vertex_array_range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_AMD_gpu_association</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_AMD_gpu_association"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_pixel_format_packed_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_pixel_format_packed_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_EXT_make_current_read</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_make_current_read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_I3D_swap_frame_lock</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_I3D_swap_frame_lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_WGL_ARB_buffer_region</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_buffer_region"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_coreWGL</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><name>GLADWGLhdc</name> <operator>=</operator> <name>hdc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gladLoadWGLLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>wglGetExtensionsStringARB</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wglGetExtensionsStringEXT</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>wglGetExtensionsStringARB</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wglGetExtensionsStringEXT</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>find_coreWGL</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_extensionsWGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_I3D_image_buffer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_I3D_swap_frame_usage</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_delay_before_swap</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_OML_sync_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_create_context</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_swap_group</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_gpu_affinity</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_EXT_pixel_format</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_extensions_string</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_video_capture</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_render_texture</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_pixel_format</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_I3D_genlock</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_DX_interop</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_3DL_stereo_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_EXT_pbuffer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_EXT_display_color_table</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_video_output</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_I3D_gamma</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_copy_image</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_present_video</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_make_current_read</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_EXT_extensions_string</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_EXT_swap_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_I3D_digital_video_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_pbuffer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_NV_vertex_array_range</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_AMD_gpu_association</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_EXT_make_current_read</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_I3D_swap_frame_lock</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_WGL_ARB_buffer_region</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>

</unit>
