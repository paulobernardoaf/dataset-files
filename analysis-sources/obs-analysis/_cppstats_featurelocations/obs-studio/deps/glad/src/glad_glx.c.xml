<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\glad\src\glad_glx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/glad_glx.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namez</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>libGL</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNWGLGETPROCADDRESSPROC_PRIVATE</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>PFNWGLGETPROCADDRESSPROC_PRIVATE</name></type> <name>gladGetProcAddressPtr</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>open_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"opengl32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gladGetProcAddressPtr</name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPROCADDRESSPROC_PRIVATE</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(
<argument><expr><name>libGL</name></expr></argument>, <argument><expr><literal type="string">"wglGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>gladGetProcAddressPtr</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>close_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>libGL</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETPROCADDRESSPROC_PRIVATE</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>PFNGLXGETPROCADDRESSPROC_PRIVATE</name></type> <name>gladGetProcAddressPtr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>open_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>NAMES</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"../Frameworks/OpenGL.framework/OpenGL"</literal></expr>,
<expr><literal type="string">"/Library/Frameworks/OpenGL.framework/OpenGL"</literal></expr>,
<expr><literal type="string">"/System/Library/Frameworks/OpenGL.framework/OpenGL"</literal></expr>,
<expr><literal type="string">"/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>NAMES</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"libGL.so.1"</literal></expr>, <expr><literal type="string">"libGL.so"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>NAMES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>NAMES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name><name>NAMES</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>RTLD_NOW</name> <operator>|</operator> <name>RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>gladGetProcAddressPtr</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETPROCADDRESSPROC_PRIVATE</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>,
<argument><expr><literal type="string">"glXGetProcAddressARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>gladGetProcAddressPtr</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>close_gl</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libGL</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier>
<name>void</name><modifier>*</modifier></type> <name>get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namez</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>libGL</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>gladGetProcAddressPtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gladGetProcAddressPtr</name><argument_list>(<argument><expr><name>namez</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>, <argument><expr><name>namez</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>libGL</name></expr></argument>, <argument><expr><name>namez</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gladLoadGLX</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>open_gl</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gladLoadGLXLoader</name><argument_list>(<argument><expr><operator>(</operator><name>GLADloadproc</name><operator>)</operator><name>get_proc</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_gl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Display</name> <modifier>*</modifier></type><name>GLADGLXDisplay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>GLADGLXscreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>terminator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_VERSION_1_1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name>glXQueryExtensionsString</name><argument_list>(<argument><expr><name>GLADGLXDisplay</name></expr></argument>, <argument><expr><name>GLADGLXscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>extensions</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>loc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>terminator</name> <operator>=</operator> <name>loc</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>loc</name> <operator>==</operator> <name>extensions</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>loc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_VERSION_1_0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_VERSION_1_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_VERSION_1_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_VERSION_1_3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_VERSION_1_4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETSELECTEDEVENTPROC</name></type> <name>glad_glXGetSelectedEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYEXTENSIONPROC</name></type> <name>glad_glXQueryExtension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXMAKECURRENTPROC</name></type> <name>glad_glXMakeCurrent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSELECTEVENTPROC</name></type> <name>glad_glXSelectEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATECONTEXTPROC</name></type> <name>glad_glXCreateContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEGLXPIXMAPPROC</name></type> <name>glad_glXCreateGLXPixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYVERSIONPROC</name></type> <name>glad_glXQueryVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCURRENTREADDRAWABLEPROC</name></type> <name>glad_glXGetCurrentReadDrawable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYPIXMAPPROC</name></type> <name>glad_glXDestroyPixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCURRENTCONTEXTPROC</name></type> <name>glad_glXGetCurrentContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETPROCADDRESSPROC</name></type> <name>glad_glXGetProcAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXWAITGLPROC</name></type> <name>glad_glXWaitGL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXISDIRECTPROC</name></type> <name>glad_glXIsDirect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYWINDOWPROC</name></type> <name>glad_glXDestroyWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEWINDOWPROC</name></type> <name>glad_glXCreateWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCOPYCONTEXTPROC</name></type> <name>glad_glXCopyContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEPBUFFERPROC</name></type> <name>glad_glXCreatePbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSWAPBUFFERSPROC</name></type> <name>glad_glXSwapBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCURRENTDISPLAYPROC</name></type> <name>glad_glXGetCurrentDisplay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCURRENTDRAWABLEPROC</name></type> <name>glad_glXGetCurrentDrawable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYCONTEXTPROC</name></type> <name>glad_glXQueryContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCHOOSEVISUALPROC</name></type> <name>glad_glXChooseVisual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYSERVERSTRINGPROC</name></type> <name>glad_glXQueryServerString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYCONTEXTPROC</name></type> <name>glad_glXDestroyContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYGLXPIXMAPPROC</name></type> <name>glad_glXDestroyGLXPixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETFBCONFIGATTRIBPROC</name></type> <name>glad_glXGetFBConfigAttrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXUSEXFONTPROC</name></type> <name>glad_glXUseXFont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYPBUFFERPROC</name></type> <name>glad_glXDestroyPbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCHOOSEFBCONFIGPROC</name></type> <name>glad_glXChooseFBConfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATENEWCONTEXTPROC</name></type> <name>glad_glXCreateNewContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXMAKECONTEXTCURRENTPROC</name></type> <name>glad_glXMakeContextCurrent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCONFIGPROC</name></type> <name>glad_glXGetConfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETFBCONFIGSPROC</name></type> <name>glad_glXGetFBConfigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEPIXMAPPROC</name></type> <name>glad_glXCreatePixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXWAITXPROC</name></type> <name>glad_glXWaitX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETVISUALFROMFBCONFIGPROC</name></type> <name>glad_glXGetVisualFromFBConfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYDRAWABLEPROC</name></type> <name>glad_glXQueryDrawable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYEXTENSIONSSTRINGPROC</name></type> <name>glad_glXQueryExtensionsString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCLIENTSTRINGPROC</name></type> <name>glad_glXGetClientString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_import_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_multisample_coverage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIS_shared_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_pbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_swap_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_fbconfig_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_hyperpipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_robustness_share_group_isolation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_INTEL_swap_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_video_resize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_create_context_es2_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_robustness_application_isolation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_copy_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_OML_sync_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGI_make_current_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_swap_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGI_swap_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_fbconfig_packed_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_buffer_age</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_3DFX_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_visual_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGI_video_sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_agp_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIS_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_set_3dfx_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_texture_from_pixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_video_capture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_delay_before_swap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_swap_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_swap_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_video_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_query_renderer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_create_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_create_context_es_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_fbconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_pixmap_colormap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_visual_select_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_video_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIS_blended_overlay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_dmbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_create_context_robustness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGIX_swap_barrier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_swap_control_tear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_release_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_EXT_visual_rating</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_MESA_copy_sub_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SGI_cushion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_float_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_OML_swap_method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_NV_present_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_SUN_get_transparent_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_AMD_gpu_association</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_create_context_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_get_proc_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GLX_ARB_vertex_buffer_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCURRENTDISPLAYEXTPROC</name></type> <name>glad_glXGetCurrentDisplayEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYCONTEXTINFOEXTPROC</name></type> <name>glad_glXQueryContextInfoEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCONTEXTIDEXTPROC</name></type> <name>glad_glXGetContextIDEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXIMPORTCONTEXTEXTPROC</name></type> <name>glad_glXImportContextEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXFREECONTEXTEXTPROC</name></type> <name>glad_glXFreeContextEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEGLXPBUFFERSGIXPROC</name></type> <name>glad_glXCreateGLXPbufferSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYGLXPBUFFERSGIXPROC</name></type> <name>glad_glXDestroyGLXPbufferSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYGLXPBUFFERSGIXPROC</name></type> <name>glad_glXQueryGLXPbufferSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSELECTEVENTSGIXPROC</name></type> <name>glad_glXSelectEventSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETSELECTEDEVENTSGIXPROC</name></type> <name>glad_glXGetSelectedEventSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXJOINSWAPGROUPNVPROC</name></type> <name>glad_glXJoinSwapGroupNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDSWAPBARRIERNVPROC</name></type> <name>glad_glXBindSwapBarrierNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYSWAPGROUPNVPROC</name></type> <name>glad_glXQuerySwapGroupNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYMAXSWAPGROUPSNVPROC</name></type> <name>glad_glXQueryMaxSwapGroupsNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYFRAMECOUNTNVPROC</name></type> <name>glad_glXQueryFrameCountNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXRESETFRAMECOUNTNVPROC</name></type> <name>glad_glXResetFrameCountNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYHYPERPIPENETWORKSGIXPROC</name></type> <name>glad_glXQueryHyperpipeNetworkSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXHYPERPIPECONFIGSGIXPROC</name></type> <name>glad_glXHyperpipeConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYHYPERPIPECONFIGSGIXPROC</name></type> <name>glad_glXQueryHyperpipeConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC</name></type> <name>glad_glXDestroyHyperpipeConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDHYPERPIPESGIXPROC</name></type> <name>glad_glXBindHyperpipeSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC</name></type> <name>glad_glXQueryHyperpipeBestAttribSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXHYPERPIPEATTRIBSGIXPROC</name></type> <name>glad_glXHyperpipeAttribSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC</name></type> <name>glad_glXQueryHyperpipeAttribSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDCHANNELTOWINDOWSGIXPROC</name></type> <name>glad_glXBindChannelToWindowSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCHANNELRECTSGIXPROC</name></type> <name>glad_glXChannelRectSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYCHANNELRECTSGIXPROC</name></type> <name>glad_glXQueryChannelRectSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYCHANNELDELTASSGIXPROC</name></type> <name>glad_glXQueryChannelDeltasSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCHANNELRECTSYNCSGIXPROC</name></type> <name>glad_glXChannelRectSyncSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCOPYIMAGESUBDATANVPROC</name></type> <name>glad_glXCopyImageSubDataNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETSYNCVALUESOMLPROC</name></type> <name>glad_glXGetSyncValuesOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETMSCRATEOMLPROC</name></type> <name>glad_glXGetMscRateOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSWAPBUFFERSMSCOMLPROC</name></type> <name>glad_glXSwapBuffersMscOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXWAITFORMSCOMLPROC</name></type> <name>glad_glXWaitForMscOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXWAITFORSBCOMLPROC</name></type> <name>glad_glXWaitForSbcOML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXMAKECURRENTREADSGIPROC</name></type> <name>glad_glXMakeCurrentReadSGI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETCURRENTREADDRAWABLESGIPROC</name></type> <name>glad_glXGetCurrentReadDrawableSGI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSWAPINTERVALMESAPROC</name></type> <name>glad_glXSwapIntervalMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSWAPINTERVALSGIPROC</name></type> <name>glad_glXSwapIntervalSGI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETVIDEOSYNCSGIPROC</name></type> <name>glad_glXGetVideoSyncSGI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXWAITVIDEOSYNCSGIPROC</name></type> <name>glad_glXWaitVideoSyncSGI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETAGPOFFSETMESAPROC</name></type> <name>glad_glXGetAGPOffsetMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSET3DFXMODEMESAPROC</name></type> <name>glad_glXSet3DfxModeMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDTEXIMAGEEXTPROC</name></type> <name>glad_glXBindTexImageEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXRELEASETEXIMAGEEXTPROC</name></type> <name>glad_glXReleaseTexImageEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXBindVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC</name></type> <name>glad_glXEnumerateVideoCaptureDevicesNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXLockVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXQueryVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXReleaseVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDELAYBEFORESWAPNVPROC</name></type> <name>glad_glXDelayBeforeSwapNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXJOINSWAPGROUPSGIXPROC</name></type> <name>glad_glXJoinSwapGroupSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSWAPINTERVALEXTPROC</name></type> <name>glad_glXSwapIntervalEXT</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_VL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PFNGLXCREATEGLXVIDEOSOURCESGIXPROC</name></type> <name>glad_glXCreateGLXVideoSourceSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC</name></type> <name>glad_glXDestroyGLXVideoSourceSGIX</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC</name></type> <name>glad_glXQueryCurrentRendererIntegerMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC</name></type> <name>glad_glXQueryCurrentRendererStringMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYRENDERERINTEGERMESAPROC</name></type> <name>glad_glXQueryRendererIntegerMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYRENDERERSTRINGMESAPROC</name></type> <name>glad_glXQueryRendererStringMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATECONTEXTATTRIBSARBPROC</name></type> <name>glad_glXCreateContextAttribsARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETFBCONFIGATTRIBSGIXPROC</name></type> <name>glad_glXGetFBConfigAttribSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCHOOSEFBCONFIGSGIXPROC</name></type> <name>glad_glXChooseFBConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC</name></type> <name>glad_glXCreateGLXPixmapWithConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC</name></type> <name>glad_glXCreateContextWithConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETVISUALFROMFBCONFIGSGIXPROC</name></type> <name>glad_glXGetVisualFromFBConfigSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETFBCONFIGFROMVISUALSGIXPROC</name></type> <name>glad_glXGetFBConfigFromVisualSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCREATEGLXPIXMAPMESAPROC</name></type> <name>glad_glXCreateGLXPixmapMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETVIDEODEVICENVPROC</name></type> <name>glad_glXGetVideoDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXRELEASEVIDEODEVICENVPROC</name></type> <name>glad_glXReleaseVideoDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDVIDEOIMAGENVPROC</name></type> <name>glad_glXBindVideoImageNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXRELEASEVIDEOIMAGENVPROC</name></type> <name>glad_glXReleaseVideoImageNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXSENDPBUFFERTOVIDEONVPROC</name></type> <name>glad_glXSendPbufferToVideoNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETVIDEOINFONVPROC</name></type> <name>glad_glXGetVideoInfoNV</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DM_BUFFER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PFNGLXASSOCIATEDMPBUFFERSGIXPROC</name></type> <name>glad_glXAssociateDMPbufferSGIX</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>PFNGLXBINDSWAPBARRIERSGIXPROC</name></type> <name>glad_glXBindSwapBarrierSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC</name></type> <name>glad_glXQueryMaxSwapBarriersSGIX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXRELEASEBUFFERSMESAPROC</name></type> <name>glad_glXReleaseBuffersMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCOPYSUBBUFFERMESAPROC</name></type> <name>glad_glXCopySubBufferMESA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXCUSHIONSGIPROC</name></type> <name>glad_glXCushionSGI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXENUMERATEVIDEODEVICESNVPROC</name></type> <name>glad_glXEnumerateVideoDevicesNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXBINDVIDEODEVICENVPROC</name></type> <name>glad_glXBindVideoDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETTRANSPARENTINDEXSUNPROC</name></type> <name>glad_glXGetTransparentIndexSUN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLXGETPROCADDRESSARBPROC</name></type> <name>glad_glXGetProcAddressARB</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_VERSION_1_0</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_VERSION_1_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXChooseVisual</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCHOOSEVISUALPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXChooseVisual"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreateContext</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATECONTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyContext</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYCONTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXMakeCurrent</name> <operator>=</operator> <operator>(</operator><name>PFNGLXMAKECURRENTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXMakeCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCopyContext</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCOPYCONTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCopyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXSwapBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreateGLXPixmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEGLXPIXMAPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateGLXPixmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyGLXPixmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYGLXPIXMAPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyGLXPixmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryExtension</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYEXTENSIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryExtension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryVersion</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYVERSIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXIsDirect</name> <operator>=</operator> <operator>(</operator><name>PFNGLXISDIRECTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXIsDirect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetConfig</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCONFIGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetCurrentContext</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCURRENTCONTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetCurrentContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetCurrentDrawable</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCURRENTDRAWABLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetCurrentDrawable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXWaitGL</name> <operator>=</operator> <operator>(</operator><name>PFNGLXWAITGLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXWaitGL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXWaitX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXWAITXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXWaitX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXUseXFont</name> <operator>=</operator> <operator>(</operator><name>PFNGLXUSEXFONTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXUseXFont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_VERSION_1_1</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_VERSION_1_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXQueryExtensionsString</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYEXTENSIONSSTRINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryExtensionsString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryServerString</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYSERVERSTRINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryServerString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetClientString</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCLIENTSTRINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetClientString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_VERSION_1_2</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_VERSION_1_2</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetCurrentDisplay</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCURRENTDISPLAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetCurrentDisplay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_VERSION_1_3</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_VERSION_1_3</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetFBConfigs</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETFBCONFIGSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetFBConfigs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXChooseFBConfig</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCHOOSEFBCONFIGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXChooseFBConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetFBConfigAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETFBCONFIGATTRIBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetFBConfigAttrib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetVisualFromFBConfig</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETVISUALFROMFBCONFIGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetVisualFromFBConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreateWindow</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEWINDOWPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyWindow</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYWINDOWPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreatePixmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEPIXMAPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreatePixmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyPixmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYPIXMAPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyPixmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreatePbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEPBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreatePbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyPbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYPBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyPbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryDrawable</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYDRAWABLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryDrawable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreateNewContext</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATENEWCONTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateNewContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXMakeContextCurrent</name> <operator>=</operator> <operator>(</operator><name>PFNGLXMAKECONTEXTCURRENTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXMakeContextCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetCurrentReadDrawable</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCURRENTREADDRAWABLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetCurrentReadDrawable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryContext</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYCONTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXSelectEvent</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSELECTEVENTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSelectEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetSelectedEvent</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETSELECTEDEVENTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetSelectedEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_VERSION_1_4</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_VERSION_1_4</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetProcAddress</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETPROCADDRESSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_EXT_import_context</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_EXT_import_context</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetCurrentDisplayEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCURRENTDISPLAYEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetCurrentDisplayEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryContextInfoEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYCONTEXTINFOEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryContextInfoEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetContextIDEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCONTEXTIDEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetContextIDEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXImportContextEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXIMPORTCONTEXTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXImportContextEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXFreeContextEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXFREECONTEXTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXFreeContextEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_pbuffer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_pbuffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXCreateGLXPbufferSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEGLXPBUFFERSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateGLXPbufferSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyGLXPbufferSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYGLXPBUFFERSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyGLXPbufferSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryGLXPbufferSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYGLXPBUFFERSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryGLXPbufferSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXSelectEventSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSELECTEVENTSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSelectEventSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetSelectedEventSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETSELECTEDEVENTSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetSelectedEventSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_NV_swap_group</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_NV_swap_group</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXJoinSwapGroupNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXJOINSWAPGROUPNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXJoinSwapGroupNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXBindSwapBarrierNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDSWAPBARRIERNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindSwapBarrierNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQuerySwapGroupNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYSWAPGROUPNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQuerySwapGroupNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryMaxSwapGroupsNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYMAXSWAPGROUPSNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryMaxSwapGroupsNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryFrameCountNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYFRAMECOUNTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryFrameCountNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXResetFrameCountNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXRESETFRAMECOUNTNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXResetFrameCountNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_hyperpipe</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_hyperpipe</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXQueryHyperpipeNetworkSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYHYPERPIPENETWORKSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryHyperpipeNetworkSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXHyperpipeConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXHYPERPIPECONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXHyperpipeConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryHyperpipeConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYHYPERPIPECONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryHyperpipeConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyHyperpipeConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyHyperpipeConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXBindHyperpipeSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDHYPERPIPESGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindHyperpipeSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryHyperpipeBestAttribSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryHyperpipeBestAttribSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXHyperpipeAttribSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXHYPERPIPEATTRIBSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXHyperpipeAttribSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryHyperpipeAttribSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryHyperpipeAttribSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_video_resize</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_video_resize</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXBindChannelToWindowSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDCHANNELTOWINDOWSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindChannelToWindowSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXChannelRectSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCHANNELRECTSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXChannelRectSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryChannelRectSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYCHANNELRECTSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryChannelRectSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryChannelDeltasSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYCHANNELDELTASSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryChannelDeltasSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXChannelRectSyncSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCHANNELRECTSYNCSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXChannelRectSyncSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_NV_copy_image</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_NV_copy_image</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXCopyImageSubDataNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCOPYIMAGESUBDATANVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCopyImageSubDataNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_OML_sync_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_OML_sync_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetSyncValuesOML</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETSYNCVALUESOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetSyncValuesOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetMscRateOML</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETMSCRATEOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetMscRateOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXSwapBuffersMscOML</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPBUFFERSMSCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSwapBuffersMscOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXWaitForMscOML</name> <operator>=</operator> <operator>(</operator><name>PFNGLXWAITFORMSCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXWaitForMscOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXWaitForSbcOML</name> <operator>=</operator> <operator>(</operator><name>PFNGLXWAITFORSBCOMLPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXWaitForSbcOML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGI_make_current_read</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGI_make_current_read</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXMakeCurrentReadSGI</name> <operator>=</operator> <operator>(</operator><name>PFNGLXMAKECURRENTREADSGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXMakeCurrentReadSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetCurrentReadDrawableSGI</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETCURRENTREADDRAWABLESGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetCurrentReadDrawableSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_swap_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_swap_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXSwapIntervalMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPINTERVALMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGI_swap_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGI_swap_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXSwapIntervalSGI</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPINTERVALSGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGI_video_sync</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGI_video_sync</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetVideoSyncSGI</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETVIDEOSYNCSGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetVideoSyncSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXWaitVideoSyncSGI</name> <operator>=</operator> <operator>(</operator><name>PFNGLXWAITVIDEOSYNCSGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXWaitVideoSyncSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_agp_offset</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_agp_offset</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetAGPOffsetMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETAGPOFFSETMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetAGPOffsetMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_set_3dfx_mode</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_set_3dfx_mode</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXSet3DfxModeMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSET3DFXMODEMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSet3DfxModeMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_EXT_texture_from_pixmap</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_EXT_texture_from_pixmap</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXBindTexImageEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDTEXIMAGEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindTexImageEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXReleaseTexImageEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXRELEASETEXIMAGEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXReleaseTexImageEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_NV_video_capture</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_NV_video_capture</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXBindVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXEnumerateVideoCaptureDevicesNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXEnumerateVideoCaptureDevicesNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXLockVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXLockVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXReleaseVideoCaptureDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXReleaseVideoCaptureDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_NV_delay_before_swap</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_NV_delay_before_swap</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXDelayBeforeSwapNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDELAYBEFORESWAPNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDelayBeforeSwapNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_swap_group</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_swap_group</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXJoinSwapGroupSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXJOINSWAPGROUPSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXJoinSwapGroupSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_EXT_swap_control</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_EXT_swap_control</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXSwapIntervalEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPINTERVALEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_video_source</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_video_source</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_VL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>glad_glXCreateGLXVideoSourceSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEGLXVIDEOSOURCESGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateGLXVideoSourceSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXDestroyGLXVideoSourceSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXDestroyGLXVideoSourceSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>load</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_query_renderer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_query_renderer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXQueryCurrentRendererIntegerMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryCurrentRendererIntegerMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryCurrentRendererStringMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryCurrentRendererStringMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryRendererIntegerMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYRENDERERINTEGERMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryRendererIntegerMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryRendererStringMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYRENDERERSTRINGMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryRendererStringMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_ARB_create_context</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_ARB_create_context</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXCreateContextAttribsARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATECONTEXTATTRIBSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateContextAttribsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_fbconfig</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_fbconfig</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetFBConfigAttribSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETFBCONFIGATTRIBSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetFBConfigAttribSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXChooseFBConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCHOOSEFBCONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXChooseFBConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreateGLXPixmapWithConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateGLXPixmapWithConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXCreateContextWithConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateContextWithConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetVisualFromFBConfigSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETVISUALFROMFBCONFIGSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetVisualFromFBConfigSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetFBConfigFromVisualSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETFBCONFIGFROMVISUALSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetFBConfigFromVisualSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_pixmap_colormap</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_pixmap_colormap</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXCreateGLXPixmapMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATEGLXPIXMAPMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCreateGLXPixmapMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_NV_video_output</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_NV_video_output</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetVideoDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETVIDEODEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetVideoDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXReleaseVideoDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXRELEASEVIDEODEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXReleaseVideoDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXBindVideoImageNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDVIDEOIMAGENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindVideoImageNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXReleaseVideoImageNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXRELEASEVIDEOIMAGENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXReleaseVideoImageNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXSendPbufferToVideoNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXSENDPBUFFERTOVIDEONVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXSendPbufferToVideoNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXGetVideoInfoNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETVIDEOINFONVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetVideoInfoNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_dmbuffer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_dmbuffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DM_BUFFER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>glad_glXAssociateDMPbufferSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXASSOCIATEDMPBUFFERSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXAssociateDMPbufferSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>load</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGIX_swap_barrier</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGIX_swap_barrier</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXBindSwapBarrierSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDSWAPBARRIERSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindSwapBarrierSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXQueryMaxSwapBarriersSGIX</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryMaxSwapBarriersSGIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_release_buffers</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_release_buffers</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXReleaseBuffersMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXRELEASEBUFFERSMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXReleaseBuffersMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_MESA_copy_sub_buffer</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_MESA_copy_sub_buffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXCopySubBufferMESA</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCOPYSUBBUFFERMESAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCopySubBufferMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SGI_cushion</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SGI_cushion</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXCushionSGI</name> <operator>=</operator> <operator>(</operator><name>PFNGLXCUSHIONSGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXCushionSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_NV_present_video</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_NV_present_video</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXEnumerateVideoDevicesNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXENUMERATEVIDEODEVICESNVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXEnumerateVideoDevicesNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glXBindVideoDeviceNV</name> <operator>=</operator> <operator>(</operator><name>PFNGLXBINDVIDEODEVICENVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXBindVideoDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_SUN_get_transparent_index</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_SUN_get_transparent_index</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetTransparentIndexSUN</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETTRANSPARENTINDEXSUNPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetTransparentIndexSUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GLX_ARB_get_proc_address</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GLX_ARB_get_proc_address</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glXGetProcAddressARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLXGETPROCADDRESSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXGetProcAddressARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>find_extensionsGLX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>GLAD_GLX_ARB_framebuffer_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_import_context</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_import_context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_multisample_coverage</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_multisample_coverage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIS_shared_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIS_shared_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_pbuffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_pbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_swap_group</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_swap_group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_fbconfig_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_fbconfig_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_hyperpipe</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_hyperpipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_robustness_share_group_isolation</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_robustness_share_group_isolation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_INTEL_swap_event</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_INTEL_swap_event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_video_resize</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_video_resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_create_context_es2_profile</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_create_context_es2_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_robustness_application_isolation</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_robustness_application_isolation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_copy_image</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_copy_image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_OML_sync_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_OML_sync_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_framebuffer_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGI_make_current_read</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGI_make_current_read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_swap_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_swap_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGI_swap_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGI_swap_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_fbconfig_packed_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_fbconfig_packed_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_buffer_age</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_buffer_age"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_3DFX_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_3DFX_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_visual_info</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_visual_info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGI_video_sync</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGI_video_sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_agp_offset</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_agp_offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIS_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIS_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_set_3dfx_mode</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_set_3dfx_mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_texture_from_pixmap</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_texture_from_pixmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_video_capture</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_video_capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_delay_before_swap</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_delay_before_swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_swap_group</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_swap_group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_swap_control</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_swap_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_video_source</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_video_source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_query_renderer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_query_renderer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_create_context</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_create_context_es_profile</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_create_context_es_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_fbconfig</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_fbconfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_pixmap_colormap</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_pixmap_colormap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_visual_select_group</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_visual_select_group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_video_output</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_video_output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIS_blended_overlay</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIS_blended_overlay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_dmbuffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_dmbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_create_context_robustness</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context_robustness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGIX_swap_barrier</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGIX_swap_barrier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_swap_control_tear</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_swap_control_tear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_release_buffers</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_release_buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_EXT_visual_rating</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_visual_rating"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_MESA_copy_sub_buffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_copy_sub_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SGI_cushion</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SGI_cushion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_float_buffer</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_float_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_OML_swap_method</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_OML_swap_method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_NV_present_video</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_NV_present_video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_SUN_get_transparent_index</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_SUN_get_transparent_index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_AMD_gpu_association</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_AMD_gpu_association"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_create_context_profile</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_get_proc_address</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_get_proc_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_ARB_vertex_buffer_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_vertex_buffer_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_coreGLX</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>dpy</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>GLADGLXDisplay</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>XScreenNumberOfScreen</name><argument_list>(<argument><expr><call><name>XDefaultScreenOfDisplay</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>dpy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <name>GLADGLXDisplay</name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <name>GLADGLXscreen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glXQueryVersion</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLADGLXDisplay</name> <operator>=</operator> <name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GLADGLXscreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_VERSION_1_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_VERSION_1_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_VERSION_1_2</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_VERSION_1_3</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GLX_VERSION_1_4</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gladLoadGLXLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>glXQueryVersion</name> <operator>=</operator> <operator>(</operator><name>PFNGLXQUERYVERSIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glXQueryVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>glXQueryVersion</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>find_coreGLX</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_VERSION_1_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_VERSION_1_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_VERSION_1_2</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_VERSION_1_3</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_VERSION_1_4</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_extensionsGLX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_EXT_import_context</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_pbuffer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_NV_swap_group</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_hyperpipe</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_video_resize</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_NV_copy_image</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_OML_sync_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGI_make_current_read</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_swap_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGI_swap_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGI_video_sync</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_agp_offset</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_set_3dfx_mode</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_EXT_texture_from_pixmap</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_NV_video_capture</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_NV_delay_before_swap</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_swap_group</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_EXT_swap_control</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_video_source</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_query_renderer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_ARB_create_context</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_fbconfig</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_pixmap_colormap</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_NV_video_output</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_dmbuffer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGIX_swap_barrier</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_release_buffers</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_MESA_copy_sub_buffer</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SGI_cushion</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_NV_present_video</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_SUN_get_transparent_index</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GLX_ARB_get_proc_address</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>

</unit>
