<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\glad\include\glad\glad_wgl.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/glad.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__glad_wglext_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__wglext_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> WGL header already included, remove this include, glad already provides it</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glad_wglext_h_</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__wglext_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRYP</name></cpp:macro> <cpp:value>APIENTRY *</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>GLADloadproc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GLAPI_EXPORT</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllexport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllimport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllimport) extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default"))) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>GLAPI</name> <name>int</name></type> <name>gladLoadWGL</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLAPI</name> <name>void</name></type> <name>gladLoadWGLLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>_GPU_DEVICE</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR</name></type> <name><name>DeviceName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR</name></type> <name><name>DeviceString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rcVirtualScreen</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HPBUFFERARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HPBUFFEREXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HVIDEOOUTPUTDEVICENV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HPVIDEODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HPGPUNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HGPUNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HVIDEOINPUTDEVICENV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><name><name>struct</name> <name>_GPU_DEVICE</name></name></type> <name>GPU_DEVICE</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GPU_DEVICE</name></name> <modifier>*</modifier></type><name>PGPU_DEVICE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>0x2042</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_COLOR_SAMPLES_NV</name></cpp:macro> <cpp:value>0x20B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_IMAGE_BUFFER_MIN_ACCESS_I3D</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_IMAGE_BUFFER_LOCK_I3D</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FLOAT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x20B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV</name></cpp:macro> <cpp:value>0x20B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV</name></cpp:macro> <cpp:value>0x20B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV</name></cpp:macro> <cpp:value>0x20B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV</name></cpp:macro> <cpp:value>0x20B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_FLOAT_R_NV</name></cpp:macro> <cpp:value>0x20B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_FLOAT_RG_NV</name></cpp:macro> <cpp:value>0x20B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_FLOAT_RGB_NV</name></cpp:macro> <cpp:value>0x20B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_FLOAT_RGBA_NV</name></cpp:macro> <cpp:value>0x20B8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_RGBA_FLOAT_ARB</name></cpp:macro> <cpp:value>0x21A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_DEBUG_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_MAJOR_VERSION_ARB</name></cpp:macro> <cpp:value>0x2091</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_MINOR_VERSION_ARB</name></cpp:macro> <cpp:value>0x2092</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_LAYER_PLANE_ARB</name></cpp:macro> <cpp:value>0x2093</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_FLAGS_ARB</name></cpp:macro> <cpp:value>0x2094</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_VERSION_ARB</name></cpp:macro> <cpp:value>0x2095</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV</name></cpp:macro> <cpp:value>0x20D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_MISSING_AFFINITY_MASK_NV</name></cpp:macro> <cpp:value>0x20D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUMBER_PIXEL_FORMATS_EXT</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DRAW_TO_WINDOW_EXT</name></cpp:macro> <cpp:value>0x2001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DRAW_TO_BITMAP_EXT</name></cpp:macro> <cpp:value>0x2002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCELERATION_EXT</name></cpp:macro> <cpp:value>0x2003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NEED_PALETTE_EXT</name></cpp:macro> <cpp:value>0x2004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NEED_SYSTEM_PALETTE_EXT</name></cpp:macro> <cpp:value>0x2005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_LAYER_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x2006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_METHOD_EXT</name></cpp:macro> <cpp:value>0x2007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUMBER_OVERLAYS_EXT</name></cpp:macro> <cpp:value>0x2008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUMBER_UNDERLAYS_EXT</name></cpp:macro> <cpp:value>0x2009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_EXT</name></cpp:macro> <cpp:value>0x200A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_VALUE_EXT</name></cpp:macro> <cpp:value>0x200B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SHARE_DEPTH_EXT</name></cpp:macro> <cpp:value>0x200C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SHARE_STENCIL_EXT</name></cpp:macro> <cpp:value>0x200D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SHARE_ACCUM_EXT</name></cpp:macro> <cpp:value>0x200E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SUPPORT_GDI_EXT</name></cpp:macro> <cpp:value>0x200F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SUPPORT_OPENGL_EXT</name></cpp:macro> <cpp:value>0x2010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DOUBLE_BUFFER_EXT</name></cpp:macro> <cpp:value>0x2011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STEREO_EXT</name></cpp:macro> <cpp:value>0x2012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PIXEL_TYPE_EXT</name></cpp:macro> <cpp:value>0x2013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_COLOR_BITS_EXT</name></cpp:macro> <cpp:value>0x2014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_RED_BITS_EXT</name></cpp:macro> <cpp:value>0x2015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_RED_SHIFT_EXT</name></cpp:macro> <cpp:value>0x2016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GREEN_BITS_EXT</name></cpp:macro> <cpp:value>0x2017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GREEN_SHIFT_EXT</name></cpp:macro> <cpp:value>0x2018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BLUE_BITS_EXT</name></cpp:macro> <cpp:value>0x2019</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BLUE_SHIFT_EXT</name></cpp:macro> <cpp:value>0x201A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ALPHA_BITS_EXT</name></cpp:macro> <cpp:value>0x201B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ALPHA_SHIFT_EXT</name></cpp:macro> <cpp:value>0x201C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_BITS_EXT</name></cpp:macro> <cpp:value>0x201D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_RED_BITS_EXT</name></cpp:macro> <cpp:value>0x201E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_GREEN_BITS_EXT</name></cpp:macro> <cpp:value>0x201F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_BLUE_BITS_EXT</name></cpp:macro> <cpp:value>0x2020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_ALPHA_BITS_EXT</name></cpp:macro> <cpp:value>0x2021</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DEPTH_BITS_EXT</name></cpp:macro> <cpp:value>0x2022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STENCIL_BITS_EXT</name></cpp:macro> <cpp:value>0x2023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x2024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NO_ACCELERATION_EXT</name></cpp:macro> <cpp:value>0x2025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENERIC_ACCELERATION_EXT</name></cpp:macro> <cpp:value>0x2026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FULL_ACCELERATION_EXT</name></cpp:macro> <cpp:value>0x2027</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_EXCHANGE_EXT</name></cpp:macro> <cpp:value>0x2028</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_COPY_EXT</name></cpp:macro> <cpp:value>0x2029</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_UNDEFINED_EXT</name></cpp:macro> <cpp:value>0x202A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_RGBA_EXT</name></cpp:macro> <cpp:value>0x202B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_COLORINDEX_EXT</name></cpp:macro> <cpp:value>0x202C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_UNIQUE_ID_NV</name></cpp:macro> <cpp:value>0x20CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUM_VIDEO_CAPTURE_SLOTS_NV</name></cpp:macro> <cpp:value>0x20CF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV</name></cpp:macro> <cpp:value>0x20A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV</name></cpp:macro> <cpp:value>0x20A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x20A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_ES_PROFILE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_RESET_ISOLATION_BIT_ARB</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RGB_ARB</name></cpp:macro> <cpp:value>0x2070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RGBA_ARB</name></cpp:macro> <cpp:value>0x2071</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_FORMAT_ARB</name></cpp:macro> <cpp:value>0x2072</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_TARGET_ARB</name></cpp:macro> <cpp:value>0x2073</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MIPMAP_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x2074</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_RGB_ARB</name></cpp:macro> <cpp:value>0x2075</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_RGBA_ARB</name></cpp:macro> <cpp:value>0x2076</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NO_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x2077</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x2078</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_1D_ARB</name></cpp:macro> <cpp:value>0x2079</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_2D_ARB</name></cpp:macro> <cpp:value>0x207A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MIPMAP_LEVEL_ARB</name></cpp:macro> <cpp:value>0x207B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CUBE_MAP_FACE_ARB</name></cpp:macro> <cpp:value>0x207C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB</name></cpp:macro> <cpp:value>0x207D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB</name></cpp:macro> <cpp:value>0x207E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB</name></cpp:macro> <cpp:value>0x207F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB</name></cpp:macro> <cpp:value>0x2080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB</name></cpp:macro> <cpp:value>0x2081</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB</name></cpp:macro> <cpp:value>0x2082</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FRONT_LEFT_ARB</name></cpp:macro> <cpp:value>0x2083</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FRONT_RIGHT_ARB</name></cpp:macro> <cpp:value>0x2084</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BACK_LEFT_ARB</name></cpp:macro> <cpp:value>0x2085</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BACK_RIGHT_ARB</name></cpp:macro> <cpp:value>0x2086</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX0_ARB</name></cpp:macro> <cpp:value>0x2087</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX1_ARB</name></cpp:macro> <cpp:value>0x2088</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX2_ARB</name></cpp:macro> <cpp:value>0x2089</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX3_ARB</name></cpp:macro> <cpp:value>0x208A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX4_ARB</name></cpp:macro> <cpp:value>0x208B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX5_ARB</name></cpp:macro> <cpp:value>0x208C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX6_ARB</name></cpp:macro> <cpp:value>0x208D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX7_ARB</name></cpp:macro> <cpp:value>0x208E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX8_ARB</name></cpp:macro> <cpp:value>0x208F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX9_ARB</name></cpp:macro> <cpp:value>0x2090</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DEPTH_FLOAT_EXT</name></cpp:macro> <cpp:value>0x2040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUMBER_PIXEL_FORMATS_ARB</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DRAW_TO_WINDOW_ARB</name></cpp:macro> <cpp:value>0x2001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DRAW_TO_BITMAP_ARB</name></cpp:macro> <cpp:value>0x2002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCELERATION_ARB</name></cpp:macro> <cpp:value>0x2003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NEED_PALETTE_ARB</name></cpp:macro> <cpp:value>0x2004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NEED_SYSTEM_PALETTE_ARB</name></cpp:macro> <cpp:value>0x2005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_LAYER_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x2006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_METHOD_ARB</name></cpp:macro> <cpp:value>0x2007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUMBER_OVERLAYS_ARB</name></cpp:macro> <cpp:value>0x2008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUMBER_UNDERLAYS_ARB</name></cpp:macro> <cpp:value>0x2009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_ARB</name></cpp:macro> <cpp:value>0x200A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_RED_VALUE_ARB</name></cpp:macro> <cpp:value>0x2037</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_GREEN_VALUE_ARB</name></cpp:macro> <cpp:value>0x2038</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_BLUE_VALUE_ARB</name></cpp:macro> <cpp:value>0x2039</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_ALPHA_VALUE_ARB</name></cpp:macro> <cpp:value>0x203A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TRANSPARENT_INDEX_VALUE_ARB</name></cpp:macro> <cpp:value>0x203B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SHARE_DEPTH_ARB</name></cpp:macro> <cpp:value>0x200C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SHARE_STENCIL_ARB</name></cpp:macro> <cpp:value>0x200D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SHARE_ACCUM_ARB</name></cpp:macro> <cpp:value>0x200E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SUPPORT_GDI_ARB</name></cpp:macro> <cpp:value>0x200F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SUPPORT_OPENGL_ARB</name></cpp:macro> <cpp:value>0x2010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DOUBLE_BUFFER_ARB</name></cpp:macro> <cpp:value>0x2011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STEREO_ARB</name></cpp:macro> <cpp:value>0x2012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PIXEL_TYPE_ARB</name></cpp:macro> <cpp:value>0x2013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_COLOR_BITS_ARB</name></cpp:macro> <cpp:value>0x2014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_RED_BITS_ARB</name></cpp:macro> <cpp:value>0x2015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_RED_SHIFT_ARB</name></cpp:macro> <cpp:value>0x2016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GREEN_BITS_ARB</name></cpp:macro> <cpp:value>0x2017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GREEN_SHIFT_ARB</name></cpp:macro> <cpp:value>0x2018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BLUE_BITS_ARB</name></cpp:macro> <cpp:value>0x2019</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BLUE_SHIFT_ARB</name></cpp:macro> <cpp:value>0x201A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ALPHA_BITS_ARB</name></cpp:macro> <cpp:value>0x201B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ALPHA_SHIFT_ARB</name></cpp:macro> <cpp:value>0x201C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_BITS_ARB</name></cpp:macro> <cpp:value>0x201D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_RED_BITS_ARB</name></cpp:macro> <cpp:value>0x201E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_GREEN_BITS_ARB</name></cpp:macro> <cpp:value>0x201F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_BLUE_BITS_ARB</name></cpp:macro> <cpp:value>0x2020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCUM_ALPHA_BITS_ARB</name></cpp:macro> <cpp:value>0x2021</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DEPTH_BITS_ARB</name></cpp:macro> <cpp:value>0x2022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STENCIL_BITS_ARB</name></cpp:macro> <cpp:value>0x2023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AUX_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x2024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NO_ACCELERATION_ARB</name></cpp:macro> <cpp:value>0x2025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENERIC_ACCELERATION_ARB</name></cpp:macro> <cpp:value>0x2026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FULL_ACCELERATION_ARB</name></cpp:macro> <cpp:value>0x2027</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_EXCHANGE_ARB</name></cpp:macro> <cpp:value>0x2028</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_COPY_ARB</name></cpp:macro> <cpp:value>0x2029</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SWAP_UNDEFINED_ARB</name></cpp:macro> <cpp:value>0x202A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_RGBA_ARB</name></cpp:macro> <cpp:value>0x202B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_COLORINDEX_ARB</name></cpp:macro> <cpp:value>0x202C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x2041</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SAMPLES_ARB</name></cpp:macro> <cpp:value>0x2042</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_MULTIVIEW_I3D</name></cpp:macro> <cpp:value>0x2044</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D</name></cpp:macro> <cpp:value>0x2045</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D</name></cpp:macro> <cpp:value>0x2046</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D</name></cpp:macro> <cpp:value>0x2047</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D</name></cpp:macro> <cpp:value>0x2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D</name></cpp:macro> <cpp:value>0x2049</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D</name></cpp:macro> <cpp:value>0x204A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_EDGE_RISING_I3D</name></cpp:macro> <cpp:value>0x204B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D</name></cpp:macro> <cpp:value>0x204C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCESS_READ_ONLY_NV</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCESS_READ_WRITE_NV</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ACCESS_WRITE_DISCARD_NV</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STEREO_EMITTER_ENABLE_3DL</name></cpp:macro> <cpp:value>0x2055</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STEREO_EMITTER_DISABLE_3DL</name></cpp:macro> <cpp:value>0x2056</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STEREO_POLARITY_NORMAL_3DL</name></cpp:macro> <cpp:value>0x2057</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STEREO_POLARITY_INVERT_3DL</name></cpp:macro> <cpp:value>0x2058</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DRAW_TO_PBUFFER_EXT</name></cpp:macro> <cpp:value>0x202D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MAX_PBUFFER_PIXELS_EXT</name></cpp:macro> <cpp:value>0x202E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MAX_PBUFFER_WIDTH_EXT</name></cpp:macro> <cpp:value>0x202F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MAX_PBUFFER_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x2030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_OPTIMAL_PBUFFER_WIDTH_EXT</name></cpp:macro> <cpp:value>0x2031</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_OPTIMAL_PBUFFER_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x2032</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_LARGEST_EXT</name></cpp:macro> <cpp:value>0x2033</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_WIDTH_EXT</name></cpp:macro> <cpp:value>0x2034</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x2035</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_VIDEO_RGB_NV</name></cpp:macro> <cpp:value>0x20C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_VIDEO_RGBA_NV</name></cpp:macro> <cpp:value>0x20C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_COLOR_NV</name></cpp:macro> <cpp:value>0x20C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_ALPHA_NV</name></cpp:macro> <cpp:value>0x20C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV</name></cpp:macro> <cpp:value>0x20C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_FRAME</name></cpp:macro> <cpp:value>0x20C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_FIELD_1</name></cpp:macro> <cpp:value>0x20C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_FIELD_2</name></cpp:macro> <cpp:value>0x20CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_STACKED_FIELDS_1_2</name></cpp:macro> <cpp:value>0x20CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_VIDEO_OUT_STACKED_FIELDS_2_1</name></cpp:macro> <cpp:value>0x20CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SAMPLE_BUFFERS_3DFX</name></cpp:macro> <cpp:value>0x2060</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SAMPLES_3DFX</name></cpp:macro> <cpp:value>0x2061</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GAMMA_TABLE_SIZE_I3D</name></cpp:macro> <cpp:value>0x204E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GAMMA_EXCLUDE_DESKTOP_I3D</name></cpp:macro> <cpp:value>0x204F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB</name></cpp:macro> <cpp:value>0x20A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT</name></cpp:macro> <cpp:value>0x20A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NUM_VIDEO_SLOTS_NV</name></cpp:macro> <cpp:value>0x20F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_ES2_PROFILE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_LOSE_CONTEXT_ON_RESET_ARB</name></cpp:macro> <cpp:value>0x8252</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB</name></cpp:macro> <cpp:value>0x8256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NO_RESET_NOTIFICATION_ARB</name></cpp:macro> <cpp:value>0x8261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_PIXEL_TYPE_ARB</name></cpp:macro> <cpp:value>0x2043</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB</name></cpp:macro> <cpp:value>0x2054</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SAMPLE_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x2041</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x2042</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_DEPTH_NV</name></cpp:macro> <cpp:value>0x20A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV</name></cpp:macro> <cpp:value>0x20A4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DEPTH_TEXTURE_FORMAT_NV</name></cpp:macro> <cpp:value>0x20A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TEXTURE_DEPTH_COMPONENT_NV</name></cpp:macro> <cpp:value>0x20A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DEPTH_COMPONENT_NV</name></cpp:macro> <cpp:value>0x20A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_RGBA_FLOAT_ATI</name></cpp:macro> <cpp:value>0x21A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_PROFILE_MASK_ARB</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_CORE_PROFILE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_PROFILE_ARB</name></cpp:macro> <cpp:value>0x2096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D</name></cpp:macro> <cpp:value>0x2050</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D</name></cpp:macro> <cpp:value>0x2051</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D</name></cpp:macro> <cpp:value>0x2052</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D</name></cpp:macro> <cpp:value>0x2053</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DRAW_TO_PBUFFER_ARB</name></cpp:macro> <cpp:value>0x202D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MAX_PBUFFER_PIXELS_ARB</name></cpp:macro> <cpp:value>0x202E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MAX_PBUFFER_WIDTH_ARB</name></cpp:macro> <cpp:value>0x202F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_MAX_PBUFFER_HEIGHT_ARB</name></cpp:macro> <cpp:value>0x2030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_LARGEST_ARB</name></cpp:macro> <cpp:value>0x2033</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_WIDTH_ARB</name></cpp:macro> <cpp:value>0x2034</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_HEIGHT_ARB</name></cpp:macro> <cpp:value>0x2035</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_PBUFFER_LOST_ARB</name></cpp:macro> <cpp:value>0x2036</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_VENDOR_AMD</name></cpp:macro> <cpp:value>0x1F00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_RENDERER_STRING_AMD</name></cpp:macro> <cpp:value>0x1F01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_OPENGL_VERSION_STRING_AMD</name></cpp:macro> <cpp:value>0x1F02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_FASTEST_TARGET_GPUS_AMD</name></cpp:macro> <cpp:value>0x21A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_RAM_AMD</name></cpp:macro> <cpp:value>0x21A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_CLOCK_AMD</name></cpp:macro> <cpp:value>0x21A4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_NUM_PIPES_AMD</name></cpp:macro> <cpp:value>0x21A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_NUM_SIMD_AMD</name></cpp:macro> <cpp:value>0x21A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_NUM_RB_AMD</name></cpp:macro> <cpp:value>0x21A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_GPU_NUM_SPI_AMD</name></cpp:macro> <cpp:value>0x21A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT</name></cpp:macro> <cpp:value>0x20A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_PIXEL_TYPE_EXT</name></cpp:macro> <cpp:value>0x2043</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_FRONT_COLOR_BUFFER_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_BACK_COLOR_BUFFER_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_DEPTH_BUFFER_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_STENCIL_BUFFER_BIT_ARB</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_multisample_coverage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_multisample_coverage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_multisample_coverage</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_I3D_image_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_I3D_image_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_I3D_image_buffer</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>LPVOID</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEIMAGEBUFFERI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEIMAGEBUFFERI3DPROC</name></type> <name>glad_wglCreateImageBufferI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateImageBufferI3D</name></cpp:macro> <cpp:value>glad_wglCreateImageBufferI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDESTROYIMAGEBUFFERI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDESTROYIMAGEBUFFERI3DPROC</name></type> <name>glad_wglDestroyImageBufferI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDestroyImageBufferI3D</name></cpp:macro> <cpp:value>glad_wglDestroyImageBufferI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HANDLE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LPVOID</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DWORD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC</name></type> <name>glad_wglAssociateImageBufferEventsI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglAssociateImageBufferEventsI3D</name></cpp:macro> <cpp:value>glad_wglAssociateImageBufferEventsI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LPVOID</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC</name></type> <name>glad_wglReleaseImageBufferEventsI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleaseImageBufferEventsI3D</name></cpp:macro> <cpp:value>glad_wglReleaseImageBufferEventsI3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_I3D_swap_frame_usage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_I3D_swap_frame_usage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_I3D_swap_frame_usage</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETFRAMEUSAGEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETFRAMEUSAGEI3DPROC</name></type> <name>glad_wglGetFrameUsageI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetFrameUsageI3D</name></cpp:macro> <cpp:value>glad_wglGetFrameUsageI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLBEGINFRAMETRACKINGI3DPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBEGINFRAMETRACKINGI3DPROC</name></type> <name>glad_wglBeginFrameTrackingI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBeginFrameTrackingI3D</name></cpp:macro> <cpp:value>glad_wglBeginFrameTrackingI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLENDFRAMETRACKINGI3DPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENDFRAMETRACKINGI3DPROC</name></type> <name>glad_wglEndFrameTrackingI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEndFrameTrackingI3D</name></cpp:macro> <cpp:value>glad_wglEndFrameTrackingI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYFRAMETRACKINGI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYFRAMETRACKINGI3DPROC</name></type> <name>glad_wglQueryFrameTrackingI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryFrameTrackingI3D</name></cpp:macro> <cpp:value>glad_wglQueryFrameTrackingI3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_DX_interop2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_DX_interop2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_DX_interop2</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_float_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_float_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_float_buffer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_delay_before_swap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_delay_before_swap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_delay_before_swap</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDELAYBEFORESWAPNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDELAYBEFORESWAPNVPROC</name></type> <name>glad_wglDelayBeforeSwapNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDelayBeforeSwapNV</name></cpp:macro> <cpp:value>glad_wglDelayBeforeSwapNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_OML_sync_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_OML_sync_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_OML_sync_control</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETSYNCVALUESOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETSYNCVALUESOMLPROC</name></type> <name>glad_wglGetSyncValuesOML</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetSyncValuesOML</name></cpp:macro> <cpp:value>glad_wglGetSyncValuesOML</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETMSCRATEOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>INT32</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT32</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETMSCRATEOMLPROC</name></type> <name>glad_wglGetMscRateOML</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetMscRateOML</name></cpp:macro> <cpp:value>glad_wglGetMscRateOML</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>INT64</name></type> (<name>APIENTRYP</name> <name>PFNWGLSWAPBUFFERSMSCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSWAPBUFFERSMSCOMLPROC</name></type> <name>glad_wglSwapBuffersMscOML</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSwapBuffersMscOML</name></cpp:macro> <cpp:value>glad_wglSwapBuffersMscOML</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>INT64</name></type> (<name>APIENTRYP</name> <name>PFNWGLSWAPLAYERBUFFERSMSCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSWAPLAYERBUFFERSMSCOMLPROC</name></type> <name>glad_wglSwapLayerBuffersMscOML</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSwapLayerBuffersMscOML</name></cpp:macro> <cpp:value>glad_wglSwapLayerBuffersMscOML</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLWAITFORMSCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLWAITFORMSCOMLPROC</name></type> <name>glad_wglWaitForMscOML</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglWaitForMscOML</name></cpp:macro> <cpp:value>glad_wglWaitForMscOML</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLWAITFORSBCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>INT64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLWAITFORSBCOMLPROC</name></type> <name>glad_wglWaitForSbcOML</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglWaitForSbcOML</name></cpp:macro> <cpp:value>glad_wglWaitForSbcOML</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_pixel_format_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_pixel_format_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_pixel_format_float</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_create_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_create_context</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_create_context</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>HGLRC</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATECONTEXTATTRIBSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HGLRC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATECONTEXTATTRIBSARBPROC</name></type> <name>glad_wglCreateContextAttribsARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateContextAttribsARB</name></cpp:macro> <cpp:value>glad_wglCreateContextAttribsARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_swap_group</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_swap_group</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLJOINSWAPGROUPNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLJOINSWAPGROUPNVPROC</name></type> <name>glad_wglJoinSwapGroupNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglJoinSwapGroupNV</name></cpp:macro> <cpp:value>glad_wglJoinSwapGroupNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLBINDSWAPBARRIERNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBINDSWAPBARRIERNVPROC</name></type> <name>glad_wglBindSwapBarrierNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBindSwapBarrierNV</name></cpp:macro> <cpp:value>glad_wglBindSwapBarrierNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYSWAPGROUPNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYSWAPGROUPNVPROC</name></type> <name>glad_wglQuerySwapGroupNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQuerySwapGroupNV</name></cpp:macro> <cpp:value>glad_wglQuerySwapGroupNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYMAXSWAPGROUPSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYMAXSWAPGROUPSNVPROC</name></type> <name>glad_wglQueryMaxSwapGroupsNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryMaxSwapGroupsNV</name></cpp:macro> <cpp:value>glad_wglQueryMaxSwapGroupsNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYFRAMECOUNTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYFRAMECOUNTNVPROC</name></type> <name>glad_wglQueryFrameCountNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryFrameCountNV</name></cpp:macro> <cpp:value>glad_wglQueryFrameCountNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRESETFRAMECOUNTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRESETFRAMECOUNTNVPROC</name></type> <name>glad_wglResetFrameCountNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglResetFrameCountNV</name></cpp:macro> <cpp:value>glad_wglResetFrameCountNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_gpu_affinity</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_gpu_affinity</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_gpu_affinity</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLENUMGPUSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>HGPUNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENUMGPUSNVPROC</name></type> <name>glad_wglEnumGpusNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnumGpusNV</name></cpp:macro> <cpp:value>glad_wglEnumGpusNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLENUMGPUDEVICESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HGPUNV</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>PGPU_DEVICE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENUMGPUDEVICESNVPROC</name></type> <name>glad_wglEnumGpuDevicesNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnumGpuDevicesNV</name></cpp:macro> <cpp:value>glad_wglEnumGpuDevicesNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HDC</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEAFFINITYDCNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HGPUNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEAFFINITYDCNVPROC</name></type> <name>glad_wglCreateAffinityDCNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateAffinityDCNV</name></cpp:macro> <cpp:value>glad_wglCreateAffinityDCNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLENUMGPUSFROMAFFINITYDCNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>HGPUNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENUMGPUSFROMAFFINITYDCNVPROC</name></type> <name>glad_wglEnumGpusFromAffinityDCNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnumGpusFromAffinityDCNV</name></cpp:macro> <cpp:value>glad_wglEnumGpusFromAffinityDCNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDELETEDCNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDELETEDCNVPROC</name></type> <name>glad_wglDeleteDCNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDeleteDCNV</name></cpp:macro> <cpp:value>glad_wglDeleteDCNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_pixel_format</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_pixel_format</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_pixel_format</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETPIXELFORMATATTRIBIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETPIXELFORMATATTRIBIVEXTPROC</name></type> <name>glad_wglGetPixelFormatAttribivEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetPixelFormatAttribivEXT</name></cpp:macro> <cpp:value>glad_wglGetPixelFormatAttribivEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETPIXELFORMATATTRIBFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FLOAT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETPIXELFORMATATTRIBFVEXTPROC</name></type> <name>glad_wglGetPixelFormatAttribfvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetPixelFormatAttribfvEXT</name></cpp:macro> <cpp:value>glad_wglGetPixelFormatAttribfvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLCHOOSEPIXELFORMATEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FLOAT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCHOOSEPIXELFORMATEXTPROC</name></type> <name>glad_wglChoosePixelFormatEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglChoosePixelFormatEXT</name></cpp:macro> <cpp:value>glad_wglChoosePixelFormatEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_extensions_string</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_extensions_string</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_extensions_string</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name></type> <name>glad_wglGetExtensionsStringARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetExtensionsStringARB</name></cpp:macro> <cpp:value>glad_wglGetExtensionsStringARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_video_capture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_video_capture</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLBINDVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>HVIDEOINPUTDEVICENV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBINDVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglBindVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBindVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_wglBindVideoCaptureDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>UINT</name></type> (<name>APIENTRYP</name> <name>PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HVIDEOINPUTDEVICENV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC</name></type> <name>glad_wglEnumerateVideoCaptureDevicesNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnumerateVideoCaptureDevicesNV</name></cpp:macro> <cpp:value>glad_wglEnumerateVideoCaptureDevicesNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HVIDEOINPUTDEVICENV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglLockVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglLockVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_wglLockVideoCaptureDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HVIDEOINPUTDEVICENV</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglQueryVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_wglQueryVideoCaptureDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HVIDEOINPUTDEVICENV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_wglReleaseVideoCaptureDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleaseVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_wglReleaseVideoCaptureDeviceNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_render_texture_rectangle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_render_texture_rectangle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_render_texture_rectangle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_create_context_es_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_create_context_es_profile</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_create_context_es_profile</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_robustness_share_group_isolation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_robustness_share_group_isolation</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_robustness_share_group_isolation</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_render_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_render_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_render_texture</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLBINDTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBINDTEXIMAGEARBPROC</name></type> <name>glad_wglBindTexImageARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBindTexImageARB</name></cpp:macro> <cpp:value>glad_wglBindTexImageARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASETEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASETEXIMAGEARBPROC</name></type> <name>glad_wglReleaseTexImageARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleaseTexImageARB</name></cpp:macro> <cpp:value>glad_wglReleaseTexImageARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSETPBUFFERATTRIBARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSETPBUFFERATTRIBARBPROC</name></type> <name>glad_wglSetPbufferAttribARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSetPbufferAttribARB</name></cpp:macro> <cpp:value>glad_wglSetPbufferAttribARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_depth_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_depth_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_depth_float</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_swap_control_tear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_swap_control_tear</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_swap_control_tear</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_pixel_format</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_pixel_format</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_pixel_format</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETPIXELFORMATATTRIBIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETPIXELFORMATATTRIBIVARBPROC</name></type> <name>glad_wglGetPixelFormatAttribivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetPixelFormatAttribivARB</name></cpp:macro> <cpp:value>glad_wglGetPixelFormatAttribivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETPIXELFORMATATTRIBFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FLOAT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETPIXELFORMATATTRIBFVARBPROC</name></type> <name>glad_wglGetPixelFormatAttribfvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetPixelFormatAttribfvARB</name></cpp:macro> <cpp:value>glad_wglGetPixelFormatAttribfvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLCHOOSEPIXELFORMATARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FLOAT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCHOOSEPIXELFORMATARBPROC</name></type> <name>glad_wglChoosePixelFormatARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglChoosePixelFormatARB</name></cpp:macro> <cpp:value>glad_wglChoosePixelFormatARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_multisample</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_I3D_genlock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_I3D_genlock</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_I3D_genlock</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLENABLEGENLOCKI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENABLEGENLOCKI3DPROC</name></type> <name>glad_wglEnableGenlockI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnableGenlockI3D</name></cpp:macro> <cpp:value>glad_wglEnableGenlockI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDISABLEGENLOCKI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDISABLEGENLOCKI3DPROC</name></type> <name>glad_wglDisableGenlockI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDisableGenlockI3D</name></cpp:macro> <cpp:value>glad_wglDisableGenlockI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLISENABLEDGENLOCKI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLISENABLEDGENLOCKI3DPROC</name></type> <name>glad_wglIsEnabledGenlockI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglIsEnabledGenlockI3D</name></cpp:macro> <cpp:value>glad_wglIsEnabledGenlockI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGENLOCKSOURCEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGENLOCKSOURCEI3DPROC</name></type> <name>glad_wglGenlockSourceI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGenlockSourceI3D</name></cpp:macro> <cpp:value>glad_wglGenlockSourceI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGENLOCKSOURCEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGENLOCKSOURCEI3DPROC</name></type> <name>glad_wglGetGenlockSourceI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGenlockSourceI3D</name></cpp:macro> <cpp:value>glad_wglGetGenlockSourceI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGENLOCKSOURCEEDGEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGENLOCKSOURCEEDGEI3DPROC</name></type> <name>glad_wglGenlockSourceEdgeI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGenlockSourceEdgeI3D</name></cpp:macro> <cpp:value>glad_wglGenlockSourceEdgeI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGENLOCKSOURCEEDGEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGENLOCKSOURCEEDGEI3DPROC</name></type> <name>glad_wglGetGenlockSourceEdgeI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGenlockSourceEdgeI3D</name></cpp:macro> <cpp:value>glad_wglGetGenlockSourceEdgeI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGENLOCKSAMPLERATEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGENLOCKSAMPLERATEI3DPROC</name></type> <name>glad_wglGenlockSampleRateI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGenlockSampleRateI3D</name></cpp:macro> <cpp:value>glad_wglGenlockSampleRateI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGENLOCKSAMPLERATEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGENLOCKSAMPLERATEI3DPROC</name></type> <name>glad_wglGetGenlockSampleRateI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGenlockSampleRateI3D</name></cpp:macro> <cpp:value>glad_wglGetGenlockSampleRateI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGENLOCKSOURCEDELAYI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGENLOCKSOURCEDELAYI3DPROC</name></type> <name>glad_wglGenlockSourceDelayI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGenlockSourceDelayI3D</name></cpp:macro> <cpp:value>glad_wglGenlockSourceDelayI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGENLOCKSOURCEDELAYI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGENLOCKSOURCEDELAYI3DPROC</name></type> <name>glad_wglGetGenlockSourceDelayI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGenlockSourceDelayI3D</name></cpp:macro> <cpp:value>glad_wglGetGenlockSourceDelayI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC</name></type> <name>glad_wglQueryGenlockMaxSourceDelayI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryGenlockMaxSourceDelayI3D</name></cpp:macro> <cpp:value>glad_wglQueryGenlockMaxSourceDelayI3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_DX_interop</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_DX_interop</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_DX_interop</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXSETRESOURCESHAREHANDLENVPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXSETRESOURCESHAREHANDLENVPROC</name></type> <name>glad_wglDXSetResourceShareHandleNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXSetResourceShareHandleNV</name></cpp:macro> <cpp:value>glad_wglDXSetResourceShareHandleNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HANDLE</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXOPENDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXOPENDEVICENVPROC</name></type> <name>glad_wglDXOpenDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXOpenDeviceNV</name></cpp:macro> <cpp:value>glad_wglDXOpenDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXCLOSEDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXCLOSEDEVICENVPROC</name></type> <name>glad_wglDXCloseDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXCloseDeviceNV</name></cpp:macro> <cpp:value>glad_wglDXCloseDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HANDLE</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXREGISTEROBJECTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXREGISTEROBJECTNVPROC</name></type> <name>glad_wglDXRegisterObjectNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXRegisterObjectNV</name></cpp:macro> <cpp:value>glad_wglDXRegisterObjectNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXUNREGISTEROBJECTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXUNREGISTEROBJECTNVPROC</name></type> <name>glad_wglDXUnregisterObjectNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXUnregisterObjectNV</name></cpp:macro> <cpp:value>glad_wglDXUnregisterObjectNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXOBJECTACCESSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXOBJECTACCESSNVPROC</name></type> <name>glad_wglDXObjectAccessNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXObjectAccessNV</name></cpp:macro> <cpp:value>glad_wglDXObjectAccessNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXLOCKOBJECTSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXLOCKOBJECTSNVPROC</name></type> <name>glad_wglDXLockObjectsNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXLockObjectsNV</name></cpp:macro> <cpp:value>glad_wglDXLockObjectsNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDXUNLOCKOBJECTSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDXUNLOCKOBJECTSNVPROC</name></type> <name>glad_wglDXUnlockObjectsNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDXUnlockObjectsNV</name></cpp:macro> <cpp:value>glad_wglDXUnlockObjectsNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_3DL_stereo_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_3DL_stereo_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_3DL_stereo_control</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSETSTEREOEMITTERSTATE3DLPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSETSTEREOEMITTERSTATE3DLPROC</name></type> <name>glad_wglSetStereoEmitterState3DL</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSetStereoEmitterState3DL</name></cpp:macro> <cpp:value>glad_wglSetStereoEmitterState3DL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_pbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_pbuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_pbuffer</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>HPBUFFEREXT</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEPBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEPBUFFEREXTPROC</name></type> <name>glad_wglCreatePbufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreatePbufferEXT</name></cpp:macro> <cpp:value>glad_wglCreatePbufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HDC</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETPBUFFERDCEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFEREXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETPBUFFERDCEXTPROC</name></type> <name>glad_wglGetPbufferDCEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetPbufferDCEXT</name></cpp:macro> <cpp:value>glad_wglGetPbufferDCEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASEPBUFFERDCEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFEREXT</name></type></decl></parameter>, <parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASEPBUFFERDCEXTPROC</name></type> <name>glad_wglReleasePbufferDCEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleasePbufferDCEXT</name></cpp:macro> <cpp:value>glad_wglReleasePbufferDCEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDESTROYPBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFEREXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDESTROYPBUFFEREXTPROC</name></type> <name>glad_wglDestroyPbufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDestroyPbufferEXT</name></cpp:macro> <cpp:value>glad_wglDestroyPbufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYPBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFEREXT</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYPBUFFEREXTPROC</name></type> <name>glad_wglQueryPbufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryPbufferEXT</name></cpp:macro> <cpp:value>glad_wglQueryPbufferEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_display_color_table</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_display_color_table</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_display_color_table</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglCreateDisplayColorTableEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateDisplayColorTableEXT</name></cpp:macro> <cpp:value>glad_wglCreateDisplayColorTableEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNWGLLOADDISPLAYCOLORTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLLOADDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglLoadDisplayColorTableEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglLoadDisplayColorTableEXT</name></cpp:macro> <cpp:value>glad_wglLoadDisplayColorTableEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNWGLBINDDISPLAYCOLORTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBINDDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglBindDisplayColorTableEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBindDisplayColorTableEXT</name></cpp:macro> <cpp:value>glad_wglBindDisplayColorTableEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>APIENTRYP</name> <name>PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC</name></type> <name>glad_wglDestroyDisplayColorTableEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDestroyDisplayColorTableEXT</name></cpp:macro> <cpp:value>glad_wglDestroyDisplayColorTableEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_video_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_video_output</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_video_output</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETVIDEODEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>HPVIDEODEV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETVIDEODEVICENVPROC</name></type> <name>glad_wglGetVideoDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetVideoDeviceNV</name></cpp:macro> <cpp:value>glad_wglGetVideoDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASEVIDEODEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HPVIDEODEV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASEVIDEODEVICENVPROC</name></type> <name>glad_wglReleaseVideoDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleaseVideoDeviceNV</name></cpp:macro> <cpp:value>glad_wglReleaseVideoDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLBINDVIDEOIMAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HPVIDEODEV</name></type></decl></parameter>, <parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBINDVIDEOIMAGENVPROC</name></type> <name>glad_wglBindVideoImageNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBindVideoImageNV</name></cpp:macro> <cpp:value>glad_wglBindVideoImageNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASEVIDEOIMAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASEVIDEOIMAGENVPROC</name></type> <name>glad_wglReleaseVideoImageNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleaseVideoImageNV</name></cpp:macro> <cpp:value>glad_wglReleaseVideoImageNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSENDPBUFFERTOVIDEONVPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSENDPBUFFERTOVIDEONVPROC</name></type> <name>glad_wglSendPbufferToVideoNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSendPbufferToVideoNV</name></cpp:macro> <cpp:value>glad_wglSendPbufferToVideoNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETVIDEOINFONVPROC</name>)<parameter_list>(<parameter><decl><type><name>HPVIDEODEV</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETVIDEOINFONVPROC</name></type> <name>glad_wglGetVideoInfoNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetVideoInfoNV</name></cpp:macro> <cpp:value>glad_wglGetVideoInfoNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_robustness_application_isolation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_robustness_application_isolation</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_robustness_application_isolation</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_3DFX_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_3DFX_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_3DFX_multisample</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_I3D_gamma</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_I3D_gamma</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_I3D_gamma</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGAMMATABLEPARAMETERSI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGAMMATABLEPARAMETERSI3DPROC</name></type> <name>glad_wglGetGammaTableParametersI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGammaTableParametersI3D</name></cpp:macro> <cpp:value>glad_wglGetGammaTableParametersI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSETGAMMATABLEPARAMETERSI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSETGAMMATABLEPARAMETERSI3DPROC</name></type> <name>glad_wglSetGammaTableParametersI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSetGammaTableParametersI3D</name></cpp:macro> <cpp:value>glad_wglSetGammaTableParametersI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGAMMATABLEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>USHORT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>USHORT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>USHORT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGAMMATABLEI3DPROC</name></type> <name>glad_wglGetGammaTableI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGammaTableI3D</name></cpp:macro> <cpp:value>glad_wglGetGammaTableI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSETGAMMATABLEI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>USHORT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>USHORT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>USHORT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSETGAMMATABLEI3DPROC</name></type> <name>glad_wglSetGammaTableI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSetGammaTableI3D</name></cpp:macro> <cpp:value>glad_wglSetGammaTableI3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_copy_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_copy_image</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLCOPYIMAGESUBDATANVPROC</name>)<parameter_list>(<parameter><decl><type><name>HGLRC</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>HGLRC</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCOPYIMAGESUBDATANVPROC</name></type> <name>glad_wglCopyImageSubDataNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCopyImageSubDataNV</name></cpp:macro> <cpp:value>glad_wglCopyImageSubDataNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_present_video</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_present_video</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_present_video</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNWGLENUMERATEVIDEODEVICESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HVIDEOOUTPUTDEVICENV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENUMERATEVIDEODEVICESNVPROC</name></type> <name>glad_wglEnumerateVideoDevicesNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnumerateVideoDevicesNV</name></cpp:macro> <cpp:value>glad_wglEnumerateVideoDevicesNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLBINDVIDEODEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>HVIDEOOUTPUTDEVICENV</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBINDVIDEODEVICENVPROC</name></type> <name>glad_wglBindVideoDeviceNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBindVideoDeviceNV</name></cpp:macro> <cpp:value>glad_wglBindVideoDeviceNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYCURRENTCONTEXTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYCURRENTCONTEXTNVPROC</name></type> <name>glad_wglQueryCurrentContextNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryCurrentContextNV</name></cpp:macro> <cpp:value>glad_wglQueryCurrentContextNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_create_context_es2_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_create_context_es2_profile</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_create_context_es2_profile</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_create_context_robustness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_create_context_robustness</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_create_context_robustness</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_make_current_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_make_current_read</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_make_current_read</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLMAKECONTEXTCURRENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HGLRC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLMAKECONTEXTCURRENTARBPROC</name></type> <name>glad_wglMakeContextCurrentARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglMakeContextCurrentARB</name></cpp:macro> <cpp:value>glad_wglMakeContextCurrentARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HDC</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETCURRENTREADDCARBPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETCURRENTREADDCARBPROC</name></type> <name>glad_wglGetCurrentReadDCARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetCurrentReadDCARB</name></cpp:macro> <cpp:value>glad_wglGetCurrentReadDCARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_multisample</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_extensions_string</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_extensions_string</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_extensions_string</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name></type> <name>glad_wglGetExtensionsStringEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetExtensionsStringEXT</name></cpp:macro> <cpp:value>glad_wglGetExtensionsStringEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_render_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_render_depth_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_render_depth_texture</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ATI_pixel_format_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ATI_pixel_format_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ATI_pixel_format_float</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_create_context_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_create_context_profile</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_create_context_profile</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_swap_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_swap_control</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSWAPINTERVALEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSWAPINTERVALEXTPROC</name></type> <name>glad_wglSwapIntervalEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSwapIntervalEXT</name></cpp:macro> <cpp:value>glad_wglSwapIntervalEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETSWAPINTERVALEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETSWAPINTERVALEXTPROC</name></type> <name>glad_wglGetSwapIntervalEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetSwapIntervalEXT</name></cpp:macro> <cpp:value>glad_wglGetSwapIntervalEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_I3D_digital_video_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_I3D_digital_video_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_I3D_digital_video_control</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC</name></type> <name>glad_wglGetDigitalVideoParametersI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetDigitalVideoParametersI3D</name></cpp:macro> <cpp:value>glad_wglGetDigitalVideoParametersI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC</name></type> <name>glad_wglSetDigitalVideoParametersI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSetDigitalVideoParametersI3D</name></cpp:macro> <cpp:value>glad_wglSetDigitalVideoParametersI3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_pbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_pbuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_pbuffer</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>HPBUFFERARB</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEPBUFFERARBPROC</name></type> <name>glad_wglCreatePbufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreatePbufferARB</name></cpp:macro> <cpp:value>glad_wglCreatePbufferARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HDC</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETPBUFFERDCARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETPBUFFERDCARBPROC</name></type> <name>glad_wglGetPbufferDCARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetPbufferDCARB</name></cpp:macro> <cpp:value>glad_wglGetPbufferDCARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNWGLRELEASEPBUFFERDCARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRELEASEPBUFFERDCARBPROC</name></type> <name>glad_wglReleasePbufferDCARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglReleasePbufferDCARB</name></cpp:macro> <cpp:value>glad_wglReleasePbufferDCARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDESTROYPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDESTROYPBUFFERARBPROC</name></type> <name>glad_wglDestroyPbufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDestroyPbufferARB</name></cpp:macro> <cpp:value>glad_wglDestroyPbufferARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HPBUFFERARB</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYPBUFFERARBPROC</name></type> <name>glad_wglQueryPbufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryPbufferARB</name></cpp:macro> <cpp:value>glad_wglQueryPbufferARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_NV_vertex_array_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_NV_vertex_array_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_NV_vertex_array_range</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNWGLALLOCATEMEMORYNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLALLOCATEMEMORYNVPROC</name></type> <name>glad_wglAllocateMemoryNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglAllocateMemoryNV</name></cpp:macro> <cpp:value>glad_wglAllocateMemoryNV</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNWGLFREEMEMORYNVPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLFREEMEMORYNVPROC</name></type> <name>glad_wglFreeMemoryNV</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglFreeMemoryNV</name></cpp:macro> <cpp:value>glad_wglFreeMemoryNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_AMD_gpu_association</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_AMD_gpu_association</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_AMD_gpu_association</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>UINT</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGPUIDSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGPUIDSAMDPROC</name></type> <name>glad_wglGetGPUIDsAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGPUIDsAMD</name></cpp:macro> <cpp:value>glad_wglGetGPUIDsAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>INT</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETGPUINFOAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETGPUINFOAMDPROC</name></type> <name>glad_wglGetGPUInfoAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetGPUInfoAMD</name></cpp:macro> <cpp:value>glad_wglGetGPUInfoAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>UINT</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETCONTEXTGPUIDAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>HGLRC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETCONTEXTGPUIDAMDPROC</name></type> <name>glad_wglGetContextGPUIDAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetContextGPUIDAMD</name></cpp:macro> <cpp:value>glad_wglGetContextGPUIDAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HGLRC</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC</name></type> <name>glad_wglCreateAssociatedContextAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateAssociatedContextAMD</name></cpp:macro> <cpp:value>glad_wglCreateAssociatedContextAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HGLRC</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>HGLRC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC</name></type> <name>glad_wglCreateAssociatedContextAttribsAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateAssociatedContextAttribsAMD</name></cpp:macro> <cpp:value>glad_wglCreateAssociatedContextAttribsAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>HGLRC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC</name></type> <name>glad_wglDeleteAssociatedContextAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDeleteAssociatedContextAMD</name></cpp:macro> <cpp:value>glad_wglDeleteAssociatedContextAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>HGLRC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC</name></type> <name>glad_wglMakeAssociatedContextCurrentAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglMakeAssociatedContextCurrentAMD</name></cpp:macro> <cpp:value>glad_wglMakeAssociatedContextCurrentAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HGLRC</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC</name></type> <name>glad_wglGetCurrentAssociatedContextAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetCurrentAssociatedContextAMD</name></cpp:macro> <cpp:value>glad_wglGetCurrentAssociatedContextAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>APIENTRYP</name> <name>PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>HGLRC</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC</name></type> <name>glad_wglBlitContextFramebufferAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglBlitContextFramebufferAMD</name></cpp:macro> <cpp:value>glad_wglBlitContextFramebufferAMD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_pixel_format_packed_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_pixel_format_packed_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_pixel_format_packed_float</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_make_current_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_EXT_make_current_read</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_EXT_make_current_read</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLMAKECONTEXTCURRENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>HGLRC</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLMAKECONTEXTCURRENTEXTPROC</name></type> <name>glad_wglMakeContextCurrentEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglMakeContextCurrentEXT</name></cpp:macro> <cpp:value>glad_wglMakeContextCurrentEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>HDC</name></type> (<name>APIENTRYP</name> <name>PFNWGLGETCURRENTREADDCEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLGETCURRENTREADDCEXTPROC</name></type> <name>glad_wglGetCurrentReadDCEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglGetCurrentReadDCEXT</name></cpp:macro> <cpp:value>glad_wglGetCurrentReadDCEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_I3D_swap_frame_lock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_I3D_swap_frame_lock</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_I3D_swap_frame_lock</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLENABLEFRAMELOCKI3DPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLENABLEFRAMELOCKI3DPROC</name></type> <name>glad_wglEnableFrameLockI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglEnableFrameLockI3D</name></cpp:macro> <cpp:value>glad_wglEnableFrameLockI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLDISABLEFRAMELOCKI3DPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDISABLEFRAMELOCKI3DPROC</name></type> <name>glad_wglDisableFrameLockI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDisableFrameLockI3D</name></cpp:macro> <cpp:value>glad_wglDisableFrameLockI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLISENABLEDFRAMELOCKI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>BOOL</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLISENABLEDFRAMELOCKI3DPROC</name></type> <name>glad_wglIsEnabledFrameLockI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglIsEnabledFrameLockI3D</name></cpp:macro> <cpp:value>glad_wglIsEnabledFrameLockI3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLQUERYFRAMELOCKMASTERI3DPROC</name>)<parameter_list>(<parameter><decl><type><name>BOOL</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLQUERYFRAMELOCKMASTERI3DPROC</name></type> <name>glad_wglQueryFrameLockMasterI3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglQueryFrameLockMasterI3D</name></cpp:macro> <cpp:value>glad_wglQueryFrameLockMasterI3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WGL_ARB_buffer_region</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WGL_ARB_buffer_region</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_WGL_ARB_buffer_region</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>HANDLE</name></type> (<name>APIENTRYP</name> <name>PFNWGLCREATEBUFFERREGIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLCREATEBUFFERREGIONARBPROC</name></type> <name>glad_wglCreateBufferRegionARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglCreateBufferRegionARB</name></cpp:macro> <cpp:value>glad_wglCreateBufferRegionARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>APIENTRYP</name> <name>PFNWGLDELETEBUFFERREGIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLDELETEBUFFERREGIONARBPROC</name></type> <name>glad_wglDeleteBufferRegionARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglDeleteBufferRegionARB</name></cpp:macro> <cpp:value>glad_wglDeleteBufferRegionARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLSAVEBUFFERREGIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLSAVEBUFFERREGIONARBPROC</name></type> <name>glad_wglSaveBufferRegionARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglSaveBufferRegionARB</name></cpp:macro> <cpp:value>glad_wglSaveBufferRegionARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>APIENTRYP</name> <name>PFNWGLRESTOREBUFFERREGIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNWGLRESTOREBUFFERREGIONARBPROC</name></type> <name>glad_wglRestoreBufferRegionARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wglRestoreBufferRegionARB</name></cpp:macro> <cpp:value>glad_wglRestoreBufferRegionARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
