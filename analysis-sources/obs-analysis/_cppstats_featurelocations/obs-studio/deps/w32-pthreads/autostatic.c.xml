<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\autostatic.c">



































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_process_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_win32_process_attach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_process_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_win32_thread_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_win32_process_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attribute_section</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((section(a)))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attribute_section</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__pragma(section(a,long,read)); __declspec(allocate(a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>attribute_section</name><argument_list>(<argument><literal type="string">".ctors"</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>gcc_ctor</name> <init>= <expr><name>on_process_init</name></expr></init></decl>;</decl_stmt>
<macro><name>attribute_section</name><argument_list>(<argument><literal type="string">".dtors"</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>gcc_dtor</name> <init>= <expr><name>on_process_exit</name></expr></init></decl>;</decl_stmt>

<macro><name>attribute_section</name><argument_list>(<argument><literal type="string">".CRT$XCU"</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msc_ctor</name> <init>= <expr><name>on_process_init</name></expr></init></decl>;</decl_stmt>
<macro><name>attribute_section</name><argument_list>(<argument><literal type="string">".CRT$XPU"</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msc_dtor</name> <init>= <expr><name>on_process_exit</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
