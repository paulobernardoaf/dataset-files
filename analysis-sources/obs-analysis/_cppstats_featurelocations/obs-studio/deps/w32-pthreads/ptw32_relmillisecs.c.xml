<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_relmillisecs.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NEED_FTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD_INLINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>INLINE</name> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<name>DWORD</name></type>
<name>ptw32_relmillisecs</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type> <name>abstime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>NANOSEC_PER_MILLISEC</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>MILLISEC_PER_SEC</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>milliseconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tmpAbsMilliseconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tmpCurrMilliseconds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_FTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>currSysTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>st</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>__MSVCRT_VERSION__</name> <operator>&gt;=</operator> <literal type="number">0x0601</literal> <operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>__timeb64</name></name></type> <name>currSysTime</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>_timeb</name></name></type> <name>currSysTime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 













<expr_stmt><expr><name>tmpAbsMilliseconds</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>abstime</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <name>MILLISEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpAbsMilliseconds</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>abstime</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>+</operator> <operator>(</operator><name>NANOSEC_PER_MILLISEC</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>NANOSEC_PER_MILLISEC</name></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_FTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>GetSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SystemTimeToFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>ptw32_filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpCurrMilliseconds</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>currSysTime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <name>MILLISEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpCurrMilliseconds</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>currSysTime</name><operator>.</operator><name>tv_nsec</name></name> <operator>+</operator> <operator>(</operator><name>NANOSEC_PER_MILLISEC</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <name>NANOSEC_PER_MILLISEC</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<expr_stmt><expr><call><name>_ftime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>__MSVCRT_VERSION__</name> <operator>&gt;=</operator> <literal type="number">0x0601</literal> <operator>)</operator></expr></cpp:elif>

<expr_stmt><expr><call><name>_ftime64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_ftime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tmpCurrMilliseconds</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>currSysTime</name><operator>.</operator><name>time</name></name> <operator>*</operator> <name>MILLISEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpCurrMilliseconds</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>currSysTime</name><operator>.</operator><name>millitm</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>tmpAbsMilliseconds</name> <operator>&gt;</operator> <name>tmpCurrMilliseconds</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>milliseconds</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><name>tmpAbsMilliseconds</name> <operator>-</operator> <name>tmpCurrMilliseconds</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>milliseconds</name> <operator>==</operator> <name>INFINITE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>milliseconds</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>milliseconds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>milliseconds</name></expr>;</return>
</block_content>}</block></function>
</unit>
