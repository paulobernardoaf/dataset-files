<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_MCS_lock.c">


























































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>







<function><type><name>INLINE</name> <name>void</name></type> 
<name>ptw32_mcs_flag_set</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>e</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><name>flag</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>HANDLE</name><operator>)</operator><literal type="number">0</literal> <operator>!=</operator> <name>e</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type> 
<name>ptw32_mcs_flag_wait</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><literal type="number">0</literal> <operator>==</operator>
<call><name>PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><name>flag</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>


<decl_stmt><decl><type><name>HANDLE</name></type> <name>e</name> <init>= <expr><call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PTW32_FALSE</name></expr></argument>, <argument><expr><name>PTW32_FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><literal type="number">0</literal> <operator>==</operator> <call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><name>flag</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name>e</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD_INLINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>INLINE</name> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<name>void</name></type> 
<name>ptw32_mcs_lock_acquire</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_lock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type><name>pred</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nextFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>readyFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name>pred</name> <operator>=</operator> <operator>(</operator><name>ptw32_mcs_local_node_t</name> <operator>*</operator><operator>)</operator><call><name>PTW32_INTERLOCKED_EXCHANGE_PTR</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID_PTR</name><operator>)</operator><name>lock</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>pred</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>pred</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_flag_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pred</name><operator>-&gt;</operator><name>nextFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_flag_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>readyFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD_INLINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>INLINE</name> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<name>void</name></type> 
<name>ptw32_mcs_lock_release</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_lock_t</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>lock</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type><name>next</name> <init>=
<expr><operator>(</operator><name>ptw32_mcs_local_node_t</name> <operator>*</operator><operator>)</operator>
<call><name>PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>next</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <operator>(</operator><name>ptw32_mcs_local_node_t</name> <operator>*</operator><operator>)</operator>
<call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID_PTR</name><operator>)</operator><name>lock</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ptw32_mcs_flag_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>nextFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>ptw32_mcs_local_node_t</name> <operator>*</operator><operator>)</operator>
<call><name>PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ptw32_mcs_flag_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>readyFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD_INLINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>INLINE</name> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<name>int</name></type> 
<name>ptw32_mcs_lock_try_acquire</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_lock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nextFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>readyFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID_PTR</name><operator>)</operator><name>lock</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>node</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>EBUSY</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD_INLINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>INLINE</name> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<name>void</name></type> 
<name>ptw32_mcs_node_transfer</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>new_node</name></decl></parameter>, <parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>old_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name><name>old_node</name><operator>-&gt;</operator><name>lock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>nextFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>readyFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptw32_mcs_local_node_t</name> <operator>*</operator><operator>)</operator><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID_PTR</name><operator>)</operator><name><name>new_node</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>new_node</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>old_node</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>old_node</name></expr>)</condition>
<block>{<block_content>



<while>while <condition>(<expr><name><name>old_node</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>old_node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
