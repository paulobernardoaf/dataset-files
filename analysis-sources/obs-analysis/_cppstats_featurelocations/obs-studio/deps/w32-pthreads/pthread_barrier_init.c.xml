<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_barrier_init.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>int</name></type>
<name>pthread_barrier_init</name> <parameter_list>(<parameter><decl><type><name>pthread_barrier_t</name> <modifier>*</modifier></type> <name>barrier</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>pthread_barrierattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_barrier_t</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>barrier</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>pthread_barrier_t</name><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pshared</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>
?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>pshared</name></name></expr> </then><else>: <expr><name>PTHREAD_PROCESS_PRIVATE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>nCurrentBarrierHeight</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>nInitialBarrierHeight</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>semBarrierBreeched</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>pshared</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>barrier</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ENOMEM</name></expr>;</return>
</block_content>}</block></function>
</unit>
