<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_OLL_lock.c">














































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>




<typedef>typedef <type><name><name>union</name> <name>ptw32_oll_counter_t_</name></name></type> <name>ptw32_oll_counter_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_oll_snziRoot_t_</name></name></type> <name>ptw32_oll_snziRoot_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_oll_snziNode_t_</name></name></type> <name>ptw32_oll_snziNode_t</name>;</typedef>
<typedef>typedef <type><name><name>union</name> <name>ptw32_oll_snziNodeOrRoot_t_</name></name></type> <name>ptw32_oll_snziNodeOrRoot_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_oll_queryResult_t_</name></name></type> <name>ptw32_oll_queryResult_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_oll_ticket_t_</name></name></type> <name>ptw32_oll_ticket_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_oll_csnzi_t_</name></name></type> <name>ptw32_oll_csnzi_t</name>;</typedef>

<enum>enum
<block>{
<decl><name>ptw32_archWidth</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr></init></decl>,
<decl><name>ptw32_oll_countWidth</name> <init>= <expr><name>ptw32_archWidth</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_OLL_MAXREADERS</name></cpp:macro> <cpp:value>(((size_t)2&lt;&lt;(ptw32_oll_countWidth-1))-1)</cpp:value></cpp:define>

<union>union <name>ptw32_oll_counter_t_</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>word</name> <range>: <expr><name>ptw32_archWidth</name></expr></range></decl>;</decl_stmt>
<struct>struct
<block>{








<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <range>: <expr><name>ptw32_oll_countWidth</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>root</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>state</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
}</block> <decl><name>internal</name></decl>;</struct>
}</block>;</union>

<struct>struct <name>ptw32_oll_snziRoot_t_</name>
<block>{




<decl_stmt><decl><type><name>ptw32_oll_counter_t</name></type> <name>counter</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum
<block>{
<decl><name>ptw32_oll_snziRoot_open</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ptw32_oll_snziRoot_closed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<enum>enum
<block>{
<decl><name>ptw32_oll_snzi_root</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ptw32_oll_snzi_node</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>





<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>ptw32_oll_snziRoot_openAndZero</name> <init>= <expr><block>{<expr><operator>.</operator><name><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>ptw32_oll_snzi_root</name></expr>,
<expr><operator>.</operator><name><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ptw32_oll_snziRoot_open</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>ptw32_oll_snziRoot_closedAndZero</name> <init>= <expr><block>{<expr><operator>.</operator><name><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>ptw32_oll_snzi_root</name></expr>,
<expr><operator>.</operator><name><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ptw32_oll_snziRoot_closed</name></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>ptw32_oll_queryResult_t_</name>
<block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>nonZero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>open</name></decl>;</decl_stmt>
}</block>;</struct>

<union>union <name>ptw32_oll_snziNodeOrRoot_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name><modifier>*</modifier></type> <name>rootPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_snziNode_t</name><modifier>*</modifier></type> <name>nodePtr</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>ptw32_oll_snziNode_t_</name>
<block>{



<decl_stmt><decl><type><name>ptw32_oll_counter_t</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_snziNodeOrRoot_t</name></type> <name>parentPtr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ptw32_oll_ticket_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_oll_snziNodeOrRoot_t</name></type> <name>snziNodeOrRoot</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>ptw32_oll_ticket_t</name></type> <name>ptw32_oll_ticket_null</name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>ptw32_oll_csnzi_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>proxyRoot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_snziNode_t</name></type> <name><name>leafs</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <type><name><name>struct</name> <name>ptw32_foll_node_t_</name></name></type> <name>ptw32_foll_node_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_foll_local_t_</name></name></type> <name>ptw32_foll_local_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_foll_rwlock_t_</name></name></type> <name>ptw32_foll_rwlock_t</name>;</typedef>

<enum>enum
<block>{
<decl><name>ptw32_srwl_reader</name></decl>,
<decl><name>ptw32_srwl_writer</name></decl>
}</block>;</enum>

<enum>enum
<block>{
<decl><name>ptw32_srwl_free</name></decl>,
<decl><name>ptw32_srwl_in_use</name></decl>
}</block>;</enum>

<struct>struct <name>ptw32_foll_node_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>qNextPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>nextPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>spin</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ptw32_foll_local_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>rNodePtr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>wNodePtr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>departFromPtr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ptw32_oll_ticket_t</name></type> <name>ticket</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>ptw32_foll_rwlock_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>tailPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_foll_node_t</name><modifier>*</modifier></type> <name>rNodesPtr</name></decl>;</decl_stmt> 
}</block>;</struct>











<function><type><name>BOOL</name></type>
<name>ptw32_oll_ShouldArriveAtTree</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name>PTW32_FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>ptw32_oll_GetLeafForThread</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><name>ptw32_oll_ticket_t</name></type>
<name>ptw32_oll_Arrive</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnzi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_ticket_t</name></type> <name>ticket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>oldProxy</name> <init>= <expr><name><name>csnzi</name><operator>-&gt;</operator><name>proxyRoot</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>ptw32_oll_snziRoot_open</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ticket</name><operator>.</operator><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name></name> <operator>=</operator> <operator>(</operator><name>ptw32_oll_snziRoot_t</name><operator>*</operator><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ticket</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ptw32_oll_ShouldArriveAtTree</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>newProxy</name> <init>= <expr><name>oldProxy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>csnzi</name><operator>-&gt;</operator><name>proxyRoot</name><operator>.</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>ticket</name><operator>.</operator><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>csnzi</name><operator>-&gt;</operator><name>proxyRoot</name></name></expr>;</expr_stmt>
<return>return <expr><name>ticket</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_snziNode_t</name><modifier>*</modifier></type> <name>leafPtr</name> <init>= <expr><operator>&amp;</operator><name><name>csnzi</name><operator>-&gt;</operator><name>leafs</name><index>[<expr><call><name>ptw32_oll_GetLeafForThread</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ticket</name><operator>.</operator><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>ptw32_oll_TreeArrive</name><argument_list>(<argument><expr><name>leafPtr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>leafPtr</name></expr> </then><else>: <expr><operator>(</operator><name>ptw32_oll_snziNode_t</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>ticket</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><name>BOOL</name></type>
<name>ptw32_oll_Depart</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_ticket_t</name></type> <name>ticket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ptw32_oll_TreeDepart</name><argument_list>(<argument><expr><name><name>ticket</name><operator>.</operator><name>snziNodeOrRoot</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>BOOL</name></type>
<name>ptw32_oll_TreeArrive</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_snziNodeOrRoot_t</name></type> <name>snziNodeOrRoot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>root</name></name> <operator>!=</operator> <name>ptw32_oll_snzi_root</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_oll_counter_t</name></type> <name>newCounter</name></decl>, <decl><type ref="prev"/><name>oldCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>arrivedAtParent</name> <init>= <expr><name>PTW32_FALSE</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>oldCounter</name> <operator>=</operator> <name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>counter</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>oldCounter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>arrivedAtParent</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ptw32_oll_TreeArrive</name><argument_list>(<argument><expr><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>parentPtr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arrivedAtParent</name> <operator>=</operator> <name>PTW32_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>PTW32_FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newCounter</name> <operator>=</operator> <name>oldCounter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newCounter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newCounter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldCounter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldCounter</name><operator>.</operator><name>word</name></name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>newCounter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arrivedAtParent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ptw32_oll_TreeDepart</name><argument_list>(<argument><expr><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>parentPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>PTW32_TRUE</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>newRoot</name></decl>, <decl><type ref="prev"/><name>oldRoot</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>oldRoot</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptw32_oll_snziRoot_t</name><operator>*</operator><operator>)</operator><name><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oldRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name> <operator>==</operator> <name><name>ptw32_oll_snziRoot_closedAndZero</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PTW32_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newRoot</name> <operator>=</operator> <name>oldRoot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition>;</do>
<return>return <expr><name>PTW32_TRUE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>BOOL</name></type>
<name>ptw32_oll_TreeDepart</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_snziNodeOrRoot_t</name></type> <name>snziNodeOrRoot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>root</name></name> <operator>!=</operator> <name>ptw32_oll_snzi_root</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_oll_counter_t</name></type> <name>newCounter</name></decl>, <decl><type ref="prev"/><name>oldCounter</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>newCounter</name> <operator>=</operator> <name>oldCounter</name> <operator>=</operator> <name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>counter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newCounter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newCounter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldCounter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldCounter</name><operator>.</operator><name>word</name></name></expr>)</condition>;</do>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name><name>newCounter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>ptw32_oll_TreeDepart</name><argument_list>(<argument><expr><name><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name><operator>-&gt;</operator><name>parentPtr</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>PTW32_TRUE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>newRoot</name></decl>, <decl><type ref="prev"/><name>oldRoot</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>newRoot</name> <operator>=</operator> <name>oldRoot</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptw32_oll_snziRoot_t</name><operator>*</operator><operator>)</operator><name><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition>;</do>
<return>return <expr><operator>(</operator><name><name>newRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name> <operator>!=</operator> <name><name>ptw32_oll_snziRoot_closedAndZero</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ptw32_oll_Open</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name></name> <operator>=</operator> <name>ptw32_oll_snziRoot_openAndZero</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ptw32_oll_OpenWithArrivals</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>close</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>close</name></expr> ?</condition><then> <expr><name>ptw32_oll_snziRoot_closed</name></expr> </then><else>: <expr><name>ptw32_oll_snziRoot_open</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>BOOL</name></type>
<name>ptw32_oll_Close</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>newProxy</name></decl>, <decl><type ref="prev"/><name>oldProxy</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>oldProxy</name> <operator>=</operator> <name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>ptw32_oll_snziRoot_open</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>PTW32_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newProxy</name> <operator>=</operator> <name>oldProxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ptw32_oll_snziRoot_closed</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name><operator>.</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition>;</do>
<return>return <expr><operator>(</operator><name><name>newProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name> <operator>==</operator> <name><name>ptw32_oll_snziRoot_closedAndZero</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>BOOL</name></type>
<name>ptw32_oll_CloseIfEmpty</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>newProxy</name></decl>, <decl><type ref="prev"/><name>oldProxy</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>oldProxy</name> <operator>=</operator> <name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name> <operator>!=</operator> <name><name>ptw32_oll_snziRoot_openAndZero</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>PTW32_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newProxy</name> <operator>=</operator> <name>ptw32_oll_snziRoot_closedAndZero</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZEPTR</name><operator>)</operator><operator>&amp;</operator><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name><operator>.</operator><name>counter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>newProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>PTW32_INTERLOCKED_SIZE</name><operator>)</operator><name><name>oldProxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>word</name></name></expr>)</condition>;</do>
<return>return <expr><name>PTW32_TRUE</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>ptw32_oll_queryResult_t</name></type>
<name>ptw32_oll_Query</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_queryResult_t</name></type> <name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_snziRoot_t</name></type> <name>proxy</name> <init>= <expr><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>query</name><operator>.</operator><name>nonZero</name></name> <operator>=</operator> <operator>(</operator><name><name>proxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>query</name><operator>.</operator><name>open</name></name> <operator>=</operator> <operator>(</operator><name><name>proxy</name><operator>.</operator><name>counter</name><operator>.</operator><name>internal</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ptw32_oll_snziRoot_open</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>query</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>BOOL</name></type>
<name>ptw32_oll_Arrived</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_ticket_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>t</name><operator>.</operator><name>snziNodeOrRoot</name><operator>.</operator><name>nodePtr</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>ptw32_oll_ticket_t</name></type>
<name>ptw32_oll_DirectTicket</name><parameter_list>(<parameter><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_oll_ticket_t</name></type> <name>ticket</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ticket</name><operator>.</operator><name>snziNodeOrRoot</name><operator>.</operator><name>rootPtr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>csnziPtr</name><operator>-&gt;</operator><name>proxyRoot</name></name></expr>;</expr_stmt>
<return>return <expr><name>ticket</name></expr>;</return>
</block_content>}</block></function>



<typedef>typedef <type><name><name>struct</name> <name>ptw32_srwl_rwlock_t_</name></name></type> <name>ptw32_srwl_rwlock_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_srwl_node_t_</name></name></type> <name>ptw32_srwl_node_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ptw32_srwl_local_t_</name></name></type> <name>ptw32_srwl_local_t</name>;</typedef>

<enum>enum
<block>{
<decl><name>ptw32_srwl_reader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ptw32_srwl_writer</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<enum>enum
<block>{
<decl><name>ptw32_srwl_free</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ptw32_srwl_in_use</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>ptw32_srwl_rwlock_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>tailPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>readerNodePtr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ptw32_srwl_node_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>qNextPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_csnzi_t</name><modifier>*</modifier></type> <name>csnziPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>nextReaderPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>allocState</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>BOOL</name></type> <name>spin</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>ptw32_srwl_local_t_</name>
<block>{
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>rNodePtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>wNodePtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>departFromPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_oll_ticket_t</name></type> <name>ticket</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type>
<name>ptw32_srwl_AllocReaderNode</name><parameter_list>(<parameter><decl><type><name>ptw32_srwl_local_t</name><modifier>*</modifier></type> <name>local</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>currNodePtr</name> <init>= <expr><name><name>local</name><operator>-&gt;</operator><name>rNodePtr</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>currNodePtr</name><operator>-&gt;</operator><name>allocState</name></name> <operator>==</operator> <name>ptw32_srwl_free</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator><operator>&amp;</operator><name><name>currNodePtr</name><operator>-&gt;</operator><name>allocState</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>ptw32_srwl_in_use</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>ptw32_srwl_free</name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>ptw32_srwl_in_use</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>currNodePtr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>currNodePtr</name> <operator>=</operator> <name><name>currNodePtr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ptw32_srwl_FreeReaderNode</name><parameter_list>(<parameter><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>nodePtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<label><name>nodePtr</name></label>-&gt;<label><name>allocState</name> :</label><expr_stmt><expr><operator>=</operator> <name>ptw32_srwl_free</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ptw32_srwl_WriterLock</name><parameter_list>(<parameter><decl><type><name>ptw32_srwl_rwlock_t</name><modifier>*</modifier></type> <name>lockPtr</name></decl></parameter>, <parameter><decl><type><name>ptw32_srwl_local_t</name><modifier>*</modifier></type> <name>localPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>oldTailPtr</name> <operator>=</operator> <operator>(</operator><name>ptw32_srwl_rwlock_t</name><operator>*</operator><operator>)</operator><call><name>PTW32_INTERLOCKED_EXCHANGE_PTR</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID_PTR</name><operator>)</operator><operator>&amp;</operator><name><name>lockPtr</name><operator>-&gt;</operator><name>tailPtr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldTailPtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<label><name>localPtr</name></label>-&gt;<label><name>wNodePtr</name></label>-&gt;<label><name>spin</name> :</label><expr_stmt><expr><operator>=</operator> <name>PTW32_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldTailPtr</name><operator>-&gt;</operator><name>qNextPtr</name></name> <operator>=</operator> <name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oldTailPtr</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>ptw32_srwl_writer</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name><operator>-&gt;</operator><name>spin</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<while>while <condition>(<expr><call><name>ptw32_oll_Query</name><argument_list>(<argument><expr><name><name>oldTailPtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>open</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>






<if_stmt><if>if <condition>(<expr><call><name>ptw32_oll_Close</name><argument_list>(<argument><expr><name><name>oldTailPtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name><name>oldTailPtr</name><operator>-&gt;</operator><name>spin</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><call><name>ptw32_srwl_FreeReaderNode</name><argument_list>(<argument><expr><name>oldTailPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name><operator>-&gt;</operator><name>spin</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ptw32_srwl_WriterUnlock</name><parameter_list>(<parameter><decl><type><name>ptw32_srwl_rwlock_t</name><modifier>*</modifier></type> <name>lockPtr</name></decl></parameter>, <parameter><decl><type><name>ptw32_srwl_local_t</name><modifier>*</modifier></type> <name>localPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name><operator>-&gt;</operator><name>qNextPtr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOIDPTR</name><operator>)</operator><operator>&amp;</operator><name><name>lockPtr</name><operator>-&gt;</operator><name>tailPtr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name><operator>-&gt;</operator><name>qNextPtr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name><operator>-&gt;</operator><name>qNextPtr</name><operator>-&gt;</operator><name>spin</name></name> <operator>=</operator> <name>PTW32_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>wNodePtr</name><operator>-&gt;</operator><name>qNextPtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ptw32_srwl_ReaderLock</name><parameter_list>(<parameter><decl><type><name>ptw32_srwl_rwlock_t</name><modifier>*</modifier></type> <name>lockPtr</name></decl></parameter>, <parameter><decl><type><name>ptw32_srwl_local_t</name><modifier>*</modifier></type> <name>localPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>rNodePtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_srwl_node_t</name><modifier>*</modifier></type> <name>tailPtr</name> <init>= <expr><name><name>lockPtr</name><operator>-&gt;</operator><name>tailPtr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tailPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rNodePtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rNodePtr</name> <operator>=</operator> <call><name>ptw32_srwl_AllocReaderNode</name><argument_list>(<argument><expr><name>localPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rNodePtr</name><operator>-&gt;</operator><name>spin</name></name> <operator>=</operator> <name>PTW32_FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOIDPTR</name><operator>)</operator><operator>&amp;</operator><name><name>lockPtr</name><operator>-&gt;</operator><name>tailPtr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>rNodePtr</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>rNodePtr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ptw32_oll_Open</name><argument_list>(<argument><expr><name><name>rNodePtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name> <operator>=</operator> <call><name>ptw32_oll_Arrive</name><argument_list>(<argument><expr><name><name>rNodePtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptw32_oll_Arrived</name><argument_list>(<argument><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name></name> <operator>=</operator> <name>rNodePtr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rNodePtr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tailPtr</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>ptw32_srwl_writer</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rNodePtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rNodePtr</name> <operator>=</operator> <call><name>ptw32_srwl_AllocReaderNode</name><argument_list>(<argument><expr><name>localPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rNodePtr</name><operator>-&gt;</operator><name>spin</name></name> <operator>=</operator> <name>PTW32_TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOIDPTR</name><operator>)</operator><operator>&amp;</operator><name><name>lockPtr</name><operator>-&gt;</operator><name>tailPtr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>rNodePtr</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>tailPtr</name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>(</operator><name>PTW32_INTERLOCKED_PVOID</name><operator>)</operator><name>rNodePtr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tailPtr</name><operator>-&gt;</operator><name>qNextPtr</name></name> <operator>=</operator> <name>rNodePtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name> <operator>=</operator> <call><name>ptw32_oll_Arrive</name><argument_list>(<argument><expr><name><name>rNodePtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptw32_oll_Arrived</name><argument_list>(<argument><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name></name> <operator>=</operator> <name>rNodePtr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>rNodePtr</name><operator>-&gt;</operator><name>spin</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rNodePtr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>




<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name> <operator>=</operator> <call><name>ptw32_oll_Arrive</name><argument_list>(<argument><expr><name><name>tailPtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptw32_oll_Arrived</name><argument_list>(<argument><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rNodePtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ptw32_srwl_FreeReaderNode</name><argument_list>(<argument><expr><name>rNodePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name></name> <operator>=</operator> <name>tailPtr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>tailPtr</name><operator>-&gt;</operator><name>spin</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ptw32_srwl_ReaderUnlock</name><parameter_list>(<parameter><decl><type><name>ptw32_srwl_rwlock_t</name><modifier>*</modifier></type> <name>lockPtr</name></decl></parameter>, <parameter><decl><type><name>ptw32_srwl_local_t</name><modifier>*</modifier></type> <name>localPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ptw32_oll_Depart</name><argument_list>(<argument><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name><operator>-&gt;</operator><name>csnzi</name></name></expr></argument>, <argument><expr><name><name>localPtr</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name><operator>-&gt;</operator><name>qNextPtr</name><operator>-&gt;</operator><name>spin</name></name> <operator>=</operator> <name>PTW32_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name><operator>-&gt;</operator><name>qNextPtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_srwl_FreeReaderNode</name><argument_list>(<argument><expr><name><name>localPtr</name><operator>-&gt;</operator><name>departFromPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lx\n"</literal></expr></argument>, <argument><expr><name>PTW32_OLL_MAXREADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
