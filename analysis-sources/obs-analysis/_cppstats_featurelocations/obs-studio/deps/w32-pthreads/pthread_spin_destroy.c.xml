<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_spin_destroy.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>int</name></type>
<name>pthread_spin_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>pthread_spinlock_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>lock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>lock</name><operator>)</operator> <operator>!=</operator> <name>PTHREAD_SPINLOCK_INITIALIZER</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>interlock</name></name> <operator>==</operator> <name>PTW32_SPIN_USE_MUTEX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <name>PTW32_SPIN_UNLOCKED</name> <operator>!=</operator>
<call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name> <argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interlock</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <name>PTW32_SPIN_INVALID</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <name>PTW32_SPIN_UNLOCKED</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>result</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_spinlock_test_init_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lock</name> <operator>==</operator> <name>PTHREAD_SPINLOCK_INITIALIZER</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
