<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_spin_init.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>int</name></type>
<name>pthread_spin_init</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_spinlock_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>ptw32_getprocessors</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cpus</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cpus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpus</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pshared</name> <operator>==</operator> <name>PTHREAD_PROCESS_SHARED</name></expr>)</condition>
<block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_POSIX_THREAD_PROCESS_SHARED</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></cpp:if>





<cpp:error>#<cpp:directive>error</cpp:directive> ERROR [__FILE__, line __LINE__]: Process shared spin locks are not supported yet.</cpp:error>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>ENOSYS</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>pthread_spinlock_t</name><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpus</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cpus</name></name> <operator>=</operator> <name>cpus</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlock</name></name> <operator>=</operator> <name>PTW32_SPIN_UNLOCKED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>ma</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutexattr_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>result</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>pshared</name></name> <operator>=</operator> <name>pshared</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>result</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlock</name></name> <operator>=</operator> <name>PTW32_SPIN_USE_MUTEX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutexattr_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>result</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
