<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\cleanup.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>








<function><type><name>ptw32_cleanup_t</name> <modifier>*</modifier></type>
<name>ptw32_pop_cleanup</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>execute</name></decl></parameter>)</parameter_list>
























<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_cleanup_t</name> <modifier>*</modifier></type><name>cleanup</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cleanup</name> <operator>=</operator> <operator>(</operator><name>ptw32_cleanup_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_cleanupKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cleanup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>execute</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cleanup</name><operator>-&gt;</operator><name>routine</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>cleanup</name><operator>-&gt;</operator><name>routine</name></name>) <argument_list>(<argument><expr><name><name>cleanup</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_setspecific</name> <argument_list>(<argument><expr><name>ptw32_cleanupKey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>cleanup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>cleanup</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 


<function><type><name>void</name></type>
<name>ptw32_push_cleanup</name> <parameter_list>(<parameter><decl><type><name>ptw32_cleanup_t</name> <modifier>*</modifier></type> <name>cleanup</name></decl></parameter>,
<parameter><decl><type><name>ptw32_cleanup_callback_t</name></type> <name>routine</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>







































<block>{<block_content>
<expr_stmt><expr><name><name>cleanup</name><operator>-&gt;</operator><name>routine</name></name> <operator>=</operator> <name>routine</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cleanup</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cleanup</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <operator>(</operator><name>ptw32_cleanup_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_cleanupKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_setspecific</name> <argument_list>(<argument><expr><name>ptw32_cleanupKey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function> 
</unit>
