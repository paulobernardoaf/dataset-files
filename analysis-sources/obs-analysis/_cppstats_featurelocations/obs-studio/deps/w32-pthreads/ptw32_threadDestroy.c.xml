<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_threadDestroy.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>ptw32_threadDestroy</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name></type> <name>threadCopy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>threadCopy</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>threadCopy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>ptw32_threadReusePush</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>threadCopy</name><operator>.</operator><name>cancelEvent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>threadCopy</name><operator>.</operator><name>cancelEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>threadCopy</name><operator>.</operator><name>threadH</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>threadCopy</name><operator>.</operator><name>threadH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>
</block_content>}</block></function> 

</unit>
