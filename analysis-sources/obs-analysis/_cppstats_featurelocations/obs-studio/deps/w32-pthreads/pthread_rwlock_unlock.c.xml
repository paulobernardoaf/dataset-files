<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_rwlock_unlock.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>pthread_rwlock_unlock</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type> <name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>result1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>rwl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rwlock</name> <operator>==</operator> <name>PTHREAD_RWLOCK_INITIALIZER</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rwl</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rwl</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>PTW32_RWLOCK_MAGIC</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rwl</name><operator>-&gt;</operator><name>nExclusiveAccessCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator>
<call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_cond_signal</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>cndSharedAccessCompleted</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result1</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nExclusiveAccessCount</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result1</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxExclusiveAccess</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>result</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>result1</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
