<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_mutex_check_need_init.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pthread_mutexattr_t_</name></name></type> <name>ptw32_recursive_mutexattr_s</name> <init>=
<expr><block>{<expr><name>PTHREAD_PROCESS_PRIVATE</name></expr>, <expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pthread_mutexattr_t_</name></name></type> <name>ptw32_errorcheck_mutexattr_s</name> <init>=
<expr><block>{<expr><name>PTHREAD_PROCESS_PRIVATE</name></expr>, <expr><name>PTHREAD_MUTEX_ERRORCHECK</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutexattr_t</name></type> <name>ptw32_recursive_mutexattr</name> <init>= <expr><operator>&amp;</operator><name>ptw32_recursive_mutexattr_s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutexattr_t</name></type> <name>ptw32_errorcheck_mutexattr</name> <init>= <expr><operator>&amp;</operator><name>ptw32_errorcheck_mutexattr_s</name></expr></init></decl>;</decl_stmt>


<function><type><name>INLINE</name> <name>int</name></type>
<name>ptw32_mutex_check_need_init</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_mutex_test_init_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>mtx</name> <operator>=</operator> <operator>*</operator><name>mutex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mtx</name> <operator>==</operator> <name>PTHREAD_MUTEX_INITIALIZER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mtx</name> <operator>==</operator> <name>PTHREAD_RECURSIVE_MUTEX_INITIALIZER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptw32_recursive_mutexattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mtx</name> <operator>==</operator> <name>PTHREAD_ERRORCHECK_MUTEX_INITIALIZER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptw32_errorcheck_mutexattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
