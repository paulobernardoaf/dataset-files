<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\signal.c">


















































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSET_T</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ptw32_signal_thread</name> <parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ptw32_signal_callhandler</name> <parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pthread_sigmask</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type> <name>oset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name> <init>= <expr><call><name>pthread_self</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ENOENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>how</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SIG_BLOCK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>SIG_UNBLOCK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>SIG_SETMASK</name></expr>:</case>
<break>break;</break>
<default>default:</default>

<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>oset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>oset</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thread</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>sigmask</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>set</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>thread</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>sigmask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>how</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SIG_BLOCK</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> sizeof <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>|=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>SIG_UNBLOCK</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> sizeof <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>^=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<case>case <expr><name>SIG_SETMASK</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thread</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>sigmask</name></name><operator>)</operator></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>sigwait</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sigset_t</name> <modifier>*</modifier></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>pthread_test_cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>sigaction</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>oldact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
