<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_reuse.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>




































<function><type><name>pthread_t</name></type>
<name>ptw32_threadReusePop</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_thread_reuse_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>PTW32_THREAD_REUSE_EMPTY</name> <operator>!=</operator> <name>ptw32_threadReuseTop</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>ptw32_threadReuseTop</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptw32_threadReuseTop</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>prevReuse</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>PTW32_THREAD_REUSE_EMPTY</name> <operator>==</operator> <name>ptw32_threadReuseTop</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ptw32_threadReuseBottom</name> <operator>=</operator> <name>PTW32_THREAD_REUSE_EMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>prevReuse</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ptw32_threadReusePush</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_thread_reuse_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptw32_thread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_THREAD_ID_REUSE_INCREMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PTW32_THREAD_ID_REUSE_INCREMENT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateReuse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>prevReuse</name></name> <operator>=</operator> <name>PTW32_THREAD_REUSE_EMPTY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>PTW32_THREAD_REUSE_EMPTY</name> <operator>!=</operator> <name>ptw32_threadReuseBottom</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ptw32_threadReuseBottom</name><operator>-&gt;</operator><name>prevReuse</name></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ptw32_threadReuseTop</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptw32_threadReuseBottom</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
