<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_setspecific.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>int</name></type>
<name>pthread_setspecific</name> <parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
























<block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>ptw32_selfThreadKey</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ENOENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ENOENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>pthread_t</name> <operator>*</operator><operator>)</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>self</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>keyLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>threadLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>









<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type><name>assoc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keyLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>threadLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>assoc</name> <operator>=</operator> <operator>(</operator><name>ThreadKeyAssoc</name> <operator>*</operator><operator>)</operator> <name><name>sp</name><operator>-&gt;</operator><name>keys</name></name></expr>;</expr_stmt>



<while>while <condition>(<expr><name>assoc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>assoc</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>key</name></expr>)</condition>
<block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>assoc</name> <operator>=</operator> <name><name>assoc</name><operator>-&gt;</operator><name>nextKey</name></name></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>assoc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ptw32_tkAssocCreate</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TlsSetValue</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function> 
</unit>
