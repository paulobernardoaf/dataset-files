<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_mutex_consistent.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>INLINE</name>
<name>int</name></type>
<name>ptw32_robust_mutex_inherit</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name> <init>= <expr><operator>*</operator><name>mutex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type> <name>robust</name> <init>= <expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>LONG</name><operator>)</operator><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator><operator>&amp;</operator><name><name>robust</name><operator>-&gt;</operator><name>stateInconsistent</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>PTW32_ROBUST_INCONSISTENT</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1L</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EOWNERDEAD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><name>LONG</name><operator>)</operator><name>PTW32_ROBUST_NOTRECOVERABLE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOTRECOVERABLE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>INLINE</name>
<name>void</name></type>
<name>ptw32_robust_mutex_add</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>pthread_t</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name> <init>= <expr><operator>*</operator><name>mutex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name><modifier>*</modifier></type> <name>tp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name><operator>*</operator><operator>)</operator><name><name>self</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type> <name>robust</name> <init>= <expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>robustMxList</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name></name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>list</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>robust</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>robust</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>robust</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>robust</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>robust</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>robust</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>robust</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>INLINE</name>
<name>void</name></type>
<name>ptw32_robust_mutex_remove</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>ptw32_thread_t</name><modifier>*</modifier></type> <name>otp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name> <init>= <expr><operator>*</operator><name>mutex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type> <name>robust</name> <init>= <expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ptw32_thread_t</name><operator>*</operator><operator>)</operator><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name><operator>.</operator><name>p</name></name><operator>)</operator><operator>-&gt;</operator><name>robustMxList</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>otp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>robust</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>robust</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>robust</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>robust</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>robust</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>robust</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>robust</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name><name>robust</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>pthread_mutex_consistent</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name> <init>= <expr><operator>*</operator><name>mutex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mx</name><operator>-&gt;</operator><name>kind</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>PTW32_ROBUST_INCONSISTENT</name> <operator>!=</operator> <call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name><argument_list>(
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>stateInconsistent</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>PTW32_ROBUST_CONSISTENT</name></expr></argument>,
<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>PTW32_ROBUST_INCONSISTENT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
