<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_key_delete.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>int</name></type>
<name>pthread_key_delete</name> <parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

























<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>keyLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>threads</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type><name>assoc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keyLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<while>while <condition>(<expr><operator>(</operator><name>assoc</name> <operator>=</operator> <operator>(</operator><name>ThreadKeyAssoc</name> <operator>*</operator><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>threads</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>threadLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>thread</name> <init>= <expr><name><name>assoc</name><operator>-&gt;</operator><name>thread</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>assoc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thread</name><operator>-&gt;</operator><name>threadLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>ptw32_tkAssocDestroy</name> <argument_list>(<argument><expr><name>assoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TlsFree</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keyLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_DEBUG</name></expr></argument> )</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
