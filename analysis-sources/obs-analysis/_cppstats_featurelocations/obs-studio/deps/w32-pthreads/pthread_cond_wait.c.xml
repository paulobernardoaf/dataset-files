<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_cond_wait.c">



































































































































































































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutexPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>resultPtr</name></decl>;</decl_stmt>
}</block></struct></type> <name>ptw32_cond_wait_cleanup_args_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <name>PTW32_CDECL</name></type>
<name>ptw32_cond_wait_cleanup</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_cond_wait_cleanup_args_t</name> <modifier>*</modifier></type><name>cleanup_args</name> <init>=
<expr><operator>(</operator><name>ptw32_cond_wait_cleanup_args_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv</name> <init>= <expr><name><name>cleanup_args</name><operator>-&gt;</operator><name>cv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>resultPtr</name> <init>= <expr><name><name>cleanup_args</name><operator>-&gt;</operator><name>resultPtr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nSignalsWasLeft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultPtr</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>nSignalsWasLeft</name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal> <operator>==</operator> <operator>++</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>nWaitersGone</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ptw32_semwait</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultPtr</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>





<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>-=</operator> <name><name>cv</name><operator>-&gt;</operator><name>nWaitersGone</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultPtr</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>





<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nWaitersGone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultPtr</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>nSignalsWasLeft</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultPtr</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><name><name>cleanup_args</name><operator>-&gt;</operator><name>mutexPtr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultPtr</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>INLINE</name> <name>int</name></type>
<name>ptw32_cond_timedwait</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>,
<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_cond_wait_cleanup_args_t</name></type> <name>cleanup_args</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cond</name> <operator>==</operator> <name>PTHREAD_COND_INITIALIZER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ptw32_cond_check_need_init</name> <argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>EBUSY</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cv</name> <operator>=</operator> <operator>*</operator><name>cond</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>errno</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>errno</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>cleanup_args</name><operator>.</operator><name>mutexPtr</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cleanup_args</name><operator>.</operator><name>cv</name></name> <operator>=</operator> <name>cv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cleanup_args</name><operator>.</operator><name>resultPtr</name></name> <operator>=</operator> <operator>&amp;</operator><name>result</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>inline_depth</name><name>(</name><name>0</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pthread_cleanup_push</name> <argument_list>(<argument><expr><name>ptw32_cond_wait_cleanup</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cleanup_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

















<if_stmt><if>if <condition>(<expr><call><name>sem_timedwait</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockQueue</name></name><operator>)</operator></expr></argument>, <argument><expr><name>abstime</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>pthread_cleanup_pop</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>inline_depth</name><name>(</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function> 


<function><type><name>int</name></type>
<name>pthread_cond_wait</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>















































<block>{<block_content>



<return>return <expr><operator>(</operator><call><name>ptw32_cond_timedwait</name> <argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function> 


<function><type><name>int</name></type>
<name>pthread_cond_timedwait</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>,
<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>












































<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abstime</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>ptw32_cond_timedwait</name> <argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>abstime</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function> 
</unit>
