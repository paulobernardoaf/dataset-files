<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_join.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>int</name></type>
<name>pthread_join</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list>
































<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_thread_reuse_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tp</name>
<operator>||</operator> <name><name>thread</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name><operator>.</operator><name>x</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>PTHREAD_CREATE_DETACHED</name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>detachState</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>pthread_equal</name> <argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EDEADLK</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>







<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthreadCancelableWait</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>threadH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>result</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value_ptr</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>exitStatus</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_detach</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 
</unit>
