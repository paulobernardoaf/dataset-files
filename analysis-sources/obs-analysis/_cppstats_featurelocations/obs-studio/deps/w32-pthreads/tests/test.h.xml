<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\test.h">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_PTHREAD_TEST_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PTHREAD_TEST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"semaphore.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_THREAD_NULL_ID</name></cpp:macro> <cpp:value>{NULL,0}</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rand_r</name><parameter_list>( <parameter><type><name>_seed</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( _seed == _seed? rand() : rand() )</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int64_t</name></cpp:macro> <cpp:value>ULONGLONG</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int64_t</name></cpp:macro> <cpp:value>_int64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_FTIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ftime64_s(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_STRUCT_TIMEB</name></cpp:macro> <cpp:value>struct __timeb64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__MSVCRT_VERSION__</name> <operator>&gt;=</operator> <literal type="number">0x0601</literal> <operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_FTIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ftime64(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_STRUCT_TIMEB</name></cpp:macro> <cpp:value>struct __timeb64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_FTIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ftime(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_STRUCT_TIMEB</name></cpp:macro> <cpp:value>struct _timeb</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>error_string</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"ZERO_or_EOK"</literal></expr>,
<expr><literal type="string">"EPERM"</literal></expr>,
<expr><literal type="string">"ENOFILE_or_ENOENT"</literal></expr>,
<expr><literal type="string">"ESRCH"</literal></expr>,
<expr><literal type="string">"EINTR"</literal></expr>,
<expr><literal type="string">"EIO"</literal></expr>,
<expr><literal type="string">"ENXIO"</literal></expr>,
<expr><literal type="string">"E2BIG"</literal></expr>,
<expr><literal type="string">"ENOEXEC"</literal></expr>,
<expr><literal type="string">"EBADF"</literal></expr>,
<expr><literal type="string">"ECHILD"</literal></expr>,
<expr><literal type="string">"EAGAIN"</literal></expr>,
<expr><literal type="string">"ENOMEM"</literal></expr>,
<expr><literal type="string">"EACCES"</literal></expr>,
<expr><literal type="string">"EFAULT"</literal></expr>,
<expr><literal type="string">"UNKNOWN_15"</literal></expr>,
<expr><literal type="string">"EBUSY"</literal></expr>,
<expr><literal type="string">"EEXIST"</literal></expr>,
<expr><literal type="string">"EXDEV"</literal></expr>,
<expr><literal type="string">"ENODEV"</literal></expr>,
<expr><literal type="string">"ENOTDIR"</literal></expr>,
<expr><literal type="string">"EISDIR"</literal></expr>,
<expr><literal type="string">"EINVAL"</literal></expr>,
<expr><literal type="string">"ENFILE"</literal></expr>,
<expr><literal type="string">"EMFILE"</literal></expr>,
<expr><literal type="string">"ENOTTY"</literal></expr>,
<expr><literal type="string">"UNKNOWN_26"</literal></expr>,
<expr><literal type="string">"EFBIG"</literal></expr>,
<expr><literal type="string">"ENOSPC"</literal></expr>,
<expr><literal type="string">"ESPIPE"</literal></expr>,
<expr><literal type="string">"EROFS"</literal></expr>,
<expr><literal type="string">"EMLINK"</literal></expr>,
<expr><literal type="string">"EPIPE"</literal></expr>,
<expr><literal type="string">"EDOM"</literal></expr>,
<expr><literal type="string">"ERANGE"</literal></expr>,
<expr><literal type="string">"UNKNOWN_35"</literal></expr>,
<expr><literal type="string">"EDEADLOCK_or_EDEADLK"</literal></expr>,
<expr><literal type="string">"UNKNOWN_37"</literal></expr>,
<expr><literal type="string">"ENAMETOOLONG"</literal></expr>,
<expr><literal type="string">"ENOLCK"</literal></expr>,
<expr><literal type="string">"ENOSYS"</literal></expr>,
<expr><literal type="string">"ENOTEMPTY"</literal></expr>,
<expr><literal type="string">"EILSEQ"</literal></expr>,
<expr><literal type="string">"EOWNERDEAD"</literal></expr>,
<expr><literal type="string">"ENOTRECOVERABLE"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>assert</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_TRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ASSERT_TRACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_TRACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((e) ? ((ASSERT_TRACE) ? fprintf(stderr, "Assertion succeeded: (%s), file %s, line %d\n", #e, __FILE__, (int) __LINE__), fflush(stderr) : 0) : (fprintf(stderr, "Assertion failed: (%s), file %s, line %d\n", #e, __FILE__, (int) __LINE__), exit(1), 0))</cpp:value></cpp:define>








<decl_stmt><decl><type><name>int</name></type> <name>assertE</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_e</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((assertE = e) o (r)) ? ((ASSERT_TRACE) ? fprintf(stderr, "Assertion succeeded: (%s), file %s, line %d\n", #e, __FILE__, (int) __LINE__), fflush(stderr) : 0) : (fprintf(stderr, "Assertion failed: (%s %s %s), file %s, line %d, error %s\n", #e,#o,#r, __FILE__, (int) __LINE__, error_string[assertE]), exit(1), 0))</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_MUTEX_STALLED_ROBUST</name><parameter_list>(<parameter><type><name>mxAttr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(;;) { static int _i=0; static int _robust; pthread_mutexattr_getrobust(&amp;(mxAttr), &amp;_robust);</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_MUTEX_STALLED_ROBUST</name><parameter_list>(<parameter><type><name>mxAttr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("Pass %s\n", _robust==PTHREAD_MUTEX_ROBUST?"Robust":"Non-robust"); if (++_i &gt; 1) break; else { pthread_mutexattr_t *pma, *pmaEnd; for(pma = &amp;(mxAttr), pmaEnd = pma + sizeof(mxAttr)/sizeof(pthread_mutexattr_t); pma &lt; pmaEnd; pthread_mutexattr_setrobust(pma++, PTHREAD_MUTEX_ROBUST)); } }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ROBUST</name></cpp:macro> <cpp:value>(_robust==PTHREAD_MUTEX_ROBUST)</cpp:value></cpp:define>
</unit>
