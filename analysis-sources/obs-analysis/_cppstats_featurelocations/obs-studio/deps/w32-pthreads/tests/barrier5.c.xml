<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\barrier5.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>NUMTHREADS</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>HEIGHT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>BARRIERMULTIPLE</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>pthread_barrier_t</name></type> <name>barrier</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>totalThreadCrossings</name></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>crossings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serialThreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>crossings</name> <operator>&gt;=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><call><name>InterlockedIncrement</name><argument_list>(<argument><expr><operator>(</operator><name>LPLONG</name><operator>)</operator><operator>&amp;</operator><name>totalThreadCrossings</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>PTHREAD_BARRIER_SERIAL_THREAD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>serialThreads</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Barrier failed: result = %s\n"</literal></expr></argument>, <argument><expr><name><name>error_string</name><index>[<expr><name>result</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>serialThreads</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serialThreadsTotal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>Crossings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>t</name><index>[<expr><name>NUMTHREADS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>NUMTHREADS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name>j</name><operator>&lt;</operator><name>HEIGHT</name></expr>?</condition><then><expr><name>j</name></expr></then><else>:<expr><name>HEIGHT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>totalThreadCrossings</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Crossings</name> <operator>=</operator> <name>height</name> <operator>*</operator> <name>BARRIERMULTIPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Threads=%d, Barrier height=%d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>barrier</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>Crossings</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>serialThreadsTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>serialThreadsTotal</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>result</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>serialThreadsTotal</name> <operator>==</operator> <name>BARRIERMULTIPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>barrier</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
