<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\condvar4.c">











































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>cvthing_t_</name></name></type> <name>cvthing_t</name>;</typedef>

<struct>struct <name>cvthing_t_</name> <block>{
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>notbusy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shared</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>cvthing_t</name></type> <name>cvthing</name> <init>= <expr><block>{
<expr><name>PTHREAD_COND_INITIALIZER</name></expr>,
<expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>NUMTHREADS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>mythread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cvthing</name><operator>.</operator><name>shared</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>t</name><index>[<expr><name>NUMTHREADS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>abstime</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PTW32_STRUCT_TIMEB</name></type> <name>currSysTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>NANOSEC_PER_MILLISEC</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cvthing</name><operator>.</operator><name>shared</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name> <operator>==</operator> <name>PTHREAD_COND_INITIALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>lock</name></name> <operator>==</operator> <name>PTHREAD_MUTEX_INITIALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>lock</name></name> <operator>!=</operator> <name>PTHREAD_MUTEX_INITIALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PTW32_FTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>currSysTime</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>NANOSEC_PER_MILLISEC</name> <operator>*</operator> <name><name>currSysTime</name><operator>.</operator><name>millitm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abstime</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name> <operator>!=</operator> <name>PTHREAD_COND_INITIALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mythread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PTW32_FTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>currSysTime</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>NANOSEC_PER_MILLISEC</name> <operator>*</operator> <name><name>currSysTime</name><operator>.</operator><name>millitm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>cvthing</name><operator>.</operator><name>shared</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abstime</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>shared</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>lock</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cvthing</name><operator>.</operator><name>notbusy</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
