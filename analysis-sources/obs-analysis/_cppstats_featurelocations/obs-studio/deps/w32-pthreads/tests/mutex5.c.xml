<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\mutex5.c">






































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutexattr_t</name></type> <name>mxAttr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>_optimiseFoil</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOIL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_optimiseFoil = x)</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mxType</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_DEFAULT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTHREAD_MUTEX_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_DEFAULT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PTHREAD_MUTEX_ERRORCHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_DEFAULT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PTHREAD_MUTEX_ERRORCHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_NORMAL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTHREAD_MUTEX_FAST_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTHREAD_MUTEX_RECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FOIL</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_ERRORCHECK</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTHREAD_MUTEX_ERRORCHECK_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mxAttr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutexattr_gettype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mxAttr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mxType</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mxType</name> <operator>==</operator> <name>PTHREAD_MUTEX_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
