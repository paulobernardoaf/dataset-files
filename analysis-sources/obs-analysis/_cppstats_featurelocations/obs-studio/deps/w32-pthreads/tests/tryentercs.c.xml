<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\tryentercs.c">






































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>





<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>_try_enter_critical_section</name>)<parameter_list>(<parameter><decl><type><name>LPCRITICAL_SECTION</name></type></decl></parameter>)</parameter_list> <init>=
<expr><name>NULL</name></expr></init>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>_h_kernel32</name></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Last Error [main enter] %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>_h_kernel32</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"KERNEL32.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_try_enter_critical_section</name> <operator>=</operator>
<operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>PT_STDCALL</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>LPCRITICAL_SECTION</name></expr></argument>)</argument_list></call><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>_h_kernel32</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <literal type="string">"TryEnterCriticalSection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_try_enter_critical_section</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>_try_enter_critical_section</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Last Error [try enter] %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_try_enter_critical_section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>FreeLibrary</name><argument_list>(<argument><expr><name>_h_kernel32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This system %s TryEnterCriticalSection.\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>_try_enter_critical_section</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"DOES NOT SUPPORT"</literal></expr> </then><else>: <expr><literal type="string">"SUPPORTS"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"POSIX Mutexes will be based on Win32 %s.\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>_try_enter_critical_section</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Mutexes"</literal></expr> </then><else>: <expr><literal type="string">"Critical Sections"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
