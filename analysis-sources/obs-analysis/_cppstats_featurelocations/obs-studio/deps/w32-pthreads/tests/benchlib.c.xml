<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\benchlib.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"semaphore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"benchtest.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>old_mutex_use</name> <init>= <expr><name>OLD_WIN32CS</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>ptw32_try_enter_critical_section</name>)<parameter_list>(<parameter><decl><type><name>LPCRITICAL_SECTION</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>ptw32_h_kernel32</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>dummy_call</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>interlocked_inc_with_conditionals</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>InterlockedIncrement</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>interlocked_dec_with_conditionals</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>InterlockedDecrement</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>old_mutex_init</name><parameter_list>(<parameter><decl><type><name>old_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>old_mutexattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>old_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>old_mutex_t</name><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>FAIL0</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>attr</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>pshared</name></name> <operator>==</operator> <name>PTHREAD_PROCESS_SHARED</name></expr>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>cs</name></decl>;</decl_stmt>




<expr_stmt><expr><name>ptw32_h_kernel32</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"KERNEL32.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptw32_try_enter_critical_section</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>LPCRITICAL_SECTION</name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_UNICODE_CONSTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>ptw32_h_kernel32</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>TCHAR</name> <operator>*</operator><operator>)</operator><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"TryEnterCriticalSection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>ptw32_h_kernel32</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <literal type="string">"TryEnterCriticalSection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ptw32_try_enter_critical_section</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>ptw32_try_enter_critical_section</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name>ptw32_try_enter_critical_section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_try_enter_critical_section</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>FreeLibrary</name><argument_list>(<argument><expr><name>ptw32_h_kernel32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptw32_h_kernel32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_mutex_use</name> <operator>==</operator> <name>OLD_WIN32CS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>old_mutex_use</name> <operator>==</operator> <name>OLD_WIN32MUTEX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>CreateMutex</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>FAIL0</name>:</label>
<expr_stmt><expr><operator>*</operator><name>mutex</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>old_mutex_lock</name><parameter_list>(<parameter><decl><type><name>old_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>old_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mutex</name> <operator>==</operator> <operator>(</operator><name>old_mutex_t</name><operator>)</operator> <name>PTW32_OBJECT_AUTO_INIT</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>*</operator><name>mutex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> 
<operator>==</operator> <name>WAIT_OBJECT_0</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>EINVAL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>old_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>old_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>old_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>*</operator><name>mutex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>!=</operator> <operator>(</operator><name>old_mutex_t</name><operator>)</operator> <name>PTW32_OBJECT_AUTO_INIT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>ReleaseMutex</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>EINVAL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return<expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>old_mutex_trylock</name><parameter_list>(<parameter><decl><type><name>old_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>old_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mutex</name> <operator>==</operator> <operator>(</operator><name>old_mutex_t</name><operator>)</operator> <name>PTW32_OBJECT_AUTO_INIT</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>*</operator><name>mutex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptw32_try_enter_critical_section</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call>(<modifier>*</modifier><name>ptw32_try_enter_critical_section</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>status</name> <operator>==</operator> <name>WAIT_TIMEOUT</name><operator>)</operator></expr>
?</condition><then> <expr><name>EBUSY</name></expr>
</then><else>: <expr><name>EINVAL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>old_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>old_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>old_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>*</operator><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mutex</name> <operator>!=</operator> <operator>(</operator><name>old_mutex_t</name><operator>)</operator> <name>PTW32_OBJECT_AUTO_INIT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>*</operator><name>mutex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>old_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>old_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>EINVAL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mutex</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_try_enter_critical_section</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>FreeLibrary</name><argument_list>(<argument><expr><name>ptw32_h_kernel32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptw32_h_kernel32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


</unit>
