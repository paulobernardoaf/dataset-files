<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\tests\eyal1.c">












































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<struct>struct <name>thread_control</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex_started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex_ended</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>work</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>;</decl_stmt> 
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>thread_control</name></name></type> <name>TC</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TC</name> <modifier>*</modifier></type><name>tcs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nwork</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>quiet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>todo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>mutex_todo</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>mutex_stdout</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>die</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>tcs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tcs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type>
<name>waste_time</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name><operator>*</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>f</name> <operator>*</operator> <name>g</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>h</name> <operator>!=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>h</name> <operator>*</operator> <name>h</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_work_unit</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>who</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nchars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><literal type="string">"0123456789abcdefghijklmnopqrstuvwxyz"</literal><index>[<expr><name>who</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>++</operator><name>nchars</name> <operator>%</operator> <literal type="number">50</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">10000</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>waste_time</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_server</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mywork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><operator>(</operator><name>TC</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_started</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_start</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_start</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_ended</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_started</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_todo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mywork</name> <operator>=</operator> <name>todo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>todo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <name>nwork</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_todo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mywork</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>do_work_unit</name> <argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>mywork</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>work</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_end</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_end</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_started</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_ended</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">2</literal> <operator>==</operator> <name>mywork</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>mutex_started</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dosync</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_started</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_started</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_ended</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_ended</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dowork</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dosync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dosync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>tcs</name> <operator>=</operator> <operator>(</operator><name>TC</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tcs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_started</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_ended</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>work</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stat</name> <operator>=</operator> 
<call><name>pthread_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>print_server</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>trylock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>trylock</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>trylock</name> <operator>=</operator> <call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_started</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>trylock</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>trylock</name> <operator>==</operator> <name>EBUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trylock</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_started</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dowork</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>dosync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name> <argument_list>(<argument><expr><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_todo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%2d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%10ld\n"</literal></expr></argument>, <argument><expr><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"failed %d\n"</literal></expr></argument>, <argument><expr><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_started</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex_ended</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
