<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_getprocessors.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>















<function><type><name>int</name></type>
<name>ptw32_getprocessors</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD_PTR</name></type> <name>vProcessCPUs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD_PTR</name></type> <name>vSystemCPUs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_PROCESS_AFFINITY_MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>GetProcessAffinityMask</name> <argument_list>(<argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vProcessCPUs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vSystemCPUs</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD_PTR</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>CPUs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bit</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vProcessCPUs</name> <operator>&amp;</operator> <name>bit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>CPUs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>CPUs</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
