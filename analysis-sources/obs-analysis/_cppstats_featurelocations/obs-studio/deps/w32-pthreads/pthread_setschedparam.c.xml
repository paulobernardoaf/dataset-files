<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\pthread_setschedparam.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>pthread_setschedparam</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>policy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_kill</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>result</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>policy</name> <argument_list type="generic">&lt; <argument><expr><name>SCHED_MIN</name> <operator>||</operator> <name>policy</name></expr></argument> &gt;</argument_list></name> <name>SCHED_MAX</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>policy</name> <operator>!=</operator> <name>SCHED_OTHER</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ENOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>ptw32_setthreadpriority</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>sched_priority</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>ptw32_setthreadpriority</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>policy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>threadLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prio</name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prio</name> <argument_list type="generic">&lt; <argument><expr><name>sched_get_priority_min</name> <operator>(</operator><name>policy</name><operator>)</operator> <operator>||</operator>
<name>prio</name></expr></argument> &gt;</argument_list></name> <call><name>sched_get_priority_max</name> <argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>THREAD_PRIORITY_LOWEST</name> <operator>&gt;</operator> <name>THREAD_PRIORITY_NORMAL</name><operator>)</operator></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<if_stmt><if>if <condition>(<expr><name><name>THREAD_PRIORITY_IDLE</name> <argument_list type="generic">&lt; <argument><expr><name>prio</name> <operator>&amp;&amp;</operator> <name>THREAD_PRIORITY_LOWEST</name></expr></argument> &gt;</argument_list></name> <name>prio</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prio</name> <operator>=</operator> <name>THREAD_PRIORITY_LOWEST</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>THREAD_PRIORITY_TIME_CRITICAL</name> <operator>&gt;</operator> <name>prio</name>
<operator>&amp;&amp;</operator> <name>THREAD_PRIORITY_HIGHEST</name> <operator>&lt;</operator> <name>prio</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prio</name> <operator>=</operator> <name>THREAD_PRIORITY_HIGHEST</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threadLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>SetThreadPriority</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>threadH</name></name></expr></argument>, <argument><expr><name>prio</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>sched_priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
