<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_callUserDestroyRoutines.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;eh.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;eh.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;exceptio.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>
<expr_stmt><expr><name>using</name>
<name>std</name><operator>::</operator><name>terminate</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>ptw32_callUserDestroyRoutines</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>
















<block>{<block_content>
<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type> <name>assoc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>threadLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>keyLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>assocsRemaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>







<do>do
<block>{<block_content>
<expr_stmt><expr><name>assocsRemaining</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iterations</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>threadLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>nextAssoc</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>keys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>k</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>threadLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>assoc</name> <operator>=</operator> <operator>(</operator><name>ThreadKeyAssoc</name> <operator>*</operator><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>nextAssoc</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>










<if_stmt><if>if <condition>(<expr><call><name>ptw32_mcs_lock_try_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>assoc</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>keyLock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EBUSY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>nextAssoc</name></name> <operator>=</operator> <name><name>assoc</name><operator>-&gt;</operator><name>nextKey</name></name></expr>;</expr_stmt>








<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>assoc</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>destructor</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>destructor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>TlsGetValue</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TlsSetValue</name> <argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>iterations</name> <operator>&lt;=</operator> <name>PTHREAD_DESTRUCTOR_ITERATIONS</name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>assocsRemaining</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>try</name></macro>
<block>{<block_content>



<expr_stmt><expr><call><name>destructor</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>









<expr_stmt><expr><call><name>terminate</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 




<expr_stmt><expr><call><name>destructor</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if>
<else>else
<block>{<block_content>




<expr_stmt><expr><call><name>ptw32_tkAssocDestroy</name> <argument_list>(<argument><expr><name>assoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keyLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
while <condition>(<expr><name>assocsRemaining</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function> 
</unit>
