<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\w32_CancelableWait.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>INLINE</name> <name>int</name></type>
<name>ptw32_cancelable_wait</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>waitHandle</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>timeout</name></decl></parameter>)</parameter_list>













<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>handles</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nHandles</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>waitHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>==</operator> <name>PTHREAD_CANCEL_ENABLE</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>cancelEvent</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nHandles</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>WaitForMultipleObjects</name> <argument_list>(<argument><expr><name>nHandles</name></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>PTW32_FALSE</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>status</name> <operator>-</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>







<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>





<expr_stmt><expr><call><name>ResetEvent</name> <argument_list>(<argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>PThreadStateCanceling</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateCanceling</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_DISABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_throw</name> <argument_list>(<argument><expr><name>PTW32_EPS_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 

<function><type><name>int</name></type>
<name>pthreadCancelableWait</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>waitHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ptw32_cancelable_wait</name> <argument_list>(<argument><expr><name>waitHandle</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pthreadCancelableTimedWait</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>waitHandle</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ptw32_cancelable_wait</name> <argument_list>(<argument><expr><name>waitHandle</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
