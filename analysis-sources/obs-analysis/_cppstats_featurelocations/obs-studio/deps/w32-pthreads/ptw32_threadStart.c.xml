<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_threadStart.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>DWORD</name></type>
<name>ExceptionFilter</name> <parameter_list>(<parameter><decl><type><name>EXCEPTION_POINTERS</name> <modifier>*</modifier></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type> <name>ei</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>ExceptionRecord</name><operator>-&gt;</operator><name>ExceptionCode</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXCEPTION_PTW32_SERVICES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>numParams</name> <init>= <expr><name><name>ep</name><operator>-&gt;</operator><name>ExceptionRecord</name><operator>-&gt;</operator><name>NumberParameters</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>numParams</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>numParams</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><name>numParams</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>param</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>param</name> <operator>&lt;</operator> <name>numParams</name></expr>;</condition> <incr><expr><name>param</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ei</name><index>[<expr><name>param</name></expr>]</index></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>ExceptionRecord</name><operator>-&gt;</operator><name>ExceptionInformation</name><index>[<expr><name>param</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>EXCEPTION_EXECUTE_HANDLER</name></expr>;</return>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<block>{<block_content>





<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name> <init>= <expr><call><name>pthread_self</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_callUserDestroyRoutines</name> <argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;eh.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;eh.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;exceptio.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>terminate_handler</name></type>
<name>terminate_function</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>
<expr_stmt><expr><name>using</name>
<name>std</name><operator>::</operator><name>terminate_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name>
<name>std</name><operator>::</operator><name>terminate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name>
<name>std</name><operator>::</operator><name>set_terminate</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>terminate_handler</name></type>
<name>terminate_function</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>terminate_function</name></type>
<name>ptw32_oldTerminate</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ptw32_terminate</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_terminate</name> <argument_list>(<argument><expr><name>ptw32_oldTerminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_win32_thread_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminate</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>unsigned</name>
<name>__stdcall</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>void</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>ptw32_threadStart</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vthreadParms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadParms</name> <modifier>*</modifier></type> <name>threadParms</name> <init>= <expr><operator>(</operator><name>ThreadParms</name> <operator>*</operator><operator>)</operator> <name>vthreadParms</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name></decl>;</decl_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type> (<name>PTW32_CDECL</name> <modifier>*</modifier><name>start</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type>
<name><name>ei</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>setjmp_rc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>status</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <name><name>threadParms</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>threadParms</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>threadParms</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>threadParms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_setspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pthread_setspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateRunning</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>__try</name></macro>
<block>{<block_content>



<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name>start</name>) <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateExiting</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>pthread_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>
<macro><name>__except</name> <argument_list>(<argument>ExceptionFilter (GetExceptionInformation (), ei)</argument>)</argument_list></macro>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>ei</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PTW32_EPS_CANCEL</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>pthread_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>PTW32_EPS_EXIT</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>setjmp_rc</name> <operator>=</operator> <call><name>setjmp</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>setjmp_rc</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name>start</name>) <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateExiting</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch <condition>(<expr><name>setjmp_rc</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PTW32_EPS_CANCEL</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PTW32_EPS_EXIT</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>ptw32_oldTerminate</name> <operator>=</operator> <call><name>set_terminate</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>try</name></macro>
<block>{<block_content>





<macro><name>try</name></macro>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name>start</name>) <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateExiting</name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>ptw32_exception &amp;</argument>)</argument_list></macro>
<block>{<block_content>



<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>








<decl_stmt><decl><type><name>terminate_function</name></type>
<name>term_func</name> <init>= <expr><call><name>set_terminate</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_terminate</name> <argument_list>(<argument><expr><name>term_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>term_func</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>term_func</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>ptw32_exception_cancel &amp;</argument>)</argument_list></macro>
<block>{<block_content>



<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>ptw32_exception_exit &amp;</argument>)</argument_list></macro>
<block>{<block_content>



<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>






<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name> <operator>=</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>set_terminate</name> <argument_list>(<argument><expr><name>ptw32_oldTerminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> ERROR [__FILE__, line __LINE__]: Cleanup type undefined.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>














<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_win32_thread_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_endthreadex</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_endthread</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>status</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function> 
</unit>
