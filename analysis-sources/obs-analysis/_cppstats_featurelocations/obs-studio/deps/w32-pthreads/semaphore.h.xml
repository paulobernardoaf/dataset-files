<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\semaphore.h">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>SEMAPHORE_H</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEMAPHORE_H</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_SEMAPHORE_LEVEL</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SEMAPHORE_LEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_C_SOURCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_POSIX_C_SOURCE</name> <operator>&gt;=</operator> <literal type="number">199309</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_SEMAPHORE_LEVEL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SEMAPHORE_LEVEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_NP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_SEMAPHORE_LEVEL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SEMAPHORE_LEVEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SEMAPHORE_LEVEL_MAX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_SEMAPHORE_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SEMAPHORE_LEVEL</name></cpp:macro> <cpp:value>PTW32_SEMAPHORE_LEVEL_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__declspec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Please upgrade your GNU compiler to one that supports __declspec.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_DLLPORT</name></cpp:macro> <cpp:value>__declspec (dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_DLLPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_DLLPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_ERRNO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_SEM</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRUCT_TIMESPEC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MODE_T</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MODE_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PTW32_SEMAPHORE_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_SEMAPHORE_LEVEL_MAX</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"need_errno.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_SEMAPHORES</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MODE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>mode_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name><name>struct</name> <name>sem_t_</name></name> <modifier>*</modifier></type> <name>sem_t</name>;</typedef>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_init</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_destroy</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_trywait</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_wait</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_timedwait</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type> <name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_post</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_post_multiple</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_open</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>oflag</name></decl></parameter>,
<parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_close</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_unlink</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>__cdecl</name></type> <name>sem_getvalue</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>sval</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_SEMAPHORE_LEVEL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_SEMAPHORE_LEVEL_MAX</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
