<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_processTerminate.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>ptw32_processTerminate</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>




















<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptw32_processInitialized</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>tpNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_selfThreadKey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>pthread_key_delete</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptw32_selfThreadKey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_cleanupKey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>pthread_key_delete</name> <argument_list>(<argument><expr><name>ptw32_cleanupKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptw32_cleanupKey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_thread_reuse_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>ptw32_threadReuseTop</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tp</name> <operator>!=</operator> <name>PTW32_THREAD_REUSE_EMPTY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tpNext</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>prevReuse</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>tpNext</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptw32_processInitialized</name> <operator>=</operator> <name>PTW32_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></function> 
</unit>
