<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\w32-pthreads\ptw32_throw.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4290</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>ptw32_throw</name> <parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>exception</name></decl></parameter>)</parameter_list>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>
throw<parameter_list>(<parameter><decl><type><name>ptw32_exception_cancel</name></type></decl></parameter>,<parameter><decl><type><name>ptw32_exception_exit</name></type></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>




<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name><name>exceptionInformation</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateExiting</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <name>PTW32_EPS_CANCEL</name> <operator>&amp;&amp;</operator> <name>exception</name> <operator>!=</operator> <name>PTW32_EPS_EXIT</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sp</name> <operator>||</operator> <name><name>sp</name><operator>-&gt;</operator><name>implicit</name></name></expr>)</condition>
<block>{<block_content>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>exitCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>exception</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PTW32_EPS_CANCEL</name></expr>:</case>
<expr_stmt><expr><name>exitCode</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>PTHREAD_CANCELED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PTW32_EPS_EXIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>sp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>exitCode</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>sp</name><operator>-&gt;</operator><name>exitStatus</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_win32_thread_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_endthreadex</name> <argument_list>(<argument><expr><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_endthread</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>exceptionInformation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><name>exception</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exceptionInformation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exceptionInformation</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RaiseException</name> <argument_list>(<argument><expr><name>EXCEPTION_PTW32_SERVICES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>exceptionInformation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>ptw32_pop_cleanup_all</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch <condition>(<expr><name>exception</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PTW32_EPS_CANCEL</name></expr>:</case>
<function_decl><type><name>throw</name></type> <name>ptw32_exception_cancel</name> <parameter_list>()</parameter_list>;</function_decl>
<break>break;</break>
<case>case <expr><name>PTW32_EPS_EXIT</name></expr>:</case>
<function_decl><type><name>throw</name></type> <name>ptw32_exception_exit</name> <parameter_list>()</parameter_list>;</function_decl>
<break>break;</break>
</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> ERROR [__FILE__, line __LINE__]: Cleanup type undefined.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ptw32_pop_cleanup_all</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>execute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>ptw32_pop_cleanup</name> <argument_list>(<argument><expr><name>execute</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>DWORD</name></type>
<name>ptw32_get_exception_services_code</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>EXCEPTION_PTW32_SERVICES</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>DWORD</name><operator>)</operator><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
