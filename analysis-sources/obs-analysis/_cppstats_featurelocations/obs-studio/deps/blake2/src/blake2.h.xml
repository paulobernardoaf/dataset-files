<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\deps\blake2\src\blake2.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BLAKE2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLAKE2_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLAKE2_PACKED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__pragma(pack(push, 1)) x __pragma(pack(pop))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLAKE2_PACKED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x __attribute__((packed))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>blake2s_constant</name>
<block>{
<decl><name>BLAKE2S_BLOCKBYTES</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>BLAKE2S_OUTBYTES</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>BLAKE2S_KEYBYTES</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>BLAKE2S_SALTBYTES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>BLAKE2S_PERSONALBYTES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>blake2b_constant</name>
<block>{
<decl><name>BLAKE2B_BLOCKBYTES</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>BLAKE2B_OUTBYTES</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>BLAKE2B_KEYBYTES</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>BLAKE2B_SALTBYTES</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>BLAKE2B_PERSONALBYTES</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>blake2s_state__</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>h</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>BLAKE2S_BLOCKBYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>last_node</name></decl>;</decl_stmt>
}</block></struct></type> <name>blake2s_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>blake2b_state__</name>
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>h</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>BLAKE2B_BLOCKBYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>last_node</name></decl>;</decl_stmt>
}</block></struct></type> <name>blake2b_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>blake2sp_state__</name>
<block>{
<decl_stmt><decl><type><name>blake2s_state</name></type> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blake2s_state</name></type> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>BLAKE2S_BLOCKBYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>blake2sp_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>blake2bp_state__</name>
<block>{
<decl_stmt><decl><type><name>blake2b_state</name></type> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blake2b_state</name></type> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>BLAKE2B_BLOCKBYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>blake2bp_state</name>;</typedef>


<macro><name>BLAKE2_PACKED</name><argument_list>(<argument>struct blake2s_param__
{
uint8_t digest_length; 
uint8_t key_length; 
uint8_t fanout; 
uint8_t depth; 
uint32_t leaf_length; 
uint32_t node_offset; 
uint16_t xof_length; 
uint8_t node_depth; 
uint8_t inner_length; 

uint8_t salt[BLAKE2S_SALTBYTES]; 
uint8_t personal[BLAKE2S_PERSONALBYTES]; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>blake2s_param__</name></name></type> <name>blake2s_param</name>;</typedef>

<macro><name>BLAKE2_PACKED</name><argument_list>(<argument>struct blake2b_param__
{
uint8_t digest_length; 
uint8_t key_length; 
uint8_t fanout; 
uint8_t depth; 
uint32_t leaf_length; 
uint32_t node_offset; 
uint32_t xof_length; 
uint8_t node_depth; 
uint8_t inner_length; 
uint8_t reserved[<literal type="number">14</literal>]; 
uint8_t salt[BLAKE2B_SALTBYTES]; 
uint8_t personal[BLAKE2B_PERSONALBYTES]; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>blake2b_param__</name></name></type> <name>blake2b_param</name>;</typedef>

<typedef>typedef <type><struct>struct <name>blake2xs_state__</name>
<block>{
<decl_stmt><decl><type><name>blake2s_state</name></type> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blake2s_param</name></type> <name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>blake2xs_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>blake2xb_state__</name>
<block>{
<decl_stmt><decl><type><name>blake2b_state</name></type> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blake2b_param</name></type> <name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>blake2xb_state</name>;</typedef>


<enum>enum <block>{
<decl><name>BLAKE2_DUMMY_1</name> <init>= <expr><literal type="number">1</literal><operator>/</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>blake2s_param</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>BLAKE2S_OUTBYTES</name><operator>)</operator></expr></init></decl>,
<decl><name>BLAKE2_DUMMY_2</name> <init>= <expr><literal type="number">1</literal><operator>/</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>blake2b_param</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>BLAKE2B_OUTBYTES</name><operator>)</operator></expr></init></decl>
}</block>;</enum>


<function_decl><type><name>int</name></type> <name>blake2s_init</name><parameter_list>( <parameter><decl><type><name>blake2s_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2s_init_key</name><parameter_list>( <parameter><decl><type><name>blake2s_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2s_init_param</name><parameter_list>( <parameter><decl><type><name>blake2s_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>blake2s_param</name> <modifier>*</modifier></type><name>P</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2s_update</name><parameter_list>( <parameter><decl><type><name>blake2s_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2s_final</name><parameter_list>( <parameter><decl><type><name>blake2s_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blake2b_init</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2b_init_key</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2b_init_param</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>blake2b_param</name> <modifier>*</modifier></type><name>P</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2b_update</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2b_final</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blake2sp_init</name><parameter_list>( <parameter><decl><type><name>blake2sp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2sp_init_key</name><parameter_list>( <parameter><decl><type><name>blake2sp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2sp_update</name><parameter_list>( <parameter><decl><type><name>blake2sp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2sp_final</name><parameter_list>( <parameter><decl><type><name>blake2sp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blake2bp_init</name><parameter_list>( <parameter><decl><type><name>blake2bp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2bp_init_key</name><parameter_list>( <parameter><decl><type><name>blake2bp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2bp_update</name><parameter_list>( <parameter><decl><type><name>blake2bp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2bp_final</name><parameter_list>( <parameter><decl><type><name>blake2bp_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>blake2xs_init</name><parameter_list>( <parameter><decl><type><name>blake2xs_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xs_init_key</name><parameter_list>( <parameter><decl><type><name>blake2xs_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xs_update</name><parameter_list>( <parameter><decl><type><name>blake2xs_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xs_final</name><parameter_list>(<parameter><decl><type><name>blake2xs_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blake2xb_init</name><parameter_list>( <parameter><decl><type><name>blake2xb_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xb_init_key</name><parameter_list>( <parameter><decl><type><name>blake2xb_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xb_update</name><parameter_list>( <parameter><decl><type><name>blake2xb_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xb_final</name><parameter_list>(<parameter><decl><type><name>blake2xb_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>blake2s</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2b</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blake2sp</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2bp</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blake2xs</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blake2xb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>blake2</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
