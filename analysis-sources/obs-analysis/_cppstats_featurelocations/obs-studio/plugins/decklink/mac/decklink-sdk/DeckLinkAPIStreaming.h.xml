<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\mac\decklink-sdk\DeckLinkAPIStreaming.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPISTREAMING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPISTREAMING_H</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>__declspec(selectany) static const</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>static const</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_PUBLIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingDeviceNotificationCallback</name> <init>= <expr><block>{<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x84</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingH264InputCallback</name> <init>= <expr><block>{<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0xC5</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xCA</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingDiscovery</name> <init>= <expr><block>{<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x6D</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingVideoEncodingMode</name> <init>= <expr><block>{<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xD9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingMutableVideoEncodingMode</name> <init>= <expr><block>{<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x9D</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingVideoEncodingModePresetIterator</name> <init>= <expr><block>{<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0xC4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingDeviceInput</name> <init>= <expr><block>{<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x98</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingH264NALPacket</name> <init>= <expr><block>{<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0x89</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingAudioPacket</name> <init>= <expr><block>{<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0xEB</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0xEE</literal></expr>,<expr><literal type="number">0x19</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingMPEG2TSPacket</name> <init>= <expr><block>{<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x4C</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IBMDStreamingH264NALParser</name> <init>= <expr><block>{<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0xD2</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingDeviceMode</name>;</typedef>
<enum>enum <name>_BMDStreamingDeviceMode</name> <block>{
<decl><name>bmdStreamingDeviceIdle</name> <init>= <expr><literal type="char">'idle'</literal></expr></init></decl>,
<decl><name>bmdStreamingDeviceEncoding</name> <init>= <expr><literal type="char">'enco'</literal></expr></init></decl>,
<decl><name>bmdStreamingDeviceStopping</name> <init>= <expr><literal type="char">'stop'</literal></expr></init></decl>,
<decl><name>bmdStreamingDeviceUnknown</name> <init>= <expr><literal type="char">'munk'</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingEncodingFrameRate</name>;</typedef>
<enum>enum <name>_BMDStreamingEncodingFrameRate</name> <block>{



<decl><name>bmdStreamingEncodedFrameRate50i</name> <init>= <expr><literal type="char">'e50i'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate5994i</name> <init>= <expr><literal type="char">'e59i'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate60i</name> <init>= <expr><literal type="char">'e60i'</literal></expr></init></decl>,



<decl><name>bmdStreamingEncodedFrameRate2398p</name> <init>= <expr><literal type="char">'e23p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate24p</name> <init>= <expr><literal type="char">'e24p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate25p</name> <init>= <expr><literal type="char">'e25p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate2997p</name> <init>= <expr><literal type="char">'e29p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate30p</name> <init>= <expr><literal type="char">'e30p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate50p</name> <init>= <expr><literal type="char">'e50p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate5994p</name> <init>= <expr><literal type="char">'e59p'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodedFrameRate60p</name> <init>= <expr><literal type="char">'e60p'</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingEncodingSupport</name>;</typedef>
<enum>enum <name>_BMDStreamingEncodingSupport</name> <block>{
<decl><name>bmdStreamingEncodingModeNotSupported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodingModeSupported</name></decl>, 
<decl><name>bmdStreamingEncodingModeSupportedWithChanges</name></decl> 
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingVideoCodec</name>;</typedef>
<enum>enum <name>_BMDStreamingVideoCodec</name> <block>{
<decl><name>bmdStreamingVideoCodecH264</name> <init>= <expr><literal type="char">'H264'</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingH264Profile</name>;</typedef>
<enum>enum <name>_BMDStreamingH264Profile</name> <block>{
<decl><name>bmdStreamingH264ProfileHigh</name> <init>= <expr><literal type="char">'high'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264ProfileMain</name> <init>= <expr><literal type="char">'main'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264ProfileBaseline</name> <init>= <expr><literal type="char">'base'</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingH264Level</name>;</typedef>
<enum>enum <name>_BMDStreamingH264Level</name> <block>{
<decl><name>bmdStreamingH264Level12</name> <init>= <expr><literal type="char">'lv12'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level13</name> <init>= <expr><literal type="char">'lv13'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level2</name> <init>= <expr><literal type="char">'lv2 '</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level21</name> <init>= <expr><literal type="char">'lv21'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level22</name> <init>= <expr><literal type="char">'lv22'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level3</name> <init>= <expr><literal type="char">'lv3 '</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level31</name> <init>= <expr><literal type="char">'lv31'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level32</name> <init>= <expr><literal type="char">'lv32'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level4</name> <init>= <expr><literal type="char">'lv4 '</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level41</name> <init>= <expr><literal type="char">'lv41'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264Level42</name> <init>= <expr><literal type="char">'lv42'</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingH264EntropyCoding</name>;</typedef>
<enum>enum <name>_BMDStreamingH264EntropyCoding</name> <block>{
<decl><name>bmdStreamingH264EntropyCodingCAVLC</name> <init>= <expr><literal type="char">'EVLC'</literal></expr></init></decl>,
<decl><name>bmdStreamingH264EntropyCodingCABAC</name> <init>= <expr><literal type="char">'EBAC'</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingAudioCodec</name>;</typedef>
<enum>enum <name>_BMDStreamingAudioCodec</name> <block>{
<decl><name>bmdStreamingAudioCodecAAC</name> <init>= <expr><literal type="char">'AAC '</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDStreamingEncodingModePropertyID</name>;</typedef>
<enum>enum <name>_BMDStreamingEncodingModePropertyID</name> <block>{



<decl><name>bmdStreamingEncodingPropertyVideoFrameRate</name> <init>= <expr><literal type="char">'vfrt'</literal></expr></init></decl>, 
<decl><name>bmdStreamingEncodingPropertyVideoBitRateKbps</name> <init>= <expr><literal type="char">'vbrt'</literal></expr></init></decl>,



<decl><name>bmdStreamingEncodingPropertyH264Profile</name> <init>= <expr><literal type="char">'hprf'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodingPropertyH264Level</name> <init>= <expr><literal type="char">'hlvl'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodingPropertyH264EntropyCoding</name> <init>= <expr><literal type="char">'hent'</literal></expr></init></decl>,



<decl><name>bmdStreamingEncodingPropertyH264HasBFrames</name> <init>= <expr><literal type="char">'hBfr'</literal></expr></init></decl>,



<decl><name>bmdStreamingEncodingPropertyAudioCodec</name> <init>= <expr><literal type="char">'acdc'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodingPropertyAudioSampleRate</name> <init>= <expr><literal type="char">'asrt'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodingPropertyAudioChannelCount</name> <init>= <expr><literal type="char">'achc'</literal></expr></init></decl>,
<decl><name>bmdStreamingEncodingPropertyAudioBitRateKbps</name> <init>= <expr><literal type="char">'abrt'</literal></expr></init></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingDeviceNotificationCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingH264InputCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingDiscovery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingVideoEncodingMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingMutableVideoEncodingMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingVideoEncodingModePresetIterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingDeviceInput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingH264NALPacket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingAudioPacket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingMPEG2TSPacket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IBMDStreamingH264NALParser</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingDeviceNotificationCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>StreamingDeviceArrived</name> <argument_list>( <argument><expr><name>IDeckLink</name><operator>*</operator> <name>device</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StreamingDeviceRemoved</name> <argument_list>( <argument><expr><name>IDeckLink</name><operator>*</operator> <name>device</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StreamingDeviceModeChanged</name> <argument_list>( <argument>IDeckLink* device</argument>, <argument>BMDStreamingDeviceMode mode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingDeviceNotificationCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingH264InputCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>H264NALPacketArrived</name> <argument_list>( <argument><expr><name>IBMDStreamingH264NALPacket</name><operator>*</operator> <name>nalPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>H264AudioPacketArrived</name> <argument_list>( <argument><expr><name>IBMDStreamingAudioPacket</name><operator>*</operator> <name>audioPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>MPEG2TSPacketArrived</name> <argument_list>( <argument><expr><name>IBMDStreamingMPEG2TSPacket</name><operator>*</operator> <name>tsPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>H264VideoInputConnectorScanningChanged</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>H264VideoInputConnectorChanged</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>H264VideoInputModeChanged</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingH264InputCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingDiscovery</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>InstallDeviceNotifications</name> <argument_list>( <argument><expr><name>IBMDStreamingDeviceNotificationCallback</name><operator>*</operator> <name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>UninstallDeviceNotifications</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingDiscovery</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingVideoEncodingMode</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>GetName</name> <argument_list>( <argument><expr><name>CFStringRef</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetPresetID</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetSourcePositionX</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetSourcePositionY</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetSourceWidth</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetSourceHeight</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetDestWidth</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>unsigned</name> <name>int</name> <call><name>GetDestHeight</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFlag</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>bool* value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetInt</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>int64_t* value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFloat</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>double* value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetString</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>CFStringRef *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>CreateMutableVideoEncodingMode</name> <argument_list>( <argument><expr><name>IBMDStreamingMutableVideoEncodingMode</name><operator>*</operator><operator>*</operator> <name>newEncodingMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingVideoEncodingMode</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingMutableVideoEncodingMode</name> <range>: <expr><name>public</name> <name>IBMDStreamingVideoEncodingMode</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>SetSourceRect</name> <argument_list>( <argument>uint32_t posX</argument>, <argument>uint32_t posY</argument>, <argument>uint32_t width</argument>, <argument>uint32_t height</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetDestSize</name> <argument_list>( <argument>uint32_t width</argument>, <argument>uint32_t height</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetFlag</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>bool value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetInt</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>int64_t value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetFloat</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>double value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetString</name> <argument_list>( <argument>BMDStreamingEncodingModePropertyID cfgID</argument>, <argument>CFStringRef value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingMutableVideoEncodingMode</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingVideoEncodingModePresetIterator</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>Next</name> <argument_list>( <argument><expr><name>IBMDStreamingVideoEncodingMode</name><operator>*</operator><operator>*</operator> <name>videoEncodingMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingVideoEncodingModePresetIterator</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingDeviceInput</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>



<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoInputMode</name> <argument_list>( <argument>BMDDisplayMode inputMode</argument>, <argument>bool* result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetVideoInputModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator</name><operator>*</operator><operator>*</operator> <name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetVideoInputMode</name> <argument_list>( <argument>BMDDisplayMode inputMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetCurrentDetectedVideoInputMode</name> <argument_list>( <argument><expr><name>BMDDisplayMode</name><operator>*</operator> <name>detectedMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetVideoEncodingMode</name> <argument_list>( <argument><expr><name>IBMDStreamingVideoEncodingMode</name><operator>*</operator><operator>*</operator> <name>encodingMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetVideoEncodingModePresetIterator</name> <argument_list>( <argument>BMDDisplayMode inputMode</argument>, <argument>IBMDStreamingVideoEncodingModePresetIterator** iterator</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoEncodingMode</name> <argument_list>( <argument>BMDDisplayMode inputMode</argument>, <argument>IBMDStreamingVideoEncodingMode* encodingMode</argument>, <argument>BMDStreamingEncodingSupport* result</argument>, <argument>IBMDStreamingVideoEncodingMode** changedEncodingMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetVideoEncodingMode</name> <argument_list>( <argument><expr><name>IBMDStreamingVideoEncodingMode</name><operator>*</operator> <name>encodingMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <call><name>StartCapture</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StopCapture</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IUnknown</name><operator>*</operator> <name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingDeviceInput</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingH264NALPacket</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>long</name> <call><name>GetPayloadSize</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name><operator>*</operator><operator>*</operator> <name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytesWithSizePrefix</name> <argument_list>( <argument><expr><name>void</name><operator>*</operator><operator>*</operator> <name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetDisplayTime</name> <argument_list>( <argument>uint64_t requestedTimeScale</argument>, <argument>uint64_t* displayTime</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetPacketIndex</name> <argument_list>( <argument><expr><name>uint32_t</name><operator>*</operator> <name>packetIndex</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingH264NALPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingAudioPacket</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>BMDStreamingAudioCodec</name> <call><name>GetCodec</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <call><name>GetPayloadSize</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name><operator>*</operator><operator>*</operator> <name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetPlayTime</name> <argument_list>( <argument>uint64_t requestedTimeScale</argument>, <argument>uint64_t* playTime</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetPacketIndex</name> <argument_list>( <argument><expr><name>uint32_t</name><operator>*</operator> <name>packetIndex</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingAudioPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingMPEG2TSPacket</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>long</name> <call><name>GetPayloadSize</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name><operator>*</operator><operator>*</operator> <name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingMPEG2TSPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IBMDStreamingH264NALParser</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>IsNALSequenceParameterSet</name> <argument_list>( <argument><expr><name>IBMDStreamingH264NALPacket</name><operator>*</operator> <name>nal</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>IsNALPictureParameterSet</name> <argument_list>( <argument><expr><name>IBMDStreamingH264NALPacket</name><operator>*</operator> <name>nal</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetProfileAndLevelFromSPS</name> <argument_list>( <argument><expr><name>IBMDStreamingH264NALPacket</name><operator>*</operator> <name>nal</name></expr></argument>, <argument><expr><name>uint32_t</name><operator>*</operator> <name>profileIdc</name></expr></argument>, <argument><expr><name>uint32_t</name><operator>*</operator> <name>profileCompatability</name></expr></argument>, <argument><expr><name>uint32_t</name><operator>*</operator> <name>levelIdc</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IBMDStreamingH264NALParser</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<function_decl><type><name>IBMDStreamingDiscovery</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateBMDStreamingDiscoveryInstance</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>IBMDStreamingH264NALParser</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateBMDStreamingH264NALParser</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></extern>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
