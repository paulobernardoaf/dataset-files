<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\mac\decklink-sdk\DeckLinkAPI_v8_1.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPI_v8_1_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPI_v8_1_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkDeckControlStatusCallback_v8_1</name></cpp:macro> <cpp:value>(REFIID){0xE5,0xF6,0x93,0xC1,0x42,0x83,0x47,0x16,0xB1,0x8F,0xC1,0x43,0x15,0x21,0x95,0x5B}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkDeckControl_v8_1</name></cpp:macro> <cpp:value>(REFIID){0x52,0x2A,0x9E,0x39,0x0F,0x3C,0x47,0x42,0x94,0xEE,0xD8,0x0D,0xE3,0x35,0xDA,0x1D}</cpp:value></cpp:define>




<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlVTRControlState_v8_1</name>;</typedef>
<enum>enum <name>_BMDDeckControlVTRControlState_v8_1</name> <block>{
<decl><name>bmdDeckControlNotInVTRControlMode_v8_1</name> <init>= <expr><literal type="char">'nvcm'</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlPlaying_v8_1</name> <init>= <expr><literal type="char">'vtrp'</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlRecording_v8_1</name> <init>= <expr><literal type="char">'vtrr'</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlStill_v8_1</name> <init>= <expr><literal type="char">'vtra'</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlSeeking_v8_1</name> <init>= <expr><literal type="char">'vtrs'</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlStopped_v8_1</name> <init>= <expr><literal type="char">'vtro'</literal></expr></init></decl>
}</block>;</enum>




<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDeckControlStatusCallback_v8_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>TimecodeUpdate</name> <argument_list>( <argument>BMDTimecodeBCD currentTimecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>VTRControlStateChanged</name> <argument_list>( <argument>BMDDeckControlVTRControlState_v8_1 newState</argument>, <argument>BMDDeckControlError error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>DeckControlEventReceived</name> <argument_list>( <argument>BMDDeckControlEvent event</argument>, <argument>BMDDeckControlError error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>DeckControlStatusChanged</name> <argument_list>( <argument>BMDDeckControlStatusFlags flags</argument>, <argument>uint32_t mask</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDeckControlStatusCallback_v8_1</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDeckControl_v8_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>Open</name> <argument_list>( <argument>BMDTimeScale timeScale</argument>, <argument>BMDTimeValue timeValue</argument>, <argument>bool timecodeIsDropFrame</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Close</name> <argument_list>( <argument>bool standbyOn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetCurrentState</name> <argument_list>( <argument><expr><name>BMDDeckControlMode</name> <operator>*</operator><name>mode</name></expr></argument>, <argument><expr><name>BMDDeckControlVTRControlState_v8_1</name> <operator>*</operator><name>vtrControlState</name></expr></argument>, <argument><expr><name>BMDDeckControlStatusFlags</name> <operator>*</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetStandby</name> <argument_list>( <argument>bool standbyOn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SendCommand</name> <argument_list>( <argument>uint8_t *inBuffer</argument>, <argument>uint32_t inBufferSize</argument>, <argument>uint8_t *outBuffer</argument>, <argument>uint32_t *outDataSize</argument>, <argument>uint32_t outBufferSize</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Play</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Stop</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>TogglePlayStop</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Eject</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GoToTimecode</name> <argument_list>( <argument>BMDTimecodeBCD timecode</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>FastForward</name> <argument_list>( <argument>bool viewTape</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Rewind</name> <argument_list>( <argument>bool viewTape</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StepForward</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StepBack</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Jog</name> <argument_list>( <argument>double rate</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Shuttle</name> <argument_list>( <argument>double rate</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecodeString</name> <argument_list>( <argument><expr><name>CFStringRef</name> <operator>*</operator><name>currentTimeCode</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecode</name> <argument_list>( <argument><expr><name>IDeckLinkTimecode</name> <operator>*</operator><operator>*</operator><name>currentTimecode</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecodeBCD</name> <argument_list>( <argument><expr><name>BMDTimecodeBCD</name> <operator>*</operator><name>currentTimecode</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetPreroll</name> <argument_list>( <argument>uint32_t prerollSeconds</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetPreroll</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>prerollSeconds</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetExportOffset</name> <argument_list>( <argument>int32_t exportOffsetFields</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetExportOffset</name> <argument_list>( <argument><expr><name>int32_t</name> <operator>*</operator><name>exportOffsetFields</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetManualExportOffset</name> <argument_list>( <argument><expr><name>int32_t</name> <operator>*</operator><name>deckManualExportOffsetFields</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetCaptureOffset</name> <argument_list>( <argument>int32_t captureOffsetFields</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetCaptureOffset</name> <argument_list>( <argument><expr><name>int32_t</name> <operator>*</operator><name>captureOffsetFields</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartExport</name> <argument_list>( <argument>BMDTimecodeBCD inTimecode</argument>, <argument>BMDTimecodeBCD outTimecode</argument>, <argument>BMDDeckControlExportModeOpsFlags exportModeOps</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartCapture</name> <argument_list>( <argument>bool useVITC</argument>, <argument>BMDTimecodeBCD inTimecode</argument>, <argument>BMDTimecodeBCD outTimecode</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDeviceID</name> <argument_list>( <argument><expr><name>uint16_t</name> <operator>*</operator><name>deviceId</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Abort</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>CrashRecordStart</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>CrashRecordStop</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkDeckControlStatusCallback_v8_1</name> <operator>*</operator><name>callback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDeckControl_v8_1</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
