<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\DecklinkBase.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decklink-device-discovery.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decklink-device-instance.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decklink-device-mode.hpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>DecklinkBase</name> <block>{<block_content>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>DecklinkBase</name><argument_list>(<argument><expr><name>DeckLinkDeviceDiscovery</name> <operator>*</operator><name>discovery_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>DeckLinkDeviceInstance</name></expr></argument>&gt;</argument_list></name></type> <name>instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeckLinkDeviceDiscovery</name> <modifier>*</modifier></type><name>discovery</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>deviceMutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>activateRefs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMDPixelFormat</name></type> <name>pixelFormat</name> <init>= <expr><name>bmdFormat8BitYUV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_colorspace</name></type> <name>colorSpace</name> <init>= <expr><name>VIDEO_CS_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_range_type</name></type> <name>colorRange</name> <init>= <expr><name>VIDEO_RANGE_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>speaker_layout</name></type> <name>channelFormat</name> <init>= <expr><name>SPEAKERS_STEREO</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>Activate</name><parameter_list>(<parameter><decl><type><name>DeckLinkDevice</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>modeId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>Deactivate</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>DeckLinkDevice</name> <operator>*</operator><macro><name>GetDevice</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</unit>
