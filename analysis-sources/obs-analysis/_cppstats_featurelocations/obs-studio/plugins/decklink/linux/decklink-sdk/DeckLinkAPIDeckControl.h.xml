<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPIDeckControl.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPIDECKCONTROL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPIDECKCONTROL_H</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>__declspec(selectany) static const</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>static const</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_PUBLIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkDeckControlStatusCallback</name> <init>= <expr><block>{<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0xBA</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0xEF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkDeckControl</name> <init>= <expr><block>{<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0xBE</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlMode</name>;</typedef>
<enum>enum <name>_BMDDeckControlMode</name> <block>{
<decl><name>bmdDeckControlNotOpened</name> <init>= <expr><literal type="number">0x6E746F70</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlMode</name> <init>= <expr><literal type="number">0x76747263</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportMode</name> <init>= <expr><literal type="number">0x6578706D</literal></expr></init></decl>,
<decl><name>bmdDeckControlCaptureMode</name> <init>= <expr><literal type="number">0x6361706D</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlEvent</name>;</typedef>
<enum>enum <name>_BMDDeckControlEvent</name> <block>{
<decl><name>bmdDeckControlAbortedEvent</name> <init>= <expr><literal type="number">0x61627465</literal></expr></init></decl>, 



<decl><name>bmdDeckControlPrepareForExportEvent</name> <init>= <expr><literal type="number">0x70666565</literal></expr></init></decl>, 
<decl><name>bmdDeckControlExportCompleteEvent</name> <init>= <expr><literal type="number">0x65786365</literal></expr></init></decl>, 



<decl><name>bmdDeckControlPrepareForCaptureEvent</name> <init>= <expr><literal type="number">0x70666365</literal></expr></init></decl>, 
<decl><name>bmdDeckControlCaptureCompleteEvent</name> <init>= <expr><literal type="number">0x63636576</literal></expr></init></decl> 
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlVTRControlState</name>;</typedef>
<enum>enum <name>_BMDDeckControlVTRControlState</name> <block>{
<decl><name>bmdDeckControlNotInVTRControlMode</name> <init>= <expr><literal type="number">0x6E76636D</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlPlaying</name> <init>= <expr><literal type="number">0x76747270</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlRecording</name> <init>= <expr><literal type="number">0x76747272</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlStill</name> <init>= <expr><literal type="number">0x76747261</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlShuttleForward</name> <init>= <expr><literal type="number">0x76747366</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlShuttleReverse</name> <init>= <expr><literal type="number">0x76747372</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlJogForward</name> <init>= <expr><literal type="number">0x76746A66</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlJogReverse</name> <init>= <expr><literal type="number">0x76746A72</literal></expr></init></decl>,
<decl><name>bmdDeckControlVTRControlStopped</name> <init>= <expr><literal type="number">0x7674726F</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlStatusFlags</name>;</typedef>
<enum>enum <name>_BMDDeckControlStatusFlags</name> <block>{
<decl><name>bmdDeckControlStatusDeckConnected</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdDeckControlStatusRemoteMode</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>bmdDeckControlStatusRecordInhibited</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>bmdDeckControlStatusCassetteOut</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlExportModeOpsFlags</name>;</typedef>
<enum>enum <name>_BMDDeckControlExportModeOpsFlags</name> <block>{
<decl><name>bmdDeckControlExportModeInsertVideo</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio3</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio4</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio5</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio6</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio7</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio8</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio9</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio10</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio11</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAudio12</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertTimeCode</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertAssemble</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>,
<decl><name>bmdDeckControlExportModeInsertPreview</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>,
<decl><name>bmdDeckControlUseManualExport</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlError</name>;</typedef>
<enum>enum <name>_BMDDeckControlError</name> <block>{
<decl><name>bmdDeckControlNoError</name> <init>= <expr><literal type="number">0x6E6F6572</literal></expr></init></decl>,
<decl><name>bmdDeckControlModeError</name> <init>= <expr><literal type="number">0x6D6F6572</literal></expr></init></decl>,
<decl><name>bmdDeckControlMissedInPointError</name> <init>= <expr><literal type="number">0x6D696572</literal></expr></init></decl>,
<decl><name>bmdDeckControlDeckTimeoutError</name> <init>= <expr><literal type="number">0x64746572</literal></expr></init></decl>,
<decl><name>bmdDeckControlCommandFailedError</name> <init>= <expr><literal type="number">0x63666572</literal></expr></init></decl>,
<decl><name>bmdDeckControlDeviceAlreadyOpenedError</name> <init>= <expr><literal type="number">0x64616C6F</literal></expr></init></decl>,
<decl><name>bmdDeckControlFailedToOpenDeviceError</name> <init>= <expr><literal type="number">0x66646572</literal></expr></init></decl>,
<decl><name>bmdDeckControlInLocalModeError</name> <init>= <expr><literal type="number">0x6C6D6572</literal></expr></init></decl>,
<decl><name>bmdDeckControlEndOfTapeError</name> <init>= <expr><literal type="number">0x65746572</literal></expr></init></decl>,
<decl><name>bmdDeckControlUserAbortError</name> <init>= <expr><literal type="number">0x75616572</literal></expr></init></decl>,
<decl><name>bmdDeckControlNoTapeInDeckError</name> <init>= <expr><literal type="number">0x6E746572</literal></expr></init></decl>,
<decl><name>bmdDeckControlNoVideoFromCardError</name> <init>= <expr><literal type="number">0x6E766663</literal></expr></init></decl>,
<decl><name>bmdDeckControlNoCommunicationError</name> <init>= <expr><literal type="number">0x6E636F6D</literal></expr></init></decl>,
<decl><name>bmdDeckControlBufferTooSmallError</name> <init>= <expr><literal type="number">0x6274736D</literal></expr></init></decl>,
<decl><name>bmdDeckControlBadChecksumError</name> <init>= <expr><literal type="number">0x63686B73</literal></expr></init></decl>,
<decl><name>bmdDeckControlUnknownError</name> <init>= <expr><literal type="number">0x756E6572</literal></expr></init></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDeckControlStatusCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDeckControl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDeckControlStatusCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>TimecodeUpdate</name> <argument_list>( <argument>BMDTimecodeBCD currentTimecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>VTRControlStateChanged</name> <argument_list>( <argument>BMDDeckControlVTRControlState newState</argument>, <argument>BMDDeckControlError error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>DeckControlEventReceived</name> <argument_list>( <argument>BMDDeckControlEvent event</argument>, <argument>BMDDeckControlError error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>DeckControlStatusChanged</name> <argument_list>( <argument>BMDDeckControlStatusFlags flags</argument>, <argument>uint32_t mask</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDeckControlStatusCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDeckControl</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>Open</name> <argument_list>( <argument>BMDTimeScale timeScale</argument>, <argument>BMDTimeValue timeValue</argument>, <argument>bool timecodeIsDropFrame</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Close</name> <argument_list>( <argument>bool standbyOn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetCurrentState</name> <argument_list>( <argument><expr><name>BMDDeckControlMode</name> <operator>*</operator><name>mode</name></expr></argument>, <argument><expr><name>BMDDeckControlVTRControlState</name> <operator>*</operator><name>vtrControlState</name></expr></argument>, <argument><expr><name>BMDDeckControlStatusFlags</name> <operator>*</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetStandby</name> <argument_list>( <argument>bool standbyOn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SendCommand</name> <argument_list>( <argument>uint8_t *inBuffer</argument>, <argument>uint32_t inBufferSize</argument>, <argument>uint8_t *outBuffer</argument>, <argument>uint32_t *outDataSize</argument>, <argument>uint32_t outBufferSize</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Play</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Stop</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>TogglePlayStop</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Eject</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GoToTimecode</name> <argument_list>( <argument>BMDTimecodeBCD timecode</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>FastForward</name> <argument_list>( <argument>bool viewTape</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Rewind</name> <argument_list>( <argument>bool viewTape</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StepForward</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StepBack</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Jog</name> <argument_list>( <argument>double rate</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Shuttle</name> <argument_list>( <argument>double rate</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecodeString</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>currentTimeCode</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecode</name> <argument_list>( <argument><expr><name>IDeckLinkTimecode</name> <operator>*</operator><operator>*</operator><name>currentTimecode</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecodeBCD</name> <argument_list>( <argument><expr><name>BMDTimecodeBCD</name> <operator>*</operator><name>currentTimecode</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetPreroll</name> <argument_list>( <argument>uint32_t prerollSeconds</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetPreroll</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>prerollSeconds</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetExportOffset</name> <argument_list>( <argument>int32_t exportOffsetFields</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetExportOffset</name> <argument_list>( <argument><expr><name>int32_t</name> <operator>*</operator><name>exportOffsetFields</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetManualExportOffset</name> <argument_list>( <argument><expr><name>int32_t</name> <operator>*</operator><name>deckManualExportOffsetFields</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetCaptureOffset</name> <argument_list>( <argument>int32_t captureOffsetFields</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetCaptureOffset</name> <argument_list>( <argument><expr><name>int32_t</name> <operator>*</operator><name>captureOffsetFields</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartExport</name> <argument_list>( <argument>BMDTimecodeBCD inTimecode</argument>, <argument>BMDTimecodeBCD outTimecode</argument>, <argument>BMDDeckControlExportModeOpsFlags exportModeOps</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartCapture</name> <argument_list>( <argument>bool useVITC</argument>, <argument>BMDTimecodeBCD inTimecode</argument>, <argument>BMDTimecodeBCD outTimecode</argument>, <argument>BMDDeckControlError *error</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDeviceID</name> <argument_list>( <argument><expr><name>uint16_t</name> <operator>*</operator><name>deviceId</name></expr></argument>, <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Abort</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>CrashRecordStart</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>CrashRecordStop</name> <argument_list>( <argument><expr><name>BMDDeckControlError</name> <operator>*</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkDeckControlStatusCallback</name> <operator>*</operator><name>callback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDeckControl</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<extern>extern <literal type="string">"C"</literal> <block>{<block_content>


</block_content>}</block></extern>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
