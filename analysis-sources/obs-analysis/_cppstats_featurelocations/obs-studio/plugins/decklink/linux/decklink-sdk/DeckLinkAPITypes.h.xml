<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPITypes.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPITYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPITYPES_H</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>__declspec(selectany) static const</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>static const</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_PUBLIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>int64_t</name></type> <name>BMDTimeValue</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>BMDTimeScale</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>BMDTimecodeBCD</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>BMDTimecodeUserBits</name>;</typedef>



<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkTimecode</name> <init>= <expr><block>{<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x40</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDTimecodeFlags</name>;</typedef>
<enum>enum <name>_BMDTimecodeFlags</name> <block>{
<decl><name>bmdTimecodeFlagDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdTimecodeIsDropFrame</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdTimecodeFieldMark</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>bmdTimecodeColorFrame</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoConnection</name>;</typedef>
<enum>enum <name>_BMDVideoConnection</name> <block>{
<decl><name>bmdVideoConnectionSDI</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionHDMI</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionOpticalSDI</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionComponent</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionComposite</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionSVideo</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAudioConnection</name>;</typedef>
<enum>enum <name>_BMDAudioConnection</name> <block>{
<decl><name>bmdAudioConnectionEmbedded</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdAudioConnectionAESEBU</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>bmdAudioConnectionAnalog</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>bmdAudioConnectionAnalogXLR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>bmdAudioConnectionAnalogRCA</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>bmdAudioConnectionMicrophone</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>bmdAudioConnectionHeadphones</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>
}</block>;</enum>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckControlConnection</name>;</typedef>
<enum>enum <name>_BMDDeckControlConnection</name> <block>{
<decl><name>bmdDeckControlConnectionRS422Remote1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>bmdDeckControlConnectionRS422Remote2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkTimecode</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkTimecode</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>BMDTimecodeBCD</name> <call><name>GetBCD</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetComponents</name> <argument_list>( <argument><expr><name>uint8_t</name> <operator>*</operator><name>hours</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>minutes</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>seconds</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>frames</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetString</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>timecode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDTimecodeFlags</name> <call><name>GetFlags</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetTimecodeUserBits</name> <argument_list>( <argument><expr><name>BMDTimecodeUserBits</name> <operator>*</operator><name>userBits</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkTimecode</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 
}</block></expr></range></decl>;</decl_stmt>



<extern>extern <literal type="string">"C"</literal> <block>{<block_content>


</block_content>}</block></extern>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
