<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\LinuxCOM.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LINUX_COM_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LINUX_COM_H_</name></cpp:macro></cpp:define>

<struct>struct <name>REFIID</name>
<block>{ 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte12</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte14</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte15</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>REFIID</name></type> <name>CFUUIDBytes</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFUUIDGetUUIDBytes</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>HRESULT</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ULONG</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>LPVOID</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCEEDED</name><parameter_list>(<parameter><type><name>Status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HRESULT)(Status) &gt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAILED</name><parameter_list>(<parameter><type><name>Status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HRESULT)(Status)&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ERROR</name><parameter_list>(<parameter><type><name>Status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long)(Status) &gt;&gt; 31 == SEVERITY_ERROR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRESULT_CODE</name><parameter_list>(<parameter><type><name>hr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((hr) &amp; 0xFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRESULT_FACILITY</name><parameter_list>(<parameter><type><name>hr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((hr) &gt;&gt; 16) &amp; 0x1fff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRESULT_SEVERITY</name><parameter_list>(<parameter><type><name>hr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((hr) &gt;&gt; 31) &amp; 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEVERITY_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEVERITY_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_HRESULT</name><parameter_list>(<parameter><type><name>sev</name></type></parameter>,<parameter><type><name>fac</name></type></parameter>,<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HRESULT) (((unsigned long)(sev)&lt;&lt;31) | ((unsigned long)(fac)&lt;&lt;16) | ((unsigned long)(code))) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_OK</name></cpp:macro> <cpp:value>((HRESULT)0x00000000L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_FALSE</name></cpp:macro> <cpp:value>((HRESULT)0x00000001L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_UNEXPECTED</name></cpp:macro> <cpp:value>((HRESULT)0x8000FFFFL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NOTIMPL</name></cpp:macro> <cpp:value>((HRESULT)0x80000001L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_OUTOFMEMORY</name></cpp:macro> <cpp:value>((HRESULT)0x80000002L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_INVALIDARG</name></cpp:macro> <cpp:value>((HRESULT)0x80000003L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NOINTERFACE</name></cpp:macro> <cpp:value>((HRESULT)0x80000004L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_POINTER</name></cpp:macro> <cpp:value>((HRESULT)0x80000005L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_HANDLE</name></cpp:macro> <cpp:value>((HRESULT)0x80000006L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ABORT</name></cpp:macro> <cpp:value>((HRESULT)0x80000007L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_FAIL</name></cpp:macro> <cpp:value>((HRESULT)0x80000008L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ACCESSDENIED</name></cpp:macro> <cpp:value>((HRESULT)0x80000009L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDMETHODCALLTYPE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IUnknown</name></cpp:macro> <cpp:value>(REFIID){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IUnknownUUID</name></cpp:macro> <cpp:value>IID_IUnknown</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_PUBLIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IUnknown</name>
<block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name></type> <name>QueryInterface</name><parameter_list>(<parameter><decl><type><name>REFIID</name></type> <name>iid</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name> <modifier>*</modifier></type><name>ppv</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>ULONG</name> <name>STDMETHODCALLTYPE</name></type> <name>AddRef</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>ULONG</name> <name>STDMETHODCALLTYPE</name></type> <name>Release</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
