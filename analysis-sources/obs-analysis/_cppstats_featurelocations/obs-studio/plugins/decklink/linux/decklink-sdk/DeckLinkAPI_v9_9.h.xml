<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPI_v9_9.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPI_v9_9_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPI_v9_9_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkOutput_v9_9</name></cpp:macro> <cpp:value>(REFIID){0xA3,0xEF,0x09,0x63,0x08,0x62,0x44,0xED,0x92,0xA9,0xEE,0x89,0xAB,0xF4,0x31,0xC7}</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkOutput_v9_9</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoOutputFlags flags</argument>, <argument>BMDDisplayModeSupport *result</argument>, <argument>IDeckLinkDisplayMode **resultDisplayMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoOutput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDVideoOutputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetVideoOutputFrameMemoryAllocator</name> <argument_list>( <argument><expr><name>IDeckLinkMemoryAllocator</name> <operator>*</operator><name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateVideoFrame</name> <argument_list>( <argument>int32_t width</argument>, <argument>int32_t height</argument>, <argument>int32_t rowBytes</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDFrameFlags flags</argument>, <argument>IDeckLinkMutableVideoFrame **outFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateAncillaryData</name> <argument_list>( <argument>BMDPixelFormat pixelFormat</argument>, <argument>IDeckLinkVideoFrameAncillary **outBuffer</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisplayVideoFrameSync</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleVideoFrame</name> <argument_list>( <argument>IDeckLinkVideoFrame *theFrame</argument>, <argument>BMDTimeValue displayTime</argument>, <argument>BMDTimeValue displayDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScheduledFrameCompletionCallback</name> <argument_list>( <argument><expr><name>IDeckLinkVideoOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioOutput</name> <argument_list>( <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>, <argument>BMDAudioOutputStreamType streamType</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>WriteAudioSamplesSync</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>BeginAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>EndAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleAudioSamples</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>BMDTimeValue streamTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushBufferedAudioSamples</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetAudioCallback</name> <argument_list>( <argument><expr><name>IDeckLinkAudioOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartScheduledPlayback</name> <argument_list>( <argument>BMDTimeValue playbackStartTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>double playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StopScheduledPlayback</name> <argument_list>( <argument>BMDTimeValue stopPlaybackAtTime</argument>, <argument>BMDTimeValue *actualStopTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>IsScheduledPlaybackRunning</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>active</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetScheduledStreamTime</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *streamTime</argument>, <argument>double *playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetReferenceStatus</name> <argument_list>( <argument><expr><name>BMDReferenceStatus</name> <operator>*</operator><name>referenceStatus</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkOutput_v9_9</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
