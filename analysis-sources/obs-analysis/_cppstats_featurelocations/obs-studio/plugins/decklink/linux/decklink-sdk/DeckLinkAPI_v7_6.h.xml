<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPI_v7_6.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DeckLink_API_v7_6_h__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DeckLink_API_v7_6_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoOutputCallback_v7_6</name></cpp:macro> <cpp:value>(REFIID){0xE7,0x63,0xA6,0x26,0x4A,0x3C,0x49,0xD1,0xBF,0x13,0xE7,0xAD,0x36,0x92,0xAE,0x52}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInputCallback_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x31,0xD2,0x8E,0xE7,0x88,0xB6,0x4C,0xB1,0x89,0x7A,0xCD,0xBF,0x79,0xA2,0x64,0x14}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkDisplayModeIterator_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x45,0x5D,0x74,0x1F,0x17,0x79,0x48,0x00,0x86,0xF5,0x0B,0x5D,0x13,0xD7,0x97,0x51}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkDisplayMode_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x87,0x45,0x1E,0x84,0x2B,0x7E,0x43,0x9E,0xA6,0x29,0x43,0x93,0xEA,0x4A,0x85,0x50}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkOutput_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x29,0x22,0x81,0x42,0xEB,0x8C,0x41,0x41,0xA6,0x21,0xF7,0x40,0x26,0x45,0x09,0x55}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInput_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x30,0x0C,0x13,0x5A,0x9F,0x43,0x48,0xE2,0x99,0x06,0x6D,0x79,0x11,0xD9,0x3C,0xF1}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkTimecode_v7_6</name></cpp:macro> <cpp:value>(REFIID){0xEF,0xB9,0xBC,0xA6,0xA5,0x21,0x44,0xF7,0xBD,0x69,0x23,0x32,0xF2,0x4D,0x9E,0xE6}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoFrame_v7_6</name></cpp:macro> <cpp:value>(REFIID){0xA8,0xD8,0x23,0x8E,0x6B,0x18,0x41,0x96,0x99,0xE1,0x5A,0xF7,0x17,0xB8,0x3D,0x32}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkMutableVideoFrame_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x46,0xFC,0xEE,0x00,0xB4,0xE6,0x43,0xD0,0x91,0xC0,0x02,0x3A,0x7F,0xCE,0xB3,0x4F}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoInputFrame_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x9A,0x74,0xFA,0x41,0xAE,0x9F,0x47,0xAC,0x8C,0xF4,0x01,0xF4,0x2D,0xD5,0x99,0x65}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkScreenPreviewCallback_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x37,0x3F,0x49,0x9D,0x4B,0x4D,0x45,0x18,0xAD,0x22,0x63,0x54,0xE5,0xA5,0x82,0x5E}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkGLScreenPreviewHelper_v7_6</name></cpp:macro> <cpp:value>(REFIID){0xBA,0x57,0x5C,0xD9,0xA1,0x5E,0x49,0x7B,0xB2,0xC2,0xF9,0xAF,0xE7,0xBE,0x4E,0xBA}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoConversion_v7_6</name></cpp:macro> <cpp:value>(REFIID){0x3E,0xB5,0x04,0xC9,0xF9,0x7D,0x40,0xFE,0xA1,0x58,0xD4,0x07,0xD4,0x8C,0xB5,0x3B}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkConfiguration_v7_6</name></cpp:macro> <cpp:value>(REFIID){0xB8,0xEA,0xD5,0x69,0xB7,0x64,0x47,0xF0,0xA7,0x3F,0xAE,0x40,0xDF,0x6C,0xBF,0x10}</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>



<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoConnection_v7_6</name>;</typedef>
<enum>enum <name>_BMDVideoConnection_v7_6</name> <block>{
<decl><name>bmdVideoConnectionSDI_v7_6</name> <init>= <expr><literal type="char">'sdi '</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionHDMI_v7_6</name> <init>= <expr><literal type="char">'hdmi'</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionOpticalSDI_v7_6</name> <init>= <expr><literal type="char">'opti'</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionComponent_v7_6</name> <init>= <expr><literal type="char">'cpnt'</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionComposite_v7_6</name> <init>= <expr><literal type="char">'cmst'</literal></expr></init></decl>,
<decl><name>bmdVideoConnectionSVideo_v7_6</name> <init>= <expr><literal type="char">'svid'</literal></expr></init></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoOutputCallback_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkInputCallback_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDisplayModeIterator_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDisplayMode_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkOutput_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkInput_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkTimecode_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrame_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkMutableVideoFrame_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoInputFrame_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkScreenPreviewCallback_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkGLScreenPreviewHelper_v7_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoConversion_v7_6</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoOutputCallback_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>ScheduledFrameCompleted</name> <argument_list>( <argument>IDeckLinkVideoFrame_v7_6 *completedFrame</argument>, <argument>BMDOutputFrameCompletionResult result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>ScheduledPlaybackHasStopped</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoOutputCallback_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInputCallback_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>VideoInputFormatChanged</name> <argument_list>( <argument>BMDVideoInputFormatChangedEvents notificationEvents</argument>, <argument>IDeckLinkDisplayMode_v7_6 *newDisplayMode</argument>, <argument>BMDDetectedVideoInputFormatFlags detectedSignalFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>VideoInputFrameArrived</name> <argument_list>( <argument><expr><name>IDeckLinkVideoInputFrame_v7_6</name><operator>*</operator> <name>videoFrame</name></expr></argument>, <argument><expr><name>IDeckLinkAudioInputPacket</name><operator>*</operator> <name>audioPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInputCallback_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDisplayModeIterator_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>Next</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayMode_v7_6</name> <operator>*</operator><operator>*</operator><name>deckLinkDisplayMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDisplayModeIterator_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDisplayMode_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>GetName</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDDisplayMode</name> <call><name>GetDisplayMode</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <call><name>GetWidth</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <call><name>GetHeight</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetFrameRate</name> <argument_list>( <argument><expr><name>BMDTimeValue</name> <operator>*</operator><name>frameDuration</name></expr></argument>, <argument><expr><name>BMDTimeScale</name> <operator>*</operator><name>timeScale</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDFieldDominance</name> <call><name>GetFieldDominance</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDisplayMode_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkOutput_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDDisplayModeSupport *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator_v7_6</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback_v7_6</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoOutput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDVideoOutputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetVideoOutputFrameMemoryAllocator</name> <argument_list>( <argument><expr><name>IDeckLinkMemoryAllocator</name> <operator>*</operator><name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateVideoFrame</name> <argument_list>( <argument>int32_t width</argument>, <argument>int32_t height</argument>, <argument>int32_t rowBytes</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDFrameFlags flags</argument>, <argument>IDeckLinkMutableVideoFrame_v7_6 **outFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateAncillaryData</name> <argument_list>( <argument>BMDPixelFormat pixelFormat</argument>, <argument>IDeckLinkVideoFrameAncillary **outBuffer</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisplayVideoFrameSync</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame_v7_6</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleVideoFrame</name> <argument_list>( <argument>IDeckLinkVideoFrame_v7_6 *theFrame</argument>, <argument>BMDTimeValue displayTime</argument>, <argument>BMDTimeValue displayDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScheduledFrameCompletionCallback</name> <argument_list>( <argument><expr><name>IDeckLinkVideoOutputCallback_v7_6</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioOutput</name> <argument_list>( <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>, <argument>BMDAudioOutputStreamType streamType</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>WriteAudioSamplesSync</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>BeginAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>EndAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleAudioSamples</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>BMDTimeValue streamTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushBufferedAudioSamples</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetAudioCallback</name> <argument_list>( <argument><expr><name>IDeckLinkAudioOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartScheduledPlayback</name> <argument_list>( <argument>BMDTimeValue playbackStartTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>double playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StopScheduledPlayback</name> <argument_list>( <argument>BMDTimeValue stopPlaybackAtTime</argument>, <argument>BMDTimeValue *actualStopTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>IsScheduledPlaybackRunning</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>active</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetScheduledStreamTime</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *streamTime</argument>, <argument>double *playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkOutput_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInput_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDDisplayModeSupport *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator_v7_6</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback_v7_6</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoInput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioInput</name> <argument_list>( <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <call><name>StartStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StopStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>PauseStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkInputCallback_v7_6</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInput_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkTimecode_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>BMDTimecodeBCD</name> <call><name>GetBCD</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetComponents</name> <argument_list>( <argument><expr><name>uint8_t</name> <operator>*</operator><name>hours</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>minutes</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>seconds</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>frames</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetString</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>timecode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDTimecodeFlags</name> <call><name>GetFlags</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkTimecode_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrame_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>long</name> <call><name>GetWidth</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <call><name>GetHeight</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <call><name>GetRowBytes</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDPixelFormat</name> <call><name>GetPixelFormat</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDFrameFlags</name> <call><name>GetFlags</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetTimecode</name> <argument_list>(<argument>BMDTimecodeFormat format</argument>, <argument>IDeckLinkTimecode_v7_6 **timecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAncillaryData</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrameAncillary</name> <operator>*</operator><operator>*</operator><name>ancillary</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoFrame_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkMutableVideoFrame_v7_6</name> <range>: <expr><name>public</name> <name>IDeckLinkVideoFrame_v7_6</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>SetFlags</name> <argument_list>(<argument>BMDFrameFlags newFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetTimecode</name> <argument_list>(<argument>BMDTimecodeFormat format</argument>, <argument>IDeckLinkTimecode_v7_6 *timecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetTimecodeFromComponents</name> <argument_list>(<argument>BMDTimecodeFormat format</argument>, <argument>uint8_t hours</argument>, <argument>uint8_t minutes</argument>, <argument>uint8_t seconds</argument>, <argument>uint8_t frames</argument>, <argument>BMDTimecodeFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetAncillaryData</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrameAncillary</name> <operator>*</operator><name>ancillary</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkMutableVideoFrame_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoInputFrame_v7_6</name> <range>: <expr><name>public</name> <name>IDeckLinkVideoFrame_v7_6</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>GetStreamTime</name> <argument_list>( <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceTimestamp</name> <argument_list>(<argument>BMDTimeScale timeScale</argument>, <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoInputFrame_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkScreenPreviewCallback_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>DrawFrame</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame_v7_6</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkScreenPreviewCallback_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkGLScreenPreviewHelper_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>



<name>virtual</name> <name>HRESULT</name> <call><name>InitializeGL</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>PaintGL</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetFrame</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame_v7_6</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkGLScreenPreviewHelper_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoConversion_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>ConvertFrame</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame_v7_6</name><operator>*</operator> <name>srcFrame</name></expr></argument>, <argument><expr><name>IDeckLinkVideoFrame_v7_6</name><operator>*</operator> <name>dstFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoConversion_v7_6</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkConfiguration_v7_6</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>GetConfigurationValidator</name> <argument_list>( <argument><expr><name>IDeckLinkConfiguration_v7_6</name> <operator>*</operator><operator>*</operator><name>configObject</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>WriteConfigurationToPreferences</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetVideoOutputFormat</name> <argument_list>( <argument>BMDVideoConnection_v7_6 videoOutputConnection</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <macro><name>IsVideoOutputActive</name> <argument_list>( <argument>BMDVideoConnection_v7_6 videoOutputConnection</argument>, <argument>bool *active</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetAnalogVideoOutputFlags</name> <argument_list>( <argument>BMDAnalogVideoFlags analogVideoFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAnalogVideoOutputFlags</name> <argument_list>( <argument><expr><name>BMDAnalogVideoFlags</name> <operator>*</operator><name>analogVideoFlags</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableFieldFlickerRemovalWhenPaused</name> <argument_list>( <argument>bool enable</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>IsEnabledFieldFlickerRemovalWhenPaused</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>enabled</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Set444And3GBpsVideoOutput</name> <argument_list>( <argument>bool enable444VideoOutput</argument>, <argument>bool enable3GbsOutput</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Get444And3GBpsVideoOutput</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>is444VideoOutputEnabled</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>threeGbsOutputEnabled</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetVideoOutputConversionMode</name> <argument_list>( <argument>BMDVideoOutputConversionMode conversionMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetVideoOutputConversionMode</name> <argument_list>( <argument><expr><name>BMDVideoOutputConversionMode</name> <operator>*</operator><name>conversionMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Set_HD1080p24_to_HD1080i5994_Conversion</name> <argument_list>( <argument>bool enable</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Get_HD1080p24_to_HD1080i5994_Conversion</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>enabled</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetVideoInputFormat</name> <argument_list>( <argument>BMDVideoConnection_v7_6 videoInputFormat</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetVideoInputFormat</name> <argument_list>( <argument><expr><name>BMDVideoConnection_v7_6</name> <operator>*</operator><name>videoInputFormat</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetAnalogVideoInputFlags</name> <argument_list>( <argument>BMDAnalogVideoFlags analogVideoFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAnalogVideoInputFlags</name> <argument_list>( <argument><expr><name>BMDAnalogVideoFlags</name> <operator>*</operator><name>analogVideoFlags</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetVideoInputConversionMode</name> <argument_list>( <argument>BMDVideoInputConversionMode conversionMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetVideoInputConversionMode</name> <argument_list>( <argument><expr><name>BMDVideoInputConversionMode</name> <operator>*</operator><name>conversionMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetBlackVideoOutputDuringCapture</name> <argument_list>( <argument>bool blackOutInCapture</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBlackVideoOutputDuringCapture</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>blackOutInCapture</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Set32PulldownSequenceInitialTimecodeFrame</name> <argument_list>( <argument>uint32_t aFrameTimecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>Get32PulldownSequenceInitialTimecodeFrame</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>aFrameTimecode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetVancSourceLineMapping</name> <argument_list>( <argument>uint32_t activeLine1VANCsource</argument>, <argument>uint32_t activeLine2VANCsource</argument>, <argument>uint32_t activeLine3VANCsource</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetVancSourceLineMapping</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>activeLine1VANCsource</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>*</operator><name>activeLine2VANCsource</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>*</operator><name>activeLine3VANCsource</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetAudioInputFormat</name> <argument_list>( <argument>BMDAudioConnection audioInputFormat</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAudioInputFormat</name> <argument_list>( <argument><expr><name>BMDAudioConnection</name> <operator>*</operator><name>audioInputFormat</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>



<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<function_decl><type><name>IDeckLinkIterator</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateDeckLinkIteratorInstance_v7_6</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>IDeckLinkGLScreenPreviewHelper_v7_6</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateOpenGLScreenPreviewHelper_v7_6</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>IDeckLinkVideoConversion_v7_6</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateVideoConversionInstance_v7_6</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></extern><empty_stmt>;</empty_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
