<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPI_v9_2.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPI_v9_2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPI_v9_2_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInput_v9_2</name></cpp:macro> <cpp:value>(REFIID){0x6D,0x40,0xEF,0x78,0x28,0xB9,0x4E,0x21,0x99,0x0D,0x95,0xBB,0x77,0x50,0xA0,0x4F}</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInput_v9_2</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>, <argument>BMDDisplayModeSupport *result</argument>, <argument>IDeckLinkDisplayMode **resultDisplayMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoInput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioInput</name> <argument_list>( <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <call><name>StartStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>StopStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>PauseStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkInputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInput_v9_2</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 
}</block></expr></range></decl>;</decl_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
