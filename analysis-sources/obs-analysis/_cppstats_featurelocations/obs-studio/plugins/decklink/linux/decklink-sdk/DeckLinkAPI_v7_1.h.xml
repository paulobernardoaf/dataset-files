<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPI_v7_1.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DeckLink_API_v7_1_h__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DeckLink_API_v7_1_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkDisplayModeIterator_v7_1</name></cpp:macro> <cpp:value>(REFIID){0xB2,0x81,0x31,0xB6,0x59,0xAC,0x48,0x57,0xB5,0xAC,0xCD,0x75,0xD5,0x88,0x3E,0x2F}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkDisplayMode_v7_1</name></cpp:macro> <cpp:value>(REFIID){0xAF,0x0C,0xD6,0xD5,0x83,0x76,0x43,0x5E,0x84,0x33,0x54,0xF9,0xDD,0x53,0x0A,0xC3}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoOutputCallback_v7_1</name></cpp:macro> <cpp:value>(REFIID){0xEB,0xD0,0x1A,0xFA,0xE4,0xB0,0x49,0xC6,0xA0,0x1D,0xED,0xB9,0xD1,0xB5,0x5F,0xD9}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInputCallback_v7_1</name></cpp:macro> <cpp:value>(REFIID){0x7F,0x94,0xF3,0x28,0x5E,0xD4,0x4E,0x9F,0x97,0x29,0x76,0xA8,0x6B,0xDC,0x99,0xCC}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkOutput_v7_1</name></cpp:macro> <cpp:value>(REFIID){0xAE,0x5B,0x3E,0x9B,0x4E,0x1E,0x45,0x35,0xB6,0xE8,0x48,0x0F,0xF5,0x2F,0x6C,0xE5}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInput_v7_1</name></cpp:macro> <cpp:value>(REFIID){0x2B,0x54,0xED,0xEF,0x5B,0x32,0x42,0x9F,0xBA,0x11,0xBB,0x99,0x05,0x96,0xEA,0xCD}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoFrame_v7_1</name></cpp:macro> <cpp:value>(REFIID){0x33,0x3F,0x3A,0x10,0x8C,0x2D,0x43,0xCF,0xB7,0x9D,0x46,0x56,0x0F,0xEE,0xA1,0xCE}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoInputFrame_v7_1</name></cpp:macro> <cpp:value>(REFIID){0xC8,0xB4,0x1D,0x95,0x88,0x48,0x40,0xEE,0x9B,0x37,0x6E,0x34,0x17,0xFB,0x11,0x4B}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkAudioInputPacket_v7_1</name></cpp:macro> <cpp:value>(REFIID){0xC8,0x6D,0xE4,0xF6,0xA2,0x9F,0x42,0xE3,0xAB,0x3A,0x13,0x63,0xE2,0x9F,0x07,0x88}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDisplayModeIterator_v7_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDisplayMode_v7_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrame_v7_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoInputFrame_v7_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAudioInputPacket_v7_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDisplayModeIterator_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>Next</name> <argument_list>(<argument><expr><name>IDeckLinkDisplayMode_v7_1</name><operator>*</operator> <operator>*</operator><name>deckLinkDisplayMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDisplayMode_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetName</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDDisplayMode</name> <name>STDMETHODCALLTYPE</name> <call><name>GetDisplayMode</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <name>STDMETHODCALLTYPE</name> <call><name>GetWidth</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <name>STDMETHODCALLTYPE</name> <call><name>GetHeight</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetFrameRate</name> <argument_list>(<argument><expr><name>BMDTimeValue</name> <operator>*</operator><name>frameDuration</name></expr></argument>, <argument><expr><name>BMDTimeScale</name> <operator>*</operator><name>timeScale</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoOutputCallback_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>ScheduledFrameCompleted</name> <argument_list>(<argument>IDeckLinkVideoFrame_v7_1* completedFrame</argument>, <argument>BMDOutputFrameCompletionResult result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInputCallback_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>VideoInputFrameArrived</name> <argument_list>(<argument><expr><name>IDeckLinkVideoInputFrame_v7_1</name><operator>*</operator> <name>videoFrame</name></expr></argument>, <argument><expr><name>IDeckLinkAudioInputPacket_v7_1</name><operator>*</operator> <name>audioPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkOutput_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>DoesSupportVideoMode</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDDisplayModeSupport *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetDisplayModeIterator</name> <argument_list>(<argument><expr><name>IDeckLinkDisplayModeIterator_v7_1</name><operator>*</operator> <operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>EnableVideoOutput</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>DisableVideoOutput</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>SetVideoOutputFrameMemoryAllocator</name> <argument_list>(<argument><expr><name>IDeckLinkMemoryAllocator</name><operator>*</operator> <name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>CreateVideoFrame</name> <argument_list>(<argument>int32_t width</argument>, <argument>int32_t height</argument>, <argument>int32_t rowBytes</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDFrameFlags flags</argument>, <argument>IDeckLinkVideoFrame_v7_1* *outFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>CreateVideoFrameFromBuffer</name> <argument_list>(<argument>void* buffer</argument>, <argument>int32_t width</argument>, <argument>int32_t height</argument>, <argument>int32_t rowBytes</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDFrameFlags flags</argument>, <argument>IDeckLinkVideoFrame_v7_1* *outFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>DisplayVideoFrameSync</name> <argument_list>(<argument><expr><name>IDeckLinkVideoFrame_v7_1</name><operator>*</operator> <name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>ScheduleVideoFrame</name> <argument_list>(<argument>IDeckLinkVideoFrame_v7_1* theFrame</argument>, <argument>BMDTimeValue displayTime</argument>, <argument>BMDTimeValue displayDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>SetScheduledFrameCompletionCallback</name> <argument_list>(<argument><expr><name>IDeckLinkVideoOutputCallback_v7_1</name><operator>*</operator> <name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>EnableAudioOutput</name> <argument_list>(<argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>DisableAudioOutput</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>WriteAudioSamplesSync</name> <argument_list>(<argument>void* buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>BeginAudioPreroll</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>EndAudioPreroll</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>ScheduleAudioSamples</name> <argument_list>(<argument>void* buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>BMDTimeValue streamTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetBufferedAudioSampleFrameCount</name> <argument_list>(<argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedSampleCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>FlushBufferedAudioSamples</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>SetAudioCallback</name> <argument_list>(<argument><expr><name>IDeckLinkAudioOutputCallback</name><operator>*</operator> <name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>StartScheduledPlayback</name> <argument_list>(<argument>BMDTimeValue playbackStartTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>double playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>StopScheduledPlayback</name> <argument_list>(<argument>BMDTimeValue stopPlaybackAtTime</argument>, <argument>BMDTimeValue *actualStopTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>(<argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *elapsedTimeSinceSchedulerBegan</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInput_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>DoesSupportVideoMode</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDDisplayModeSupport *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetDisplayModeIterator</name> <argument_list>(<argument><expr><name>IDeckLinkDisplayModeIterator_v7_1</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>EnableVideoInput</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>DisableVideoInput</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>EnableAudioInput</name> <argument_list>(<argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>DisableAudioInput</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>ReadAudioSamples</name> <argument_list>(<argument>void* buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>uint32_t *sampleFramesRead</argument>, <argument>BMDTimeValue *audioPacketTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetBufferedAudioSampleFrameCount</name> <argument_list>(<argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedSampleCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>StartStreams</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>StopStreams</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>PauseStreams</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>SetCallback</name> <argument_list>(<argument><expr><name>IDeckLinkInputCallback_v7_1</name><operator>*</operator> <name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrame_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>long</name> <name>STDMETHODCALLTYPE</name> <call><name>GetWidth</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <name>STDMETHODCALLTYPE</name> <call><name>GetHeight</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>long</name> <name>STDMETHODCALLTYPE</name> <call><name>GetRowBytes</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDPixelFormat</name> <name>STDMETHODCALLTYPE</name> <call><name>GetPixelFormat</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>BMDFrameFlags</name> <name>STDMETHODCALLTYPE</name> <call><name>GetFlags</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetBytes</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoInputFrame_v7_1</name> <range>: <expr><name>public</name> <name>IDeckLinkVideoFrame_v7_1</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>GetFrameTime</name> <argument_list>(<argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAudioInputPacket_v7_1</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>long</name> <name>STDMETHODCALLTYPE</name> <call><name>GetSampleCount</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>GetBytes</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>GetAudioPacketTime</name> <argument_list>(<argument>BMDTimeValue *packetTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
