<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPI_v8_0.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_DECKLINKAPI_v8_0_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_DECKLINKAPI_v8_0_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLink_v8_0</name></cpp:macro> <cpp:value>(REFIID){0x62,0xBF,0xF7,0x5D,0x65,0x69,0x4E,0x55,0x8D,0x4D,0x66,0xAA,0x03,0x82,0x9A,0xBC}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkIterator_v8_0</name></cpp:macro> <cpp:value>(REFIID){0x74,0xE9,0x36,0xFC,0xCC,0x28,0x4A,0x67,0x81,0xA0,0x1E,0x94,0xE5,0x2D,0x4E,0x69}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLink_v8_0</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>GetModelName</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>modelName</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkIterator_v8_0</name> <range>: <expr><name>public</name> <name>IUnknown</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <call><name>Next</name> <argument_list>( <argument><expr><name>IDeckLink_v8_0</name> <operator>*</operator><operator>*</operator><name>deckLinkInstance</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<function_decl><type><name>IDeckLinkIterator_v8_0</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateDeckLinkIteratorInstance_v8_0</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
