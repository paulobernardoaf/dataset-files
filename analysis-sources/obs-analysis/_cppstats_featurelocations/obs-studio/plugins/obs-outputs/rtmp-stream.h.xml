<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-outputs\rtmp-stream.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-avc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/circlebuf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"librtmp/rtmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"librtmp/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flv-mux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net-if.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Iphlpapi.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[rtmp stream: '%s'] " format, obs_output_get_name(stream-&gt;output), ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_DYN_BITRATE</name></cpp:macro> <cpp:value>"dyn_bitrate"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_DROP_THRESHOLD</name></cpp:macro> <cpp:value>"drop_threshold_ms"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PFRAME_DROP_THRESHOLD</name></cpp:macro> <cpp:value>"pframe_drop_threshold_ms"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MAX_SHUTDOWN_TIME_SEC</name></cpp:macro> <cpp:value>"max_shutdown_time_sec"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BIND_IP</name></cpp:macro> <cpp:value>"bind_ip"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NEWSOCKETLOOP_ENABLED</name></cpp:macro> <cpp:value>"new_socket_loop_enabled"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_LOWLATENCY_ENABLED</name></cpp:macro> <cpp:value>"low_latency_mode_enabled"</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_FRAMEDROPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DROPTEST_MAX_KBPS</name></cpp:macro> <cpp:value>3000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DROPTEST_MAX_BYTES</name></cpp:macro> <cpp:value>(DROPTEST_MAX_KBPS * 1000 / 8)</cpp:value></cpp:define>

<struct>struct <name>droptest_info</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>dbr_frame</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>send_beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>send_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rtmp_stream</name> <block>{
<decl_stmt><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>packets_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sent_headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>got_first_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_dts_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>connecting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>connect_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>disconnected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>encode_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>send_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_shutdown_time_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>send_sem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>stop_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>stop_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>shutdown_timeout_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name></decl>, <decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>username</name></decl>, <decl><type ref="prev"/><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>encoder_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>bind_ip</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>drop_threshold_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pframe_drop_threshold_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>congestion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_dts_usec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_bytes_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dropped_frames</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_FRAMEDROPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>droptest_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>droptest_last_key_check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>droptest_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>droptest_size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>dbr_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>dbr_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dbr_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dbr_inc_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>audio_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dbr_est_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dbr_orig_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dbr_prev_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dbr_cur_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dbr_inc_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dbr_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name></type> <name>rtmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>new_socket_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>low_latency_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>disable_send_window_optimization</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>socket_thread_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>socket_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>write_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>write_buf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>write_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>write_buf_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>buffer_space_available_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>buffer_has_data_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>socket_available_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>send_thread_signaled_exit</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>socket_thread_windows</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
