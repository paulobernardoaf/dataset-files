<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-outputs\librtmp\log.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmp_sys.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PRINT_LEN</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RTMP_LogLevel</name></type> <name>RTMP_debuglevel</name> <init>= <expr><name>RTMP_LOGERROR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>neednl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fmsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RTMP_LogCallback</name></type> <name>rtmp_log_default</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cb</name> <init>= <expr><name>rtmp_log_default</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>levels</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"CRIT"</literal></expr>, <expr><literal type="string">"ERROR"</literal></expr>, <expr><literal type="string">"WARNING"</literal></expr>, <expr><literal type="string">"INFO"</literal></expr>,
<expr><literal type="string">"DEBUG"</literal></expr>, <expr><literal type="string">"DEBUG2"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_log_default</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_PRINT_LEN</name></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>MAX_PRINT_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name>RTMP_debuglevel</name><operator>&lt;</operator><name>RTMP_LOGALL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"no-name"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>fmsg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fmsg</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>level</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>RTMP_debuglevel</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>neednl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>neednl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fmsg</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name><name>levels</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RTMP_LogSetOutput</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>fmsg</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RTMP_LogSetLevel</name><parameter_list>(<parameter><decl><type><name>RTMP_LogLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>RTMP_debuglevel</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RTMP_LogSetCallback</name><parameter_list>(<parameter><decl><type><name>RTMP_LogCallback</name> <modifier>*</modifier></type><name>cbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>cbp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RTMP_LogLevel</name></type> <name>RTMP_LogGetLevel</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name>RTMP_debuglevel</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RTMP_Log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hexdig</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>RTMP_LogHex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>level</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>RTMP_debuglevel</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RTMP_LogHexString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BP_OFFSET</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BP_GRAPH</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BP_LEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>BP_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>data</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>RTMP_debuglevel</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>i</name> <operator>%</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>n</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RTMP_Log</name><argument_list>( <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">0x0ffffU</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <name>off</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>BP_OFFSET</name> <operator>+</operator> <name>n</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <operator>(</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>off</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">0x0f</literal> <operator>&amp;</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>BP_GRAPH</name> <operator>+</operator> <name>n</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>isprint</name><argument_list>( <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>BP_GRAPH</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>BP_GRAPH</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>( <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RTMP_LogPrintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_PRINT_LEN</name></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>MAX_PRINT_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>RTMP_debuglevel</name><operator>==</operator><name>RTMP_LOGCRIT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>fmsg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fmsg</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>neednl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>neednl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_PRINT_LEN</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAX_PRINT_LEN</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fmsg</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RTMP_LogStatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_PRINT_LEN</name></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>MAX_PRINT_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>RTMP_debuglevel</name><operator>==</operator><name>RTMP_LOGCRIT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>fmsg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fmsg</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fmsg</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>neednl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
