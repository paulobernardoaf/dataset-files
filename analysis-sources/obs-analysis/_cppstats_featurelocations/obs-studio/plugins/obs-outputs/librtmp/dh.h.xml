<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-outputs\librtmp\dh.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/dhm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/bignum.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>mbedtls_mpi</name><modifier>*</modifier></type> <name>MP_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_new</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>m = malloc(sizeof(mbedtls_mpi)); mbedtls_mpi_init(m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_lset(mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_cmp_mpi(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_copy(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_sub_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_sub_int(mpi, mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp_1</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_cmp_int(mpi, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_modexp</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_exp_mod(r, y, q, p, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_free</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_free(mpi); free(mpi)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_gethex</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>hex</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MP_new(u); res = mbedtls_mpi_read_string(u, 16, hex) == 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_bytes</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_size(u)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_setbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_write_binary(u,buf,len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_getbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MP_new(u); mbedtls_mpi_read_binary(u,buf,len)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MDH</name>
<block>{
<decl_stmt><decl><type><name>MP_t</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>pub_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>priv_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbedtls_dhm_context</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>MDH</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>calloc(1,sizeof(MDH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_free</name><parameter_list>(<parameter><type><name>vp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{MDH *_dh = vp; mbedtls_dhm_free(&amp;_dh-&gt;ctx); MP_free(_dh-&gt;p); MP_free(_dh-&gt;g); MP_free(_dh-&gt;pub_key); MP_free(_dh-&gt;priv_key); free(_dh);}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MDH_generate_key</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>P</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>G</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mbedtls_dhm_make_public</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mbedtls_ctr_drbg_random</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>GX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MDH_compute_key</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>pub</name></decl></parameter>, <parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>GY</name></name></expr></argument>, <argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mbedtls_dhm_calc_secret</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/dhm.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>mpi</name> <modifier>*</modifier></type> <name>MP_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_new</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>m = malloc(sizeof(mpi)); mpi_init(m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_lset(mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_cmp_mpi(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_copy(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_sub_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_sub_int(mpi, mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp_1</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_cmp_int(mpi, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_modexp</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_exp_mod(r, y, q, p, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_free</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_free(mpi); free(mpi)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_gethex</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>hex</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MP_new(u); res = mpi_read_string(u, 16, hex) == 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_bytes</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_size(u)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_setbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpi_write_binary(u,buf,len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_getbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MP_new(u); mpi_read_binary(u,buf,len)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MDH</name>
<block>{
<decl_stmt><decl><type><name>MP_t</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>pub_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>priv_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dhm_context</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>MDH</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>calloc(1,sizeof(MDH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_free</name><parameter_list>(<parameter><type><name>vp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{MDH *_dh = vp; dhm_free(&amp;_dh-&gt;ctx); MP_free(_dh-&gt;p); MP_free(_dh-&gt;g); MP_free(_dh-&gt;pub_key); MP_free(_dh-&gt;priv_key); free(_dh);}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MDH_generate_key</name><parameter_list>(<parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>P</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>G</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dhm_make_public</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>havege_random</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>hs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>GX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MDH_compute_key</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>pub</name></decl></parameter>, <parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>GY</name></name></expr></argument>, <argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dhm_calc_secret</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dh</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/bignum.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>mpz_ptr</name></type> <name>MP_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_new</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>m = malloc(sizeof(*m)); mpz_init2(m, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_set_ui(mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_cmp(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_set(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_sub_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_sub_ui(mpi, mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp_1</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_cmp_ui(mpi, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_modexp</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_powm(r, y, q, p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_free</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_clear(mpi); free(mpi)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_gethex</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>hex</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u = malloc(sizeof(*u)); mpz_init2(u, 1); res = (mpz_set_str(u, hex, 16) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_bytes</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mpz_sizeinbase(u, 2) + 7) / 8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_setbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nettle_mpz_get_str_256(len,buf,u)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_getbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u = malloc(sizeof(*u)); mpz_init2(u, 1); nettle_mpz_set_str_256_u(u,len,buf)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MDH</name>
<block>{
<decl_stmt><decl><type><name>MP_t</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>pub_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>priv_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>MDH</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>calloc(1,sizeof(MDH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_free</name><parameter_list>(<parameter><type><name>dh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {MP_free(((MDH*)(dh))-&gt;p); MP_free(((MDH*)(dh))-&gt;g); MP_free(((MDH*)(dh))-&gt;pub_key); MP_free(((MDH*)(dh))-&gt;priv_key); free(dh);} while(0)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>MP_t</name></type> <name>gnutls_calc_dh_secret</name><parameter_list>(<parameter><decl><type><name>MP_t</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>MP_t</name></type> <name>gnutls_calc_dh_key</name><parameter_list>(<parameter><decl><type><name>MP_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_generate_key</name><parameter_list>(<parameter><type><name>dh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dh-&gt;pub_key = gnutls_calc_dh_secret(&amp;dh-&gt;priv_key, dh-&gt;g, dh-&gt;p))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MDH_compute_key</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>pub</name></decl></parameter>, <parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP_t</name></type> <name>sec</name> <init>= <expr><call><name>gnutls_calc_dh_key</name><argument_list>(<argument><expr><name>pub</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP_setbin</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/dh.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>BIGNUM</name> <modifier>*</modifier></type> <name>MP_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_new</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>m = BN_new()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_set_word(mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_cmp(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_set</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_copy(u, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_sub_w</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_sub_word(mpi, w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_cmp_1</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_cmp(mpi, BN_value_one())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_modexp</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {BN_CTX *ctx = BN_CTX_new(); BN_mod_exp(r, y, q, p, ctx); BN_CTX_free(ctx);} while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_free</name><parameter_list>(<parameter><type><name>mpi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_free(mpi)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_gethex</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>hex</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>res = BN_hex2bn(&amp;u, hex)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_bytes</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_num_bytes(u)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_setbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_bn2bin(u,buf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_getbin</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u = BN_bin2bn(buf,len,0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH</name></cpp:macro> <cpp:value>DH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>DH_new()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_free</name><parameter_list>(<parameter><type><name>dh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DH_free(dh)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_generate_key</name><parameter_list>(<parameter><type><name>dh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DH_generate_key(dh)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDH_compute_key</name><parameter_list>(<parameter><type><name>secret</name></type></parameter>, <parameter><type><name>seclen</name></type></parameter>, <parameter><type><name>pub</name></type></parameter>, <parameter><type><name>dh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DH_compute_key(secret, pub, dh)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dhgroups.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>isValidPublicKey</name><parameter_list>(<parameter><decl><type><name>MP_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>MP_t</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP_t</name></type> <name>bn</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP_new</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>MP_set_w</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MP_cmp</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"DH public key must be at least 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>MP_set</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_sub_w</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MP_cmp</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"DH public key must be at most p-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>MP_modexp</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MP_cmp_1</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"DH public key does not fulfill y^q mod p = 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MDH</name> <modifier>*</modifier></type>
<name>DHInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nKeyBits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name> <init>= <expr><call><name>MDH_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP_gethex</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>P1024</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition>
<block>{<block_content>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP_set_w</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>nKeyBits</name></expr>;</expr_stmt>
<return>return <expr><name>dh</name></expr>;</return>

<label><name>failed</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MDH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>DHGenerateKey</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP_t</name></type> <name>q1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MDH_generate_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP_gethex</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>Q1024</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isValidPublicKey</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name> <operator>=</operator> <name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>DHGetPublicKey</name><parameter_list>(<parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pubkey</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nPubkeyLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name> <operator>||</operator> <operator>!</operator><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>MP_bytes</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>nPubkeyLen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nPubkeyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_setbin</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><name>pubkey</name> <operator>+</operator> <operator>(</operator><name>nPubkeyLen</name> <operator>-</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
static int
DHGetPrivateKey(MDH *dh, uint8_t *privkey, size_t nPrivkeyLen)
{
if (!dh || !dh-&gt;priv_key)
return 0;

int len = MP_bytes(dh-&gt;priv_key);
if (len &lt;= 0 || len &gt; (int) nPrivkeyLen)
return 0;

memset(privkey, 0, nPrivkeyLen);
MP_setbin(dh-&gt;priv_key, privkey + (nPrivkeyLen - len), len);
return 1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>DHComputeSharedSecretKey</name><parameter_list>(<parameter><decl><type><name>MDH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pubkey</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nPubkeyLen</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP_t</name></type> <name>q1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>pubkeyBn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name> <operator>||</operator> <operator>!</operator><name>secret</name> <operator>||</operator> <name>nPubkeyLen</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP_getbin</name><argument_list>(<argument><expr><name>pubkeyBn</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>nPubkeyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pubkeyBn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP_gethex</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>Q1024</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isValidPublicKey</name><argument_list>(<argument><expr><name>pubkeyBn</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>MDH_compute_key</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>nPubkeyLen</name></expr></argument>, <argument><expr><name>pubkeyBn</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP_free</name><argument_list>(<argument><expr><name>pubkeyBn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
