<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-outputs\librtmp\cencode.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cencode.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>CHARS_PER_LINE</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>base64_init_encodestate</name><parameter_list>(<parameter><decl><type><name>base64_encodestate</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step_A</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>stepcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>base64_encode_value</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>value_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>encoding</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value_in</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'='</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>encoding</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>value_in</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>base64_encode_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>plaintext_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length_in</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>code_out</name></decl></parameter>, <parameter><decl><type><name>base64_encodestate</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>plainchar</name> <init>= <expr><name>plaintext_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>plaintextend</name> <init>= <expr><name>plaintext_in</name> <operator>+</operator> <name>length_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>codechar</name> <init>= <expr><name>code_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>fragment</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>state_in</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>state_in</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>step_A</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>plainchar</name> <operator>==</operator> <name>plaintextend</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step_A</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>codechar</name> <operator>-</operator> <name>code_out</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>*</operator><name>plainchar</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>fragment</name> <operator>&amp;</operator> <literal type="number">0x0fc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <call><name>base64_encode_value</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>fragment</name> <operator>&amp;</operator> <literal type="number">0x003</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<case>case <expr><name>step_B</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>plainchar</name> <operator>==</operator> <name>plaintextend</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step_B</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>codechar</name> <operator>-</operator> <name>code_out</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>*</operator><name>plainchar</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>fragment</name> <operator>&amp;</operator> <literal type="number">0x0f0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <call><name>base64_encode_value</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>fragment</name> <operator>&amp;</operator> <literal type="number">0x00f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>step_C</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>plainchar</name> <operator>==</operator> <name>plaintextend</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state_in</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step_C</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>codechar</name> <operator>-</operator> <name>code_out</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>*</operator><name>plainchar</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>fragment</name> <operator>&amp;</operator> <literal type="number">0x0c0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <call><name>base64_encode_value</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>fragment</name> <operator>&amp;</operator> <literal type="number">0x03f</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <call><name>base64_encode_value</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>state_in</name><operator>-&gt;</operator><name>stepcount</name></name><operator>)</operator></expr>;</expr_stmt>





</block_content>}</block></while>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>codechar</name> <operator>-</operator> <name>code_out</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>base64_encode_blockend</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>code_out</name></decl></parameter>, <parameter><decl><type><name>base64_encodestate</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>codechar</name> <init>= <expr><name>code_out</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>state_in</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>step_B</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <call><name>base64_encode_value</name><argument_list>(<argument><expr><name><name>state_in</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>step_C</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <call><name>base64_encode_value</name><argument_list>(<argument><expr><name><name>state_in</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>step_A</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>codechar</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>codechar</name> <operator>-</operator> <name>code_out</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
