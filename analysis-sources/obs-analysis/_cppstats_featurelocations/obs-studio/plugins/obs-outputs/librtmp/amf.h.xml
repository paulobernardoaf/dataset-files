<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-outputs\librtmp\amf.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AMF_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__AMF_H__</name></cpp:macro></cpp:define>

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>AMF_NUMBER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>AMF_BOOLEAN</name></decl>, <decl><name>AMF_STRING</name></decl>, <decl><name>AMF_OBJECT</name></decl>,
<decl><name>AMF_MOVIECLIP</name></decl>, 
<decl><name>AMF_NULL</name></decl>, <decl><name>AMF_UNDEFINED</name></decl>, <decl><name>AMF_REFERENCE</name></decl>, <decl><name>AMF_ECMA_ARRAY</name></decl>, <decl><name>AMF_OBJECT_END</name></decl>,
<decl><name>AMF_STRICT_ARRAY</name></decl>, <decl><name>AMF_DATE</name></decl>, <decl><name>AMF_LONG_STRING</name></decl>, <decl><name>AMF_UNSUPPORTED</name></decl>,
<decl><name>AMF_RECORDSET</name></decl>, 
<decl><name>AMF_XML_DOC</name></decl>, <decl><name>AMF_TYPED_OBJECT</name></decl>,
<decl><name>AMF_AVMPLUS</name></decl>, 
<decl><name>AMF_INVALID</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>
}</block></enum></type>
<name>AMFDataType</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>AMF3_UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>AMF3_NULL</name></decl>, <decl><name>AMF3_FALSE</name></decl>, <decl><name>AMF3_TRUE</name></decl>,
<decl><name>AMF3_INTEGER</name></decl>, <decl><name>AMF3_DOUBLE</name></decl>, <decl><name>AMF3_STRING</name></decl>, <decl><name>AMF3_XML_DOC</name></decl>, <decl><name>AMF3_DATE</name></decl>,
<decl><name>AMF3_ARRAY</name></decl>, <decl><name>AMF3_OBJECT</name></decl>, <decl><name>AMF3_XML</name></decl>, <decl><name>AMF3_BYTE_ARRAY</name></decl>
}</block></enum></type> <name>AMF3DataType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVal</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>av_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>av_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVal</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{str,sizeof(str)-1}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVMATCH</name><parameter_list>(<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a1)-&gt;av_len == (a2)-&gt;av_len &amp;&amp; !memcmp((a1)-&gt;av_val,(a2)-&gt;av_val,(a1)-&gt;av_len))</cpp:value></cpp:define>

<struct_decl>struct <name>AMFObjectProperty</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>AMFObject</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>o_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AMFObjectProperty</name></name> <modifier>*</modifier></type><name>o_props</name></decl>;</decl_stmt>
}</block></struct></type> <name>AMFObject</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AMFObjectProperty</name>
<block>{
<decl_stmt><decl><type><name>AVal</name></type> <name>p_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AMFDataType</name></type> <name>p_type</name></decl>;</decl_stmt>
<union>union
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>p_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVal</name></type> <name>p_aval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AMFObject</name></type> <name>p_object</name></decl>;</decl_stmt>
}</block> <decl><name>p_vu</name></decl>;</union>
<decl_stmt><decl><type><name>int16_t</name></type> <name>p_UTCoffset</name></decl>;</decl_stmt>
}</block></struct></type> <name>AMFObjectProperty</name>;</typedef>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeNumber</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeInt16</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>nVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeInt24</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeInt32</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeBoolean</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bVal</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeNamedString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeNamedNumber</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeNamedBoolean</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bVal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>AMF_DecodeInt16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>AMF_DecodeInt24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>AMF_DecodeInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMF_DecodeString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMF_DecodeLongString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMF_DecodeBoolean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>AMF_DecodeNumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_Encode</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeEcmaArray</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMF_EncodeArray</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>AMF_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMF_DecodeArray</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nArrayLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMF3_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMF_Dump</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMF_Reset</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AMF_AddProp</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMF_CountProp</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>AMF_GetProp</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AMFDataType</name></type> <name>AMFProp_GetType</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_SetNumber</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_SetBoolean</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bflag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_SetString</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_SetObject</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AMFProp_GetName</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_SetName</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>AMFProp_GetNumber</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMFProp_GetBoolean</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_GetString</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_GetObject</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>AMFProp_IsValid</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>AMFProp_Encode</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMF3Prop_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AMFProp_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AMFProp_Dump</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AMFProp_Reset</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>AMF3ClassDef</name>
<block>{
<decl_stmt><decl><type><name>AVal</name></type> <name>cd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>cd_externalizable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>cd_dynamic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cd_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVal</name> <modifier>*</modifier></type><name>cd_props</name></decl>;</decl_stmt>
}</block></struct></type> <name>AMF3ClassDef</name>;</typedef>

<function_decl><type><name>void</name></type> <name>AMF3CD_AddProp</name><parameter_list>(<parameter><decl><type><name>AMF3ClassDef</name> <modifier>*</modifier></type> <name>cd</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>AVal</name> <modifier>*</modifier></type><name>AMF3CD_GetProp</name><parameter_list>(<parameter><decl><type><name>AMF3ClassDef</name> <modifier>*</modifier></type> <name>cd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
