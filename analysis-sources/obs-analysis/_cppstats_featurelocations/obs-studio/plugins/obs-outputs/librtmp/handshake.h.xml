<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-outputs\librtmp\handshake.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/md.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/arc4.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_DIGEST_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>mbedtls_md_context_t</name> <modifier>*</modifier></type><name>HMAC_CTX</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_setup</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctx = malloc(sizeof(mbedtls_md_context_t)); mbedtls_md_init(ctx); mbedtls_md_setup(ctx, mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), 1); mbedtls_md_hmac_starts(ctx, (const unsigned char *)key, len)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_crunch</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md_hmac_update(ctx, buf, len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_finish</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>dig</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md_hmac_finish(ctx, dig)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_close</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md_free(ctx); free(ctx); ctx = NULL</cpp:value></cpp:define>

<typedef>typedef <type><name>mbedtls_arc4_context</name><modifier>*</modifier></type> <name>RC4_handle</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_alloc</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*h = malloc(sizeof(mbedtls_arc4_context)); mbedtls_arc4_init(*h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_setkey</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_arc4_setup(h,k,l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_arc4_crypt(h,l,(unsigned char *)d,(unsigned char *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt2</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_arc4_crypt(h,l,(unsigned char *)s,(unsigned char *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_free</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_arc4_free(h); free(h); h = NULL</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/sha2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/arc4.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_DIGEST_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_CTX</name></cpp:macro> <cpp:value>sha2_context</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_setup</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sha2_hmac_starts(&amp;ctx, (unsigned char *)key, len, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_crunch</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sha2_hmac_update(&amp;ctx, buf, len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_finish</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>dig</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sha2_hmac_finish(&amp;ctx, dig)</cpp:value></cpp:define>

<typedef>typedef <type><name>arc4_context</name> <modifier>*</modifier></type> <name>RC4_handle</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_alloc</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*h = malloc(sizeof(arc4_context))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_setkey</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arc4_setup(h,k,l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arc4_crypt(h,l,(unsigned char *)d,(unsigned char *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt2</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arc4_crypt(h,l,(unsigned char *)s,(unsigned char *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_free</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(h)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/hmac.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/arcfour.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_DIGEST_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HMAC_CTX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_CTX</name></cpp:macro> <cpp:value>struct hmac_sha256_ctx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_setup</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hmac_sha256_set_key(&amp;ctx, len, key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_crunch</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hmac_sha256_update(&amp;ctx, len, buf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_finish</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>dig</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hmac_sha256_digest(&amp;ctx, SHA256_DIGEST_LENGTH, dig)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_close</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>arcfour_ctx</name></name><modifier>*</modifier></type> <name>RC4_handle</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_alloc</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*h = malloc(sizeof(struct arcfour_ctx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_setkey</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arcfour_set_key(h, l, k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arcfour_crypt(h,l,(uint8_t *)d,(uint8_t *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt2</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arcfour_crypt(h,l,(uint8_t *)d,(uint8_t *)s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_free</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(h)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/hmac.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rc4.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x0090800</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Your OpenSSL is too old, need 0.9.8 or newer with SHA256</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_setup</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HMAC_CTX_init(&amp;ctx); HMAC_Init_ex(&amp;ctx, key, len, EVP_sha256(), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_crunch</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HMAC_Update(&amp;ctx, buf, len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_finish</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>dig</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HMAC_Final(&amp;ctx, dig, &amp;len); HMAC_CTX_cleanup(&amp;ctx)</cpp:value></cpp:define>

<typedef>typedef <type><name>RC4_KEY</name> <modifier>*</modifier></type> <name>RC4_handle</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_alloc</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*h = malloc(sizeof(RC4_KEY))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_setkey</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RC4_set_key(h,l,k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RC4(h,l,(uint8_t *)d,(uint8_t *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_encrypt2</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RC4(h,l,(uint8_t *)s,(uint8_t *)d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC4_free</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(h)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FP10</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dh.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>GenuineFMSKey</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
<expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr>,
<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, 

<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd1</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xab</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
<expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xae</literal></expr>
}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>GenuineFPKey</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x6C</literal></expr>,
<expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, 
<expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xEE</literal></expr>,
<expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x9E</literal></expr>,
<expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xEC</literal></expr>,
<expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xEB</literal></expr>,
<expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xAE</literal></expr>
}</block></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitRC4Encryption</name>
<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>secretKey</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>pubKeyIn</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>pubKeyOut</name></decl></parameter>, <parameter><decl><type><name>RC4_handle</name> <modifier>*</modifier></type><name>rc4keyIn</name></decl></parameter>, <parameter><decl><type><name>RC4_handle</name> <modifier>*</modifier></type><name>rc4keyOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>digest</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>digestLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>HMAC_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RC4_alloc</name><argument_list>(<argument><expr><name>rc4keyIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RC4_alloc</name><argument_list>(<argument><expr><name>rc4keyOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HMAC_setup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMAC_crunch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pubKeyIn</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HMAC_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>HMAC_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digestLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"RC4 Out Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RC4_setkey</name><argument_list>(<argument><expr><operator>*</operator><name>rc4keyOut</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HMAC_setup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMAC_crunch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pubKeyOut</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HMAC_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>HMAC_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digestLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"RC4 In Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RC4_setkey</name><argument_list>(<argument><expr><operator>*</operator><name>rc4keyIn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name></type> (<name>getoff</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>GetDHOffset2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>handshake</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>handshake</name> <operator>+</operator> <literal type="number">768</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>RTMP_SIG_SIZE</name> <operator>&lt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">632</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>+</operator> <literal type="number">128</literal> <operator>&gt;</operator> <literal type="number">767</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s: Couldn't calculate correct DH offset (got %d), exiting!"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>GetDigestOffset2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>handshake</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>handshake</name> <operator>+</operator> <literal type="number">772</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">728</literal><operator>)</operator> <operator>+</operator> <literal type="number">776</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>+</operator> <literal type="number">32</literal> <operator>&gt;</operator> <literal type="number">1535</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s: Couldn't calculate correct digest offset (got %d), exiting"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>GetDHOffset1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>handshake</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>handshake</name> <operator>+</operator> <literal type="number">1532</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>RTMP_SIG_SIZE</name> <operator>&lt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">632</literal><operator>)</operator> <operator>+</operator> <literal type="number">772</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>+</operator> <literal type="number">128</literal> <operator>&gt;</operator> <literal type="number">1531</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: Couldn't calculate DH offset (got %d), exiting!"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>GetDigestOffset1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>handshake</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>handshake</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>&lt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">728</literal><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>+</operator> <literal type="number">32</literal> <operator>&gt;</operator> <literal type="number">771</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s: Couldn't calculate digest offset (got %d), exiting!"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>getoff</name> <modifier>*</modifier></type><name><name>digoff</name><index>[]</index></name> <init>= <expr><block>{<expr><name>GetDigestOffset1</name></expr>, <expr><name>GetDigestOffset2</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>getoff</name> <modifier>*</modifier></type><name><name>dhoff</name><index>[]</index></name> <init>= <expr><block>{<expr><name>GetDHOffset1</name></expr>, <expr><name>GetDHOffset2</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>HMACsha256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>messageLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>digestLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMAC_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HMAC_setup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMAC_crunch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>messageLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>digestLen</name> <operator>=</operator> <name>SHA256_DIGEST_LENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMAC_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>HMAC_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digestLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>digestLen</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CalculateDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>digestPos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>handshakeMessage</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>messageLen</name> <init>= <expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>message</name><index>[<expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>handshakeMessage</name></expr></argument>, <argument><expr><name>digestPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>message</name> <operator>+</operator> <name>digestPos</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>handshakeMessage</name><index>[<expr><name>digestPos</name> <operator>+</operator> <name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></expr></argument>,
<argument><expr><name>messageLen</name> <operator>-</operator> <name>digestPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HMACsha256</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>messageLen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>VerifyDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>digestPos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>handshakeMessage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>calcDigest</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CalculateDigest</name><argument_list>(<argument><expr><name>digestPos</name></expr></argument>, <argument><expr><name>handshakeMessage</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>calcDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handshakeMessage</name><index>[<expr><name>digestPos</name></expr>]</index></name></expr></argument>, <argument><expr><name>calcDigest</name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>rtmpe8_keys</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0xbff034b2</literal></expr>, <expr><literal type="number">0x11d9081f</literal></expr>, <expr><literal type="number">0xccdfb795</literal></expr>, <expr><literal type="number">0x748de732</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x086a5eb6</literal></expr>, <expr><literal type="number">0x1743090e</literal></expr>, <expr><literal type="number">0x6ef05ab8</literal></expr>, <expr><literal type="number">0xfe5a39e2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7b10956f</literal></expr>, <expr><literal type="number">0x76ce0521</literal></expr>, <expr><literal type="number">0x2388a73a</literal></expr>, <expr><literal type="number">0x440149a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa943f317</literal></expr>, <expr><literal type="number">0xebf11bb2</literal></expr>, <expr><literal type="number">0xa691a5ee</literal></expr>, <expr><literal type="number">0x17f36339</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7a30e00a</literal></expr>, <expr><literal type="number">0xb529e22c</literal></expr>, <expr><literal type="number">0xa087aea5</literal></expr>, <expr><literal type="number">0xc0cb79ac</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xbdce0c23</literal></expr>, <expr><literal type="number">0x2febdeff</literal></expr>, <expr><literal type="number">0x1cfaae16</literal></expr>, <expr><literal type="number">0x1123239d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x55dd3f7b</literal></expr>, <expr><literal type="number">0x77e7e62e</literal></expr>, <expr><literal type="number">0x9bb8c499</literal></expr>, <expr><literal type="number">0xc9481ee4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x407bb6b4</literal></expr>, <expr><literal type="number">0x71e89136</literal></expr>, <expr><literal type="number">0xa7aebf55</literal></expr>, <expr><literal type="number">0xca33b839</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfcf6bdc3</literal></expr>, <expr><literal type="number">0xb63c3697</literal></expr>, <expr><literal type="number">0x7ce4f825</literal></expr>, <expr><literal type="number">0x04d959b2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x28e091fd</literal></expr>, <expr><literal type="number">0x41954c4c</literal></expr>, <expr><literal type="number">0x7fb7db00</literal></expr>, <expr><literal type="number">0xe3a066f8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x57845b76</literal></expr>, <expr><literal type="number">0x4f251b03</literal></expr>, <expr><literal type="number">0x46d45bcd</literal></expr>, <expr><literal type="number">0xa2c30d29</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0acceef8</literal></expr>, <expr><literal type="number">0xda55b546</literal></expr>, <expr><literal type="number">0x03473452</literal></expr>, <expr><literal type="number">0x5863713b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xb82075dc</literal></expr>, <expr><literal type="number">0xa75f1fee</literal></expr>, <expr><literal type="number">0xd84268e8</literal></expr>, <expr><literal type="number">0xa72a44cc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x07cf6e9e</literal></expr>, <expr><literal type="number">0xa16d7b25</literal></expr>, <expr><literal type="number">0x9fa7ae6c</literal></expr>, <expr><literal type="number">0xd92f5629</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfeb1eae4</literal></expr>, <expr><literal type="number">0x8c8c3ce1</literal></expr>, <expr><literal type="number">0x4e0064a7</literal></expr>, <expr><literal type="number">0x6a387c2a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x893a9427</literal></expr>, <expr><literal type="number">0xcc3013a2</literal></expr>, <expr><literal type="number">0xf106385b</literal></expr>, <expr><literal type="number">0xa829f927</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmpe8_sig</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_rounds</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name><init>=<expr><literal type="number">0x9E3779B9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rtmpe8_keys</name><index>[<expr><name>keyid</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>k</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>k</name><index>[<expr><operator>(</operator><name>sum</name><operator>&gt;&gt;</operator><literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_ROUNDS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>bf_key</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>p</name><index>[<expr><name>BF_ROUNDS</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>bf_key</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>bf_sinit</name><index>[]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{


<expr><block>{
<expr><literal type="number">0xd1310ba6</literal></expr>, <expr><literal type="number">0x98dfb5ac</literal></expr>, <expr><literal type="number">0x2ffd72db</literal></expr>, <expr><literal type="number">0xd01adfb7</literal></expr>, <expr><literal type="number">0xb8e1afed</literal></expr>, <expr><literal type="number">0x6a267e96</literal></expr>,
<expr><literal type="number">0xba7c9045</literal></expr>, <expr><literal type="number">0xf12c7f99</literal></expr>, <expr><literal type="number">0x24a19947</literal></expr>, <expr><literal type="number">0xb3916cf7</literal></expr>, <expr><literal type="number">0x0801f2e2</literal></expr>, <expr><literal type="number">0x858efc16</literal></expr>,
<expr><literal type="number">0x636920d8</literal></expr>, <expr><literal type="number">0x71574e69</literal></expr>, <expr><literal type="number">0xa458fea3</literal></expr>, <expr><literal type="number">0xf4933d7e</literal></expr>, <expr><literal type="number">0x0d95748f</literal></expr>, <expr><literal type="number">0x728eb658</literal></expr>,
<expr><literal type="number">0x718bcd58</literal></expr>, <expr><literal type="number">0x82154aee</literal></expr>, <expr><literal type="number">0x7b54a41d</literal></expr>, <expr><literal type="number">0xc25a59b5</literal></expr>, <expr><literal type="number">0x9c30d539</literal></expr>, <expr><literal type="number">0x2af26013</literal></expr>,
<expr><literal type="number">0xc5d1b023</literal></expr>, <expr><literal type="number">0x286085f0</literal></expr>, <expr><literal type="number">0xca417918</literal></expr>, <expr><literal type="number">0xb8db38ef</literal></expr>, <expr><literal type="number">0x8e79dcb0</literal></expr>, <expr><literal type="number">0x603a180e</literal></expr>,
<expr><literal type="number">0x6c9e0e8b</literal></expr>, <expr><literal type="number">0xb01e8a3e</literal></expr>, <expr><literal type="number">0xd71577c1</literal></expr>, <expr><literal type="number">0xbd314b27</literal></expr>, <expr><literal type="number">0x78af2fda</literal></expr>, <expr><literal type="number">0x55605c60</literal></expr>,
<expr><literal type="number">0xe65525f3</literal></expr>, <expr><literal type="number">0xaa55ab94</literal></expr>, <expr><literal type="number">0x57489862</literal></expr>, <expr><literal type="number">0x63e81440</literal></expr>, <expr><literal type="number">0x55ca396a</literal></expr>, <expr><literal type="number">0x2aab10b6</literal></expr>,
<expr><literal type="number">0xb4cc5c34</literal></expr>, <expr><literal type="number">0x1141e8ce</literal></expr>, <expr><literal type="number">0xa15486af</literal></expr>, <expr><literal type="number">0x7c72e993</literal></expr>, <expr><literal type="number">0xb3ee1411</literal></expr>, <expr><literal type="number">0x636fbc2a</literal></expr>,
<expr><literal type="number">0x2ba9c55d</literal></expr>, <expr><literal type="number">0x741831f6</literal></expr>, <expr><literal type="number">0xce5c3e16</literal></expr>, <expr><literal type="number">0x9b87931e</literal></expr>, <expr><literal type="number">0xafd6ba33</literal></expr>, <expr><literal type="number">0x6c24cf5c</literal></expr>,
<expr><literal type="number">0x7a325381</literal></expr>, <expr><literal type="number">0x28958677</literal></expr>, <expr><literal type="number">0x3b8f4898</literal></expr>, <expr><literal type="number">0x6b4bb9af</literal></expr>, <expr><literal type="number">0xc4bfe81b</literal></expr>, <expr><literal type="number">0x66282193</literal></expr>,
<expr><literal type="number">0x61d809cc</literal></expr>, <expr><literal type="number">0xfb21a991</literal></expr>, <expr><literal type="number">0x487cac60</literal></expr>, <expr><literal type="number">0x5dec8032</literal></expr>, <expr><literal type="number">0xef845d5d</literal></expr>, <expr><literal type="number">0xe98575b1</literal></expr>,
<expr><literal type="number">0xdc262302</literal></expr>, <expr><literal type="number">0xeb651b88</literal></expr>, <expr><literal type="number">0x23893e81</literal></expr>, <expr><literal type="number">0xd396acc5</literal></expr>, <expr><literal type="number">0x0f6d6ff3</literal></expr>, <expr><literal type="number">0x83f44239</literal></expr>,
<expr><literal type="number">0x2e0b4482</literal></expr>, <expr><literal type="number">0xa4842004</literal></expr>, <expr><literal type="number">0x69c8f04a</literal></expr>, <expr><literal type="number">0x9e1f9b5e</literal></expr>, <expr><literal type="number">0x21c66842</literal></expr>, <expr><literal type="number">0xf6e96c9a</literal></expr>,
<expr><literal type="number">0x670c9c61</literal></expr>, <expr><literal type="number">0xabd388f0</literal></expr>, <expr><literal type="number">0x6a51a0d2</literal></expr>, <expr><literal type="number">0xd8542f68</literal></expr>, <expr><literal type="number">0x960fa728</literal></expr>, <expr><literal type="number">0xab5133a3</literal></expr>,
<expr><literal type="number">0x6eef0b6c</literal></expr>, <expr><literal type="number">0x137a3be4</literal></expr>, <expr><literal type="number">0xba3bf050</literal></expr>, <expr><literal type="number">0x7efb2a98</literal></expr>, <expr><literal type="number">0xa1f1651d</literal></expr>, <expr><literal type="number">0x39af0176</literal></expr>,
<expr><literal type="number">0x66ca593e</literal></expr>, <expr><literal type="number">0x82430e88</literal></expr>, <expr><literal type="number">0x8cee8619</literal></expr>, <expr><literal type="number">0x456f9fb4</literal></expr>, <expr><literal type="number">0x7d84a5c3</literal></expr>, <expr><literal type="number">0x3b8b5ebe</literal></expr>,
<expr><literal type="number">0xe06f75d8</literal></expr>, <expr><literal type="number">0x85c12073</literal></expr>, <expr><literal type="number">0x401a449f</literal></expr>, <expr><literal type="number">0x56c16aa6</literal></expr>, <expr><literal type="number">0x4ed3aa62</literal></expr>, <expr><literal type="number">0x363f7706</literal></expr>,
<expr><literal type="number">0x1bfedf72</literal></expr>, <expr><literal type="number">0x429b023d</literal></expr>, <expr><literal type="number">0x37d0d724</literal></expr>, <expr><literal type="number">0xd00a1248</literal></expr>, <expr><literal type="number">0xdb0fead3</literal></expr>, <expr><literal type="number">0x49f1c09b</literal></expr>,
<expr><literal type="number">0x075372c9</literal></expr>, <expr><literal type="number">0x80991b7b</literal></expr>, <expr><literal type="number">0x25d479d8</literal></expr>, <expr><literal type="number">0xf6e8def7</literal></expr>, <expr><literal type="number">0xe3fe501a</literal></expr>, <expr><literal type="number">0xb6794c3b</literal></expr>,
<expr><literal type="number">0x976ce0bd</literal></expr>, <expr><literal type="number">0x04c006ba</literal></expr>, <expr><literal type="number">0xc1a94fb6</literal></expr>, <expr><literal type="number">0x409f60c4</literal></expr>, <expr><literal type="number">0x5e5c9ec2</literal></expr>, <expr><literal type="number">0x196a2463</literal></expr>,
<expr><literal type="number">0x68fb6faf</literal></expr>, <expr><literal type="number">0x3e6c53b5</literal></expr>, <expr><literal type="number">0x1339b2eb</literal></expr>, <expr><literal type="number">0x3b52ec6f</literal></expr>, <expr><literal type="number">0x6dfc511f</literal></expr>, <expr><literal type="number">0x9b30952c</literal></expr>,
<expr><literal type="number">0xcc814544</literal></expr>, <expr><literal type="number">0xaf5ebd09</literal></expr>, <expr><literal type="number">0xbee3d004</literal></expr>, <expr><literal type="number">0xde334afd</literal></expr>, <expr><literal type="number">0x660f2807</literal></expr>, <expr><literal type="number">0x192e4bb3</literal></expr>,
<expr><literal type="number">0xc0cba857</literal></expr>, <expr><literal type="number">0x45c8740f</literal></expr>, <expr><literal type="number">0xd20b5f39</literal></expr>, <expr><literal type="number">0xb9d3fbdb</literal></expr>, <expr><literal type="number">0x5579c0bd</literal></expr>, <expr><literal type="number">0x1a60320a</literal></expr>,
<expr><literal type="number">0xd6a100c6</literal></expr>, <expr><literal type="number">0x402c7279</literal></expr>, <expr><literal type="number">0x679f25fe</literal></expr>, <expr><literal type="number">0xfb1fa3cc</literal></expr>, <expr><literal type="number">0x8ea5e9f8</literal></expr>, <expr><literal type="number">0xdb3222f8</literal></expr>,
<expr><literal type="number">0x3c7516df</literal></expr>, <expr><literal type="number">0xfd616b15</literal></expr>, <expr><literal type="number">0x2f501ec8</literal></expr>, <expr><literal type="number">0xad0552ab</literal></expr>, <expr><literal type="number">0x323db5fa</literal></expr>, <expr><literal type="number">0xfd238760</literal></expr>,
<expr><literal type="number">0x53317b48</literal></expr>, <expr><literal type="number">0x3e00df82</literal></expr>, <expr><literal type="number">0x9e5c57bb</literal></expr>, <expr><literal type="number">0xca6f8ca0</literal></expr>, <expr><literal type="number">0x1a87562e</literal></expr>, <expr><literal type="number">0xdf1769db</literal></expr>,
<expr><literal type="number">0xd542a8f6</literal></expr>, <expr><literal type="number">0x287effc3</literal></expr>, <expr><literal type="number">0xac6732c6</literal></expr>, <expr><literal type="number">0x8c4f5573</literal></expr>, <expr><literal type="number">0x695b27b0</literal></expr>, <expr><literal type="number">0xbbca58c8</literal></expr>,
<expr><literal type="number">0xe1ffa35d</literal></expr>, <expr><literal type="number">0xb8f011a0</literal></expr>, <expr><literal type="number">0x10fa3d98</literal></expr>, <expr><literal type="number">0xfd2183b8</literal></expr>, <expr><literal type="number">0x4afcb56c</literal></expr>, <expr><literal type="number">0x2dd1d35b</literal></expr>,
<expr><literal type="number">0x9a53e479</literal></expr>, <expr><literal type="number">0xb6f84565</literal></expr>, <expr><literal type="number">0xd28e49bc</literal></expr>, <expr><literal type="number">0x4bfb9790</literal></expr>, <expr><literal type="number">0xe1ddf2da</literal></expr>, <expr><literal type="number">0xa4cb7e33</literal></expr>,
<expr><literal type="number">0x62fb1341</literal></expr>, <expr><literal type="number">0xcee4c6e8</literal></expr>, <expr><literal type="number">0xef20cada</literal></expr>, <expr><literal type="number">0x36774c01</literal></expr>, <expr><literal type="number">0xd07e9efe</literal></expr>, <expr><literal type="number">0x2bf11fb4</literal></expr>,
<expr><literal type="number">0x95dbda4d</literal></expr>, <expr><literal type="number">0xae909198</literal></expr>, <expr><literal type="number">0xeaad8e71</literal></expr>, <expr><literal type="number">0x6b93d5a0</literal></expr>, <expr><literal type="number">0xd08ed1d0</literal></expr>, <expr><literal type="number">0xafc725e0</literal></expr>,
<expr><literal type="number">0x8e3c5b2f</literal></expr>, <expr><literal type="number">0x8e7594b7</literal></expr>, <expr><literal type="number">0x8ff6e2fb</literal></expr>, <expr><literal type="number">0xf2122b64</literal></expr>, <expr><literal type="number">0x8888b812</literal></expr>, <expr><literal type="number">0x900df01c</literal></expr>,
<expr><literal type="number">0x4fad5ea0</literal></expr>, <expr><literal type="number">0x688fc31c</literal></expr>, <expr><literal type="number">0xd1cff191</literal></expr>, <expr><literal type="number">0xb3a8c1ad</literal></expr>, <expr><literal type="number">0x2f2f2218</literal></expr>, <expr><literal type="number">0xbe0e1777</literal></expr>,
<expr><literal type="number">0xea752dfe</literal></expr>, <expr><literal type="number">0x8b021fa1</literal></expr>, <expr><literal type="number">0xe5a0cc0f</literal></expr>, <expr><literal type="number">0xb56f74e8</literal></expr>, <expr><literal type="number">0x18acf3d6</literal></expr>, <expr><literal type="number">0xce89e299</literal></expr>,
<expr><literal type="number">0xb4a84fe0</literal></expr>, <expr><literal type="number">0xfd13e0b7</literal></expr>, <expr><literal type="number">0x7cc43b81</literal></expr>, <expr><literal type="number">0xd2ada8d9</literal></expr>, <expr><literal type="number">0x165fa266</literal></expr>, <expr><literal type="number">0x80957705</literal></expr>,
<expr><literal type="number">0x93cc7314</literal></expr>, <expr><literal type="number">0x211a1477</literal></expr>, <expr><literal type="number">0xe6ad2065</literal></expr>, <expr><literal type="number">0x77b5fa86</literal></expr>, <expr><literal type="number">0xc75442f5</literal></expr>, <expr><literal type="number">0xfb9d35cf</literal></expr>,
<expr><literal type="number">0xebcdaf0c</literal></expr>, <expr><literal type="number">0x7b3e89a0</literal></expr>, <expr><literal type="number">0xd6411bd3</literal></expr>, <expr><literal type="number">0xae1e7e49</literal></expr>, <expr><literal type="number">0x00250e2d</literal></expr>, <expr><literal type="number">0x2071b35e</literal></expr>,
<expr><literal type="number">0x226800bb</literal></expr>, <expr><literal type="number">0x57b8e0af</literal></expr>, <expr><literal type="number">0x2464369b</literal></expr>, <expr><literal type="number">0xf009b91e</literal></expr>, <expr><literal type="number">0x5563911d</literal></expr>, <expr><literal type="number">0x59dfa6aa</literal></expr>,
<expr><literal type="number">0x78c14389</literal></expr>, <expr><literal type="number">0xd95a537f</literal></expr>, <expr><literal type="number">0x207d5ba2</literal></expr>, <expr><literal type="number">0x02e5b9c5</literal></expr>, <expr><literal type="number">0x83260376</literal></expr>, <expr><literal type="number">0x6295cfa9</literal></expr>,
<expr><literal type="number">0x11c81968</literal></expr>, <expr><literal type="number">0x4e734a41</literal></expr>, <expr><literal type="number">0xb3472dca</literal></expr>, <expr><literal type="number">0x7b14a94a</literal></expr>, <expr><literal type="number">0x1b510052</literal></expr>, <expr><literal type="number">0x9a532915</literal></expr>,
<expr><literal type="number">0xd60f573f</literal></expr>, <expr><literal type="number">0xbc9bc6e4</literal></expr>, <expr><literal type="number">0x2b60a476</literal></expr>, <expr><literal type="number">0x81e67400</literal></expr>, <expr><literal type="number">0x08ba6fb5</literal></expr>, <expr><literal type="number">0x571be91f</literal></expr>,
<expr><literal type="number">0xf296ec6b</literal></expr>, <expr><literal type="number">0x2a0dd915</literal></expr>, <expr><literal type="number">0xb6636521</literal></expr>, <expr><literal type="number">0xe7b9f9b6</literal></expr>, <expr><literal type="number">0xff34052e</literal></expr>, <expr><literal type="number">0xc5855664</literal></expr>,
<expr><literal type="number">0x53b02d5d</literal></expr>, <expr><literal type="number">0xa99f8fa1</literal></expr>, <expr><literal type="number">0x08ba4799</literal></expr>, <expr><literal type="number">0x6e85076a</literal></expr>,
}</block></expr>,


<expr><block>{
<expr><literal type="number">0x4b7a70e9</literal></expr>, <expr><literal type="number">0xb5b32944</literal></expr>, <expr><literal type="number">0xdb75092e</literal></expr>, <expr><literal type="number">0xc4192623</literal></expr>, <expr><literal type="number">0xad6ea6b0</literal></expr>, <expr><literal type="number">0x49a7df7d</literal></expr>,
<expr><literal type="number">0x9cee60b8</literal></expr>, <expr><literal type="number">0x8fedb266</literal></expr>, <expr><literal type="number">0xecaa8c71</literal></expr>, <expr><literal type="number">0x699a17ff</literal></expr>, <expr><literal type="number">0x5664526c</literal></expr>, <expr><literal type="number">0xc2b19ee1</literal></expr>,
<expr><literal type="number">0x193602a5</literal></expr>, <expr><literal type="number">0x75094c29</literal></expr>, <expr><literal type="number">0xa0591340</literal></expr>, <expr><literal type="number">0xe4183a3e</literal></expr>, <expr><literal type="number">0x3f54989a</literal></expr>, <expr><literal type="number">0x5b429d65</literal></expr>,
<expr><literal type="number">0x6b8fe4d6</literal></expr>, <expr><literal type="number">0x99f73fd6</literal></expr>, <expr><literal type="number">0xa1d29c07</literal></expr>, <expr><literal type="number">0xefe830f5</literal></expr>, <expr><literal type="number">0x4d2d38e6</literal></expr>, <expr><literal type="number">0xf0255dc1</literal></expr>,
<expr><literal type="number">0x4cdd2086</literal></expr>, <expr><literal type="number">0x8470eb26</literal></expr>, <expr><literal type="number">0x6382e9c6</literal></expr>, <expr><literal type="number">0x021ecc5e</literal></expr>, <expr><literal type="number">0x09686b3f</literal></expr>, <expr><literal type="number">0x3ebaefc9</literal></expr>,
<expr><literal type="number">0x3c971814</literal></expr>, <expr><literal type="number">0x6b6a70a1</literal></expr>, <expr><literal type="number">0x687f3584</literal></expr>, <expr><literal type="number">0x52a0e286</literal></expr>, <expr><literal type="number">0xb79c5305</literal></expr>, <expr><literal type="number">0xaa500737</literal></expr>,
<expr><literal type="number">0x3e07841c</literal></expr>, <expr><literal type="number">0x7fdeae5c</literal></expr>, <expr><literal type="number">0x8e7d44ec</literal></expr>, <expr><literal type="number">0x5716f2b8</literal></expr>, <expr><literal type="number">0xb03ada37</literal></expr>, <expr><literal type="number">0xf0500c0d</literal></expr>,
<expr><literal type="number">0xf01c1f04</literal></expr>, <expr><literal type="number">0x0200b3ff</literal></expr>, <expr><literal type="number">0xae0cf51a</literal></expr>, <expr><literal type="number">0x3cb574b2</literal></expr>, <expr><literal type="number">0x25837a58</literal></expr>, <expr><literal type="number">0xdc0921bd</literal></expr>,
<expr><literal type="number">0xd19113f9</literal></expr>, <expr><literal type="number">0x7ca92ff6</literal></expr>, <expr><literal type="number">0x94324773</literal></expr>, <expr><literal type="number">0x22f54701</literal></expr>, <expr><literal type="number">0x3ae5e581</literal></expr>, <expr><literal type="number">0x37c2dadc</literal></expr>,
<expr><literal type="number">0xc8b57634</literal></expr>, <expr><literal type="number">0x9af3dda7</literal></expr>, <expr><literal type="number">0xa9446146</literal></expr>, <expr><literal type="number">0x0fd0030e</literal></expr>, <expr><literal type="number">0xecc8c73e</literal></expr>, <expr><literal type="number">0xa4751e41</literal></expr>,
<expr><literal type="number">0xe238cd99</literal></expr>, <expr><literal type="number">0x3bea0e2f</literal></expr>, <expr><literal type="number">0x3280bba1</literal></expr>, <expr><literal type="number">0x183eb331</literal></expr>, <expr><literal type="number">0x4e548b38</literal></expr>, <expr><literal type="number">0x4f6db908</literal></expr>,
<expr><literal type="number">0x6f420d03</literal></expr>, <expr><literal type="number">0xf60a04bf</literal></expr>, <expr><literal type="number">0x2cb81290</literal></expr>, <expr><literal type="number">0x24977c79</literal></expr>, <expr><literal type="number">0x5679b072</literal></expr>, <expr><literal type="number">0xbcaf89af</literal></expr>,
<expr><literal type="number">0xde9a771f</literal></expr>, <expr><literal type="number">0xd9930810</literal></expr>, <expr><literal type="number">0xb38bae12</literal></expr>, <expr><literal type="number">0xdccf3f2e</literal></expr>, <expr><literal type="number">0x5512721f</literal></expr>, <expr><literal type="number">0x2e6b7124</literal></expr>,
<expr><literal type="number">0x501adde6</literal></expr>, <expr><literal type="number">0x9f84cd87</literal></expr>, <expr><literal type="number">0x7a584718</literal></expr>, <expr><literal type="number">0x7408da17</literal></expr>, <expr><literal type="number">0xbc9f9abc</literal></expr>, <expr><literal type="number">0xe94b7d8c</literal></expr>,
<expr><literal type="number">0xec7aec3a</literal></expr>, <expr><literal type="number">0xdb851dfa</literal></expr>, <expr><literal type="number">0x63094366</literal></expr>, <expr><literal type="number">0xc464c3d2</literal></expr>, <expr><literal type="number">0xef1c1847</literal></expr>, <expr><literal type="number">0x3215d908</literal></expr>,
<expr><literal type="number">0xdd433b37</literal></expr>, <expr><literal type="number">0x24c2ba16</literal></expr>, <expr><literal type="number">0x12a14d43</literal></expr>, <expr><literal type="number">0x2a65c451</literal></expr>, <expr><literal type="number">0x50940002</literal></expr>, <expr><literal type="number">0x133ae4dd</literal></expr>,
<expr><literal type="number">0x71dff89e</literal></expr>, <expr><literal type="number">0x10314e55</literal></expr>, <expr><literal type="number">0x81ac77d6</literal></expr>, <expr><literal type="number">0x5f11199b</literal></expr>, <expr><literal type="number">0x043556f1</literal></expr>, <expr><literal type="number">0xd7a3c76b</literal></expr>,
<expr><literal type="number">0x3c11183b</literal></expr>, <expr><literal type="number">0x5924a509</literal></expr>, <expr><literal type="number">0xf28fe6ed</literal></expr>, <expr><literal type="number">0x97f1fbfa</literal></expr>, <expr><literal type="number">0x9ebabf2c</literal></expr>, <expr><literal type="number">0x1e153c6e</literal></expr>,
<expr><literal type="number">0x86e34570</literal></expr>, <expr><literal type="number">0xeae96fb1</literal></expr>, <expr><literal type="number">0x860e5e0a</literal></expr>, <expr><literal type="number">0x5a3e2ab3</literal></expr>, <expr><literal type="number">0x771fe71c</literal></expr>, <expr><literal type="number">0x4e3d06fa</literal></expr>,
<expr><literal type="number">0x2965dcb9</literal></expr>, <expr><literal type="number">0x99e71d0f</literal></expr>, <expr><literal type="number">0x803e89d6</literal></expr>, <expr><literal type="number">0x5266c825</literal></expr>, <expr><literal type="number">0x2e4cc978</literal></expr>, <expr><literal type="number">0x9c10b36a</literal></expr>,
<expr><literal type="number">0xc6150eba</literal></expr>, <expr><literal type="number">0x94e2ea78</literal></expr>, <expr><literal type="number">0xa5fc3c53</literal></expr>, <expr><literal type="number">0x1e0a2df4</literal></expr>, <expr><literal type="number">0xf2f74ea7</literal></expr>, <expr><literal type="number">0x361d2b3d</literal></expr>,
<expr><literal type="number">0x1939260f</literal></expr>, <expr><literal type="number">0x19c27960</literal></expr>, <expr><literal type="number">0x5223a708</literal></expr>, <expr><literal type="number">0xf71312b6</literal></expr>, <expr><literal type="number">0xebadfe6e</literal></expr>, <expr><literal type="number">0xeac31f66</literal></expr>,
<expr><literal type="number">0xe3bc4595</literal></expr>, <expr><literal type="number">0xa67bc883</literal></expr>, <expr><literal type="number">0xb17f37d1</literal></expr>, <expr><literal type="number">0x018cff28</literal></expr>, <expr><literal type="number">0xc332ddef</literal></expr>, <expr><literal type="number">0xbe6c5aa5</literal></expr>,
<expr><literal type="number">0x65582185</literal></expr>, <expr><literal type="number">0x68ab9802</literal></expr>, <expr><literal type="number">0xeecea50f</literal></expr>, <expr><literal type="number">0xdb2f953b</literal></expr>, <expr><literal type="number">0x2aef7dad</literal></expr>, <expr><literal type="number">0x5b6e2f84</literal></expr>,
<expr><literal type="number">0x1521b628</literal></expr>, <expr><literal type="number">0x29076170</literal></expr>, <expr><literal type="number">0xecdd4775</literal></expr>, <expr><literal type="number">0x619f1510</literal></expr>, <expr><literal type="number">0x13cca830</literal></expr>, <expr><literal type="number">0xeb61bd96</literal></expr>,
<expr><literal type="number">0x0334fe1e</literal></expr>, <expr><literal type="number">0xaa0363cf</literal></expr>, <expr><literal type="number">0xb5735c90</literal></expr>, <expr><literal type="number">0x4c70a239</literal></expr>, <expr><literal type="number">0xd59e9e0b</literal></expr>, <expr><literal type="number">0xcbaade14</literal></expr>,
<expr><literal type="number">0xeecc86bc</literal></expr>, <expr><literal type="number">0x60622ca7</literal></expr>, <expr><literal type="number">0x9cab5cab</literal></expr>, <expr><literal type="number">0xb2f3846e</literal></expr>, <expr><literal type="number">0x648b1eaf</literal></expr>, <expr><literal type="number">0x19bdf0ca</literal></expr>,
<expr><literal type="number">0xa02369b9</literal></expr>, <expr><literal type="number">0x655abb50</literal></expr>, <expr><literal type="number">0x40685a32</literal></expr>, <expr><literal type="number">0x3c2ab4b3</literal></expr>, <expr><literal type="number">0x319ee9d5</literal></expr>, <expr><literal type="number">0xc021b8f7</literal></expr>,
<expr><literal type="number">0x9b540b19</literal></expr>, <expr><literal type="number">0x875fa099</literal></expr>, <expr><literal type="number">0x95f7997e</literal></expr>, <expr><literal type="number">0x623d7da8</literal></expr>, <expr><literal type="number">0xf837889a</literal></expr>, <expr><literal type="number">0x97e32d77</literal></expr>,
<expr><literal type="number">0x11ed935f</literal></expr>, <expr><literal type="number">0x16681281</literal></expr>, <expr><literal type="number">0x0e358829</literal></expr>, <expr><literal type="number">0xc7e61fd6</literal></expr>, <expr><literal type="number">0x96dedfa1</literal></expr>, <expr><literal type="number">0x7858ba99</literal></expr>,
<expr><literal type="number">0x57f584a5</literal></expr>, <expr><literal type="number">0x1b227263</literal></expr>, <expr><literal type="number">0x9b83c3ff</literal></expr>, <expr><literal type="number">0x1ac24696</literal></expr>, <expr><literal type="number">0xcdb30aeb</literal></expr>, <expr><literal type="number">0x532e3054</literal></expr>,
<expr><literal type="number">0x8fd948e4</literal></expr>, <expr><literal type="number">0x6dbc3128</literal></expr>, <expr><literal type="number">0x58ebf2ef</literal></expr>, <expr><literal type="number">0x34c6ffea</literal></expr>, <expr><literal type="number">0xfe28ed61</literal></expr>, <expr><literal type="number">0xee7c3c73</literal></expr>,
<expr><literal type="number">0x5d4a14d9</literal></expr>, <expr><literal type="number">0xe864b7e3</literal></expr>, <expr><literal type="number">0x42105d14</literal></expr>, <expr><literal type="number">0x203e13e0</literal></expr>, <expr><literal type="number">0x45eee2b6</literal></expr>, <expr><literal type="number">0xa3aaabea</literal></expr>,
<expr><literal type="number">0xdb6c4f15</literal></expr>, <expr><literal type="number">0xfacb4fd0</literal></expr>, <expr><literal type="number">0xc742f442</literal></expr>, <expr><literal type="number">0xef6abbb5</literal></expr>, <expr><literal type="number">0x654f3b1d</literal></expr>, <expr><literal type="number">0x41cd2105</literal></expr>,
<expr><literal type="number">0xd81e799e</literal></expr>, <expr><literal type="number">0x86854dc7</literal></expr>, <expr><literal type="number">0xe44b476a</literal></expr>, <expr><literal type="number">0x3d816250</literal></expr>, <expr><literal type="number">0xcf62a1f2</literal></expr>, <expr><literal type="number">0x5b8d2646</literal></expr>,
<expr><literal type="number">0xfc8883a0</literal></expr>, <expr><literal type="number">0xc1c7b6a3</literal></expr>, <expr><literal type="number">0x7f1524c3</literal></expr>, <expr><literal type="number">0x69cb7492</literal></expr>, <expr><literal type="number">0x47848a0b</literal></expr>, <expr><literal type="number">0x5692b285</literal></expr>,
<expr><literal type="number">0x095bbf00</literal></expr>, <expr><literal type="number">0xad19489d</literal></expr>, <expr><literal type="number">0x1462b174</literal></expr>, <expr><literal type="number">0x23820e00</literal></expr>, <expr><literal type="number">0x58428d2a</literal></expr>, <expr><literal type="number">0x0c55f5ea</literal></expr>,
<expr><literal type="number">0x1dadf43e</literal></expr>, <expr><literal type="number">0x233f7061</literal></expr>, <expr><literal type="number">0x3372f092</literal></expr>, <expr><literal type="number">0x8d937e41</literal></expr>, <expr><literal type="number">0xd65fecf1</literal></expr>, <expr><literal type="number">0x6c223bdb</literal></expr>,
<expr><literal type="number">0x7cde3759</literal></expr>, <expr><literal type="number">0xcbee7460</literal></expr>, <expr><literal type="number">0x4085f2a7</literal></expr>, <expr><literal type="number">0xce77326e</literal></expr>, <expr><literal type="number">0xa6078084</literal></expr>, <expr><literal type="number">0x19f8509e</literal></expr>,
<expr><literal type="number">0xe8efd855</literal></expr>, <expr><literal type="number">0x61d99735</literal></expr>, <expr><literal type="number">0xa969a7aa</literal></expr>, <expr><literal type="number">0xc50c06c2</literal></expr>, <expr><literal type="number">0x5a04abfc</literal></expr>, <expr><literal type="number">0x800bcadc</literal></expr>,
<expr><literal type="number">0x9e447a2e</literal></expr>, <expr><literal type="number">0xc3453484</literal></expr>, <expr><literal type="number">0xfdd56705</literal></expr>, <expr><literal type="number">0x0e1e9ec9</literal></expr>, <expr><literal type="number">0xdb73dbd3</literal></expr>, <expr><literal type="number">0x105588cd</literal></expr>,
<expr><literal type="number">0x675fda79</literal></expr>, <expr><literal type="number">0xe3674340</literal></expr>, <expr><literal type="number">0xc5c43465</literal></expr>, <expr><literal type="number">0x713e38d8</literal></expr>, <expr><literal type="number">0x3d28f89e</literal></expr>, <expr><literal type="number">0xf16dff20</literal></expr>,
<expr><literal type="number">0x153e21e7</literal></expr>, <expr><literal type="number">0x8fb03d4a</literal></expr>, <expr><literal type="number">0xe6e39f2b</literal></expr>, <expr><literal type="number">0xdb83adf7</literal></expr>,
}</block></expr>,


<expr><block>{
<expr><literal type="number">0xe93d5a68</literal></expr>, <expr><literal type="number">0x948140f7</literal></expr>, <expr><literal type="number">0xf64c261c</literal></expr>, <expr><literal type="number">0x94692934</literal></expr>, <expr><literal type="number">0x411520f7</literal></expr>, <expr><literal type="number">0x7602d4f7</literal></expr>,
<expr><literal type="number">0xbcf46b2e</literal></expr>, <expr><literal type="number">0xd4a20068</literal></expr>, <expr><literal type="number">0xd4082471</literal></expr>, <expr><literal type="number">0x3320f46a</literal></expr>, <expr><literal type="number">0x43b7d4b7</literal></expr>, <expr><literal type="number">0x500061af</literal></expr>,
<expr><literal type="number">0x1e39f62e</literal></expr>, <expr><literal type="number">0x97244546</literal></expr>, <expr><literal type="number">0x14214f74</literal></expr>, <expr><literal type="number">0xbf8b8840</literal></expr>, <expr><literal type="number">0x4d95fc1d</literal></expr>, <expr><literal type="number">0x96b591af</literal></expr>,
<expr><literal type="number">0x70f4ddd3</literal></expr>, <expr><literal type="number">0x66a02f45</literal></expr>, <expr><literal type="number">0xbfbc09ec</literal></expr>, <expr><literal type="number">0x03bd9785</literal></expr>, <expr><literal type="number">0x7fac6dd0</literal></expr>, <expr><literal type="number">0x31cb8504</literal></expr>,
<expr><literal type="number">0x96eb27b3</literal></expr>, <expr><literal type="number">0x55fd3941</literal></expr>, <expr><literal type="number">0xda2547e6</literal></expr>, <expr><literal type="number">0xabca0a9a</literal></expr>, <expr><literal type="number">0x28507825</literal></expr>, <expr><literal type="number">0x530429f4</literal></expr>,
<expr><literal type="number">0x0a2c86da</literal></expr>, <expr><literal type="number">0xe9b66dfb</literal></expr>, <expr><literal type="number">0x68dc1462</literal></expr>, <expr><literal type="number">0xd7486900</literal></expr>, <expr><literal type="number">0x680ec0a4</literal></expr>, <expr><literal type="number">0x27a18dee</literal></expr>,
<expr><literal type="number">0x4f3ffea2</literal></expr>, <expr><literal type="number">0xe887ad8c</literal></expr>, <expr><literal type="number">0xb58ce006</literal></expr>, <expr><literal type="number">0x7af4d6b6</literal></expr>, <expr><literal type="number">0xaace1e7c</literal></expr>, <expr><literal type="number">0xd3375fec</literal></expr>,
<expr><literal type="number">0xce78a399</literal></expr>, <expr><literal type="number">0x406b2a42</literal></expr>, <expr><literal type="number">0x20fe9e35</literal></expr>, <expr><literal type="number">0xd9f385b9</literal></expr>, <expr><literal type="number">0xee39d7ab</literal></expr>, <expr><literal type="number">0x3b124e8b</literal></expr>,
<expr><literal type="number">0x1dc9faf7</literal></expr>, <expr><literal type="number">0x4b6d1856</literal></expr>, <expr><literal type="number">0x26a36631</literal></expr>, <expr><literal type="number">0xeae397b2</literal></expr>, <expr><literal type="number">0x3a6efa74</literal></expr>, <expr><literal type="number">0xdd5b4332</literal></expr>,
<expr><literal type="number">0x6841e7f7</literal></expr>, <expr><literal type="number">0xca7820fb</literal></expr>, <expr><literal type="number">0xfb0af54e</literal></expr>, <expr><literal type="number">0xd8feb397</literal></expr>, <expr><literal type="number">0x454056ac</literal></expr>, <expr><literal type="number">0xba489527</literal></expr>,
<expr><literal type="number">0x55533a3a</literal></expr>, <expr><literal type="number">0x20838d87</literal></expr>, <expr><literal type="number">0xfe6ba9b7</literal></expr>, <expr><literal type="number">0xd096954b</literal></expr>, <expr><literal type="number">0x55a867bc</literal></expr>, <expr><literal type="number">0xa1159a58</literal></expr>,
<expr><literal type="number">0xcca92963</literal></expr>, <expr><literal type="number">0x99e1db33</literal></expr>, <expr><literal type="number">0xa62a4a56</literal></expr>, <expr><literal type="number">0x3f3125f9</literal></expr>, <expr><literal type="number">0x5ef47e1c</literal></expr>, <expr><literal type="number">0x9029317c</literal></expr>,
<expr><literal type="number">0xfdf8e802</literal></expr>, <expr><literal type="number">0x04272f70</literal></expr>, <expr><literal type="number">0x80bb155c</literal></expr>, <expr><literal type="number">0x05282ce3</literal></expr>, <expr><literal type="number">0x95c11548</literal></expr>, <expr><literal type="number">0xe4c66d22</literal></expr>,
<expr><literal type="number">0x48c1133f</literal></expr>, <expr><literal type="number">0xc70f86dc</literal></expr>, <expr><literal type="number">0x07f9c9ee</literal></expr>, <expr><literal type="number">0x41041f0f</literal></expr>, <expr><literal type="number">0x404779a4</literal></expr>, <expr><literal type="number">0x5d886e17</literal></expr>,
<expr><literal type="number">0x325f51eb</literal></expr>, <expr><literal type="number">0xd59bc0d1</literal></expr>, <expr><literal type="number">0xf2bcc18f</literal></expr>, <expr><literal type="number">0x41113564</literal></expr>, <expr><literal type="number">0x257b7834</literal></expr>, <expr><literal type="number">0x602a9c60</literal></expr>,
<expr><literal type="number">0xdff8e8a3</literal></expr>, <expr><literal type="number">0x1f636c1b</literal></expr>, <expr><literal type="number">0x0e12b4c2</literal></expr>, <expr><literal type="number">0x02e1329e</literal></expr>, <expr><literal type="number">0xaf664fd1</literal></expr>, <expr><literal type="number">0xcad18115</literal></expr>,
<expr><literal type="number">0x6b2395e0</literal></expr>, <expr><literal type="number">0x333e92e1</literal></expr>, <expr><literal type="number">0x3b240b62</literal></expr>, <expr><literal type="number">0xeebeb922</literal></expr>, <expr><literal type="number">0x85b2a20e</literal></expr>, <expr><literal type="number">0xe6ba0d99</literal></expr>,
<expr><literal type="number">0xde720c8c</literal></expr>, <expr><literal type="number">0x2da2f728</literal></expr>, <expr><literal type="number">0xd0127845</literal></expr>, <expr><literal type="number">0x95b794fd</literal></expr>, <expr><literal type="number">0x647d0862</literal></expr>, <expr><literal type="number">0xe7ccf5f0</literal></expr>,
<expr><literal type="number">0x5449a36f</literal></expr>, <expr><literal type="number">0x877d48fa</literal></expr>, <expr><literal type="number">0xc39dfd27</literal></expr>, <expr><literal type="number">0xf33e8d1e</literal></expr>, <expr><literal type="number">0x0a476341</literal></expr>, <expr><literal type="number">0x992eff74</literal></expr>,
<expr><literal type="number">0x3a6f6eab</literal></expr>, <expr><literal type="number">0xf4f8fd37</literal></expr>, <expr><literal type="number">0xa812dc60</literal></expr>, <expr><literal type="number">0xa1ebddf8</literal></expr>, <expr><literal type="number">0x991be14c</literal></expr>, <expr><literal type="number">0xdb6e6b0d</literal></expr>,
<expr><literal type="number">0xc67b5510</literal></expr>, <expr><literal type="number">0x6d672c37</literal></expr>, <expr><literal type="number">0x2765d43b</literal></expr>, <expr><literal type="number">0xdcd0e804</literal></expr>, <expr><literal type="number">0xf1290dc7</literal></expr>, <expr><literal type="number">0xcc00ffa3</literal></expr>,
<expr><literal type="number">0xb5390f92</literal></expr>, <expr><literal type="number">0x690fed0b</literal></expr>, <expr><literal type="number">0x667b9ffb</literal></expr>, <expr><literal type="number">0xcedb7d9c</literal></expr>, <expr><literal type="number">0xa091cf0b</literal></expr>, <expr><literal type="number">0xd9155ea3</literal></expr>,
<expr><literal type="number">0xbb132f88</literal></expr>, <expr><literal type="number">0x515bad24</literal></expr>, <expr><literal type="number">0x7b9479bf</literal></expr>, <expr><literal type="number">0x763bd6eb</literal></expr>, <expr><literal type="number">0x37392eb3</literal></expr>, <expr><literal type="number">0xcc115979</literal></expr>,
<expr><literal type="number">0x8026e297</literal></expr>, <expr><literal type="number">0xf42e312d</literal></expr>, <expr><literal type="number">0x6842ada7</literal></expr>, <expr><literal type="number">0xc66a2b3b</literal></expr>, <expr><literal type="number">0x12754ccc</literal></expr>, <expr><literal type="number">0x782ef11c</literal></expr>,
<expr><literal type="number">0x6a124237</literal></expr>, <expr><literal type="number">0xb79251e7</literal></expr>, <expr><literal type="number">0x06a1bbe6</literal></expr>, <expr><literal type="number">0x4bfb6350</literal></expr>, <expr><literal type="number">0x1a6b1018</literal></expr>, <expr><literal type="number">0x11caedfa</literal></expr>,
<expr><literal type="number">0x3d25bdd8</literal></expr>, <expr><literal type="number">0xe2e1c3c9</literal></expr>, <expr><literal type="number">0x44421659</literal></expr>, <expr><literal type="number">0x0a121386</literal></expr>, <expr><literal type="number">0xd90cec6e</literal></expr>, <expr><literal type="number">0xd5abea2a</literal></expr>,
<expr><literal type="number">0x64af674e</literal></expr>, <expr><literal type="number">0xda86a85f</literal></expr>, <expr><literal type="number">0xbebfe988</literal></expr>, <expr><literal type="number">0x64e4c3fe</literal></expr>, <expr><literal type="number">0x9dbc8057</literal></expr>, <expr><literal type="number">0xf0f7c086</literal></expr>,
<expr><literal type="number">0x60787bf8</literal></expr>, <expr><literal type="number">0x6003604d</literal></expr>, <expr><literal type="number">0xd1fd8346</literal></expr>, <expr><literal type="number">0xf6381fb0</literal></expr>, <expr><literal type="number">0x7745ae04</literal></expr>, <expr><literal type="number">0xd736fccc</literal></expr>,
<expr><literal type="number">0x83426b33</literal></expr>, <expr><literal type="number">0xf01eab71</literal></expr>, <expr><literal type="number">0xb0804187</literal></expr>, <expr><literal type="number">0x3c005e5f</literal></expr>, <expr><literal type="number">0x77a057be</literal></expr>, <expr><literal type="number">0xbde8ae24</literal></expr>,
<expr><literal type="number">0x55464299</literal></expr>, <expr><literal type="number">0xbf582e61</literal></expr>, <expr><literal type="number">0x4e58f48f</literal></expr>, <expr><literal type="number">0xf2ddfda2</literal></expr>, <expr><literal type="number">0xf474ef38</literal></expr>, <expr><literal type="number">0x8789bdc2</literal></expr>,
<expr><literal type="number">0x5366f9c3</literal></expr>, <expr><literal type="number">0xc8b38e74</literal></expr>, <expr><literal type="number">0xb475f255</literal></expr>, <expr><literal type="number">0x46fcd9b9</literal></expr>, <expr><literal type="number">0x7aeb2661</literal></expr>, <expr><literal type="number">0x8b1ddf84</literal></expr>,
<expr><literal type="number">0x846a0e79</literal></expr>, <expr><literal type="number">0x915f95e2</literal></expr>, <expr><literal type="number">0x466e598e</literal></expr>, <expr><literal type="number">0x20b45770</literal></expr>, <expr><literal type="number">0x8cd55591</literal></expr>, <expr><literal type="number">0xc902de4c</literal></expr>,
<expr><literal type="number">0xb90bace1</literal></expr>, <expr><literal type="number">0xbb8205d0</literal></expr>, <expr><literal type="number">0x11a86248</literal></expr>, <expr><literal type="number">0x7574a99e</literal></expr>, <expr><literal type="number">0xb77f19b6</literal></expr>, <expr><literal type="number">0xe0a9dc09</literal></expr>,
<expr><literal type="number">0x662d09a1</literal></expr>, <expr><literal type="number">0xc4324633</literal></expr>, <expr><literal type="number">0xe85a1f02</literal></expr>, <expr><literal type="number">0x09f0be8c</literal></expr>, <expr><literal type="number">0x4a99a025</literal></expr>, <expr><literal type="number">0x1d6efe10</literal></expr>,
<expr><literal type="number">0x1ab93d1d</literal></expr>, <expr><literal type="number">0x0ba5a4df</literal></expr>, <expr><literal type="number">0xa186f20f</literal></expr>, <expr><literal type="number">0x2868f169</literal></expr>, <expr><literal type="number">0xdcb7da83</literal></expr>, <expr><literal type="number">0x573906fe</literal></expr>,
<expr><literal type="number">0xa1e2ce9b</literal></expr>, <expr><literal type="number">0x4fcd7f52</literal></expr>, <expr><literal type="number">0x50115e01</literal></expr>, <expr><literal type="number">0xa70683fa</literal></expr>, <expr><literal type="number">0xa002b5c4</literal></expr>, <expr><literal type="number">0x0de6d027</literal></expr>,
<expr><literal type="number">0x9af88c27</literal></expr>, <expr><literal type="number">0x773f8641</literal></expr>, <expr><literal type="number">0xc3604c06</literal></expr>, <expr><literal type="number">0x61a806b5</literal></expr>, <expr><literal type="number">0xf0177a28</literal></expr>, <expr><literal type="number">0xc0f586e0</literal></expr>,
<expr><literal type="number">0x006058aa</literal></expr>, <expr><literal type="number">0x30dc7d62</literal></expr>, <expr><literal type="number">0x11e69ed7</literal></expr>, <expr><literal type="number">0x2338ea63</literal></expr>, <expr><literal type="number">0x53c2dd94</literal></expr>, <expr><literal type="number">0xc2c21634</literal></expr>,
<expr><literal type="number">0xbbcbee56</literal></expr>, <expr><literal type="number">0x90bcb6de</literal></expr>, <expr><literal type="number">0xebfc7da1</literal></expr>, <expr><literal type="number">0xce591d76</literal></expr>, <expr><literal type="number">0x6f05e409</literal></expr>, <expr><literal type="number">0x4b7c0188</literal></expr>,
<expr><literal type="number">0x39720a3d</literal></expr>, <expr><literal type="number">0x7c927c24</literal></expr>, <expr><literal type="number">0x86e3725f</literal></expr>, <expr><literal type="number">0x724d9db9</literal></expr>, <expr><literal type="number">0x1ac15bb4</literal></expr>, <expr><literal type="number">0xd39eb8fc</literal></expr>,
<expr><literal type="number">0xed545578</literal></expr>, <expr><literal type="number">0x08fca5b5</literal></expr>, <expr><literal type="number">0xd83d7cd3</literal></expr>, <expr><literal type="number">0x4dad0fc4</literal></expr>, <expr><literal type="number">0x1e50ef5e</literal></expr>, <expr><literal type="number">0xb161e6f8</literal></expr>,
<expr><literal type="number">0xa28514d9</literal></expr>, <expr><literal type="number">0x6c51133c</literal></expr>, <expr><literal type="number">0x6fd5c7e7</literal></expr>, <expr><literal type="number">0x56e14ec4</literal></expr>, <expr><literal type="number">0x362abfce</literal></expr>, <expr><literal type="number">0xddc6c837</literal></expr>,
<expr><literal type="number">0xd79a3234</literal></expr>, <expr><literal type="number">0x92638212</literal></expr>, <expr><literal type="number">0x670efa8e</literal></expr>, <expr><literal type="number">0x406000e0</literal></expr>,
}</block></expr>,


<expr><block>{
<expr><literal type="number">0x3a39ce37</literal></expr>, <expr><literal type="number">0xd3faf5cf</literal></expr>, <expr><literal type="number">0xabc27737</literal></expr>, <expr><literal type="number">0x5ac52d1b</literal></expr>, <expr><literal type="number">0x5cb0679e</literal></expr>, <expr><literal type="number">0x4fa33742</literal></expr>,
<expr><literal type="number">0xd3822740</literal></expr>, <expr><literal type="number">0x99bc9bbe</literal></expr>, <expr><literal type="number">0xd5118e9d</literal></expr>, <expr><literal type="number">0xbf0f7315</literal></expr>, <expr><literal type="number">0xd62d1c7e</literal></expr>, <expr><literal type="number">0xc700c47b</literal></expr>,
<expr><literal type="number">0xb78c1b6b</literal></expr>, <expr><literal type="number">0x21a19045</literal></expr>, <expr><literal type="number">0xb26eb1be</literal></expr>, <expr><literal type="number">0x6a366eb4</literal></expr>, <expr><literal type="number">0x5748ab2f</literal></expr>, <expr><literal type="number">0xbc946e79</literal></expr>,
<expr><literal type="number">0xc6a376d2</literal></expr>, <expr><literal type="number">0x6549c2c8</literal></expr>, <expr><literal type="number">0x530ff8ee</literal></expr>, <expr><literal type="number">0x468dde7d</literal></expr>, <expr><literal type="number">0xd5730a1d</literal></expr>, <expr><literal type="number">0x4cd04dc6</literal></expr>,
<expr><literal type="number">0x2939bbdb</literal></expr>, <expr><literal type="number">0xa9ba4650</literal></expr>, <expr><literal type="number">0xac9526e8</literal></expr>, <expr><literal type="number">0xbe5ee304</literal></expr>, <expr><literal type="number">0xa1fad5f0</literal></expr>, <expr><literal type="number">0x6a2d519a</literal></expr>,
<expr><literal type="number">0x63ef8ce2</literal></expr>, <expr><literal type="number">0x9a86ee22</literal></expr>, <expr><literal type="number">0xc089c2b8</literal></expr>, <expr><literal type="number">0x43242ef6</literal></expr>, <expr><literal type="number">0xa51e03aa</literal></expr>, <expr><literal type="number">0x9cf2d0a4</literal></expr>,
<expr><literal type="number">0x83c061ba</literal></expr>, <expr><literal type="number">0x9be96a4d</literal></expr>, <expr><literal type="number">0x8fe51550</literal></expr>, <expr><literal type="number">0xba645bd6</literal></expr>, <expr><literal type="number">0x2826a2f9</literal></expr>, <expr><literal type="number">0xa73a3ae1</literal></expr>,
<expr><literal type="number">0x4ba99586</literal></expr>, <expr><literal type="number">0xef5562e9</literal></expr>, <expr><literal type="number">0xc72fefd3</literal></expr>, <expr><literal type="number">0xf752f7da</literal></expr>, <expr><literal type="number">0x3f046f69</literal></expr>, <expr><literal type="number">0x77fa0a59</literal></expr>,
<expr><literal type="number">0x80e4a915</literal></expr>, <expr><literal type="number">0x87b08601</literal></expr>, <expr><literal type="number">0x9b09e6ad</literal></expr>, <expr><literal type="number">0x3b3ee593</literal></expr>, <expr><literal type="number">0xe990fd5a</literal></expr>, <expr><literal type="number">0x9e34d797</literal></expr>,
<expr><literal type="number">0x2cf0b7d9</literal></expr>, <expr><literal type="number">0x022b8b51</literal></expr>, <expr><literal type="number">0x96d5ac3a</literal></expr>, <expr><literal type="number">0x017da67d</literal></expr>, <expr><literal type="number">0xd1cf3ed6</literal></expr>, <expr><literal type="number">0x7c7d2d28</literal></expr>,
<expr><literal type="number">0x1f9f25cf</literal></expr>, <expr><literal type="number">0xadf2b89b</literal></expr>, <expr><literal type="number">0x5ad6b472</literal></expr>, <expr><literal type="number">0x5a88f54c</literal></expr>, <expr><literal type="number">0xe029ac71</literal></expr>, <expr><literal type="number">0xe019a5e6</literal></expr>,
<expr><literal type="number">0x47b0acfd</literal></expr>, <expr><literal type="number">0xed93fa9b</literal></expr>, <expr><literal type="number">0xe8d3c48d</literal></expr>, <expr><literal type="number">0x283b57cc</literal></expr>, <expr><literal type="number">0xf8d56629</literal></expr>, <expr><literal type="number">0x79132e28</literal></expr>,
<expr><literal type="number">0x785f0191</literal></expr>, <expr><literal type="number">0xed756055</literal></expr>, <expr><literal type="number">0xf7960e44</literal></expr>, <expr><literal type="number">0xe3d35e8c</literal></expr>, <expr><literal type="number">0x15056dd4</literal></expr>, <expr><literal type="number">0x88f46dba</literal></expr>,
<expr><literal type="number">0x03a16125</literal></expr>, <expr><literal type="number">0x0564f0bd</literal></expr>, <expr><literal type="number">0xc3eb9e15</literal></expr>, <expr><literal type="number">0x3c9057a2</literal></expr>, <expr><literal type="number">0x97271aec</literal></expr>, <expr><literal type="number">0xa93a072a</literal></expr>,
<expr><literal type="number">0x1b3f6d9b</literal></expr>, <expr><literal type="number">0x1e6321f5</literal></expr>, <expr><literal type="number">0xf59c66fb</literal></expr>, <expr><literal type="number">0x26dcf319</literal></expr>, <expr><literal type="number">0x7533d928</literal></expr>, <expr><literal type="number">0xb155fdf5</literal></expr>,
<expr><literal type="number">0x03563482</literal></expr>, <expr><literal type="number">0x8aba3cbb</literal></expr>, <expr><literal type="number">0x28517711</literal></expr>, <expr><literal type="number">0xc20ad9f8</literal></expr>, <expr><literal type="number">0xabcc5167</literal></expr>, <expr><literal type="number">0xccad925f</literal></expr>,
<expr><literal type="number">0x4de81751</literal></expr>, <expr><literal type="number">0x3830dc8e</literal></expr>, <expr><literal type="number">0x379d5862</literal></expr>, <expr><literal type="number">0x9320f991</literal></expr>, <expr><literal type="number">0xea7a90c2</literal></expr>, <expr><literal type="number">0xfb3e7bce</literal></expr>,
<expr><literal type="number">0x5121ce64</literal></expr>, <expr><literal type="number">0x774fbe32</literal></expr>, <expr><literal type="number">0xa8b6e37e</literal></expr>, <expr><literal type="number">0xc3293d46</literal></expr>, <expr><literal type="number">0x48de5369</literal></expr>, <expr><literal type="number">0x6413e680</literal></expr>,
<expr><literal type="number">0xa2ae0810</literal></expr>, <expr><literal type="number">0xdd6db224</literal></expr>, <expr><literal type="number">0x69852dfd</literal></expr>, <expr><literal type="number">0x09072166</literal></expr>, <expr><literal type="number">0xb39a460a</literal></expr>, <expr><literal type="number">0x6445c0dd</literal></expr>,
<expr><literal type="number">0x586cdecf</literal></expr>, <expr><literal type="number">0x1c20c8ae</literal></expr>, <expr><literal type="number">0x5bbef7dd</literal></expr>, <expr><literal type="number">0x1b588d40</literal></expr>, <expr><literal type="number">0xccd2017f</literal></expr>, <expr><literal type="number">0x6bb4e3bb</literal></expr>,
<expr><literal type="number">0xdda26a7e</literal></expr>, <expr><literal type="number">0x3a59ff45</literal></expr>, <expr><literal type="number">0x3e350a44</literal></expr>, <expr><literal type="number">0xbcb4cdd5</literal></expr>, <expr><literal type="number">0x72eacea8</literal></expr>, <expr><literal type="number">0xfa6484bb</literal></expr>,
<expr><literal type="number">0x8d6612ae</literal></expr>, <expr><literal type="number">0xbf3c6f47</literal></expr>, <expr><literal type="number">0xd29be463</literal></expr>, <expr><literal type="number">0x542f5d9e</literal></expr>, <expr><literal type="number">0xaec2771b</literal></expr>, <expr><literal type="number">0xf64e6370</literal></expr>,
<expr><literal type="number">0x740e0d8d</literal></expr>, <expr><literal type="number">0xe75b1357</literal></expr>, <expr><literal type="number">0xf8721671</literal></expr>, <expr><literal type="number">0xaf537d5d</literal></expr>, <expr><literal type="number">0x4040cb08</literal></expr>, <expr><literal type="number">0x4eb4e2cc</literal></expr>,
<expr><literal type="number">0x34d2466a</literal></expr>, <expr><literal type="number">0x0115af84</literal></expr>, <expr><literal type="number">0xe1b00428</literal></expr>, <expr><literal type="number">0x95983a1d</literal></expr>, <expr><literal type="number">0x06b89fb4</literal></expr>, <expr><literal type="number">0xce6ea048</literal></expr>,
<expr><literal type="number">0x6f3f3b82</literal></expr>, <expr><literal type="number">0x3520ab82</literal></expr>, <expr><literal type="number">0x011a1d4b</literal></expr>, <expr><literal type="number">0x277227f8</literal></expr>, <expr><literal type="number">0x611560b1</literal></expr>, <expr><literal type="number">0xe7933fdc</literal></expr>,
<expr><literal type="number">0xbb3a792b</literal></expr>, <expr><literal type="number">0x344525bd</literal></expr>, <expr><literal type="number">0xa08839e1</literal></expr>, <expr><literal type="number">0x51ce794b</literal></expr>, <expr><literal type="number">0x2f32c9b7</literal></expr>, <expr><literal type="number">0xa01fbac9</literal></expr>,
<expr><literal type="number">0xe01cc87e</literal></expr>, <expr><literal type="number">0xbcc7d1f6</literal></expr>, <expr><literal type="number">0xcf0111c3</literal></expr>, <expr><literal type="number">0xa1e8aac7</literal></expr>, <expr><literal type="number">0x1a908749</literal></expr>, <expr><literal type="number">0xd44fbd9a</literal></expr>,
<expr><literal type="number">0xd0dadecb</literal></expr>, <expr><literal type="number">0xd50ada38</literal></expr>, <expr><literal type="number">0x0339c32a</literal></expr>, <expr><literal type="number">0xc6913667</literal></expr>, <expr><literal type="number">0x8df9317c</literal></expr>, <expr><literal type="number">0xe0b12b4f</literal></expr>,
<expr><literal type="number">0xf79e59b7</literal></expr>, <expr><literal type="number">0x43f5bb3a</literal></expr>, <expr><literal type="number">0xf2d519ff</literal></expr>, <expr><literal type="number">0x27d9459c</literal></expr>, <expr><literal type="number">0xbf97222c</literal></expr>, <expr><literal type="number">0x15e6fc2a</literal></expr>,
<expr><literal type="number">0x0f91fc71</literal></expr>, <expr><literal type="number">0x9b941525</literal></expr>, <expr><literal type="number">0xfae59361</literal></expr>, <expr><literal type="number">0xceb69ceb</literal></expr>, <expr><literal type="number">0xc2a86459</literal></expr>, <expr><literal type="number">0x12baa8d1</literal></expr>,
<expr><literal type="number">0xb6c1075e</literal></expr>, <expr><literal type="number">0xe3056a0c</literal></expr>, <expr><literal type="number">0x10d25065</literal></expr>, <expr><literal type="number">0xcb03a442</literal></expr>, <expr><literal type="number">0xe0ec6e0e</literal></expr>, <expr><literal type="number">0x1698db3b</literal></expr>,
<expr><literal type="number">0x4c98a0be</literal></expr>, <expr><literal type="number">0x3278e964</literal></expr>, <expr><literal type="number">0x9f1f9532</literal></expr>, <expr><literal type="number">0xe0d392df</literal></expr>, <expr><literal type="number">0xd3a0342b</literal></expr>, <expr><literal type="number">0x8971f21e</literal></expr>,
<expr><literal type="number">0x1b0a7441</literal></expr>, <expr><literal type="number">0x4ba3348c</literal></expr>, <expr><literal type="number">0xc5be7120</literal></expr>, <expr><literal type="number">0xc37632d8</literal></expr>, <expr><literal type="number">0xdf359f8d</literal></expr>, <expr><literal type="number">0x9b992f2e</literal></expr>,
<expr><literal type="number">0xe60b6f47</literal></expr>, <expr><literal type="number">0x0fe3f11d</literal></expr>, <expr><literal type="number">0xe54cda54</literal></expr>, <expr><literal type="number">0x1edad891</literal></expr>, <expr><literal type="number">0xce6279cf</literal></expr>, <expr><literal type="number">0xcd3e7e6f</literal></expr>,
<expr><literal type="number">0x1618b166</literal></expr>, <expr><literal type="number">0xfd2c1d05</literal></expr>, <expr><literal type="number">0x848fd2c5</literal></expr>, <expr><literal type="number">0xf6fb2299</literal></expr>, <expr><literal type="number">0xf523f357</literal></expr>, <expr><literal type="number">0xa6327623</literal></expr>,
<expr><literal type="number">0x93a83531</literal></expr>, <expr><literal type="number">0x56cccd02</literal></expr>, <expr><literal type="number">0xacf08162</literal></expr>, <expr><literal type="number">0x5a75ebb5</literal></expr>, <expr><literal type="number">0x6e163697</literal></expr>, <expr><literal type="number">0x88d273cc</literal></expr>,
<expr><literal type="number">0xde966292</literal></expr>, <expr><literal type="number">0x81b949d0</literal></expr>, <expr><literal type="number">0x4c50901b</literal></expr>, <expr><literal type="number">0x71c65614</literal></expr>, <expr><literal type="number">0xe6c6c7bd</literal></expr>, <expr><literal type="number">0x327a140a</literal></expr>,
<expr><literal type="number">0x45e1d006</literal></expr>, <expr><literal type="number">0xc3f27b9a</literal></expr>, <expr><literal type="number">0xc9aa53fd</literal></expr>, <expr><literal type="number">0x62a80f00</literal></expr>, <expr><literal type="number">0xbb25bfe2</literal></expr>, <expr><literal type="number">0x35bdd2f6</literal></expr>,
<expr><literal type="number">0x71126905</literal></expr>, <expr><literal type="number">0xb2040222</literal></expr>, <expr><literal type="number">0xb6cbcf7c</literal></expr>, <expr><literal type="number">0xcd769c2b</literal></expr>, <expr><literal type="number">0x53113ec0</literal></expr>, <expr><literal type="number">0x1640e3d3</literal></expr>,
<expr><literal type="number">0x38abbd60</literal></expr>, <expr><literal type="number">0x2547adf0</literal></expr>, <expr><literal type="number">0xba38209c</literal></expr>, <expr><literal type="number">0xf746ce76</literal></expr>, <expr><literal type="number">0x77afa1c5</literal></expr>, <expr><literal type="number">0x20756060</literal></expr>,
<expr><literal type="number">0x85cbfe4e</literal></expr>, <expr><literal type="number">0x8ae88dd8</literal></expr>, <expr><literal type="number">0x7aaaf9b0</literal></expr>, <expr><literal type="number">0x4cf9aa7e</literal></expr>, <expr><literal type="number">0x1948c25c</literal></expr>, <expr><literal type="number">0x02fb8a8c</literal></expr>,
<expr><literal type="number">0x01c36ae4</literal></expr>, <expr><literal type="number">0xd6ebe1f9</literal></expr>, <expr><literal type="number">0x90d4f869</literal></expr>, <expr><literal type="number">0xa65cdea0</literal></expr>, <expr><literal type="number">0x3f09252d</literal></expr>, <expr><literal type="number">0xc208e69f</literal></expr>,
<expr><literal type="number">0xb74e6132</literal></expr>, <expr><literal type="number">0xce77e25b</literal></expr>, <expr><literal type="number">0x578fdfe3</literal></expr>, <expr><literal type="number">0x3ac372e6</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>bf_pinit</name><index>[]</index></name> <init>=
<expr><block>{

<expr><literal type="number">0x243f6a88</literal></expr>, <expr><literal type="number">0x85a308d3</literal></expr>, <expr><literal type="number">0x13198a2e</literal></expr>, <expr><literal type="number">0x03707344</literal></expr>, <expr><literal type="number">0xa4093822</literal></expr>, <expr><literal type="number">0x299f31d0</literal></expr>,
<expr><literal type="number">0x082efa98</literal></expr>, <expr><literal type="number">0xec4e6c89</literal></expr>, <expr><literal type="number">0x452821e6</literal></expr>, <expr><literal type="number">0x38d01377</literal></expr>, <expr><literal type="number">0xbe5466cf</literal></expr>, <expr><literal type="number">0x34e90c6c</literal></expr>,
<expr><literal type="number">0xc0ac29b7</literal></expr>, <expr><literal type="number">0xc97c50dd</literal></expr>, <expr><literal type="number">0x3f84d5b5</literal></expr>, <expr><literal type="number">0xb5470917</literal></expr>, <expr><literal type="number">0x9216d5d9</literal></expr>, <expr><literal type="number">0x8979fb1b</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYBYTES</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rtmpe9_keys</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><name>KEYBYTES</name></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{
<expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xbe</literal></expr>,
<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x65</literal></expr>,
<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x5c</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x43</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9b</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7e</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,
<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x89</literal></expr>,
<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xc8</literal></expr>,
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xe6</literal></expr>,
<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x24</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xb6</literal></expr>,
<expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xd5</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x12</literal></expr>,
<expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xcd</literal></expr>,
<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x18</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xfc</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
<expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb2</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_ENC</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((S[0][X&gt;&gt;24] + S[1][X&gt;&gt;16 &amp; 0xff]) ^ S[2][(X&gt;&gt;8) &amp; 0xff]) + S[3][X &amp; 0xff])</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>bf_enc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>bf_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Xl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Xr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Xl</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Xr</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BF_ROUNDS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>Xl</name> <operator>^=</operator> <name><name>key</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Xr</name> <operator>^=</operator> <call><name>BF_ENC</name><argument_list>(<argument><expr><name>Xl</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>Xl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Xl</name> <operator>=</operator> <name>Xr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Xr</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>Xl</name> <operator>^=</operator> <name><name>key</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>BF_ROUNDS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Xr</name> <operator>^=</operator> <name><name>key</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>BF_ROUNDS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Xr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Xl</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bf_setkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>kp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keybytes</name></decl></parameter>, <parameter><decl><type><name>bf_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>bf_pinit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>bf_sinit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BF_ROUNDS</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>kp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>keybytes</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BF_ROUNDS</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bf_enc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>bf_enc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmpe9_sig</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bf_key</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bf_setkey</name><argument_list>(<argument><expr><name><name>rtmpe9_keys</name><index>[<expr><name>keyid</name></expr>]</index></name></expr></argument>, <argument><expr><name>KEYBYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bf_enc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>HandShake</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>FP9HandShake</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>offalg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dhposClient</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digestPosClient</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encrypted</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_ENC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RC4_handle</name></type> <name>keyIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RC4_handle</name></type> <name>keyOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uptime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>clientbuf</name><index>[<expr><name>RTMP_SIG_SIZE</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>clientsig</name><init>=<expr><name>clientbuf</name><operator>+</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>serversig</name><index>[<expr><name>RTMP_SIG_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>client2</name><index>[<expr><name>RTMP_SIG_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getoff</name> <modifier>*</modifier></type><name>getdh</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>getdig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encrypted</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFSize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FP9HandShake</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>FP9HandShake</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>offalg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>uptime</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>RTMP_GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>clientsig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uptime</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>FP9HandShake</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clientsig</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Client type: %02X"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>clientsig</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>getdig</name> <operator>=</operator> <name><name>digoff</name><index>[<expr><name>offalg</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>getdh</name> <operator>=</operator> <name><name>dhoff</name><index>[<expr><name>offalg</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientsig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>clientsig</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>clientsig</name><operator>+</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTMP_SIG_SIZE</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name><operator>++</operator> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>FP9HandShake</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name> <operator>=</operator> <call><name>DHInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: Couldn't initialize Diffie-Hellmann!"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dhposClient</name> <operator>=</operator> <call><name>getdh</name><argument_list>(<argument><expr><name>clientsig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: DH pubkey position: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>dhposClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DHGenerateKey</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: Couldn't generate Diffie-Hellmann public key!"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DHGetPublicKey</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clientsig</name><index>[<expr><name>dhposClient</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: Couldn't write public key!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>digestPosClient</name> <operator>=</operator> <call><name>getdig</name><argument_list>(<argument><expr><name>clientsig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Client digest offset: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
<argument><expr><name>digestPosClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CalculateDigest</name><argument_list>(<argument><expr><name>digestPosClient</name></expr></argument>, <argument><expr><name>clientsig</name></expr></argument>, <argument><expr><name>GenuineFPKey</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>clientsig</name><index>[<expr><name>digestPosClient</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Initial client digest: "</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>clientsig</name> <operator>+</operator> <name>digestPosClient</name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Clientsig: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>clientsig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>clientsig</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Type Answer : %02X"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>clientsig</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: Type mismatch: client sent %d, server answered %d"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>clientsig</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTMP_SIG_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uptime</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uptime</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>uptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Server Uptime : %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>uptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: FMS Version : %d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>serversig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>serversig</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serversig</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serversig</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>FP9HandShake</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>serversig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FP9HandShake</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Server signature:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>FP9HandShake</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>digestResp</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>signatureResp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>digestPosServer</name> <init>= <expr><call><name>getdig</name><argument_list>(<argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VerifyDigest</name><argument_list>(<argument><expr><name>digestPosServer</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>GenuineFMSKey</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"Trying different position for server digest!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offalg</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>getdig</name> <operator>=</operator> <name><name>digoff</name><index>[<expr><name>offalg</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>getdh</name> <operator>=</operator> <name><name>dhoff</name><index>[<expr><name>offalg</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>digestPosServer</name> <operator>=</operator> <call><name>getdig</name><argument_list>(<argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VerifyDigest</name><argument_list>(<argument><expr><name>digestPosServer</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>GenuineFMSKey</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't verify the server digest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFSize</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>swfVerify</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vend</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name></name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name></name></expr></argument>, <argument><expr><name>swfVerify</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMACsha256</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFHash</name></name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>serversig</name><index>[<expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>secretKey</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>dhposServer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dhposServer</name> <operator>=</operator> <call><name>getdh</name><argument_list>(<argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Server DH public key offset: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
<argument><expr><name>dhposServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>DHComputeSharedSecretKey</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serversig</name><index>[<expr><name>dhposServer</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Wrong secret key position!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Secret key: "</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitRC4Encryption</name><argument_list>(<argument><expr><name>secretKey</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name><name>serversig</name><index>[<expr><name>dhposServer</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name><name>clientsig</name><index>[<expr><name>dhposClient</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>keyIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>reply</name> <operator>=</operator> <name>client2</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>reply</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTMP_SIG_SIZE</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name><operator>++</operator> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>signatureResp</name> <operator>=</operator> <name>reply</name><operator>+</operator><name>RTMP_SIG_SIZE</name><operator>-</operator><name>SHA256_DIGEST_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HMACsha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serversig</name><index>[<expr><name>digestPosServer</name></expr>]</index></name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>GenuineFPKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GenuineFPKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>digestResp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMACsha256</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>digestResp</name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>signatureResp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%s: Calculated digest key from secure key and server digest: "</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>digestResp</name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FP10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name>digestResp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><name>signatureResp</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SHA256_DIGEST_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtmpe8_sig</name><argument_list>(<argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>dptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name>digestResp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><name>signatureResp</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SHA256_DIGEST_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtmpe9_sig</name><argument_list>(<argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>dptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Client signature calculated:"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>signatureResp</name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <name>serversig</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
uptime = htonl(RTMP_GetTime());
memcpy(reply+4, &amp;uptime, 4);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Sending handshake response: "</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>reply</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTMP_SIG_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: 2nd handshake: "</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>FP9HandShake</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>signature</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>digest</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>serversig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>serversig</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>serversig</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>serversig</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%s: Wait, did the server just refuse signed authentication?"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Server sent signature:"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serversig</name><index>[<expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>HMACsha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientsig</name><index>[<expr><name>digestPosClient</name></expr>]</index></name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>GenuineFMSKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GenuineFMSKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HMACsha256</name><argument_list>(<argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Digest key: "</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FP10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name>digest</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><name>signature</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SHA256_DIGEST_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtmpe8_sig</name><argument_list>(<argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>dptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name>digest</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><name>signature</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SHA256_DIGEST_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtmpe9_sig</name><argument_list>(<argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>sig</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>dptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Signature calculated:"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name>
<argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serversig</name><index>[<expr><name>RTMP_SIG_SIZE</name> <operator>-</operator> <name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: Server not genuine Adobe!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Genuine Adobe Flash Media Server"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>RTMP_SIG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name> <operator>=</operator> <name>keyIn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name> <operator>=</operator> <name>keyOut</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RC4_encrypt</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RC4_encrypt</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>clientsig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: client signature does not match!"</literal></expr></argument>,
<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Handshaking finished...."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
</unit>
