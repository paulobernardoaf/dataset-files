<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-libfdk\obs-libfdk.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdk-aac/aacenc_lib.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libfdk_get_error</name><parameter_list>(<parameter><decl><type><name>AACENC_ERROR</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AACENC_OK</name></expr>:</case>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return>
<case>case <expr><name>AACENC_INVALID_HANDLE</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid handle"</literal></expr>;</return>
<case>case <expr><name>AACENC_MEMORY_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Memory allocation error"</literal></expr>;</return>
<case>case <expr><name>AACENC_UNSUPPORTED_PARAMETER</name></expr>:</case>
<return>return <expr><literal type="string">"Unsupported parameter"</literal></expr>;</return>
<case>case <expr><name>AACENC_INVALID_CONFIG</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid config"</literal></expr>;</return>
<case>case <expr><name>AACENC_INIT_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Initialization error"</literal></expr>;</return>
<case>case <expr><name>AACENC_INIT_AAC_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"AAC library initialization error"</literal></expr>;</return>
<case>case <expr><name>AACENC_INIT_SBR_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"SBR library initialization error"</literal></expr>;</return>
<case>case <expr><name>AACENC_INIT_TP_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Transport library initialization error"</literal></expr>;</return>
<case>case <expr><name>AACENC_INIT_META_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Metadata library initialization error"</literal></expr>;</return>
<case>case <expr><name>AACENC_ENCODE_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Encoding error"</literal></expr>;</return>
<case>case <expr><name>AACENC_ENCODE_EOF</name></expr>:</case>
<return>return <expr><literal type="string">"End of file"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>libfdk_encoder</name> <block>{
<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>, <name>sample_rate</name>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE_AACENCODER</name></type> <name>fdkhandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AACENC_InfoStruct</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>packet_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_buffer_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>libfdk_encoder_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libfdk_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"LibFDK"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>libfdk_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Bitrate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"afterburner"</literal></expr></argument>,
<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Afterburner"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libfdk_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"afterburner"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_LIBFDK</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((err = (r)) != AACENC_OK) { blog(LOG_ERROR, #r " failed: %s", libfdk_get_error(err)); goto fail; }</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>libfdk_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>hasFdkHandle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libfdk_encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>afterburner</name> <init>= <expr><ternary><condition><expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"afterburner"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><call><name>obs_encoder_audio</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AACENC_ERROR</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitrate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libfdk_encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2_1</name></expr>;</expr_stmt>
<break>break;</break>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_7_1_REAR_SURROUND</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasFdkHandle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_AOT</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_SAMPLERATE</name></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(
<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_CHANNELMODE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(
<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_CHANNELORDER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(
<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_BITRATEMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(
<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_BITRATE</name></expr></argument>, <argument><expr><name>bitrate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_TRANSMUX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>AACENC_AFTERBURNER</name></expr></argument>,
<argument><expr><name>afterburner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncEncode</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_LIBFDK</name><argument_list>(<argument><expr><call><name>aacEncInfo</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_size_bytes</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>frameLength</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer_size</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">768</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer_size</name></name> <operator>&lt;</operator> <literal type="number">8192</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer_size</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"libfdk_aac encoder created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"libfdk_aac bitrate: %d, channels: %d"</literal></expr></argument>, <argument><expr><name>bitrate</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>enc</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>hasFdkHandle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aacEncClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"libfdk_aac encoder creation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libfdk_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libfdk_encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aacEncClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"libfdk_aac encoder destroyed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>libfdk_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>received_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libfdk_encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_BufDesc</name></type> <name>in_buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AACENC_BufDesc</name></type> <name>out_buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AACENC_InArgs</name></type> <name>in_args</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AACENC_OutArgs</name></type> <name>out_args</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_identifier</name> <init>= <expr><name>IN_AUDIO_DATA</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_size</name></decl>, <decl><type ref="prev"/><name>in_elem_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_identifier</name> <init>= <expr><name>OUT_BITSTREAM_DATA</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_size</name></decl>, <decl><type ref="prev"/><name>out_elem_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>in_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AACENC_ERROR</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>encoderDelay</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_ptr</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_size</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>frame_size_bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_elem_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_args</name><operator>.</operator><name>numInSamples</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>frameLength</name></name> <operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>numBufs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufs</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufferIdentifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_identifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufElSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_elem_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_ptr</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_size</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>packet_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_elem_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>numBufs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufs</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufferIdentifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_identifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufElSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_elem_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncEncode</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fdkhandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_args</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to encode frame: %s"</literal></expr></argument>,
<argument><expr><call><name>libfdk_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>+=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>frameLength</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>received_packet</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>received_packet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>AACENCODER_LIB_VL0</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>encoderDelay</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>nDelay</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>encoderDelay</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encoderDelay</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>-</operator> <name>encoderDelay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>-</operator> <name>encoderDelay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBS_ENCODER_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>timebase_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>timebase_den</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>libfdk_extra_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libfdk_encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>confSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>confBuf</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libfdk_audio_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_convert_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_FORMAT_16BIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>libfdk_frame_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libfdk_encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>enc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>frameLength</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name></type> <name>obs_libfdk_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"libfdk_aac"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_ENCODER_AUDIO</name></expr>,
<expr><operator>.</operator><name>codec</name> <operator>=</operator> <literal type="string">"AAC"</literal></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>libfdk_getname</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>libfdk_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>libfdk_destroy</name></expr>,
<expr><operator>.</operator><name>encode</name> <operator>=</operator> <name>libfdk_encode</name></expr>,
<expr><operator>.</operator><name>get_frame_size</name> <operator>=</operator> <name>libfdk_frame_size</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>libfdk_defaults</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>libfdk_properties</name></expr>,
<expr><operator>.</operator><name>get_extra_data</name> <operator>=</operator> <name>libfdk_extra_data</name></expr>,
<expr><operator>.</operator><name>get_audio_info</name> <operator>=</operator> <name>libfdk_audio_info</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>obs_module_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_register_encoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obs_libfdk_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<macro><name>OBS_DECLARE_MODULE</name><argument_list>()</argument_list></macro>
<macro><name>OBS_MODULE_USE_DEFAULT_LOCALE</name><argument_list>(<argument><literal type="string">"obs-libfdk"</literal></argument>, <argument><literal type="string">"en-US"</literal></argument>)</argument_list></macro>
</unit>
