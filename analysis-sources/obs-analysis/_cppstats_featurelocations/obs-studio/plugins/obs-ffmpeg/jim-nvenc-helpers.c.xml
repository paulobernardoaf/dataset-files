<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-ffmpeg\jim-nvenc-helpers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jim-nvenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>nvenc_lib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>init_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name></type> <name>nv</name> <init>= <expr><block>{<expr><name>NV_ENCODE_API_FUNCTION_LIST_VER</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NV_CREATE_INSTANCE_FUNC</name></type> <name>nv_create_instance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(LOG_ERROR, "[jim-nvenc] " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>nv_failed</name><parameter_list>(<parameter><decl><type><name>NVENCSTATUS</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: %s failed: %d (%s)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>,
<argument><expr><call><name>nv_error_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_FAILED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nv_failed(x, __FUNCTION__, #x)</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>load_nvenc_lib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nvenc_lib</name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><literal type="string">"nvEncodeAPI64.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nvenc_lib</name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><literal type="string">"nvEncodeAPI.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>nvenc_lib</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>load_nv_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func_ptr</name> <init>= <expr><call><name>os_dlsym</name><argument_list>(<argument><expr><name>nvenc_lib</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Could not load function: %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>func_ptr</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type>(<name>NVENCAPI</name> <modifier>*</modifier><name>NV_MAX_VER_FUNC</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nv_error_name</name><parameter_list>(<parameter><decl><type><name>NVENCSTATUS</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_CASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case x: return #x</cpp:value></cpp:define>



<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_NO_ENCODE_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_UNSUPPORTED_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_ENCODERDEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_DEVICE_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_ENCODER_NOT_INITIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_UNSUPPORTED_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_LOCK_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_NOT_ENOUGH_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INVALID_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_MAP_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_NEED_MORE_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_ENCODER_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_EVENT_NOT_REGISTERD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_GENERIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_INCOMPATIBLE_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_UNIMPLEMENTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_RESOURCE_REGISTER_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_RESOURCE_NOT_REGISTERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_CASE</name><argument_list>(<argument><expr><name>NV_ENC_ERR_RESOURCE_NOT_MAPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN_CASE</name></cpp:undef>

<return>return <expr><literal type="string">"Unknown Error"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_nvenc_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>success</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>NV_MAX_VER_FUNC</name></type> <name>nv_max_ver</name> <init>= <expr><operator>(</operator><name>NV_MAX_VER_FUNC</name><operator>)</operator><call><name>load_nv_func</name><argument_list>(
<argument><expr><literal type="string">"NvEncodeAPIGetMaxSupportedVersion"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nv_max_ver</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NV_FAILED</name><argument_list>(<argument><expr><call><name>nv_max_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_ver</name> <init>= <expr><operator>(</operator><name>NVENCAPI_MAJOR_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<name>NVENCAPI_MINOR_VERSION</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_ver</name> <operator>&gt;</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Current driver version does not support this NVENC "</literal>
<literal type="string">"version, please upgrade your driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nv_create_instance</name> <operator>=</operator> <operator>(</operator><name>NV_CREATE_INSTANCE_FUNC</name><operator>)</operator><call><name>load_nv_func</name><argument_list>(
<argument><expr><literal type="string">"NvEncodeAPICreateInstance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nv_create_instance</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NV_FAILED</name><argument_list>(<argument><expr><call><name>nv_create_instance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>init_nvenc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>init_nvenc_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name></type> <name>nvenc_info</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>jim_nvenc_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_register_encoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvenc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jim_nvenc_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
