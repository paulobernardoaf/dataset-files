<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-ffmpeg\obs-ffmpeg-logging.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/log.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <macro><name>DARRAY</name><argument_list>(<argument>struct log_context {
void *context;
char str[<literal type="number">4096</literal>];
int print_prefix;
} *</argument>)</argument_list></macro> <name>active_log_contexts</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <macro><name>DARRAY</name><argument_list>(<argument>struct log_context *</argument>)</argument_list></macro> <name>cached_log_contexts</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>log_contexts_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>log_context</name></name> <modifier>*</modifier></type><name>create_or_fetch_log_context</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>active_log_contexts</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name><name>active_log_contexts</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>context</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>active_log_contexts</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>log_context</name></name> <modifier>*</modifier></type><name>new_log_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><name><name>cached_log_contexts</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_log_context</name> <operator>=</operator> <name><name>cached_log_contexts</name><operator>.</operator><name>array</name><index>[<expr><name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_pop_back</name><argument_list>(<argument><expr><name>cached_log_contexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_log_context</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_log_context</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>log_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_log_context</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_log_context</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_log_context</name><operator>-&gt;</operator><name>print_prefix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>active_log_contexts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_log_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_log_context</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_log_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>log_context</name></name> <modifier>*</modifier></type><name>log_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase_item</name><argument_list>(<argument><expr><name>active_log_contexts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>cached_log_contexts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffmpeg_log_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>log_context</name></name> <modifier>*</modifier></type><name>log_context</name> <init>= <expr><call><name>create_or_fetch_log_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>log_context</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_format_line</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>log_context</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>log_context</name><operator>-&gt;</operator><name>print_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obs_level</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_LOG_PANIC</name></expr>:</case>
<case>case <expr><name>AV_LOG_FATAL</name></expr>:</case>
<expr_stmt><expr><name>obs_level</name> <operator>=</operator> <name>LOG_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_LOG_ERROR</name></expr>:</case>
<case>case <expr><name>AV_LOG_WARNING</name></expr>:</case>
<expr_stmt><expr><name>obs_level</name> <operator>=</operator> <name>LOG_WARNING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_LOG_INFO</name></expr>:</case>
<case>case <expr><name>AV_LOG_VERBOSE</name></expr>:</case>
<expr_stmt><expr><name>obs_level</name> <operator>=</operator> <name>LOG_INFO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_LOG_DEBUG</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>obs_level</name> <operator>=</operator> <name>LOG_DEBUG</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>log_context</name><operator>-&gt;</operator><name>print_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_end</name> <init>= <expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>str</name> <operator>&lt;</operator> <name>str_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str_end</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>str_end</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>str_end</name> <operator>&lt;=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>obs_level</name></expr></argument>, <argument><expr><literal type="string">"[ffmpeg] %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>destroy_log_context</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>logging_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>obs_ffmpeg_load_logging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>active_log_contexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>cached_log_contexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>ffmpeg_log_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logging_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_ffmpeg_unload_logging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>logging_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>logging_initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>av_log_default_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_contexts_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>active_log_contexts</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>active_log_contexts</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cached_log_contexts</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cached_log_contexts</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>active_log_contexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>cached_log_contexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
