<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-ffmpeg\external\dynlink_cuda.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_COMPAT_DYNLINK_CUDA_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CUDA_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_COMPAT_DYNLINK_CUDA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUDA_VERSION</name></cpp:macro> <cpp:value>7050</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUDAAPI</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUDAAPI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CU_CTX_SCHED_BLOCKING_SYNC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>CUdevice</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>CUarray</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>CUcontext</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>CUstream</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>CUdeviceptr</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>CUdeviceptr</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>cudaError_enum</name> <block>{
<decl><name>CUDA_SUCCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block></enum></type> <name>CUresult</name>;</typedef>

<typedef>typedef <type><enum>enum <name>CUmemorytype_enum</name> <block>{
<decl><name>CU_MEMORYTYPE_HOST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CU_MEMORYTYPE_DEVICE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>CUmemorytype</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CUDA_MEMCPY2D_st</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>srcXInBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>srcY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUmemorytype</name></type> <name>srcMemoryType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>srcHost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>srcDevice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUarray</name></type> <name>srcArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>srcPitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dstXInBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dstY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUmemorytype</name></type> <name>dstMemoryType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dstHost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>dstDevice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUarray</name></type> <name>dstArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dstPitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>WidthInBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Height</name></decl>;</decl_stmt>
}</block></struct></type> <name>CUDA_MEMCPY2D</name>;</typedef>

<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuInit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>Flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuDeviceGetCount</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuDeviceGet</name><parameter_list>(<parameter><decl><type><name>CUdevice</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinal</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuDeviceGetName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CUdevice</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuDeviceComputeCapability</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>, <parameter><decl><type><name>CUdevice</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuCtxCreate_v2</name><parameter_list>(<parameter><decl><type><name>CUcontext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>CUdevice</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuCtxPushCurrent_v2</name><parameter_list>(<parameter><decl><type><name>CUcontext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuCtxPopCurrent_v2</name><parameter_list>(<parameter><decl><type><name>CUcontext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuCtxDestroy_v2</name><parameter_list>(<parameter><decl><type><name>CUcontext</name></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuMemAlloc_v2</name><parameter_list>(<parameter><decl><type><name>CUdeviceptr</name> <modifier>*</modifier></type><name>dptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesize</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuMemFree_v2</name><parameter_list>(<parameter><decl><type><name>CUdeviceptr</name></type> <name>dptr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuMemcpy2D_v2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CUDA_MEMCPY2D</name> <modifier>*</modifier></type><name>pcopy</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuGetErrorName</name><parameter_list>(<parameter><decl><type><name>CUresult</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pstr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>tcuGetErrorString</name><parameter_list>(<parameter><decl><type><name>CUresult</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pstr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
