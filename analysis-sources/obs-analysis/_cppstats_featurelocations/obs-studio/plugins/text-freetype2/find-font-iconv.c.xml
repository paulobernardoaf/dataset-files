<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\text-freetype2\find-font-iconv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"find-font.h"</cpp:file></cpp:include>

<struct>struct <name>mac_font_mapping</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>encoding_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>language_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code_page</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_MAC_LANGID_ANY</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>mac_font_mapping</name></name></type> <name><name>mac_codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ENGLISH</name></expr>, <expr><literal type="string">"macintosh"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ICELANDIC</name></expr>, <expr><literal type="string">"x-mac-icelandic"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_TURKISH</name></expr>, <expr><literal type="string">"x-mac-ce"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_POLISH</name></expr>, <expr><literal type="string">"x-mac-ce"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ROMANIAN</name></expr>, <expr><literal type="string">"x-mac-romanian"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_CZECH</name></expr>, <expr><literal type="string">"x-mac-ce"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_SLOVAK</name></expr>, <expr><literal type="string">"x-mac-ce"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"macintosh"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_JAPANESE</name></expr>, <expr><name>TT_MAC_LANGID_JAPANESE</name></expr>, <expr><literal type="string">"Shift_JIS"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_JAPANESE</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"Shift_JIS"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_KOREAN</name></expr>, <expr><name>TT_MAC_LANGID_KOREAN</name></expr>, <expr><literal type="string">"EUC-KR"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_KOREAN</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"EUC-KR"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_ARABIC</name></expr>, <expr><literal type="string">"x-mac-arabic"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_URDU</name></expr>, <expr><literal type="string">"x-mac-farsi"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_FARSI</name></expr>, <expr><literal type="string">"x-mac-farsi"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-arabic"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_HEBREW</name></expr>, <expr><name>TT_MAC_LANGID_HEBREW</name></expr>, <expr><literal type="string">"x-mac-hebrew"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_HEBREW</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-hebrew"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_GREEK</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-greek"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_RUSSIAN</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-cyrillic"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_DEVANAGARI</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-devanagari"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_GURMUKHI</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-gurmukhi"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_GUJARATI</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"x-mac-gujarati"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_TRADITIONAL_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_CHINESE_SIMPLIFIED</name></expr>,
<expr><literal type="string">"Big5"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_TRADITIONAL_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"Big5"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_SIMPLIFIED_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_CHINESE_SIMPLIFIED</name></expr>,
<expr><literal type="string">"GB2312"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_SIMPLIFIED_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="string">"GB2312"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>iso_codes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"us-ascii"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"iso-8859-1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ms_codes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"UTF-16BE"</literal></expr>, <expr><literal type="string">"UTF-16BE"</literal></expr>, <expr><literal type="string">"Shift_JIS"</literal></expr>, <expr><name>NULL</name></expr>,
<expr><literal type="string">"Big5"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"UTF-16BE"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>mac_code_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mac_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mac_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>iso_code_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>iso_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>ms_code_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ms_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ms_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_mac_code</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>encoding_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>language_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mac_code_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mac_font_mapping</name></name> <modifier>*</modifier></type><name>mac_code</name> <init>= <expr><operator>&amp;</operator><name><name>mac_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mac_code</name><operator>-&gt;</operator><name>encoding_id</name></name> <operator>==</operator> <name>encoding_id</name> <operator>&amp;&amp;</operator>
<name><name>mac_code</name><operator>-&gt;</operator><name>language_id</name></name> <operator>==</operator> <name>language_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>mac_code</name><operator>-&gt;</operator><name>code_page</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_code_page_for_font</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>encoding_id</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>language_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>platform_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TT_PLATFORM_APPLE_UNICODE</name></expr>:</case>
<return>return <expr><literal type="string">"UTF-16BE"</literal></expr>;</return>
<case>case <expr><name>TT_PLATFORM_MACINTOSH</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_mac_code</name><argument_list>(<argument><expr><name>encoding_id</name></expr></argument>, <argument><expr><name>language_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_mac_code</name><argument_list>(<argument><expr><name>encoding_id</name></expr></argument>, <argument><expr><name>TT_MAC_LANGID_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<case>case <expr><name>TT_PLATFORM_ISO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>encoding_id</name> <operator>&lt;</operator> <name>iso_code_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>iso_codes</name><index>[<expr><name>encoding_id</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TT_PLATFORM_MICROSOFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>encoding_id</name> <operator>&lt;</operator> <name>ms_code_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ms_codes</name><index>[<expr><name>encoding_id</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>sfnt_name_to_utf8</name><parameter_list>(<parameter><decl><type><name>FT_SfntName</name> <modifier>*</modifier></type><name>sfnt_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><call><name>get_code_page_for_font</name><argument_list>(<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>platform_id</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>encoding_id</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>language_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conv_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>conv_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_len</name></decl>, <decl><type ref="prev"/><name>out_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>charset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"invalid character set found, "</literal>
<literal type="string">"platform_id: %d, encoding_id: %d, "</literal>
<literal type="string">"language_id: %d"</literal></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>platform_id</name></name></expr></argument>, <argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>encoding_id</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>language_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>iconv_t</name></type> <name>ic</name> <init>= <expr><call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ic</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"couldn't intialize font code page "</literal>
<literal type="string">"conversion: '%s' to 'utf-8': errno = %d"</literal></expr></argument>,
<argument><expr><name>charset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>conv_in</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sfnt_name</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>conv_out</name> <operator>=</operator> <name>utf8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_len</name> <operator>=</operator> <name><name>sfnt_name</name><operator>-&gt;</operator><name>string_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>iconv</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"couldn't convert font name text: errno = %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>conv_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
