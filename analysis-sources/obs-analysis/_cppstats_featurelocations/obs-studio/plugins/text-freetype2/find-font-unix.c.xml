<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\text-freetype2\find-font-unix.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontconfig/fontconfig.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"find-font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text-freetype2.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>free_os_font_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>bool</name></type> <name>load_cached_os_font_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_os_font_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_font_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>family</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>FT_Long</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>bold</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OBS_FONT_BOLD</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>italic</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OBS_FONT_ITALIC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcPattern</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>FcPatternCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcPattern</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcResult</name></type> <name>match_result</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>char</name></type> <name><name>result</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>FcChar8</name> <operator>*</operator><operator>)</operator><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_STYLE</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>FcChar8</name> <operator>*</operator><operator>)</operator><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddInteger</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_WEIGHT</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name>FC_WEIGHT_BOLD</name></expr> </then><else>: <expr><name>FC_WEIGHT_REGULAR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddInteger</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_SLANT</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>italic</name></expr> ?</condition><then> <expr><name>FC_SLANT_ITALIC</name></expr> </then><else>: <expr><name>FC_SLANT_ROMAN</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddDouble</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FcConfigSubstitute</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FcMatchPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcDefaultSubstitute</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>FcFontMatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FcChar8</name> <modifier>*</modifier></type><name>path</name> <init>=
<expr><call><name>FcPatternFormat</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>FcChar8</name> <operator>*</operator><operator>)</operator><literal type="string">"%{file}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><literal type="number">511</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcStrFree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fc_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FcPatternGetInteger</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>FC_INDEX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>(</operator><name>FT_Long</name><operator>)</operator><name>fc_index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"no matching font for '%s' found"</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
