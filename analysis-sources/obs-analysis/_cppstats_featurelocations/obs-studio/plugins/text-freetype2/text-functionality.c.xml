<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\text-freetype2\text-functionality.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text-freetype2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-convenience.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>float</name></type> <name><name>offsets</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">2.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><operator>-</operator><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>texbuf_w</name></decl>, <decl><type ref="prev"/><name>texbuf_h</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>draw_outlines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>vdata</name> <init>= <expr><call><name>gs_vertexbuffer_get_data</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_translate3f</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_uv_vbuffer</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name></expr></argument>,
<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_matrix_identity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>draw_drop_shadow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>vdata</name> <init>= <expr><call><name>gs_vertexbuffer_get_data</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_translate3f</name><argument_list>(<argument><expr><literal type="number">4.0f</literal></expr></argument>, <argument><expr><literal type="number">4.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_uv_vbuffer</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_identity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_up_vertex_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FT_UInt</name></type> <name>glyph_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>space_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>word_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <call><name>get_ft2_text_width</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>tmpvbuf</name> <init>= <expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_vertexbuffer_destroy</name><argument_list>(<argument><expr><name>tmpvbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name> <operator>=</operator>
<call><name>create_uv_vbuffer</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_word_wrap</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>word_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_word_wrap</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>eos_check</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_char</name>;</goto></block_content></block></if></if_stmt>

<label><name>eos_check</name>:</label><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>word_width</name> <operator>&gt;</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>space_pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>space_pos</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>eos_skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>word_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>space_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>next_char</name>:</label><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>glyph_index</name> <operator>=</operator>
<call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word_width</name> <operator>+=</operator> <name><name>src_glyph</name><operator>-&gt;</operator><name>xadv</name></name></expr>;</expr_stmt>
<label><name>eos_skip</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<label><name>skip_word_wrap</name>:</label><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>fill_vertex_buffer</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fill_vertex_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>vdata</name> <init>= <expr><call><name>gs_vertexbuffer_get_data</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vdata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>tvarray</name> <init>= <expr><operator>(</operator>struct <name>vec2</name> <operator>*</operator><operator>)</operator><name><name>vdata</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>vdata</name><operator>-&gt;</operator><name>colors</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_UInt</name></type> <name>glyph_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dy</name> <init>= <expr><name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name></expr></init></decl>, <decl><type ref="prev"/><name>max_y</name> <init>= <expr><name>dy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_glyph</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name> <operator>=</operator>
<call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF000000</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<label><name>add_linebreak</name>:</label><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>draw_glyph</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>+=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_glyph</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>add_linebreak</name>;</goto></block_content></block></if></if_stmt>
<label><name>draw_glyph</name>:</label><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_glyph</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glyph_index</name> <operator>=</operator>
<call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_glyph</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_glyph</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_custom_width</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>+</operator> <name><name>src_glyph</name><operator>-&gt;</operator><name>xadv</name></name> <operator>&gt;</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>+=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>skip_custom_width</name>:</label><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>set_v3_rect</name><argument_list>(<argument><expr><name><name>vdata</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <operator>(</operator><name>cur_glyph</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>dx</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>src_glyph</name><operator>-&gt;</operator><name>xoff</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>dy</name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>src_glyph</name><operator>-&gt;</operator><name>yoff</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>src_glyph</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>src_glyph</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_v2_uv</name><argument_list>(<argument><expr><name>tvarray</name> <operator>+</operator> <operator>(</operator><name>cur_glyph</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>u</name></name></expr></argument>, <argument><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>v</name></name></expr></argument>,
<argument><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>u2</name></name></expr></argument>, <argument><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_rect_colors2</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <operator>(</operator><name>cur_glyph</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>+=</operator> <name><name>src_glyph</name><operator>-&gt;</operator><name>xadv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>src_glyph</name><operator>-&gt;</operator><name>yoff</name></name> <operator>+</operator> <name><name>src_glyph</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <name>max_y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_y</name> <operator>=</operator> <name>dy</name> <operator>-</operator> <name><name>src_glyph</name><operator>-&gt;</operator><name>yoff</name></name> <operator>+</operator> <name><name>src_glyph</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cur_glyph</name><operator>++</operator></expr>;</expr_stmt>
<label><name>skip_glyph</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name>max_y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cache_standard_glyphs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_cache_slots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>cacheglyphs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cacheglyphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cacheglyphs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cache_glyphs</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><literal type="string">L"abcdefghijklmnopqrstuvwxyz"</literal>
<literal type="string">L"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"</literal>
<literal type="string">L"!@#$%^&amp;*()-_=+,&lt;.&gt;/?\\|[]{}`~ \'\"\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glyph_pos</name></cpp:macro> <cpp:value>x + (y * slot-&gt;bitmap.pitch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buf_pos</name></cpp:macro> <cpp:value>(dx + x) + ((dy + y) * texbuf_w)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>cache_glyphs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cache_glyphs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FT_GlyphSlot</name></type> <name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_UInt</name></type> <name>glyph_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name> <operator>||</operator> <operator>!</operator><name>cache_glyphs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name><operator>-&gt;</operator><name>glyph</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dx</name> <init>= <expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf_x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>dy</name> <init>= <expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cached_glyphs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>cache_glyphs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>glyph_index</name> <operator>=</operator>
<call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name><name>cache_glyphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_glyph</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_glyph</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FT_Load_Glyph</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><name>FT_LOAD_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Render_Glyph</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>FT_RENDER_MODE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>g_w</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>g_h</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name> <operator>&lt;</operator> <name>g_h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name> <operator>=</operator> <name>g_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>+</operator> <name>g_w</name> <operator>&gt;=</operator> <name>texbuf_w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>+=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>+</operator> <name>g_h</name> <operator>&gt;=</operator> <name>texbuf_h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Out of space trying to render glyphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_glyph</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>glyph_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>dx</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>texbuf_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>u2</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>dx</name> <operator>+</operator> <name>g_w</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>texbuf_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>dy</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>texbuf_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>dy</name> <operator>+</operator> <name>g_h</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>texbuf_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>g_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>g_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>yoff</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>bitmap_top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>xoff</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>bitmap_left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_glyph</name><operator>-&gt;</operator><name>xadv</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>g_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>g_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name><index>[<expr><name>buf_pos</name></expr>]</index></name> <operator>=</operator>
<name><name>slot</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name><index>[<expr><name>glyph_pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>dx</name> <operator>+=</operator> <operator>(</operator><name>g_w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&gt;=</operator> <name>texbuf_w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>+=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cached_glyphs</name><operator>++</operator></expr>;</expr_stmt>
<label><name>skip_glyph</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf_x</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf_y</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cached_glyphs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tmp_texture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp_texture</name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name>tmp_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(
<argument><expr><name>texbuf_w</name></expr></argument>, <argument><expr><name>texbuf_h</name></expr></argument>, <argument><expr><name>GS_A8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>get_modified_timestamp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stats</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>os_stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>stats</name><operator>.</operator><name>st_mtime</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_cr</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>source</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_text_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>tmp_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_read</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>file_load_failed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>file_load_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filesize</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ftell</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>header</name> <operator>==</operator> <literal type="number">0xFEFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>filesize</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_read</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>filesize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,
<argument><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_cr</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_from_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>tmp_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>log_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_read</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>line_breaks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>bvalue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>utf16</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>file_load_failed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>file_load_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <literal type="number">0xFEFF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>utf16</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filesize</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ftell</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <name>filesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_lines</name> <operator>=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>log_lines</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>line_breaks</name> <operator>&lt;=</operator> <name>log_lines</name> <operator>&amp;&amp;</operator> <name>cur_pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_pos</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bvalue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bvalue</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_breaks</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_breaks</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cur_pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>utf16</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>utf16</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>filesize</name> <operator>-</operator> <name>cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator>
<call><name>fread</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>(</operator><name>filesize</name> <operator>-</operator> <name>cur_pos</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_cr</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_read</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><operator>(</operator><name>filesize</name> <operator>-</operator> <name>cur_pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>, <argument><expr><name>filesize</name> <operator>-</operator> <name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,
<argument><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_cr</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>tmp_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>get_ft2_text_width</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FT_GlyphSlot</name></type> <name>slot</name> <init>= <expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name><operator>-&gt;</operator><name>glyph</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_UInt</name></type> <name>glyph_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>glyph_index</name> <operator>=</operator> <call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Load_Glyph</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><name>FT_LOAD_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>slot</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <name>max_w</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_w</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>max_w</name></expr>;</return>
</block_content>}</block></function>
</unit>
