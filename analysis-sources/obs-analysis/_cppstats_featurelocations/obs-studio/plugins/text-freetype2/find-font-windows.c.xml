<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\text-freetype2\find-font-windows.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/crc32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"find-font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text-freetype2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>

<extern>extern DARRAY(struct font_path_info</extern>) <expr_stmt><expr><name>font_list</name></expr>;</expr_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>save_font_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>mac_font_mapping</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>encoding_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>language_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_page</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_MAC_LANGID_ANY</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>mac_font_mapping</name></name></type> <name><name>mac_codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ENGLISH</name></expr>, <expr><literal type="number">10000</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ICELANDIC</name></expr>, <expr><literal type="number">10079</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_TURKISH</name></expr>, <expr><literal type="number">10081</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_POLISH</name></expr>, <expr><literal type="number">10029</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ROMANIAN</name></expr>, <expr><literal type="number">10010</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_CZECH</name></expr>, <expr><literal type="number">10029</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_SLOVAK</name></expr>, <expr><literal type="number">10029</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ROMAN</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">10000</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_JAPANESE</name></expr>, <expr><name>TT_MAC_LANGID_JAPANESE</name></expr>, <expr><literal type="number">932</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_JAPANESE</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">932</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_TRADITIONAL_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_CHINESE_SIMPLIFIED</name></expr>, <expr><literal type="number">950</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_TRADITIONAL_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">950</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_KOREAN</name></expr>, <expr><name>TT_MAC_LANGID_KOREAN</name></expr>, <expr><literal type="number">51949</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_KOREAN</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">51949</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_ARABIC</name></expr>, <expr><literal type="number">10004</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_URDU</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_FARSI</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_ARABIC</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">10004</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_HEBREW</name></expr>, <expr><name>TT_MAC_LANGID_HEBREW</name></expr>, <expr><literal type="number">10005</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_HEBREW</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">10005</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_GREEK</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">10006</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_RUSSIAN</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">10007</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_DEVANAGARI</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_GURMUKHI</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_GUJARATI</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_SIMPLIFIED_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_CHINESE_SIMPLIFIED</name></expr>, <expr><literal type="number">936</literal></expr>}</block></expr>,
<expr><block>{<expr><name>TT_MAC_ID_SIMPLIFIED_CHINESE</name></expr>, <expr><name>TT_MAC_LANGID_ANY</name></expr>, <expr><literal type="number">936</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>iso_codes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">20127</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">28591</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>ms_codes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1201</literal></expr>, <expr><literal type="number">1201</literal></expr>, <expr><literal type="number">932</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">950</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1201</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>mac_code_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mac_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mac_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>iso_code_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>iso_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>ms_code_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ms_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ms_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_mac_code</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>encoding_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>language_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mac_code_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mac_font_mapping</name></name> <modifier>*</modifier></type><name>mac_code</name> <init>= <expr><operator>&amp;</operator><name><name>mac_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mac_code</name><operator>-&gt;</operator><name>encoding_id</name></name> <operator>==</operator> <name>encoding_id</name> <operator>&amp;&amp;</operator>
<name><name>mac_code</name><operator>-&gt;</operator><name>language_id</name></name> <operator>==</operator> <name>language_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>mac_code</name><operator>-&gt;</operator><name>code_page</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_code_page_for_font</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>encoding_id</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>language_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>platform_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TT_PLATFORM_APPLE_UNICODE</name></expr>:</case>
<return>return <expr><literal type="number">1201</literal></expr>;</return>
<case>case <expr><name>TT_PLATFORM_MACINTOSH</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_mac_code</name><argument_list>(<argument><expr><name>encoding_id</name></expr></argument>, <argument><expr><name>language_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_mac_code</name><argument_list>(<argument><expr><name>encoding_id</name></expr></argument>, <argument><expr><name>TT_MAC_LANGID_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<case>case <expr><name>TT_PLATFORM_ISO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>encoding_id</name> <operator>&lt;</operator> <name>iso_code_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>iso_codes</name><index>[<expr><name>encoding_id</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TT_PLATFORM_MICROSOFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>encoding_id</name> <operator>&lt;</operator> <name>ms_code_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ms_codes</name><index>[<expr><name>encoding_id</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>wide_to_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf8_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>utf8_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utf8_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>utf8_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>utf8_str</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>utf8_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf8_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>utf8_str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>convert_utf16_be_to_utf8</name><parameter_list>(<parameter><decl><type><name>FT_SfntName</name> <modifier>*</modifier></type><name>sfnt_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16_len</name> <init>= <expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>string_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>utf16_str</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>utf16_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>utf16_str</name><index>[<expr><name>utf16_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>utf16_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>ch</name> <init>= <expr><operator>*</operator><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sfnt_name</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>utf16_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>wide_to_utf8</name><argument_list>(<argument><expr><name>utf16_str</name></expr></argument>, <argument><expr><name>utf16_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf16_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>utf8_str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>sfnt_name_to_utf8</name><parameter_list>(<parameter><decl><type><name>FT_SfntName</name> <modifier>*</modifier></type><name>sfnt_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_page</name> <init>= <expr><call><name>get_code_page_for_font</name><argument_list>(<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>platform_id</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>encoding_id</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>language_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>utf16_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code_page</name> <operator>==</operator> <literal type="number">1201</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>convert_utf16_be_to_utf8</name><argument_list>(<argument><expr><name>sfnt_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code_page</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>utf16_len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>code_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sfnt_name</name><operator>-&gt;</operator><name>string</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>string_len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utf16_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>utf16_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>utf16_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf16_len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>code_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sfnt_name</name><operator>-&gt;</operator><name>string</name></name></expr></argument>,
<argument><expr><name><name>sfnt_name</name><operator>-&gt;</operator><name>string_len</name></name></expr></argument>,
<argument><expr><name>utf16_str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>utf16_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>utf16_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>utf16_str</name><index>[<expr><name>utf16_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>wide_to_utf8</name><argument_list>(<argument><expr><name>utf16_str</name></expr></argument>, <argument><expr><name>utf16_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf16_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>utf8_str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>get_font_checksum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>checksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAA</name></type> <name>wfd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>res</name> <init>= <expr><call><name>SHGetFolderPathA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CSIDL_FONTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Error finding windows font folder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\*.*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>FindFirstFileA</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_string</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>calc_crc32</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILETIME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>calc_crc32</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name><name>wfd</name><operator>.</operator><name>cFileName</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>cFileName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>FindNextFileA</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>free_string</name>:</label>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>checksum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_os_font_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAA</name></type> <name>wfd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>res</name> <init>= <expr><call><name>SHGetFolderPathA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CSIDL_FONTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Error finding windows font folder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\*.*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>FindFirstFileA</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_string</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>full_path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Long</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Long</name></type> <name>max_faces</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wfd</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_path</name></expr></argument>, <argument><expr><name><name>wfd</name><operator>.</operator><name>cFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>max_faces</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FT_Error</name></type> <name>ret</name> <init>= <expr><call><name>FT_New_Face</name><argument_list>(<argument><expr><name>ft2_lib</name></expr></argument>, <argument><expr><name><name>full_path</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>face</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>build_font_path_info</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name><name>full_path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_faces</name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>num_faces</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name>face</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>FindNextFileA</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_font_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>free_string</name>:</label>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
