<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\vlc-video\vlc-video-source.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc-video-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;media-io/video-frame.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[vlc_source: '%s'] " format, obs_source_get_name(ss-&gt;source), ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PLAYLIST</name></cpp:macro> <cpp:value>"playlist"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_LOOP</name></cpp:macro> <cpp:value>"loop"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SHUFFLE</name></cpp:macro> <cpp:value>"shuffle"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR</name></cpp:macro> <cpp:value>"playback_behavior"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR_STOP_RESTART</name></cpp:macro> <cpp:value>"stop_restart"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR_PAUSE_UNPAUSE</name></cpp:macro> <cpp:value>"pause_unpause"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR_ALWAYS_PLAY</name></cpp:macro> <cpp:value>"always_play"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_NETWORK_CACHING</name></cpp:macro> <cpp:value>"network_caching"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_TRACK</name></cpp:macro> <cpp:value>"track"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SUBTITLE_ENABLE</name></cpp:macro> <cpp:value>"subtitle_enable"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SUBTITLE_TRACK</name></cpp:macro> <cpp:value>"subtitle"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_</name><parameter_list>(<parameter><type><name>text</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_module_text(text)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_PLAYLIST</name></cpp:macro> <cpp:value>T_("Playlist")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LOOP</name></cpp:macro> <cpp:value>T_("LoopPlaylist")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SHUFFLE</name></cpp:macro> <cpp:value>T_("shuffle")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR</name></cpp:macro> <cpp:value>T_("PlaybackBehavior")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR_STOP_RESTART</name></cpp:macro> <cpp:value>T_("PlaybackBehavior.StopRestart")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR_PAUSE_UNPAUSE</name></cpp:macro> <cpp:value>T_("PlaybackBehavior.PauseUnpause")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR_ALWAYS_PLAY</name></cpp:macro> <cpp:value>T_("PlaybackBehavior.AlwaysPlay")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NETWORK_CACHING</name></cpp:macro> <cpp:value>T_("NetworkCaching")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TRACK</name></cpp:macro> <cpp:value>T_("AudioTrack")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SUBTITLE_ENABLE</name></cpp:macro> <cpp:value>T_("SubtitleEnable")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SUBTITLE_TRACK</name></cpp:macro> <cpp:value>T_("SubtitleTrack")</cpp:value></cpp:define>





<struct>struct <name>media_file_data</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>behavior</name> <block>{
<decl><name>BEHAVIOR_STOP_RESTART</name></decl>,
<decl><name>BEHAVIOR_PAUSE_UNPAUSE</name></decl>,
<decl><name>BEHAVIOR_ALWAYS_PLAY</name></decl>,
}</block>;</enum>

<struct>struct <name>vlc_source</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>media_player</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>media_list_player</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio</name></name></type> <name>audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>audio_capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>behavior</name></name></type> <name>behavior</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>shuffle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>play_pause_hotkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>restart_hotkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>stop_hotkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>playlist_next_hotkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>playlist_prev_hotkey</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>get_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_path</name> <init>= <expr><name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cur_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>media</name> <operator>=</operator> <name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>media</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_retain_</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>media</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>create_media_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>file</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>libvlc_media_new_location_</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>libvlc_media_new_path_</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release_</name><argument_list>(<argument><expr><name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>chroma_is</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chroma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>chroma</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>video_format</name></name></type> <name>convert_vlc_video_format</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>chroma</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>full</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_TEST</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (chroma_is(chroma, val)) return ret</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_CONV</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>new_val</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (chroma_is(chroma, val)) { *(uint32_t *)chroma = *(uint32_t *)new_val; return ret; } } while (false)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_CONV_FULL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>new_val</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { *full = true; CHROMA_CONV(val, new_val, ret); } while (false)</cpp:value></cpp:define>





<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"RGBA"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"BGRA"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_BGRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"I420"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_I420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"IYUV"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_I420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"NV21"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"I422"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"Y42B"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"YV12"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"yv12"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHROMA_CONV_FULL</name><argument_list>(<argument><expr><literal type="string">"J420"</literal></expr></argument>, <argument><expr><literal type="string">"J420"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_I420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"UYNV"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"UYNY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"Y422"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"HDYC"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"AVUI"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"uyv1"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"2vuy"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"2Vuy"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"2Vu1"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"YUY2"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_YUY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"YUYV"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_YUY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"YUNV"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_YUY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"V422"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_YUY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"YVYU"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_YVYU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"v210"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"cyuv"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"CYUV"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"VYUY"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"NV16"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"NV61"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"I410"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"I422"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"Y42B"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"J422"</literal></expr></argument>, <argument><expr><literal type="string">"UYVY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"I444"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_I444</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV_FULL</name><argument_list>(<argument><expr><literal type="string">"J444"</literal></expr></argument>, <argument><expr><literal type="string">"RGBA"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"YUVA"</literal></expr></argument>, <argument><expr><literal type="string">"RGBA"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"I440"</literal></expr></argument>, <argument><expr><literal type="string">"I444"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_I444</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"J440"</literal></expr></argument>, <argument><expr><literal type="string">"I444"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_I444</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"YVU9"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"I410"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"I411"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_CONV</name><argument_list>(<argument><expr><literal type="string">"Y41B"</literal></expr></argument>, <argument><expr><literal type="string">"NV12"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"GREY"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_Y800</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"Y800"</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_Y800</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_TEST</name><argument_list>(<argument><expr><literal type="string">"Y8 "</literal></expr></argument>, <argument><expr><name>VIDEO_FORMAT_Y800</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_CONV_FULL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_CONV</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_TEST</name></cpp:undef>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>chroma</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><literal type="string">"BGRA"</literal></expr>;</expr_stmt>
<return>return <expr><name>VIDEO_FORMAT_BGRA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>get_format_lines</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plane</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>height</name></expr> </then><else>: <expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<return>return <expr><name>height</name></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>audio_format</name></name></type> <name>convert_vlc_audio_format</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_TEST</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (chroma_is(format, val)) return ret</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_CONV</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>new_val</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (chroma_is(format, val)) { *(uint32_t *)format = *(uint32_t *)new_val; return ret; } } while (false)</cpp:value></cpp:define>







<expr_stmt><expr><call><name>AUDIO_TEST</name><argument_list>(<argument><expr><literal type="string">"S16N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_16BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_TEST</name><argument_list>(<argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_TEST</name><argument_list>(<argument><expr><literal type="string">"FL32"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"U16N"</literal></expr></argument>, <argument><expr><literal type="string">"S16N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_16BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"U32N"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"S24N"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"U24N"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"FL64"</literal></expr></argument>, <argument><expr><literal type="string">"FL32"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"S16I"</literal></expr></argument>, <argument><expr><literal type="string">"S16N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_16BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"U16I"</literal></expr></argument>, <argument><expr><literal type="string">"S16N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_16BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"S24I"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"U24I"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"S32I"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUDIO_CONV</name><argument_list>(<argument><expr><literal type="string">"U32I"</literal></expr></argument>, <argument><expr><literal type="string">"S32N"</literal></expr></argument>, <argument><expr><name>AUDIO_FORMAT_32BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AUDIO_CONV</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AUDIO_TEST</name></cpp:undef>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>format</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><literal type="string">"FL32"</literal></expr>;</expr_stmt>
<return>return <expr><name>AUDIO_FORMAT_FLOAT</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlcs_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"VLCSource"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_stop_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_player_release_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_player_release_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlcs_video_lock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>planes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_video_display</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>libvlc_clock_</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000ULL</literal> <operator>-</operator> <name>time_start</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_output_video</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>vlcs_video_format</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>chroma</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pitches</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>*</operator><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>new_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>new_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>new_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>new_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_format</name> <operator>=</operator> <call><name>convert_vlc_video_format</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>libvlc_video_get_size_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_width</name> <operator>&amp;&amp;</operator> <name>new_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>new_width</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>new_height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>new_format</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <operator>*</operator><name>width</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <operator>*</operator><name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_frame_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>new_format</name></expr></argument>, <argument><expr><operator>*</operator><name>width</name></expr></argument>, <argument><expr><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>new_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>full_range</name></name> <operator>=</operator> <name>new_range</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>full_range</name></name></expr> ?</condition><then> <expr><name>VIDEO_RANGE_FULL</name></expr>
</then><else>: <expr><name>VIDEO_RANGE_PARTIAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_get_parameters</name><argument_list>(<argument><expr><name>VIDEO_CS_DEFAULT</name></expr></argument>, <argument><expr><name>range</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>color_matrix</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>color_range_min</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>color_range_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_format_lines</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><operator>*</operator><name>height</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_audio_play</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>get_audio_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>speakers</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>audio_capacity</name></name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>brealloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_capacity</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pts</name> <operator>*</operator> <literal type="number">1000ULL</literal> <operator>-</operator> <name>time_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_output_audio</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlcs_audio_setup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>*</operator><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>new_audio_format</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_audio_format</name> <operator>=</operator> <call><name>convert_vlc_audio_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>new_audio_format</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>samples_per_sec</name></name> <operator>==</operator> <operator>*</operator><name>rate</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>speakers</name></name> <operator>==</operator> <operator>(</operator>enum <name>speaker_layout</name><operator>)</operator> <operator>*</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <operator>(</operator>enum <name>speaker_layout</name><operator>)</operator> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <operator>*</operator><name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>new_audio_format</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>network_caching</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>track_index</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>subtitle_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>subtitle_enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>new_files</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>media_file_data</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>new_path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>new_media</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_url</name> <init>= <expr><name>path</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_url</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>new_path</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_media</name> <operator>=</operator> <call><name>get_media</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_media</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_media</name> <operator>=</operator> <call><name>get_media</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_media</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_media</name> <operator>=</operator> <call><name>create_media_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_media</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_url</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>network_caching_option</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>network_caching_option</name></expr></argument>,
<argument><expr><literal type="string">":network-caching=%d"</literal></expr></argument>, <argument><expr><name>network_caching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_add_option_</name><argument_list>(<argument><expr><name>new_media</name></expr></argument>,
<argument><expr><name><name>network_caching_option</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>network_caching_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>track_option</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>track_option</name></expr></argument>, <argument><expr><literal type="string">":audio-track=%d"</literal></expr></argument>, <argument><expr><name>track_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_add_option_</name><argument_list>(<argument><expr><name>new_media</name></expr></argument>, <argument><expr><name><name>track_option</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>track_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>sub_option</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>subtitle_enable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub_option</name></expr></argument>, <argument><expr><literal type="string">":sub-track=%d"</literal></expr></argument>,
<argument><expr><name>subtitle_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>libvlc_media_add_option_</name><argument_list>(<argument><expr><name>new_media</name></expr></argument>, <argument><expr><name><name>sub_option</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>new_path</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>media</name></name> <operator>=</operator> <name>new_media</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>array</name> <operator>=</operator> <name><name>new_files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valid_extension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>test</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>EXTENSIONS_MEDIA</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_ncopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dstr_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>new_files</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>old_files</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>media_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>behavior</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>network_caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>track_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subtitle_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>subtitle_enable</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>old_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>obs_data_get_array</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_PLAYLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>obs_data_array_count</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>behavior</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_BEHAVIOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>network_caching</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_NETWORK_CACHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>track_index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_TRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subtitle_index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SUBTITLE_TRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subtitle_enable</name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SUBTITLE_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>, <argument><expr><name>S_BEHAVIOR_PAUSE_UNPAUSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>BEHAVIOR_PAUSE_UNPAUSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>, <argument><expr><name>S_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>BEHAVIOR_ALWAYS_PLAY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>BEHAVIOR_STOP_RESTART</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>obs_data_array_item</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_dir_t</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>os_opendir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dir_path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>os_dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>os_readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>directory</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>os_get_path_extension</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_extension</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_file</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name><name>dir_path</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name>network_caching</name></expr></argument>, <argument><expr><name>track_index</name></expr></argument>,
<argument><expr><name>subtitle_index</name></expr></argument>, <argument><expr><name>subtitle_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>add_file</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>network_caching</name></expr></argument>,
<argument><expr><name>track_index</name></expr></argument>, <argument><expr><name>subtitle_index</name></expr></argument>, <argument><expr><name>subtitle_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>libvlc_media_list_player_stop_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <name><name>new_files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>shuffle</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SHUFFLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>shuffle</name></name></expr>)</condition> <block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct media_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>new_files</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>size_t</argument>)</argument_list></macro> <expr_stmt><expr><name>idxs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>idxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name>idxs</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>idxs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>idxs</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>val</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>idxs</name><operator>.</operator><name>array</name><index>[<expr><name>val</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name>idxs</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>idxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <name><name>new_files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>free_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_files</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>media_list</name> <operator>=</operator> <call><name>libvlc_media_list_new_</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_lock_</name><argument_list>(<argument><expr><name>media_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_list_add_media_</name><argument_list>(<argument><expr><name>media_list</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>libvlc_media_list_unlock_</name><argument_list>(<argument><expr><name>media_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>,
<argument><expr><name>media_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_release_</name><argument_list>(<argument><expr><name>media_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_playback_mode_</name><argument_list>(
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr> ?</condition><then> <expr><name>libvlc_playback_mode_loop</name></expr>
</then><else>: <expr><name>libvlc_playback_mode_default</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_ALWAYS_PLAY</name> <operator>||</operator>
<call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_play_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_output_video</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_started</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>libvlc_event_t</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_source_media_started</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_stopped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>libvlc_event_t</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_output_video</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_media_ended</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>obs_media_state</name></name></type> <name>vlcs_get_state</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_state_t</name></type> <name>state</name> <init>= <expr><call><name>libvlc_media_player_get_state_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>libvlc_NothingSpecial</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_NONE</name></expr>;</return>
<case>case <expr><name>libvlc_Opening</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_OPENING</name></expr>;</return>
<case>case <expr><name>libvlc_Buffering</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_BUFFERING</name></expr>;</return>
<case>case <expr><name>libvlc_Playing</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_PLAYING</name></expr>;</return>
<case>case <expr><name>libvlc_Paused</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_PAUSED</name></expr>;</return>
<case>case <expr><name>libvlc_Stopped</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_STOPPED</name></expr>;</return>
<case>case <expr><name>libvlc_Ended</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_ENDED</name></expr>;</return>
<case>case <expr><name>libvlc_Error</name></expr>:</case>
<return>return <expr><name>OBS_MEDIA_STATE_ERROR</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_play_pause</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_pause_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_play_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_restart</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_stop_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_player_play_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_stop_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_output_video</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_playlist_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_next_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_playlist_prev</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_previous_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>vlcs_get_duration</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>libvlc_media_player_get_length_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>vlcs_get_time</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>libvlc_media_player_get_time_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_set_time</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_set_time_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>, <argument><expr><operator>(</operator><name>libvlc_time_t</name><operator>)</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_play_pause_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_media_state</name></name></type> <name>state</name> <init>= <expr><call><name>obs_source_media_get_state</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>OBS_MEDIA_STATE_PLAYING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_media_play_pause</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>OBS_MEDIA_STATE_PAUSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_media_play_pause</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_restart_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_media_restart</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_stop_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_media_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_playlist_next_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_media_next</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_playlist_prev_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_media_previous</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlcs_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>play_pause_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"VLCSource.PlayPause"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"PlayPause"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>vlcs_play_pause_hotkey</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>restart_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"VLCSource.Restart"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Restart"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>vlcs_restart_hotkey</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stop_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"VLCSource.Stop"</literal></expr></argument>,
<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Stop"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>vlcs_stop_hotkey</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>playlist_next_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"VLCSource.PlaylistNext"</literal></expr></argument>,
<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"PlaylistNext"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vlcs_playlist_next_hotkey</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>playlist_prev_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"VLCSource.PlaylistPrev"</literal></expr></argument>,
<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"PlaylistPrev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vlcs_playlist_prev_hotkey</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_libvlc</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name> <operator>=</operator> <call><name>libvlc_media_list_player_new_</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name> <operator>=</operator> <call><name>libvlc_media_player_new_</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_player_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_video_set_callbacks_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>, <argument><expr><name>vlcs_video_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>vlcs_video_display</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_video_set_format_callbacks_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>, <argument><expr><name>vlcs_video_format</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_audio_set_callbacks_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>, <argument><expr><name>vlcs_audio_play</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_audio_set_format_callbacks_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>, <argument><expr><name>vlcs_audio_setup</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>event_manager</name></decl>;</decl_stmt>
<expr_stmt><expr><name>event_manager</name> <operator>=</operator> <call><name>libvlc_media_player_event_manager_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_attach_</name><argument_list>(<argument><expr><name>event_manager</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerEndReached</name></expr></argument>,
<argument><expr><name>vlcs_stopped</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_attach_</name><argument_list>(<argument><expr><name>event_manager</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerOpening</name></expr></argument>,
<argument><expr><name>vlcs_started</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_update</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlcs_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_activate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_STOP_RESTART</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_play_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_PAUSE_UNPAUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_play_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_deactivate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_STOP_RESTART</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_stop_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_output_video</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_PAUSE_UNPAUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_player_pause_</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_list_player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlcs_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LOOP</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SHUFFLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_BEHAVIOR</name></expr></argument>,
<argument><expr><name>S_BEHAVIOR_STOP_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_NETWORK_CACHING</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_TRACK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SUBTITLE_ENABLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SUBTITLE_TRACK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>vlcs_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_source</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>filter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>exts</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_set_flags</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>OBS_PROPERTIES_DEFER_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_LOOP</name></expr></argument>, <argument><expr><name>T_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_SHUFFLE</name></expr></argument>, <argument><expr><name>T_SHUFFLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>media_file_data</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>da_end</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>last</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name><name>path</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_BEHAVIOR</name></expr></argument>, <argument><expr><name>T_BEHAVIOR</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BEHAVIOR_STOP_RESTART</name></expr></argument>,
<argument><expr><name>S_BEHAVIOR_STOP_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BEHAVIOR_PAUSE_UNPAUSE</name></expr></argument>,
<argument><expr><name>S_BEHAVIOR_PAUSE_UNPAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>,
<argument><expr><name>S_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Media Files ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><name>EXTENSIONS_MEDIA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="string">");;Video Files ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><name>EXTENSIONS_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="string">");;Audio Files ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><name>EXTENSIONS_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="string">");;Playlist Files ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><name>EXTENSIONS_PLAYLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_editable_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_PLAYLIST</name></expr></argument>, <argument><expr><name>T_PLAYLIST</name></expr></argument>,
<argument><expr><name>OBS_EDITABLE_LIST_TYPE_FILES_AND_URLS</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_NETWORK_CACHING</name></expr></argument>, <argument><expr><name>T_NETWORK_CACHING</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,
<argument><expr><literal type="number">60000</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_TRACK</name></expr></argument>, <argument><expr><name>T_TRACK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_SUBTITLE_ENABLE</name></expr></argument>, <argument><expr><name>T_SUBTITLE_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_SUBTITLE_TRACK</name></expr></argument>, <argument><expr><name>T_SUBTITLE_TRACK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ppts</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>vlc_source_info</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"vlc_source"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_ASYNC_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_AUDIO</name> <operator>|</operator>
<name>OBS_SOURCE_DO_NOT_DUPLICATE</name> <operator>|</operator>
<name>OBS_SOURCE_CONTROLLABLE_MEDIA</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>vlcs_get_name</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>vlcs_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>vlcs_destroy</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>vlcs_update</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>vlcs_defaults</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>vlcs_properties</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>vlcs_activate</name></expr>,
<expr><operator>.</operator><name>deactivate</name> <operator>=</operator> <name>vlcs_deactivate</name></expr>,
<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_MEDIA</name></expr>,
<expr><operator>.</operator><name>media_play_pause</name> <operator>=</operator> <name>vlcs_play_pause</name></expr>,
<expr><operator>.</operator><name>media_restart</name> <operator>=</operator> <name>vlcs_restart</name></expr>,
<expr><operator>.</operator><name>media_stop</name> <operator>=</operator> <name>vlcs_stop</name></expr>,
<expr><operator>.</operator><name>media_next</name> <operator>=</operator> <name>vlcs_playlist_next</name></expr>,
<expr><operator>.</operator><name>media_previous</name> <operator>=</operator> <name>vlcs_playlist_prev</name></expr>,
<expr><operator>.</operator><name>media_get_duration</name> <operator>=</operator> <name>vlcs_get_duration</name></expr>,
<expr><operator>.</operator><name>media_get_time</name> <operator>=</operator> <name>vlcs_get_time</name></expr>,
<expr><operator>.</operator><name>media_set_time</name> <operator>=</operator> <name>vlcs_set_time</name></expr>,
<expr><operator>.</operator><name>media_get_state</name> <operator>=</operator> <name>vlcs_get_state</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
