<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\vlc-video\vlc-video-plugin.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc-video-plugin.h"</cpp:file></cpp:include>

<macro><name>OBS_DECLARE_MODULE</name><argument_list>()</argument_list></macro>
<macro><name>OBS_MODULE_USE_DEFAULT_LOCALE</name><argument_list>(<argument><literal type="string">"vlc-video"</literal></argument>, <argument><literal type="string">"en-US"</literal></argument>)</argument_list></macro>
<function><type><name>MODULE_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_module_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">"VLC playlist source"</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>LIBVLC_NEW</name></type> <name>libvlc_new_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_RELEASE</name></type> <name>libvlc_release_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_CLOCK</name></type> <name>libvlc_clock_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_EVENT_ATTACH</name></type> <name>libvlc_event_attach_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LIBVLC_MEDIA_NEW_PATH</name></type> <name>libvlc_media_new_path_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_NEW_LOCATION</name></type> <name>libvlc_media_new_location_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_ADD_OPTION</name></type> <name>libvlc_media_add_option_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_RELEASE</name></type> <name>libvlc_media_release_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_RELEASE</name></type> <name>libvlc_media_retain_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_NEW</name></type> <name>libvlc_media_player_new_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_NEW_FROM_MEDIA</name></type> <name>libvlc_media_player_new_from_media_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_RELEASE</name></type> <name>libvlc_media_player_release_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_VIDEO_SET_CALLBACKS</name></type> <name>libvlc_video_set_callbacks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_VIDEO_SET_FORMAT_CALLBACKS</name></type> <name>libvlc_video_set_format_callbacks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_AUDIO_SET_CALLBACKS</name></type> <name>libvlc_audio_set_callbacks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_AUDIO_SET_FORMAT_CALLBACKS</name></type> <name>libvlc_audio_set_format_callbacks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_PLAY</name></type> <name>libvlc_media_player_play_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_STOP</name></type> <name>libvlc_media_player_stop_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_GET_TIME</name></type> <name>libvlc_media_player_get_time_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_SET_TIME</name></type> <name>libvlc_media_player_set_time_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_VIDEO_GET_SIZE</name></type> <name>libvlc_video_get_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_EVENT_MANAGER</name></type> <name>libvlc_media_player_event_manager_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_GET_STATE</name></type> <name>libvlc_media_player_get_state_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_PLAYER_GET_LENGTH</name></type> <name>libvlc_media_player_get_length_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_NEW</name></type> <name>libvlc_media_list_new_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_RELEASE</name></type> <name>libvlc_media_list_release_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_ADD_MEDIA</name></type> <name>libvlc_media_list_add_media_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_LOCK</name></type> <name>libvlc_media_list_lock_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_UNLOCK</name></type> <name>libvlc_media_list_unlock_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_EVENT_MANAGER</name></type> <name>libvlc_media_list_event_manager_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_NEW</name></type> <name>libvlc_media_list_player_new_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_RELEASE</name></type> <name>libvlc_media_list_player_release_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_PLAY</name></type> <name>libvlc_media_list_player_play_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_PAUSE</name></type> <name>libvlc_media_list_player_pause_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_STOP</name></type> <name>libvlc_media_list_player_stop_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_SET_MEDIA_PLAYER</name></type>
<name>libvlc_media_list_player_set_media_player_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_SET_MEDIA_LIST</name></type> <name>libvlc_media_list_player_set_media_list_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_EVENT_MANAGER</name></type> <name>libvlc_media_list_player_event_manager_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_SET_PLAYBACK_MODE</name></type>
<name>libvlc_media_list_player_set_playback_mode_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_NEXT</name></type> <name>libvlc_media_list_player_next_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBVLC_MEDIA_LIST_PLAYER_PREVIOUS</name></type> <name>libvlc_media_list_player_previous_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>libvlc_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>libvlc_core_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>libvlc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>time_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_vlc_funcs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_VLC_FUNC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { func##_ = os_dlsym(libvlc_module, #func); if (!func##_) { blog(LOG_WARNING, "Could not func VLC function %s, " "VLC loading failed", #func); return false; } } while (false)</cpp:value></cpp:define>












<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_event_attach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_add_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_retain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_new_from_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_video_set_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_video_set_format_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_audio_set_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_audio_set_format_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_play</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_get_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_set_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_video_get_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_event_manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_get_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_player_get_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_add_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_event_manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_play</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_set_media_player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_set_media_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_event_manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_set_playback_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_VLC_FUNC</name><argument_list>(<argument><expr><name>libvlc_media_list_player_previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_libvlc_module</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path_utf8</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyW</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><literal type="string">L"SOFTWARE\\VideoLAN\\VLC"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"InstallDir"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>path</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"\\libvlc.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libvlc_module</name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name>path_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_DIR</name></cpp:macro> <cpp:value>"/Applications/VLC.app/Contents/MacOS/"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_CORE_FILE</name></cpp:macro> <cpp:value>LIBVLC_DIR "lib/libvlccore.dylib"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_FILE</name></cpp:macro> <cpp:value>LIBVLC_DIR "lib/libvlc.5.dylib"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"VLC_PLUGIN_PATH"</literal></expr></argument>, <argument><expr><name>LIBVLC_DIR</name> <literal type="string">"plugins"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libvlc_core_module</name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name>LIBVLC_CORE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>libvlc_core_module</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_FILE</name></cpp:macro> <cpp:value>"libvlc.so.5"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>libvlc_module</name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name>LIBVLC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>libvlc_module</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>vlc_source_info</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>load_libvlc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>libvlc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>libvlc</name> <operator>=</operator> <call><name>libvlc_new_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>libvlc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create libvlc instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>time_start</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>libvlc_clock_</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000ULL</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_module_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_libvlc_module</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find VLC installation, VLC video "</literal>
<literal type="string">"source disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_vlc_funcs</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"VLC found, VLC video source enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc_source_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_module_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>libvlc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_release_</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>libvlc_core_module</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_dlclose</name><argument_list>(<argument><expr><name>libvlc_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>libvlc_module</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_dlclose</name><argument_list>(<argument><expr><name>libvlc_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
