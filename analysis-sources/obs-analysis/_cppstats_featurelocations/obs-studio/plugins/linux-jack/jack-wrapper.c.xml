<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\linux-jack\jack-wrapper.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jack-wrapper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blog</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "jack-input: " msg, ##__VA_ARGS__)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name><name>enum</name> <name>speaker_layout</name></name></type> <name>jack_channels_to_obs_speakers</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_MONO</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_STEREO</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_2POINT1</name></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT1</name></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_5POINT1</name></expr>;</return>


<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_7POINT1</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jack_process_callback</name><parameter_list>(<parameter><decl><type><name>jack_nframes_t</name></type> <name>nframes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>jack_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>jack_data</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio</name></name></type> <name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <call><name>jack_channels_to_obs_speakers</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <call><name>jack_get_sample_rate</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>jack_default_audio_sample_t</name> <modifier>*</modifier></type><name>jack_buffer</name> <init>=
<expr><operator>(</operator><name>jack_default_audio_sample_t</name> <operator>*</operator><operator>)</operator><call><name>jack_port_get_buffer</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nframes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>jack_buffer</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>nframes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>-</operator>
<call><name>jack_frames_to_time</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>, <argument><expr><name>nframes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_output_audio</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>jack_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jack_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>good</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jack_options_t</name></type> <name>jack_option</name> <init>=
<expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>start_jack_server</name></name></expr> ?</condition><then> <expr><name>JackNullOption</name></expr> </then><else>: <expr><name>JackNoStartServer</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name> <operator>=</operator> <call><name>jack_client_open</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>jack_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"jack_client_open Error:"</literal>
<literal type="string">"Could not create JACK client! %s"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name></name> <operator>=</operator>
<operator>(</operator><name>jack_port_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jack_port_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>port_name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"in_%u"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>jack_port_register</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>, <argument><expr><name>port_name</name></expr></argument>, <argument><expr><name>JACK_DEFAULT_AUDIO_TYPE</name></expr></argument>,
<argument><expr><name>JackPortIsInput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"jack_port_register Error:"</literal>
<literal type="string">"Could not create JACK port! %s"</literal></expr></argument>,
<argument><expr><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>jack_set_process_callback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>, <argument><expr><name>jack_process_callback</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"jack_set_process_callback Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>jack_activate</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"jack_activate Error:"</literal>
<literal type="string">"Could not activate JACK client!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>good</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>deactivate_jack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jack_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jack_port_unregister</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>jack_ports</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jack_client_close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>jack_client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>jack_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
