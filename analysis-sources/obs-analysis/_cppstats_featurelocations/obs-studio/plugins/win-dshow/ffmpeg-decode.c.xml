<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-dshow\ffmpeg-decode.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmpeg-decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-ffmpeg-compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-avc.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&gt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NEW_HARDWARE_CODEC_METHOD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEW_HARDWARE_CODEC_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name><name>hw_priority</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_HWDEVICE_TYPE_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>has_hw_type</name><parameter_list>(<parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>avcodec_get_hw_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator> <name>AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</name> <operator>&amp;&amp;</operator>
<name><name>config</name><operator>-&gt;</operator><name>device_type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_hw_decoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_decode</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name> <modifier>*</modifier></type><name>priority</name> <init>= <expr><name>hw_priority</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>priority</name> <operator>!=</operator> <name>AV_HWDEVICE_TYPE_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>has_hw_type</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><operator>*</operator><name>priority</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_hwdevice_ctx_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_ctx</name></expr></argument>, <argument><expr><operator>*</operator><name>priority</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>priority</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>hw_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>hw_device_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>hw_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>hw</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>ffmpeg_decode_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_decode</name></name> <modifier>*</modifier></type><name>decode</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>use_hw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>avcodec_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>decode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEW_HARDWARE_CODEC_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_hw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_hw_decoder</name><argument_list>(<argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>use_hw</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>decode</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffmpeg_decode_free</name><argument_list>(<argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>CODEC_CAP_TRUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CODEC_FLAG_TRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ffmpeg_decode_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_decode</name></name> <modifier>*</modifier></type><name>decode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>hw_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>hw_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avcodec_close</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>decode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>video_format</name></name></type> <name>convert_pixel_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_NONE</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_NONE</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_I420</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_NV12</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_YUY2</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_UYVY</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_I422</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_RGBA</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_BGRA</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr>:</case>
<return>return <expr><name>VIDEO_FORMAT_BGRX</name></expr>;</return>
<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><name>VIDEO_FORMAT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>audio_format</name></name></type> <name>convert_sample_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_U8BIT</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_16BIT</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_32BIT</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_FLOAT</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_U8P</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_U8BIT_PLANAR</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_16BIT_PLANAR</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_32BIT_PLANAR</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>
<return>return <expr><name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>;</return>
<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><name>AUDIO_FORMAT_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>speaker_layout</name></name></type> <name>convert_speaker_layout</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_MONO</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_STEREO</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_2POINT1</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT0</name></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_4POINT1</name></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_5POINT1</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>SPEAKERS_7POINT1</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_decode</name></name> <modifier>*</modifier></type><name>decode</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><name>size</name> <operator>+</operator> <name>INPUT_BUFFER_PADDING_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name> <operator>=</operator>
<call><name>brealloc</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ffmpeg_decode_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_decode</name></name> <modifier>*</modifier></type><name>decode</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_source_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_output</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_data</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>got_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>convert_sample_format</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>speakers</name></name> <operator>=</operator>
<call><name>convert_speaker_layout</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>decode</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AUDIO_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_output</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ffmpeg_decode_video</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_decode</name></name> <modifier>*</modifier></type><name>decode</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_frame2</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_output</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_data</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <operator>*</operator><name>ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator>
<call><name>obs_avc_keyframe</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decode</name><operator>-&gt;</operator><name>hw</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>hw_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>decode</name><operator>-&gt;</operator><name>hw_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decode</name><operator>-&gt;</operator><name>hw_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out_frame</name> <operator>=</operator> <ternary><condition><expr><name><name>decode</name><operator>-&gt;</operator><name>hw</name></name></expr> ?</condition><then> <expr><name><name>decode</name><operator>-&gt;</operator><name>hw_frame</name></name></expr> </then><else>: <expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>out_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>got_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEW_HARDWARE_CODEC_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>got_frame</name> <operator>&amp;&amp;</operator> <name><name>decode</name><operator>-&gt;</operator><name>hw</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_transfer_data</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>out_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>convert_pixel_format</name><argument_list>(<argument><expr><name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <name>VIDEO_RANGE_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name><operator>)</operator></expr>
?</condition><then> <expr><name>VIDEO_RANGE_FULL</name></expr>
</then><else>: <expr><name>VIDEO_RANGE_PARTIAL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>range</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>success</name> <init>= <expr><call><name>video_format_get_parameters</name><argument_list>(
<argument><expr><name>VIDEO_CS_601</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get video format "</literal>
<literal type="string">"parameters for video format %u"</literal></expr></argument>,
<argument><expr><name>VIDEO_CS_601</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ts</name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>decode</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>flip</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_output</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
