<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-x264\obs-x264.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_STDINT_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STDINT_H_INCLUDED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x264.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[x264 encoder: '%s'] " format, obs_encoder_get_name(obsx264-&gt;encoder), ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>





<struct>struct <name>obs_x264</name> <block>{
<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x264_param_t</name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>packet_data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extra_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extra_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sei_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_performance_token_t</name> <modifier>*</modifier></type><name>performance_token</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_x264_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"x264"</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>obs_x264_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>x264_encoder_close</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>sei</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>extra_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_x264_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obsx264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_end_high_performance</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>performance_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_data</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>packet_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_x264_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><literal type="number">2500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"use_bufsize"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>, <argument><expr><literal type="number">2500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"crf"</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VFR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"vfr"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"rate_control"</literal></expr></argument>, <argument><expr><literal type="string">"CBR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>, <argument><expr><literal type="string">"veryfast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"x264opts"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_strings</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>strings</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>*</operator><name>strings</name></expr></argument>, <argument><expr><operator>*</operator><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strings</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_RATE_CONTROL</name></cpp:macro> <cpp:value>obs_module_text("RateControl")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_BITRATE</name></cpp:macro> <cpp:value>obs_module_text("Bitrate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CUSTOM_BUF</name></cpp:macro> <cpp:value>obs_module_text("CustomBufsize")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_BUF_SIZE</name></cpp:macro> <cpp:value>obs_module_text("BufferSize")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_VFR</name></cpp:macro> <cpp:value>obs_module_text("VFR")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CRF</name></cpp:macro> <cpp:value>obs_module_text("CRF")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_KEYINT_SEC</name></cpp:macro> <cpp:value>obs_module_text("KeyframeIntervalSec")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PRESET</name></cpp:macro> <cpp:value>obs_module_text("CPUPreset")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PROFILE</name></cpp:macro> <cpp:value>obs_module_text("Profile")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_TUNE</name></cpp:macro> <cpp:value>obs_module_text("Tune")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_NONE</name></cpp:macro> <cpp:value>obs_module_text("None")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_X264_OPTS</name></cpp:macro> <cpp:value>obs_module_text("EncoderOptions")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>use_bufsize_modified</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>use_bufsize</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"use_bufsize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"rate_control"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rc_crf</name> <init>= <expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"CRF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>use_bufsize</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rc_crf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rate_control_modified</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"rate_control"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_bufsize</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"use_bufsize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>abr</name> <init>= <expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"CBR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>astrcmpi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"ABR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rc_crf</name> <init>= <expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"CRF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"crf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name>abr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name>rc_crf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"use_bufsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name>rc_crf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name>rc_crf</name> <operator>&amp;&amp;</operator> <name>use_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_x264_props</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"rate_control"</literal></expr></argument>, <argument><expr><name>TEXT_RATE_CONTROL</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"CBR"</literal></expr></argument>, <argument><expr><literal type="string">"CBR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"ABR"</literal></expr></argument>, <argument><expr><literal type="string">"ABR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"VBR"</literal></expr></argument>, <argument><expr><literal type="string">"VBR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"CRF"</literal></expr></argument>, <argument><expr><literal type="string">"CRF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>rate_control_modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name>TEXT_BITRATE</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>,
<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" Kbps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"use_bufsize"</literal></expr></argument>, <argument><expr><name>TEXT_CUSTOM_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>use_bufsize_modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>, <argument><expr><name>TEXT_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"crf"</literal></expr></argument>, <argument><expr><name>TEXT_CRF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>, <argument><expr><name>TEXT_KEYINT_SEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>, <argument><expr><name>TEXT_PRESET</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_strings</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x264_preset_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><name>TEXT_PROFILE</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TEXT_NONE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"high"</literal></expr></argument>, <argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>, <argument><expr><name>TEXT_TUNE</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TEXT_NONE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_strings</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x264_tune_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VFR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"vfr"</literal></expr></argument>, <argument><expr><name>TEXT_VFR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>obs_properties_add_text</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"x264opts"</literal></expr></argument>, <argument><expr><name>TEXT_X264_OPTS</name></expr></argument>,
<argument><expr><name>OBS_TEXT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>getparam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>assign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>param</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>param</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>assign</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>assign</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>assign</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>assign</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>bstrdup_n</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>assign</name> <operator>-</operator> <name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>assign</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>validate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>list</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Invalid %s: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>override_base_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>preset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>profile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getparam</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_name</name> <init>= <expr><call><name>validate</name><argument_list>(
<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>, <argument><expr><name>x264_preset_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>valid_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>*</operator><name>preset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>preset</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_name</name> <init>= <expr><call><name>validate</name><argument_list>(
<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><name>x264_profile_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>valid_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>*</operator><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>profile</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_name</name> <init>=
<expr><call><name>validate</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>, <argument><expr><name>x264_tune_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>valid_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>*</operator><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tune</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>override_base_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>preset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>profile</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>params</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>override_base_param</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>params</name><operator>++</operator><operator>)</operator></expr></argument>, <argument><expr><name>preset</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>,
<argument><expr><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENCL_ALIAS</name></cpp:macro> <cpp:value>"opencl_is_experimental_and_potentially_unstable"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getparam</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fps"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"force-cfr"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"opencl"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>OPENCL_ALIAS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"opencl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>x264_param_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obsx264</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"x264 param: %s failed"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_x264_profile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <name>profile</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>profile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>x264_param_apply_profile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obsx264</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to set x264 profile '%s'"</literal></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>validate_preset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_preset</name> <init>=
<expr><call><name>validate</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>preset</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>, <argument><expr><name>x264_preset_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>new_preset</name></expr> ?</condition><then> <expr><name>new_preset</name></expr> </then><else>: <expr><literal type="string">"veryfast"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reset_x264_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>x264_param_default_preset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>obsx264</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><call><name>validate_preset</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>preset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>validate</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>tune</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>, <argument><expr><name>x264_tune_names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_x264</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_x264_colorspace_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_CS_DEFAULT</name></expr>:</case>
<case>case <expr><name>VIDEO_CS_601</name></expr>:</case>
<case>case <expr><name>VIDEO_CS_SRGB</name></expr>:</case>
<return>return <expr><literal type="string">"undef"</literal></expr>;</return>
<case>case <expr><name>VIDEO_CS_709</name></expr>:</case><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"bt709"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_x264_cs_val</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>names</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_x264_colorspace_name</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>idx</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>!</operator><name><name>names</name><index>[<expr><operator>++</operator><name>idx</name></expr>]</index></name></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>obs_x264_video_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>rate_control</name> <block>{
<decl><name>RATE_CONTROL_CBR</name></decl>,
<decl><name>RATE_CONTROL_VBR</name></decl>,
<decl><name>RATE_CONTROL_ABR</name></decl>,
<decl><name>RATE_CONTROL_CRF</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name> <init>= <expr><call><name>obs_encoder_video</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>voi</name> <init>= <expr><call><name>video_output_get_info</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>video_scale_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_x264_video_info</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rate_control</name> <init>=
<expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"rate_control"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyint_sec</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crf</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"crf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_encoder_get_width</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_encoder_get_height</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bf</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_bufsize</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"use_bufsize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cbr_override</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"cbr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>rate_control</name></name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VFR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>vfr</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"vfr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>cbr_override</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"\"cbr\" setting has been deprecated for all encoders! "</literal>
<literal type="string">"Please set \"rate_control\" to \"CBR\" instead. "</literal>
<literal type="string">"Forcing CBR mode. "</literal>
<literal type="string">"(Note to all: this is why you shouldn't use strings for "</literal>
<literal type="string">"common settings)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rate_control</name> <operator>=</operator> <literal type="string">"CBR"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>rate_control</name></expr></argument>, <argument><expr><literal type="string">"ABR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>RATE_CONTROL_ABR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>rate_control</name></expr></argument>, <argument><expr><literal type="string">"VBR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>RATE_CONTROL_VBR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>rate_control</name></expr></argument>, <argument><expr><literal type="string">"CRF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>RATE_CONTROL_CRF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>RATE_CONTROL_CBR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyint_sec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_max</name></name> <operator>=</operator>
<name>keyint_sec</name> <operator>*</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_num</name></name> <operator>/</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_bufsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <name>bitrate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VFR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_vfr_input</name></name> <operator>=</operator> <name>vfr</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_vfr_input</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>=</operator> <name>bitrate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name>bitrate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_num</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_den</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>pf_log</name></name> <operator>=</operator> <name>log_x264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>p_log_private</name></name> <operator>=</operator> <name>obsx264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_log_level</name></name> <operator>=</operator> <name>X264_LOG_WARNING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_data_has_user_value</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe</name></name> <operator>=</operator> <name>bf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_transfer</name></name> <operator>=</operator>
<call><name>get_x264_cs_val</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>colorspace</name></name></expr></argument>, <argument><expr><name>x264_transfer_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colmatrix</name></name> <operator>=</operator>
<call><name>get_x264_cs_val</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>colorspace</name></name></expr></argument>, <argument><expr><name>x264_colmatrix_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colorprim</name></name> <operator>=</operator>
<call><name>get_x264_cs_val</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>colorspace</name></name></expr></argument>, <argument><expr><name>x264_colorprim_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>b_fullrange</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>range</name></name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>RATE_CONTROL_CBR</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>RATE_CONTROL_ABR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_ABR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>RATE_CONTROL_CBR</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">139</literal></expr></cpp:if>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_filler</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_nal_hrd</name></name> <operator>=</operator> <name>X264_NAL_HRD_CBR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_CRF</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>crf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_NV12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name>X264_CSP_NV12</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_I420</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name>X264_CSP_I420</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_I444</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name>X264_CSP_I444</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name>X264_CSP_NV12</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>params</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_param</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>params</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"settings:\n"</literal>
<literal type="string">"\trate_control: %s\n"</literal>
<literal type="string">"\tbitrate: %d\n"</literal>
<literal type="string">"\tbuffer size: %d\n"</literal>
<literal type="string">"\tcrf: %d\n"</literal>
<literal type="string">"\tfps_num: %d\n"</literal>
<literal type="string">"\tfps_den: %d\n"</literal>
<literal type="string">"\twidth: %d\n"</literal>
<literal type="string">"\theight: %d\n"</literal>
<literal type="string">"\tkeyint: %d\n"</literal></expr></argument>,
<argument><expr><name>rate_control</name></expr></argument>, <argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name></expr></argument>,
<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name></expr></argument>, <argument><expr><name><name>voi</name><operator>-&gt;</operator><name>fps_num</name></name></expr></argument>,
<argument><expr><name><name>voi</name><operator>-&gt;</operator><name>fps_den</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>update_settings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preset</name> <init>= <expr><call><name>bstrdup</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"preset"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>profile</name> <init>= <expr><call><name>bstrdup</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tune</name> <init>= <expr><call><name>bstrdup</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"tune"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"x264opts"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paramlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>paramlist</name> <operator>=</operator> <call><name>strlist_split</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"---------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>override_base_params</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>paramlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>profile</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preset</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>preset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"preset: %s"</literal></expr></argument>, <argument><expr><name>preset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>profile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"profile: %s"</literal></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tune</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tune</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"tune: %s"</literal></expr></argument>, <argument><expr><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>reset_x264_params</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>preset</name></expr></argument>, <argument><expr><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_params</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>paramlist</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>opts</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"custom settings: %s"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_x264_profile</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_repeat_headers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlist_free</name><argument_list>(<argument><expr><name>paramlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>preset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_x264_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>update_settings</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obsx264</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to reconfigure: %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nal_count</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>header</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>sei</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_headers</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nal_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><name>nals</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>NAL_SEI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>p_payload</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>i_payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>p_payload</name></name></expr></argument>,
<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>i_payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>extra_data</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>extra_data_size</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>sei</name></name> <operator>=</operator> <name><name>sei</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>=</operator> <name><name>sei</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>obs_x264_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_x264</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>update_settings</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>x264_encoder_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obsx264</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"x264 failed to load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_headers</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"bad settings specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obsx264</name><operator>-&gt;</operator><name>performance_token</name></name> <operator>=</operator>
<call><name>os_request_high_performance</name><argument_list>(<argument><expr><literal type="string">"x264 encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obsx264</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nals</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nal_count</name></decl></parameter>, <parameter><decl><type><name>x264_picture_t</name> <modifier>*</modifier></type><name>pic_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nal_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>packet_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nal_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><name>nals</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>packet_data</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>p_payload</name></name></expr></argument>,
<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>i_payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBS_ENCODER_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pic_out</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pic_out</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>=</operator> <name><name>pic_out</name><operator>-&gt;</operator><name>b_keyframe</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_pic_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name></decl></parameter>, <parameter><decl><type><name>x264_picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>x264_picture_init</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>==</operator> <name>X264_CSP_NV12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_plane</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>==</operator> <name>X264_CSP_I420</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_plane</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>obsx264</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>==</operator> <name>X264_CSP_I444</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_plane</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_plane</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_x264_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>received_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nal_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_picture_t</name></type> <name>pic</name></decl>, <decl><type ref="prev"/><name>pic_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name> <operator>||</operator> <operator>!</operator><name>packet</name> <operator>||</operator> <operator>!</operator><name>received_packet</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_pic_data</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x264_encoder_encode</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal_count</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>pic</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"encode failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>received_packet</name> <operator>=</operator> <operator>(</operator><name>nal_count</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_packet</name><argument_list>(<argument><expr><name>obsx264</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>nals</name></expr></argument>, <argument><expr><name>nal_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_x264_extra_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data</name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>extra_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>extra_data_size</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_x264_sei</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sei</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obsx264</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sei</name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>sei</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>obsx264</name><operator>-&gt;</operator><name>sei_size</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>valid_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>format</name> <operator>==</operator> <name>VIDEO_FORMAT_I420</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>VIDEO_FORMAT_NV12</name> <operator>||</operator>
<name>format</name> <operator>==</operator> <name>VIDEO_FORMAT_I444</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_x264_video_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_x264</name></name> <modifier>*</modifier></type><name>obsx264</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>pref_format</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pref_format</name> <operator>=</operator> <call><name>obs_encoder_get_preferred_video_format</name><argument_list>(<argument><expr><name><name>obsx264</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_format</name><argument_list>(<argument><expr><name>pref_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pref_format</name> <operator>=</operator> <ternary><condition><expr><call><name>valid_format</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr>
</then><else>: <expr><name>VIDEO_FORMAT_NV12</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>pref_format</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name></type> <name>obs_x264_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"obs_x264"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_ENCODER_VIDEO</name></expr>,
<expr><operator>.</operator><name>codec</name> <operator>=</operator> <literal type="string">"h264"</literal></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>obs_x264_getname</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>obs_x264_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>obs_x264_destroy</name></expr>,
<expr><operator>.</operator><name>encode</name> <operator>=</operator> <name>obs_x264_encode</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>obs_x264_update</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>obs_x264_props</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>obs_x264_defaults</name></expr>,
<expr><operator>.</operator><name>get_extra_data</name> <operator>=</operator> <name>obs_x264_extra_data</name></expr>,
<expr><operator>.</operator><name>get_sei_data</name> <operator>=</operator> <name>obs_x264_sei</name></expr>,
<expr><operator>.</operator><name>get_video_info</name> <operator>=</operator> <name>obs_x264_video_info</name></expr>,
<expr><operator>.</operator><name>caps</name> <operator>=</operator> <name>OBS_ENCODER_CAP_DYN_BITRATE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
