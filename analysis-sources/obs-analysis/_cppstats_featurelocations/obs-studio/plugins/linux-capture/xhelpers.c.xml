<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\linux-capture\xhelpers.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/randr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xinerama.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xhelpers.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>xinerama_is_active</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name> <operator>||</operator> <operator>!</operator><call><name>xcb_get_extension_data</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcb_xinerama_id</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>present</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_is_active_cookie_t</name></type> <name>xnr_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_is_active_reply_t</name> <modifier>*</modifier></type><name>xnr_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xnr_c</name> <operator>=</operator> <call><name>xcb_xinerama_is_active_unchecked</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xnr_r</name> <operator>=</operator> <call><name>xcb_xinerama_is_active_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>xnr_c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xnr_r</name> <operator>||</operator> <name><name>xnr_r</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xnr_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>active</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xinerama_screen_count</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screens</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_query_screens_cookie_t</name></type> <name>scr_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_query_screens_reply_t</name> <modifier>*</modifier></type><name>scr_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scr_c</name> <operator>=</operator> <call><name>xcb_xinerama_query_screens_unchecked</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_r</name> <operator>=</operator> <call><name>xcb_xinerama_query_screens_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>scr_c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scr_r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screens</name> <operator>=</operator> <name><name>scr_r</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scr_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>screens</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xinerama_screen_geo</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name></type> <name>screen</name></decl></parameter>,
<parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_query_screens_cookie_t</name></type> <name>scr_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_query_screens_reply_t</name> <modifier>*</modifier></type><name>scr_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_xinerama_screen_info_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scr_c</name> <operator>=</operator> <call><name>xcb_xinerama_query_screens_unchecked</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_r</name> <operator>=</operator> <call><name>xcb_xinerama_query_screens_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>scr_c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scr_r</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcb_xinerama_query_screens_screen_info_iterator</name><argument_list>(<argument><expr><name>scr_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>.</operator><name>rem</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>screen</name></expr><operator>,</operator> <expr><call><name>xcb_xinerama_screen_info_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>x_org</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>y_org</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scr_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>w</name> <operator>=</operator> <operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>randr_is_active</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name> <operator>||</operator> <operator>!</operator><call><name>xcb_get_extension_data</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcb_randr_id</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>present</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>randr_has_monitors</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_randr_query_version_cookie_t</name></type> <name>ver_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_randr_query_version_reply_t</name> <modifier>*</modifier></type><name>ver_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ver_c</name> <operator>=</operator> <call><name>xcb_randr_query_version</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>XCB_RANDR_MAJOR_VERSION</name></expr></argument>,
<argument><expr><name>XCB_RANDR_MINOR_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ver_r</name> <operator>=</operator> <call><name>xcb_randr_query_version_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>ver_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ver_r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name><name>ver_r</name><operator>-&gt;</operator><name>major_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ver_r</name><operator>-&gt;</operator><name>minor_version</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ver_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>randr_screen_count</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>randr_has_monitors</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xcb_randr_get_monitors_cookie_t</name></type> <name>mon_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_monitors_reply_t</name> <modifier>*</modifier></type><name>mon_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon_c</name> <operator>=</operator> <call><name>xcb_randr_get_monitors</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon_r</name> <operator>=</operator> <call><name>xcb_randr_get_monitors_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>mon_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mon_r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>xcb_randr_get_monitors_monitors_length</name><argument_list>(<argument><expr><name>mon_r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mon_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_screen_resources_cookie_t</name></type> <name>res_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_screen_resources_reply_t</name> <modifier>*</modifier></type><name>res_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res_c</name> <operator>=</operator> <call><name>xcb_randr_get_screen_resources</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>xcb_randr_get_screen_resources_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>res_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res_r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>xcb_randr_get_screen_resources_crtcs_length</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>randr_screen_geo</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name></type> <name>screen</name></decl></parameter>,
<parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>xcb_screen_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rscreen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>xscreen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>xscreen</name> <operator>=</operator> <call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>randr_has_monitors</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xcb_randr_get_monitors_cookie_t</name></type> <name>mon_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_monitors_reply_t</name> <modifier>*</modifier></type><name>mon_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon_c</name> <operator>=</operator> <call><name>xcb_randr_get_monitors</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name><name>xscreen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon_r</name> <operator>=</operator> <call><name>xcb_randr_get_monitors_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>mon_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mon_r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>monitors</name> <init>= <expr><call><name>xcb_randr_get_monitors_monitors_length</name><argument_list>(<argument><expr><name>mon_r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>screen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>screen</name> <operator>&gt;=</operator> <name>monitors</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mon_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_randr_monitor_info_iterator_t</name></type> <name>mon_i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mon_i</name> <operator>=</operator> <call><name>xcb_randr_get_monitors_monitors_iterator</name><argument_list>(<argument><expr><name>mon_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>screen</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xcb_randr_monitor_info_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mon_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>xcb_randr_monitor_info_t</name> <modifier>*</modifier></type><name>mon</name> <init>= <expr><name><name>mon_i</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>mon</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>mon</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>mon</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>mon</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rscreen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rscreen</name> <operator>=</operator> <name>xscreen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mon</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xcb_get_atom_name_cookie_t</name></type> <name>atom_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_get_atom_name_reply_t</name> <modifier>*</modifier></type><name>atom_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>atom_c</name> <operator>=</operator> <call><name>xcb_get_atom_name</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name><name>mon</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>atom_r</name> <operator>=</operator> <call><name>xcb_get_atom_name_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>atom_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atom_r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>strndup</name><argument_list>(
<argument><expr><call><name>xcb_get_atom_name_name</name><argument_list>(<argument><expr><name>atom_r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>xcb_get_atom_name_name_length</name><argument_list>(<argument><expr><name>atom_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>atom_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mon_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_screen_resources_cookie_t</name></type> <name>res_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_screen_resources_reply_t</name> <modifier>*</modifier></type><name>res_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res_c</name> <operator>=</operator> <call><name>xcb_randr_get_screen_resources</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name><name>xscreen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>xcb_randr_get_screen_resources_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>res_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res_r</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screens</name> <init>= <expr><call><name>xcb_randr_get_screen_resources_crtcs_length</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>screen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>screen</name> <operator>&gt;=</operator> <name>screens</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_randr_crtc_t</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xcb_randr_get_screen_resources_crtcs</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_randr_get_crtc_info_cookie_t</name></type> <name>crtc_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_randr_get_crtc_info_reply_t</name> <modifier>*</modifier></type><name>crtc_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>crtc_c</name> <operator>=</operator> <call><name>xcb_randr_get_crtc_info</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>crtc</name> <operator>+</operator> <name>screen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>crtc_r</name> <operator>=</operator> <call><name>xcb_randr_get_crtc_info_reply</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>, <argument><expr><name>crtc_c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crtc_r</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>crtc_r</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>crtc_r</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>crtc_r</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>crtc_r</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rscreen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rscreen</name> <operator>=</operator> <name>xscreen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>w</name> <operator>=</operator> <operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>x11_screen_geo</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name></type> <name>screen</name></decl></parameter>, <parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int_fast32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>.</operator><name>rem</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>screen</name></expr><operator>,</operator> <expr><call><name>xcb_screen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>width_in_pixels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>height_in_pixels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>xcb_shm_t</name> <modifier>*</modifier></type><name>xshm_xcb_attach</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_shm_t</name> <modifier>*</modifier></type><name>shm</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xcb_shm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>shm</name><operator>-&gt;</operator><name>xcb</name></name> <operator>=</operator> <name>xcb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shm</name><operator>-&gt;</operator><name>seg</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name><name>shm</name><operator>-&gt;</operator><name>xcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shm</name><operator>-&gt;</operator><name>shmid</name></name> <operator>=</operator> <call><name>shmget</name><argument_list>(<argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>IPC_CREAT</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shm</name><operator>-&gt;</operator><name>shmid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_shm_attach</name><argument_list>(<argument><expr><name><name>shm</name><operator>-&gt;</operator><name>xcb</name></name></expr></argument>, <argument><expr><name><name>shm</name><operator>-&gt;</operator><name>seg</name></name></expr></argument>, <argument><expr><name><name>shm</name><operator>-&gt;</operator><name>shmid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shm</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>shmat</name><argument_list>(<argument><expr><name><name>shm</name><operator>-&gt;</operator><name>shmid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shm</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>xshm_xcb_detach</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>xshm_xcb_detach</name><parameter_list>(<parameter><decl><type><name>xcb_shm_t</name> <modifier>*</modifier></type><name>shm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shm</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_shm_detach</name><argument_list>(<argument><expr><name><name>shm</name><operator>-&gt;</operator><name>xcb</name></name></expr></argument>, <argument><expr><name><name>shm</name><operator>-&gt;</operator><name>seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>shm</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shmdt</name><argument_list>(<argument><expr><name><name>shm</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shm</name><operator>-&gt;</operator><name>shmid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shmctl</name><argument_list>(<argument><expr><name><name>shm</name><operator>-&gt;</operator><name>shmid</name></name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>xcb_get_screen</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>.</operator><name>rem</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>screen</name></expr><operator>,</operator> <expr><call><name>xcb_screen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>screen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
