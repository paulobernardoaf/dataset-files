<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\mac-capture\audio-device-enum.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CFString.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreAudio/CoreAudio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/apple/cfstring-utils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio-device-enum.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>device_is_input</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>astrstri</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"soundflower"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>astrstri</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"wavtap"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>astrstri</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"soundsiphon"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>enum_success</name><parameter_list>(<parameter><decl><type><name>OSStatus</name></type> <name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"[coreaudio_enum_devices] %s failed: %d"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>enum_device_proc_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>CFStringRef</name></type> <name>cf_name</name></decl></parameter>,
<parameter><decl><type><name>CFStringRef</name></type> <name>cf_uid</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>coreaudio_enum_device</name><parameter_list>(<parameter><decl><type><name>enum_device_proc_t</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name>AudioDeviceID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cf_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cf_uid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enum_next</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioObjectPropertyAddress</name></type> <name>addr</name> <init>= <expr><block>{<expr><name>kAudioDevicePropertyStreams</name></expr>,
<expr><name>kAudioDevicePropertyScopeInput</name></expr>,
<expr><name>kAudioObjectPropertyElementMaster</name></expr>}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>AudioObjectGetPropertyDataSize</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CFStringRef</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>mSelector</name></name> <operator>=</operator> <name>kAudioDevicePropertyDeviceUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf_uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enum_success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get audio device UID"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>mSelector</name></name> <operator>=</operator> <name>kAudioDevicePropertyDeviceNameCFString</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enum_success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get audio device name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enum_next</name> <operator>=</operator> <call><name>proc</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>cf_name</name></expr></argument>, <argument><expr><name>cf_uid</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>cf_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cf_uid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>enum_next</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enum_devices</name><parameter_list>(<parameter><decl><type><name>enum_device_proc_t</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioObjectPropertyAddress</name></type> <name>addr</name> <init>= <expr><block>{<expr><name>kAudioHardwarePropertyDevices</name></expr>,
<expr><name>kAudioObjectPropertyScopeGlobal</name></expr>,
<expr><name>kAudioObjectPropertyElementMaster</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioDeviceID</name> <modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyDataSize</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enum_success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get kAudioObjectSystemObject data size"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ids</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioDeviceID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>enum_success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get kAudioObjectSystemObject data"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>UInt32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>coreaudio_enum_device</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>add_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>device_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>input</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>coreaudio_enum_add_device</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>CFStringRef</name></type> <name>cf_name</name></decl></parameter>,
<parameter><decl><type><name>CFStringRef</name></type> <name>cf_uid</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>add_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>device_item</name></name></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfstr_copy_dstr</name><argument_list>(<argument><expr><name>cf_name</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfstr_copy_dstr</name><argument_list>(<argument><expr><name>cf_uid</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>input</name></name> <operator>||</operator> <operator>!</operator><call><name>device_is_input</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>device_list_add</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>device_item_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>coreaudio_enum_devices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>add_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><name>list</name></expr>, <expr><name>input</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_devices</name><argument_list>(<argument><expr><name>coreaudio_enum_add_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>device_id_data</name> <block>{
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioDeviceID</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_device_id</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>CFStringRef</name></type> <name>cf_name</name></decl></parameter>, <parameter><decl><type><name>CFStringRef</name></type> <name>cf_uid</name></decl></parameter>,
<parameter><decl><type><name>AudioDeviceID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device_id_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CFStringCompare</name><argument_list>(<argument><expr><name>cf_uid</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>cf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>coreaudio_get_device_id</name><parameter_list>(<parameter><decl><type><name>CFStringRef</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device_id_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><name>uid</name></expr>, <expr><name>id</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_devices</name><argument_list>(<argument><expr><name>get_device_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>data</name><operator>.</operator><name>found</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
