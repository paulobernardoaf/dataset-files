<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\inject-library.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obfuscate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inject-library.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>HANDLE</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>create_remote_thread_t</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPSECURITY_ATTRIBUTES</name></type></decl></parameter>,
<parameter><decl><type><name>SIZE_T</name></type></decl></parameter>, <parameter><decl><type><name>LPTHREAD_START_ROUTINE</name></type></decl></parameter>,
<parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>write_process_memory_t</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>LPCVOID</name></type></decl></parameter>, <parameter><decl><type><name>SIZE_T</name></type></decl></parameter>,
<parameter><decl><type><name>SIZE_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>LPVOID</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>virtual_alloc_ex_t</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>SIZE_T</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>virtual_free_ex_t</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>SIZE_T</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>int</name></type> <name>inject_library_obf</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>create_remote_thread_obf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>obf1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>write_process_memory_obf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>obf2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>virtual_alloc_ex_obf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>obf3</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>virtual_free_ex_obf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>obf4</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>load_library_w_obf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>obf5</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>INJECT_ERROR_UNLIKELY_FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>last_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>thread_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>HMODULE</name></type> <name>kernel32</name> <init>= <expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"KERNEL32"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>create_remote_thread_t</name></type> <name>create_remote_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>write_process_memory_t</name></type> <name>write_process_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual_alloc_ex_t</name></type> <name>virtual_alloc_ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual_free_ex_t</name></type> <name>virtual_free_ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name></type> <name>load_library_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>create_remote_thread</name> <operator>=</operator>
<call><name>get_obfuscated_func</name><argument_list>(<argument><expr><name>kernel32</name></expr></argument>, <argument><expr><name>create_remote_thread_obf</name></expr></argument>, <argument><expr><name>obf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>write_process_memory</name> <operator>=</operator>
<call><name>get_obfuscated_func</name><argument_list>(<argument><expr><name>kernel32</name></expr></argument>, <argument><expr><name>write_process_memory_obf</name></expr></argument>, <argument><expr><name>obf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_alloc_ex</name> <operator>=</operator>
<call><name>get_obfuscated_func</name><argument_list>(<argument><expr><name>kernel32</name></expr></argument>, <argument><expr><name>virtual_alloc_ex_obf</name></expr></argument>, <argument><expr><name>obf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_free_ex</name> <operator>=</operator>
<call><name>get_obfuscated_func</name><argument_list>(<argument><expr><name>kernel32</name></expr></argument>, <argument><expr><name>virtual_free_ex_obf</name></expr></argument>, <argument><expr><name>obf4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>load_library_w</name> <operator>=</operator>
<call><name>get_obfuscated_func</name><argument_list>(<argument><expr><name>kernel32</name></expr></argument>, <argument><expr><name>load_library_w_obf</name></expr></argument>, <argument><expr><name>obf5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>virtual_alloc_ex</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MEM_RESERVE</name> <operator>|</operator> <name>MEM_COMMIT</name></expr></argument>,
<argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>write_process_memory</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>thread</name> <operator>=</operator> <call><name>create_remote_thread</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPTHREAD_START_ROUTINE</name><operator>)</operator><name>load_library_w</name></expr></argument>,
<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>code</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetExitCodeThread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>code</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>INJECT_ERROR_INJECT_FAILED</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>INJECT_ERROR_UNLIKELY_FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_error</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>thread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>virtual_free_ex</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>last_error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>last_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<typedef>typedef <function_decl><type><name>HHOOK</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>set_windows_hook_ex_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>HOOKPROC</name></type></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETRY_INTERVAL_MS</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOTAL_RETRY_TIME_MS</name></cpp:macro> <cpp:value>4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETRY_COUNT</name></cpp:macro> <cpp:value>(TOTAL_RETRY_TIME_MS / RETRY_INTERVAL_MS)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>inject_library_safe_obf</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>thread_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_windows_hook_ex_obf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>obf1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>user32</name> <init>= <expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"USER32"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>set_windows_hook_ex_t</name></type> <name>set_windows_hook_ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>lib</name> <init>= <expr><call><name>LoadLibraryW</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HHOOK</name></type> <name>hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name> <operator>||</operator> <operator>!</operator><name>user32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INJECT_ERROR_UNLIKELY_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"dummy_debug_proc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"_dummy_debug_proc@12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INJECT_ERROR_UNLIKELY_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>set_windows_hook_ex</name> <operator>=</operator>
<call><name>get_obfuscated_func</name><argument_list>(<argument><expr><name>user32</name></expr></argument>, <argument><expr><name>set_windows_hook_ex_obf</name></expr></argument>, <argument><expr><name>obf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hook</name> <operator>=</operator> <call><name>set_windows_hook_ex</name><argument_list>(<argument><expr><name>WH_GETMESSAGE</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hook</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RETRY_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>RETRY_INTERVAL_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostThreadMessage</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>WM_USER</name> <operator>+</operator> <literal type="number">432</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
