<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\cursor-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor-capture.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>get_bitmap_data</name><parameter_list>(<parameter><decl><type><name>HBITMAP</name></type> <name>hbmp</name></decl></parameter>, <parameter><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetObject</name><argument_list>(<argument><expr><name>hbmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name> <init>=
<expr><operator>(</operator><name><name>bmp</name><operator>-&gt;</operator><name>bmHeight</name></name> <operator>*</operator> <name><name>bmp</name><operator>-&gt;</operator><name>bmWidth</name></name> <operator>*</operator> <name><name>bmp</name><operator>-&gt;</operator><name>bmBitsPixel</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetBitmapBits</name><argument_list>(<argument><expr><name>hbmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>bit_to_alpha</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>pixel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>invert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pix_byte</name> <init>= <expr><name><name>data</name><index>[<expr><name>pixel</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>alpha</name> <init>= <expr><operator>(</operator><name>pix_byte</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>pixel</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>invert</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>alpha</name></expr> ?</condition><then> <expr><literal type="number">0xFF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>alpha</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0xFF</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bitmap_has_alpha</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>num_pixels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_mask</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>num_pixels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>bit_to_alpha</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>copy_from_color</name><parameter_list>(<parameter><decl><type><name>ICONINFO</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BITMAP</name></type> <name>bmp_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAP</name></type> <name>bmp_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>get_bitmap_data</name><argument_list>(<argument><expr><name><name>ii</name><operator>-&gt;</operator><name>hbmColor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmp_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>color</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bmp_color</name><operator>.</operator><name>bmBitsPixel</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>get_bitmap_data</name><argument_list>(<argument><expr><name><name>ii</name><operator>-&gt;</operator><name>hbmMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>pixels</name> <init>= <expr><name><name>bmp_color</name><operator>.</operator><name>bmHeight</name></name> <operator>*</operator> <name><name>bmp_color</name><operator>.</operator><name>bmWidth</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bitmap_has_alpha</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_mask</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>bmp_color</name><operator>.</operator><name>bmWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>bmp_color</name><operator>.</operator><name>bmHeight</name></name></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>copy_from_mask</name><parameter_list>(<parameter><decl><type><name>ICONINFO</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAP</name></type> <name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>get_bitmap_data</name><argument_list>(<argument><expr><name><name>ii</name><operator>-&gt;</operator><name>hbmMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bmp</name><operator>.</operator><name>bmHeight</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <name><name>bmp</name><operator>.</operator><name>bmHeight</name></name> <operator>*</operator> <name><name>bmp</name><operator>.</operator><name>bmWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>pixels</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name><name>bmp</name><operator>.</operator><name>bmWidthBytes</name></name> <operator>*</operator> <name><name>bmp</name><operator>.</operator><name>bmHeight</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha</name> <init>= <expr><call><name>bit_to_alpha</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name> <init>= <expr><call><name>bit_to_alpha</name><argument_list>(<argument><expr><name>mask</name> <operator>+</operator> <name>bottom</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>output</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>!</operator><name>color</name></expr> ?</condition><then> <expr><literal type="number">0xFFFFFFFF</literal></expr>
</then><else>: <expr><literal type="number">0xFF000000</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>bmp</name><operator>.</operator><name>bmWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>bmp</name><operator>.</operator><name>bmHeight</name></name></expr>;</expr_stmt>
<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cursor_capture_icon_bitmap</name><parameter_list>(<parameter><decl><type><name>ICONINFO</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>copy_from_color</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>copy_from_mask</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>get_cached_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_cursor</name></name></type> <name>cc</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cached_textures</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_cursor</name></name> <modifier>*</modifier></type><name>pcc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cached_textures</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcc</name><operator>-&gt;</operator><name>cx</name></name> <operator>==</operator> <name>cx</name> <operator>&amp;&amp;</operator> <name><name>pcc</name><operator>-&gt;</operator><name>cy</name></name> <operator>==</operator> <name>cy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pcc</name><operator>-&gt;</operator><name>texture</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>GS_BGRA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cached_textures</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cc</name><operator>.</operator><name>texture</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>cursor_capture_icon</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>HICON</name></type> <name>icon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICONINFO</name></type> <name>ii</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icon</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetIconInfo</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>cursor_capture_icon_bitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>last_cx</name></name> <operator>!=</operator> <name>width</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>last_cy</name></name> <operator>!=</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>get_cached_texture</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>last_cx</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>last_cy</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gs_texture_set_image</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>x_hotspot</name></name> <operator>=</operator> <name><name>ii</name><operator>.</operator><name>xHotspot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>y_hotspot</name></name> <operator>=</operator> <name><name>ii</name><operator>.</operator><name>yHotspot</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>ii</name><operator>.</operator><name>hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>ii</name><operator>.</operator><name>hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>texture</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cursor_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURSORINFO</name></type> <name>ci</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HICON</name></type> <name>icon</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ci</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetCursorInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cursor_pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ci</name><operator>.</operator><name>ptScreenPos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>==</operator> <name><name>ci</name><operator>.</operator><name>hCursor</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>CopyIcon</name><argument_list>(<argument><expr><name><name>ci</name><operator>.</operator><name>hCursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <call><name>cursor_capture_icon</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>hCursor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ci</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CURSOR_SHOWING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cursor_draw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>y_offset</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>x_scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y_scale</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>x</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>cursor_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>x_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>y</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>cursor_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>y_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>x_draw</name> <init>= <expr><name>x</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>x_hotspot</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>y_draw</name> <init>= <expr><name>y</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>y_hotspot</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>width</name> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>y</name></expr></argument> &gt;</argument_list></name> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>visible</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_blend_state_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_blend_function</name><argument_list>(<argument><expr><name>GS_BLEND_SRCALPHA</name></expr></argument>, <argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_enable_color</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_scale3f</name><argument_list>(<argument><expr><name>x_scale</name></expr></argument>, <argument><expr><name>y_scale</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_draw</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name>x_draw</name></expr></argument>, <argument><expr><name>y_draw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enable_color</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_blend_state_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cursor_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cached_textures</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_cursor</name></name> <modifier>*</modifier></type><name>pcc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cached_textures</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>pcc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cached_textures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
