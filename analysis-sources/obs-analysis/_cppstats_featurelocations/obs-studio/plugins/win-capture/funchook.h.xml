<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\funchook.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>inline</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>hook_type</name> <block>{
<decl><name>HOOKTYPE_FORWARD_OVERWRITE</name></decl>,
<decl><name>HOOKTYPE_FORWARD_CHAIN</name></decl>,
<decl><name>HOOKTYPE_REVERSE_CHAIN</name></decl>
}</block>;</enum>

<struct>struct <name>func_hook</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>call_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>func_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>hook_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bounce_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>hook_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_64bit_jump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hooked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>attempted_bounce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>unhook_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rehook_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>hook_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func_addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hook_addr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>hook_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>do_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>unhook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rehook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_hook</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>force_rehook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_hook</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
