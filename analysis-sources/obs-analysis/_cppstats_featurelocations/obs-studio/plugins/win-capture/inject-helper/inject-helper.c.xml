<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\inject-helper\inject-helper.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../obfuscate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../inject-library.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>inline</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_debug_privilege</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>flags</name> <init>= <expr><name>TOKEN_ADJUST_PRIVILEGES</name> <operator>|</operator> <name>TOKEN_QUERY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LUID</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><call><name>LookupPrivilegeValue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SE_DEBUG_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <name>SE_PRIVILEGE_ENABLED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdjustTokenPrivileges</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_process</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>desired_access</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inherit_handle</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>process_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>HANDLE</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>open_process_proc</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>open_process_proc</name> <operator>=</operator> <call><name>get_obfuscated_func</name><argument_list>(<argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"KERNEL32"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"HxjcQrmkb|~"</literal></expr></argument>,
<argument><expr><literal type="number">0xc82efdf78201df87</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>open_process_proc</name><argument_list>(<argument><expr><name>desired_access</name></expr></argument>, <argument><expr><name>inherit_handle</name></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>inject_library</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>inject_library_obf</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>, <argument><expr><literal type="string">"E}mo|d[cefubWk~bgk"</literal></expr></argument>,
<argument><expr><literal type="number">0x7c3371986918e8f6</literal></expr></argument>, <argument><expr><literal type="string">"Rqbr`T{cnor{Bnlgwz"</literal></expr></argument>,
<argument><expr><literal type="number">0x81bf81adc9456b35</literal></expr></argument>, <argument><expr><literal type="string">"]`~wrl`KeghiCt"</literal></expr></argument>,
<argument><expr><literal type="number">0xadc6a7b9acd73c9b</literal></expr></argument>, <argument><expr><literal type="string">"Zh}{}agHzfd@{"</literal></expr></argument>,
<argument><expr><literal type="number">0x57135138eb08ff1c</literal></expr></argument>, <argument><expr><literal type="string">"DnafGhj}l~sX"</literal></expr></argument>,
<argument><expr><literal type="number">0x350bfacdf81b2018</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>inject_library_safe</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>thread_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>inject_library_safe_obf</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>, <argument><expr><literal type="string">"[bs^fbkmwuKfmfOvI"</literal></expr></argument>,
<argument><expr><literal type="number">0xEAD293602FCF9778ULL</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>inject_library_full</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>process_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name> <init>= <expr><call><name>open_process</name><argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>process</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inject_library</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>INJECT_ERROR_OPEN_PROCESS_FAIL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inject_helper</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>use_safe_inject</name></decl>;</decl_stmt>

<expr_stmt><expr><name>use_safe_inject</name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INJECT_ERROR_INVALID_PARAMS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>use_safe_inject</name></expr> ?</condition><then> <expr><call><name>inject_library_safe</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>inject_library_full</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_PARAMETER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(x))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv_ansi</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>dll_path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPWSTR</name></type> <name>pCommandLineW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPWSTR</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>INJECT_ERROR_INVALID_PARAMS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_debug_privilege</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pCommandLineW</name> <operator>=</operator> <call><name>GetCommandLineW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>CommandLineToArgvW</name><argument_list>(<argument><expr><name>pCommandLineW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dll_path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inject_helper</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argv_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
