<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\dc-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dc-capture.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_MEAN_AND_LEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_textures</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>GS_BGRA</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator>
<call><name>gs_texture_create_gdi</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"[dc_capture_init] Failed to "</literal>
<literal type="string">"create textures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dc_capture_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compatibility</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dc_capture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_gdi_texture_available</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>compatibility</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name> <operator>=</operator> <name>compatibility</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_textures</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compatibility</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BITMAPINFO</name></type> <name>bi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>bih</name> <init>= <expr><operator>&amp;</operator><name><name>bi</name><operator>.</operator><name>bmiHeader</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>bmp</name></name> <operator>=</operator>
<call><name>CreateDIBSection</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><name>DIB_RGB_COLORS</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>old_bmp</name></name> <operator>=</operator> <call><name>SelectObject</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dc_capture_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>old_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dc_capture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_cursor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HICON</name></type> <name>icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICONINFO</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURSORINFO</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>win_pos</name> <init>= <expr><block>{<expr><name><name>capture</name><operator>-&gt;</operator><name>x</name></name></expr>, <expr><name><name>capture</name><operator>-&gt;</operator><name>y</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>capture</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CURSOR_SHOWING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>CopyIcon</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>hCursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icon</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetIconInfo</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>ptScreenPos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ii</name><operator>.</operator><name>xHotspot</name></name> <operator>-</operator> <name><name>win_pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>ptScreenPos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ii</name><operator>.</operator><name>yHotspot</name></name> <operator>-</operator> <name><name>win_pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawIconEx</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>icon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DI_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>ii</name><operator>.</operator><name>hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>ii</name><operator>.</operator><name>hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HDC</name></type> <name>dc_capture_get_dc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>capture</name><operator>-&gt;</operator><name>hdc</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>gs_texture_get_dc</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dc_capture_release_dc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_texture_set_image</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,
<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>gs_texture_release_dc</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dc_capture_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CURSORINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CURSORINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>cursor_captured</name></name> <operator>=</operator> <call><name>GetCursorInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>dc_capture_get_dc</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"[capture_screen] Failed to get "</literal>
<literal type="string">"texture DC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdc_target</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BitBlt</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>hdc_target</name></expr></argument>,
<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hdc_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>cursor_captured</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_cursor</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dc_capture_release_dc</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>texture_written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><name><name>capture</name><operator>-&gt;</operator><name>texture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passes</name> <operator>=</operator> <call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>GS_FLIP_V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dc_capture_render</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dc_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>valid</name></name> <operator>&amp;&amp;</operator> <name><name>capture</name><operator>-&gt;</operator><name>texture_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_texture</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
