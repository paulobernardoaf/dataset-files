<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\nt-stuff.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winternl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_STATE_WAITING</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_WAIT_REASON_SUSPENDED</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_OBS_SYSTEM_PROCESS_INFORMATION2</name> <block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>NextEntryOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ThreadCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>Reserved1</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name><name>Reserved2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>UniqueProcessId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>Reserved3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HandleCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>Reserved4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name><name>Reserved5</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIZE_T</name></type> <name>PeakPagefileUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIZE_T</name></type> <name>PrivatePageCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name><name>Reserved6</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>OBS_SYSTEM_PROCESS_INFORMATION2</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_OBS_SYSTEM_THREAD_INFORMATION</name> <block>{
<decl_stmt><decl><type><name>FILETIME</name></type> <name>KernelTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>UserTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>CreateTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>WaitTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>UniqueProcessId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>UniqueThreadId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>Priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>BasePriority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ContextSwitches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ThreadState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>WaitReason</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>Reserved1</name></decl>;</decl_stmt>
}</block></struct></type> <name>OBS_SYSTEM_THREAD_INFORMATION</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NT_SUCCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_SUCCESS</name><parameter_list>(<parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((NTSTATUS)(status) &gt;= 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_INFO_LENGTH_MISMATCH</name></cpp:macro> <cpp:value>((NTSTATUS)0xC0000004L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_named_attribs</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (o)-&gt;Length = sizeof(*(o)); (o)-&gt;ObjectName = name; (o)-&gt;RootDirectory = NULL; (o)-&gt;Attributes = 0; (o)-&gt;SecurityDescriptor = NULL; (o)-&gt;SecurityQualityOfService = NULL; } while (false)</cpp:value></cpp:define>









<typedef>typedef <function_decl><type><name>void</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>RTLINITUNICODESTRINGFUNC</name>)<parameter_list>(<parameter><decl><type><name>PCUNICODE_STRING</name></type> <name>pstr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>lpstrName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>NTSTATUS</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>NTOPENFUNC</name>)<parameter_list>(<parameter><decl><type><name>PHANDLE</name></type> <name>phandle</name></decl></parameter>, <parameter><decl><type><name>ACCESS_MASK</name></type> <name>access</name></decl></parameter>,
<parameter><decl><type><name>POBJECT_ATTRIBUTES</name></type> <name>objattr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>NTSTATUS</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>NTCREATEMUTANT</name>)<parameter_list>(<parameter><decl><type><name>PHANDLE</name></type> <name>phandle</name></decl></parameter>, <parameter><decl><type><name>ACCESS_MASK</name></type> <name>access</name></decl></parameter>,
<parameter><decl><type><name>POBJECT_ATTRIBUTES</name></type> <name>objattr</name></decl></parameter>,
<parameter><decl><type><name>BOOLEAN</name></type> <name>isowner</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ULONG</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>RTLNTSTATUSTODOSERRORFUNC</name>)<parameter_list>(<parameter><decl><type><name>NTSTATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>NTSTATUS</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>NTQUERYSYSTEMINFORMATIONFUNC</name>)<parameter_list>(<parameter><decl><type><name>SYSTEM_INFORMATION_CLASS</name></type></decl></parameter>,
<parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PULONG</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>FARPROC</name></type> <name>get_nt_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>ntdll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ntdll</name> <operator>=</operator> <call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"ntdll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>ntdll</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nt_set_last_error</name><parameter_list>(<parameter><decl><type><name>NTSTATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RTLNTSTATUSTODOSERRORFUNC</name></type> <name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>RTLNTSTATUSTODOSERRORFUNC</name><operator>)</operator><call><name>get_nt_func</name><argument_list>(
<argument><expr><literal type="string">"RtlNtStatusToDosError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><call><name>func</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtl_init_str</name><parameter_list>(<parameter><decl><type><name>UNICODE_STRING</name> <modifier>*</modifier></type><name>unistr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RTLINITUNICODESTRINGFUNC</name></type> <name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>RTLINITUNICODESTRINGFUNC</name><operator>)</operator><call><name>get_nt_func</name><argument_list>(
<argument><expr><literal type="string">"RtlInitUnicodeString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NTSTATUS</name></type> <name>nt_query_information</name><parameter_list>(<parameter><decl><type><name>SYSTEM_INFORMATION_CLASS</name></type> <name>info_class</name></decl></parameter>,
<parameter><decl><type><name>PVOID</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>info_len</name></decl></parameter>, <parameter><decl><type><name>PULONG</name></type> <name>ret_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NTQUERYSYSTEMINFORMATIONFUNC</name></type> <name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>NTQUERYSYSTEMINFORMATIONFUNC</name><operator>)</operator><call><name>get_nt_func</name><argument_list>(
<argument><expr><literal type="string">"NtQuerySystemInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>info_class</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>, <argument><expr><name>ret_len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NTSTATUS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>thread_is_suspended</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>process_id</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>size</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>suspended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>stat</name> <init>= <expr><call><name>nt_query_information</name><argument_list>(<argument><expr><name>SystemProcessInformation</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>!=</operator> <name>STATUS_INFO_LENGTH_MISMATCH</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>OBS_SYSTEM_PROCESS_INFORMATION2</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>UniqueProcessId</name></name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><name>process_id</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>offset</name> <init>= <expr><name><name>spi</name><operator>-&gt;</operator><name>NextEntryOffset</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spi</name> <operator>=</operator> <operator>(</operator><name>OBS_SYSTEM_PROCESS_INFORMATION2</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name>spi</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>OBS_SYSTEM_THREAD_INFORMATION</name> <modifier>*</modifier></type><name>sti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OBS_SYSTEM_THREAD_INFORMATION</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sti</name> <operator>=</operator> <operator>(</operator><name>OBS_SYSTEM_THREAD_INFORMATION</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name>spi</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spi</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>ULONG</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>spi</name><operator>-&gt;</operator><name>ThreadCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sti</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>UniqueThreadId</name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><name>thread_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>sti</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>suspended</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>ThreadState</name></name> <operator>==</operator> <name>THREAD_STATE_WAITING</name> <operator>&amp;&amp;</operator>
<name><name>info</name><operator>-&gt;</operator><name>WaitReason</name></name> <operator>==</operator> <name>THREAD_WAIT_REASON_SUSPENDED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>suspended</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_NT_OPEN_FUNC</name><parameter_list>(<parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>nt_name</name></type></parameter>, <parameter><type><name>access</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static HANDLE func_name(const wchar_t *name) { static bool initialized = false; static NTOPENFUNC open = NULL; HANDLE handle; NTSTATUS status; UNICODE_STRING unistr; OBJECT_ATTRIBUTES attr; if (!initialized) { open = (NTOPENFUNC)get_nt_func(#nt_name); initialized = true; } if (!open) return NULL; rtl_init_str(&amp;unistr, name); init_named_attribs(&amp;attr, &amp;unistr); status = open(&amp;handle, access, &amp;attr); if (NT_SUCCESS(status)) return handle; nt_set_last_error(status); return NULL; }</cpp:value></cpp:define>



























<macro><name>MAKE_NT_OPEN_FUNC</name><argument_list>(<argument>nt_open_mutex</argument>, <argument>NtOpenMutant</argument>, <argument>SYNCHRONIZE</argument>)</argument_list></macro>
<macro><name>MAKE_NT_OPEN_FUNC</name><argument_list>(<argument>nt_open_event</argument>, <argument>NtOpenEvent</argument>, <argument>EVENT_MODIFY_STATE | SYNCHRONIZE</argument>)</argument_list></macro>
<macro><name>MAKE_NT_OPEN_FUNC</name><argument_list>(<argument>nt_open_map</argument>, <argument>NtOpenSection</argument>, <argument>FILE_MAP_READ | FILE_MAP_WRITE</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>HANDLE</name></type> <name>nt_create_mutex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NTCREATEMUTANT</name></type> <name>create</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UNICODE_STRING</name></type> <name>unistr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OBJECT_ATTRIBUTES</name></type> <name>attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>create</name> <operator>=</operator> <operator>(</operator><name>NTCREATEMUTANT</name><operator>)</operator><call><name>get_nt_func</name><argument_list>(<argument><expr><literal type="string">"NtCreateMutant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rtl_init_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unistr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_named_attribs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unistr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>SYNCHRONIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>handle</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>nt_set_last_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
