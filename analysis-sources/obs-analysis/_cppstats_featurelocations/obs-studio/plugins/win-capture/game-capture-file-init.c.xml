<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\game-capture-file-init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strsafe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aclapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sddl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/windows/win-version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/c99defs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>has_elevation_internal</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SID_IDENTIFIER_AUTHORITY</name></type> <name>sia</name> <init>= <expr><name>SECURITY_NT_AUTHORITY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PSID</name></type> <name>sid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>elevated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SECURITY_BUILTIN_DOMAIN_RID</name></expr></argument>,
<argument><expr><name>DOMAIN_ALIAS_RID_ADMINS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name>sid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elevated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>elevated</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>has_elevation</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>elevated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elevated</name> <operator>=</operator> <call><name>has_elevation_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>elevated</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_aap_perms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PSECURITY_DESCRIPTOR</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SID</name> <modifier>*</modifier></type><name>aap_sid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SID</name> <modifier>*</modifier></type><name>bu_sid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PACL</name></type> <name>new_dacl1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PACL</name></type> <name>new_dacl2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PACL</name></type> <name>dacl</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetNamedSecurityInfoW</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>SE_FILE_OBJECT</name></expr></argument>,
<argument><expr><name>DACL_SECURITY_INFORMATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dacl</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EXPLICIT_ACCESSW</name></type> <name>ea</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>grfAccessPermissions</name></name> <operator>=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_EXECUTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>grfAccessMode</name></name> <operator>=</operator> <name>GRANT_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>grfInheritance</name></name> <operator>=</operator> <name>SUB_CONTAINERS_AND_OBJECTS_INHERIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>Trustee</name><operator>.</operator><name>TrusteeForm</name></name> <operator>=</operator> <name>TRUSTEE_IS_SID</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ConvertStringSidToSidW</name><argument_list>(<argument><expr><literal type="string">L"S-1-15-2-1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>aap_sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>Trustee</name><operator>.</operator><name>ptstrName</name></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>aap_sid</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetEntriesInAclW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><name>dacl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_dacl1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>grfAccessPermissions</name></name> <operator>=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name> <operator>|</operator>
<name>GENERIC_EXECUTE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ConvertStringSidToSidW</name><argument_list>(<argument><expr><literal type="string">L"S-1-5-32-545"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bu_sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>Trustee</name><operator>.</operator><name>ptstrName</name></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>bu_sid</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>s</name> <init>= <expr><call><name>SetEntriesInAclW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><name>new_dacl1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_dacl2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetNamedSecurityInfoW</name><argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>dir</name></expr></argument>, <argument><expr><name>SE_FILE_OBJECT</name></expr></argument>,
<argument><expr><name>DACL_SECURITY_INFORMATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>new_dacl2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_dacl1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>new_dacl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_dacl2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>new_dacl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>aap_sid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>aap_sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bu_sid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>bu_sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LSTATUS</name></type> <name>get_reg</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hkey</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>sub_key</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>value_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>b64</name></expr> ?</condition><then> <expr><name>KEY_WOW64_64KEY</name></expr> </then><else>: <expr><name>KEY_WOW64_32KEY</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>sub_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_programdata_path</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>subpath</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SHGetFolderPathW(NULL, CSIDL_COMMON_APPDATA, NULL, SHGFP_TYPE_CURRENT, path); StringCbCatW(path, sizeof(path), L"\\"); StringCbCatW(path, sizeof(path), subpath); } while (false)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_filename</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { StringCbCatW(str, sizeof(str), name); StringCbCatW(str, sizeof(str), b64 ? L"64" : L"32"); StringCbCatW(str, sizeof(str), ext); } while (false)</cpp:value></cpp:define>









<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>programdata64_hook_exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>programdata32_hook_exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_hook_path</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_programdata_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"obs-studio-hook\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"graphics-hook"</literal></expr></argument>, <argument><expr><literal type="string">L".dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b64</name> <operator>&amp;&amp;</operator> <name>programdata64_hook_exists</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>b64</name> <operator>&amp;&amp;</operator> <name>programdata32_hook_exists</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path_utf8</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path_utf8</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>obs_module_file</name><argument_list>(<argument><expr><ternary><condition><expr><name>b64</name></expr> ?</condition><then> <expr><literal type="string">"graphics-hook64.dll"</literal></expr>
</then><else>: <expr><literal type="string">"graphics-hook32.dll"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_LAYERS</name></cpp:macro> <cpp:value>L"SOFTWARE\\Khronos\\Vulkan\\ImplicitLayers"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>update_hook_file</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>temp</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>src</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>dst</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>src_json</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>dst_json</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringCbCopyW</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">L"..\\..\\data\\obs-plugins\\"</literal>
<literal type="string">L"win-capture\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filename</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">L"obs-vulkan"</literal></expr></argument>, <argument><expr><literal type="string">L".json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_wfullpath</name><argument_list>(<argument><expr><name>src_json</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>StringCbCopyW</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">L"..\\..\\data\\obs-plugins\\"</literal>
<literal type="string">L"win-capture\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filename</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">L"graphics-hook"</literal></expr></argument>, <argument><expr><literal type="string">L".dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_wfullpath</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_programdata_path</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">L"obs-studio-hook\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringCbCopyW</name><argument_list>(<argument><expr><name>dst_json</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst_json</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringCbCopyW</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filename</name><argument_list>(<argument><expr><name>dst_json</name></expr></argument>, <argument><expr><literal type="string">L"obs-vulkan"</literal></expr></argument>, <argument><expr><literal type="string">L".json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filename</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">L"graphics-hook"</literal></expr></argument>, <argument><expr><literal type="string">L".dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>src_json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>dst_json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CreateDirectoryW</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_elevation</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_aap_perms</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CopyFileW</name><argument_list>(<argument><expr><name>src_json</name></expr></argument>, <argument><expr><name>dst_json</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CopyFileW</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_elevation</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_aap_perms</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>ver_src</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>ver_dst</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_dll_ver</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver_src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_dll_ver</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver_dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><call><name>win_version_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver_src</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CopyFileW</name><argument_list>(<argument><expr><name>src_json</name></expr></argument>, <argument><expr><name>dst_json</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CopyFileW</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_dll_ver</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver_dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name><name>ver_dst</name><operator>.</operator><name>major</name></name> <operator>&gt;</operator> <name><name>ver_src</name><operator>.</operator><name>major</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(LOG_WARNING, "%s: " format, "[Vulkan Capture Init]", ##__VA_ARGS__)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>init_vulkan_registry</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>b64</name></expr> ?</condition><then> <expr><name>KEY_WOW64_64KEY</name></expr> </then><else>: <expr><name>KEY_WOW64_32KEY</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_programdata_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"obs-studio-hook\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"obs-vulkan"</literal></expr></argument>, <argument><expr><literal type="string">L".json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_reg</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>IMPLICIT_LAYERS</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_reg</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>IMPLICIT_LAYERS</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ERROR_FILE_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to query registry keys: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator> <call><name>has_elevation</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>IMPLICIT_LAYERS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>KEY_WRITE</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RegDeleteValueW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to query registry keys: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HKEY</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><call><name>has_elevation</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>HKEY_LOCAL_MACHINE</name></expr> </then><else>: <expr><name>HKEY_CURRENT_USER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RegCreateKeyExW</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>IMPLICIT_LAYERS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>KEY_WRITE</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to create registry key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RegSetValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>REG_DWORD</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>zero</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to set registry value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_hook_files</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>update_hook_file</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>programdata64_hook_exists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vulkan_registry</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>update_hook_file</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>programdata32_hook_exists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vulkan_registry</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
