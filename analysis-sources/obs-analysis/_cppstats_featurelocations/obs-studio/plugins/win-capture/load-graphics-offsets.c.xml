<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\load-graphics-offsets.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/windows/win-version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/config-file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/pipe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-hook-info.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>graphics_offsets</name></name></type> <name>offsets32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>graphics_offsets</name></name></type> <name>offsets64</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>load_offsets_from_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graphics_offsets</name></name> <modifier>*</modifier></type><name>offsets</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>config_t</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>config_open_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONFIG_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>d3d8</name><operator>.</operator><name>present</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d8"</literal></expr></argument>, <argument><expr><literal type="string">"present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>present</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><literal type="string">"present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>present_ex</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><literal type="string">"present_ex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>present_swap</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><literal type="string">"present_swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>d3d9_clsoff</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><literal type="string">"d3d9_clsoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>is_d3d9ex_clsoff</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><literal type="string">"is_d3d9ex_clsoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>dxgi</name><operator>.</operator><name>present</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"dxgi"</literal></expr></argument>, <argument><expr><literal type="string">"present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>dxgi</name><operator>.</operator><name>present1</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"dxgi"</literal></expr></argument>, <argument><expr><literal type="string">"present1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>-&gt;</operator><name>dxgi</name><operator>.</operator><name>resize</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>config_get_uint</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"dxgi"</literal></expr></argument>, <argument><expr><literal type="string">"resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_close</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>load_offsets_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graphics_offsets</name></name> <modifier>*</modifier></type><name>offsets</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>os_quick_read_utf8_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>load_offsets_from_string</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>config_ver_mismatch</name><parameter_list>(<parameter><decl><type><name>config_t</name> <modifier>*</modifier></type><name>ver_config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>config_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mismatch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_sub_ver</name><parameter_list>(<parameter><type><name>subver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>config_ver.subver = (int)config_get_int(ver_config, section, #subver); mismatch |= config_ver.subver != ver-&gt;subver;</cpp:value></cpp:define>



<expr_stmt><expr><call><name>get_sub_ver</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_sub_ver</name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_sub_ver</name><argument_list>(<argument><expr><name>build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_sub_ver</name><argument_list>(<argument><expr><name>revis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>get_sub_ver</name></cpp:undef>

<return>return <expr><name>mismatch</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write_config_ver</name><parameter_list>(<parameter><decl><type><name>config_t</name> <modifier>*</modifier></type><name>ver_config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_sub_ver</name><parameter_list>(<parameter><type><name>subver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>config_set_int(ver_config, section, #subver, ver-&gt;subver);</cpp:value></cpp:define>


<expr_stmt><expr><call><name>set_sub_ver</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sub_ver</name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sub_ver</name><argument_list>(<argument><expr><name>build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sub_ver</name><argument_list>(<argument><expr><name>revis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>set_sub_ver</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_32bit_system_dll_ver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>system_lib</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>win_version_info</name></name> <modifier>*</modifier></type><name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetSystemWow64DirectoryW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetSystemDirectoryW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get windows 32bit system path: "</literal>
<literal type="string">"%lu"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>system_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>get_dll_ver</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cached_versions_match</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>d3d8_ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>d3d9_ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>dxgi_ver</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ver_mismatch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_t</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ver_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ver_mismatch</name> <operator>|=</operator> <operator>!</operator><call><name>get_32bit_system_dll_ver</name><argument_list>(<argument><expr><literal type="string">L"d3d8.dll"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d8_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ver_mismatch</name> <operator>|=</operator> <operator>!</operator><call><name>get_32bit_system_dll_ver</name><argument_list>(<argument><expr><literal type="string">L"d3d9.dll"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d9_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ver_mismatch</name> <operator>|=</operator> <operator>!</operator><call><name>get_32bit_system_dll_ver</name><argument_list>(<argument><expr><literal type="string">L"dxgi.dll"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxgi_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ver_file</name> <operator>=</operator> <call><name>obs_module_config_path</name><argument_list>(<argument><expr><literal type="string">"version.ini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ver_file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>config_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><name>ver_file</name></expr></argument>, <argument><expr><name>CONFIG_OPEN_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CONFIG_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ver_mismatch</name> <operator>|=</operator> <call><name>config_ver_mismatch</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d8_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ver_mismatch</name> <operator>|=</operator> <call><name>config_ver_mismatch</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d9_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ver_mismatch</name> <operator>|=</operator> <call><name>config_ver_mismatch</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"dxgi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxgi_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ver_mismatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_config_ver</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d8_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_config_ver</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d9_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_config_ver</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"dxgi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxgi_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_save_safe</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"tmp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>ver_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_close</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><name>ver_mismatch</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>load_graphics_offsets</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is32bit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offset_exe_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>offset_exe</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>config_ini</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_process_pipe_t</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is32bit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_64_bit_windows</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset_exe</name></expr></argument>, <argument><expr><literal type="string">"get-graphics-offsets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset_exe</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is32bit</name></expr> ?</condition><then> <expr><literal type="string">"32.exe"</literal></expr> </then><else>: <expr><literal type="string">"64.exe"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_exe_path</name> <operator>=</operator> <call><name>obs_module_file</name><argument_list>(<argument><expr><name><name>offset_exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>os_process_pipe_create</name><argument_list>(<argument><expr><name>offset_exe_path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"load_graphics_offsets: Failed to start '%s'"</literal></expr></argument>,
<argument><expr><name><name>offset_exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>=
<expr><call><name>os_process_pipe_read</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_ncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"load_graphics_offsets: Failed to read "</literal>
<literal type="string">"from '%s'"</literal></expr></argument>,
<argument><expr><name><name>offset_exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>











<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>load_offsets_from_string</name><argument_list>(<argument><expr><ternary><condition><expr><name>is32bit</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>offsets32</name></expr> </then><else>: <expr><operator>&amp;</operator><name>offsets64</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"load_graphics_offsets: Failed to load string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_process_pipe_destroy</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>offset_exe_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset_exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>load_cached_graphics_offsets</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is32bit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>config_ini</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>config_ini</name></expr></argument>, <argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>config_ini</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is32bit</name></expr> ?</condition><then> <expr><literal type="string">"32.ini"</literal></expr> </then><else>: <expr><literal type="string">"64.ini"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>load_offsets_from_file</name><argument_list>(<argument><expr><ternary><condition><expr><name>is32bit</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>offsets32</name></expr> </then><else>: <expr><operator>&amp;</operator><name>offsets64</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>config_ini</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>load_graphics_offsets</name><argument_list>(<argument><expr><name>is32bit</name></expr></argument>, <argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>config_ini</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>
</unit>
