<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\win-capture\graphics-hook\gl-capture.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4214</name><name>)</name></cpp:pragma> 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4054</name><name>)</name></cpp:pragma> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-decs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../funchook.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMMY_WINDOW_CLASS_NAME</name></cpp:macro> <cpp:value>L"graphics_hook_gl_dummy_window"</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>GUID_IDXGIFactory1</name> <init>=
<expr><block>{<expr><literal type="number">0x770aae78</literal></expr>, <expr><literal type="number">0xf26f</literal></expr>, <expr><literal type="number">0x4dba</literal></expr>, <expr><block>{<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x87</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>GUID_IDXGIResource</name> <init>=
<expr><block>{<expr><literal type="number">0x035f3ab4</literal></expr>, <expr><literal type="number">0x482e</literal></expr>, <expr><literal type="number">0x4e50</literal></expr>, <expr><block>{<expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0b</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>func_hook</name></name></type> <name>swap_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>func_hook</name></name></type> <name>wgl_swap_layer_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>func_hook</name></name></type> <name>wgl_swap_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>func_hook</name></name></type> <name>wgl_delete_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>darkest_dungeon_fix</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>functions_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>gl_data</name> <block>{
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLuint</name></type> <name>fbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>using_shtex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>using_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>shmem_fallback</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>shtex_data</name></name> <modifier>*</modifier></type><name>shtex_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3d11_device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11DeviceContext</name> <modifier>*</modifier></type><name>d3d11_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>d3d11_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDXGISwapChain</name> <modifier>*</modifier></type><name>dxgi_swap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>gl_device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>gl_dxobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLuint</name></type> <name>texture</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>shmem_data</name></name> <modifier>*</modifier></type><name>shmem_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>copy_wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLuint</name></type> <name><name>pbos</name><index>[<expr><name>NUM_BUFFERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLuint</name></type> <name><name>textures</name><index>[<expr><name>NUM_BUFFERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>texture_ready</name><index>[<expr><name>NUM_BUFFERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>texture_mapped</name><index>[<expr><name>NUM_BUFFERS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>gl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>nv_capture_available</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>gl_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>error</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"%s: %s: %lu"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>capture_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>using_shtex</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>gl_dxobj</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jimglDXUnregisterObjectNV</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>gl_dxobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jimglDXCloseDeviceNV</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>d3d11_tex</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Resource_Release</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>d3d11_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>d3d11_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11DeviceContext_Release</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>d3d11_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>d3d11_device</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>d3d11_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>dxgi_swap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDXGISwapChain_Release</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>dxgi_swap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>hwnd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_BUFFERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>pbos</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>texture_mapped</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>pbos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUnmapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>pbos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>fbo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDeleteFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_free"</literal></expr></argument>, <argument><expr><literal type="string">"GL error occurred on free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"------------------ gl capture freed ------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>base_get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>wgl_get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>jimglGetProcAddress</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_proc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>wgl_get_proc</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>base_get_proc</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>func</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_nv_functions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>jimglDXSetResourceShareHandleNV</name> <operator>=</operator>
<call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXSetResourceShareHandleNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXOpenDeviceNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXOpenDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXCloseDeviceNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXCloseDeviceNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXRegisterObjectNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXRegisterObjectNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXUnregisterObjectNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXUnregisterObjectNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXObjectAccessNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXObjectAccessNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXLockObjectsNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXLockObjectsNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jimglDXUnlockObjectsNV</name> <operator>=</operator> <call><name>get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDXUnlockObjectsNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_capture_available</name> <operator>=</operator>
<operator>!</operator><operator>!</operator><name>jimglDXSetResourceShareHandleNV</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>jimglDXOpenDeviceNV</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>!</operator><name>jimglDXCloseDeviceNV</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>jimglDXRegisterObjectNV</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>!</operator><name>jimglDXUnregisterObjectNV</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>jimglDXObjectAccessNV</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>!</operator><name>jimglDXLockObjectsNV</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>jimglDXUnlockObjectsNV</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_capture_available</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"Shared-texture OpenGL capture available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC</name><parameter_list>(<parameter><type><name>cur_func</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ptr = get_proc(#func); if (!ptr) { hlog("%s: failed to get function '%s'", #cur_func, #func); success = false; } } while (false)</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_gl_functions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jimglGetProcAddress</name> <operator>=</operator> <call><name>base_get_proc</name><argument_list>(<argument><expr><literal type="string">"wglGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jimglGetProcAddress</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"init_gl_functions: failed to get wglGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>jimglMakeCurrent</name></expr></argument>, <argument><expr><name>wglMakeCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>jimglGetCurrentDC</name></expr></argument>, <argument><expr><name>wglGetCurrentDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>jimglGetCurrentContext</name></expr></argument>,
<argument><expr><name>wglGetCurrentContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glTexImage2D</name></expr></argument>, <argument><expr><name>glTexImage2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glReadBuffer</name></expr></argument>, <argument><expr><name>glReadBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glGetTexImage</name></expr></argument>, <argument><expr><name>glGetTexImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glDrawBuffer</name></expr></argument>, <argument><expr><name>glDrawBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glGetError</name></expr></argument>, <argument><expr><name>glGetError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glBufferData</name></expr></argument>, <argument><expr><name>glBufferData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glDeleteBuffers</name></expr></argument>, <argument><expr><name>glDeleteBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glDeleteTextures</name></expr></argument>, <argument><expr><name>glDeleteTextures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glGenBuffers</name></expr></argument>, <argument><expr><name>glGenBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glGenTextures</name></expr></argument>, <argument><expr><name>glGenTextures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glMapBuffer</name></expr></argument>, <argument><expr><name>glMapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glUnmapBuffer</name></expr></argument>, <argument><expr><name>glUnmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glBindBuffer</name></expr></argument>, <argument><expr><name>glBindBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glGetIntegerv</name></expr></argument>, <argument><expr><name>glGetIntegerv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glBindTexture</name></expr></argument>, <argument><expr><name>glBindTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glGenFramebuffers</name></expr></argument>, <argument><expr><name>glGenFramebuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glDeleteFramebuffers</name></expr></argument>, <argument><expr><name>glDeleteFramebuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glBindFramebuffer</name></expr></argument>, <argument><expr><name>glBindFramebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glBlitFramebuffer</name></expr></argument>, <argument><expr><name>glBlitFramebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_PROC</name><argument_list>(<argument><expr><name>init_gl_functions</name></expr></argument>, <argument><expr><name>glFramebufferTexture2D</name></expr></argument>,
<argument><expr><name>glFramebufferTexture2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_nv_functions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_window_size</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>WindowFromDC</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>darkest_dungeon_fix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <literal type="number">1080</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_shtex_init_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <call><name>CreateWindowExW</name><argument_list>(
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DUMMY_WINDOW_CLASS_NAME</name></expr></argument>, <argument><expr><literal type="string">L"Dummy GL window, ignore"</literal></expr></argument>,
<argument><expr><name>WS_POPUP</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name> <operator>|</operator> <name>WS_CLIPSIBLINGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>.</operator><name>hwnd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_window: failed to create window: %d"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>HRESULT</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>create_dxgi_factory1_t</name>)<parameter_list>(<parameter><decl><type><name>REFIID</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>D3D_FEATURE_LEVEL</name></type> <name><name>feature_levels</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>D3D_FEATURE_LEVEL_11_0</name></expr>,
<expr><name>D3D_FEATURE_LEVEL_10_1</name></expr>,
<expr><name>D3D_FEATURE_LEVEL_10_0</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_shtex_init_d3d11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>D3D_FEATURE_LEVEL</name></type> <name>level_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDXGIFactory1</name> <modifier>*</modifier></type><name>factory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>adapter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>d3d11</name> <init>= <expr><call><name>load_system_library</name><argument_list>(<argument><expr><literal type="string">"d3d11.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d3d11</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to load D3D11.dll: %d"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>dxgi</name> <init>= <expr><call><name>load_system_library</name><argument_list>(<argument><expr><literal type="string">"dxgi.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dxgi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to load DXGI.dll: %d"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXGI_SWAP_CHAIN_DESC</name></type> <name>desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BufferCount</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BufferDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>DXGI_FORMAT_B8G8R8A8_UNORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BufferDesc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BufferDesc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BufferUsage</name></name> <operator>=</operator> <name>DXGI_USAGE_RENDER_TARGET_OUTPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Windowed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputWindow</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>create_dxgi_factory1_t</name></type> <name>create_factory</name> <init>=
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dxgi</name></expr></argument>, <argument><expr><literal type="string">"CreateDXGIFactory1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create_factory</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to load CreateDXGIFactory1 "</literal>
<literal type="string">"procedure: %d"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN</name></type> <name>create</name> <init>=
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>d3d11</name></expr></argument>, <argument><expr><literal type="string">"D3D11CreateDeviceAndSwapChain"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to load "</literal>
<literal type="string">"D3D11CreateDeviceAndSwapChain procedure: %d"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>create_factory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GUID_IDXGIFactory1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog_hr</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to create factory"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIFactory1_EnumAdapters1</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>IDXGIAdapter1</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDXGIFactory1_Release</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog_hr</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to create adapter"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>D3D_DRIVER_TYPE_UNKNOWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>feature_levels</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>feature_levels</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>D3D_FEATURE_LEVEL</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>D3D11_SDK_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>dxgi_swap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>d3d11_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level_used</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>d3d11_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDXGIAdapter_Release</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog_hr</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11: failed to create device"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_shtex_init_d3d11_tex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDXGIResource</name> <modifier>*</modifier></type><name>dxgi_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>DXGI_FORMAT_B8G8R8A8_UNORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>MiscFlags</name></name> <operator>=</operator> <name>D3D11_RESOURCE_MISC_SHARED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_RENDER_TARGET</name> <operator>|</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>d3d11_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>d3d11_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog_hr</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11_tex: failed to create texture"</literal></expr></argument>,
<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>d3d11_tex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_IDXGIResource</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dxgi_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog_hr</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11_tex: failed to get IDXGIResource"</literal></expr></argument>,
<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIResource_GetSharedHandle</name><argument_list>(<argument><expr><name>dxgi_res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDXGIResource_Release</name><argument_list>(<argument><expr><name>dxgi_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog_hr</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_d3d11_tex: failed to get shared handle"</literal></expr></argument>,
<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_shtex_init_gl_tex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>gl_device</name></name> <operator>=</operator> <call><name>jimglDXOpenDeviceNV</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>d3d11_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_gl_tex: failed to open device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_gl_tex"</literal></expr></argument>, <argument><expr><literal type="string">"failed to generate texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>gl_dxobj</name></name> <operator>=</operator> <call><name>jimglDXRegisterObjectNV</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>d3d11_tex</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>,
<argument><expr><name>WGL_ACCESS_WRITE_DISCARD_NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>.</operator><name>gl_dxobj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_init_gl_tex: failed to register object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_init_fbo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_init_fbo"</literal></expr></argument>, <argument><expr><literal type="string">"failed to initialize FBO"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_shtex_init</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shtex_init_window</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shtex_init_d3d11</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shtex_init_d3d11_tex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shtex_init_gl_tex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_init_fbo</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>capture_init_shtex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>shtex_info</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>base_cx</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>base_cy</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>format</name></name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>data</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl shared texture capture successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_shmem_init_data</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pbos</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_data"</literal></expr></argument>, <argument><expr><literal type="string">"failed to bind pbo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_STREAM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_data"</literal></expr></argument>, <argument><expr><literal type="string">"failed to set pbo data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>textures</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_data"</literal></expr></argument>, <argument><expr><literal type="string">"failed to set bind texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_BGRA</name></expr></argument>,
<argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_data"</literal></expr></argument>, <argument><expr><literal type="string">"failed to set texture data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_shmem_init_buffers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><name><name>data</name><operator>.</operator><name>cx</name></name> <operator>*</operator> <name><name>data</name><operator>.</operator><name>cy</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>last_pbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>last_tex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><name>NUM_BUFFERS</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pbos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_buffers"</literal></expr></argument>, <argument><expr><literal type="string">"failed to generate buffers"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><name>NUM_BUFFERS</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>textures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_buffers"</literal></expr></argument>, <argument><expr><literal type="string">"failed to generate textures"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER_BINDING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_pbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_buffers"</literal></expr></argument>,
<argument><expr><literal type="string">"failed to save pixel pack buffer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_TEXTURE_BINDING_2D</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_init_buffers"</literal></expr></argument>, <argument><expr><literal type="string">"failed to save texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_BUFFERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shmem_init_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name>last_pbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>last_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_shmem_init</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shmem_init_buffers</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_init_fbo</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>capture_init_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>shmem_info</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>base_cx</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>base_cy</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cx</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl memory capture successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_FAILED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_SHTEX_FAILED</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gl_init</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><call><name>WindowFromDC</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>INIT_FAILED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>darkest_dungeon_fix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>base_cx</name></name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>base_cy</name></name> <operator>=</operator> <literal type="number">1080</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>base_cx</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>base_cy</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hdc</name></name> <operator>=</operator> <name>hdc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>DXGI_FORMAT_B8G8R8A8_UNORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>using_scale</name></name> <operator>=</operator> <name><name>global_hook_info</name><operator>-&gt;</operator><name>use_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>using_shtex</name></name> <operator>=</operator> <name>nv_capture_available</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>global_hook_info</name><operator>-&gt;</operator><name>force_shmem</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>.</operator><name>shmem_fallback</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>using_scale</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name><name>global_hook_info</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name><name>global_hook_info</name><operator>-&gt;</operator><name>cy</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>base_cx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>base_cy</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>using_shtex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_shtex_init</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>INIT_SHTEX_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_shmem_init</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>INIT_SUCCESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_copy_backbuffer</name><parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_copy_backbuffer"</literal></expr></argument>, <argument><expr><literal type="string">"failed to bind FBO"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_copy_backbuffer"</literal></expr></argument>, <argument><expr><literal type="string">"failed to bind texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>,
<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_copy_backbuffer"</literal></expr></argument>, <argument><expr><literal type="string">"failed to set frame buffer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glReadBuffer</name><argument_list>(<argument><expr><name>GL_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>darkest_dungeon_fix</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GL_INVALID_OPERATION</name> <operator>&amp;&amp;</operator>
<call><name>_strcmpi</name><argument_list>(<argument><expr><name>process_name</name></expr></argument>, <argument><expr><literal type="string">"Darkest.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDrawBuffer</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_copy_backbuffer"</literal></expr></argument>, <argument><expr><literal type="string">"failed to set draw buffer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBlitFramebuffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>base_cx</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>base_cy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cx</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>cy</name></name></expr></argument>, <argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_copy_backbuffer"</literal></expr></argument>, <argument><expr><literal type="string">"failed to blit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_shtex_capture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>last_fbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>last_tex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jimglDXLockObjectsNV</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>gl_dxobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER_BINDING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_capture"</literal></expr></argument>, <argument><expr><literal type="string">"failed to get last fbo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_TEXTURE_BINDING_2D</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shtex_capture"</literal></expr></argument>, <argument><expr><literal type="string">"failed to get last texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_copy_backbuffer</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>last_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>last_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jimglDXUnlockObjectsNV</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>gl_device</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>gl_dxobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDXGISwapChain_Present</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>dxgi_swap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_shmem_capture_queue_copy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_BUFFERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>texture_ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>texture_ready</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pbos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_capture_queue_copy"</literal></expr></argument>,
<argument><expr><literal type="string">"failed to bind pbo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator>
<call><name>glMapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name>GL_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>texture_mapped</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmem_copy_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_shmem_capture_stage</name><parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>dst_pbo</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>src_tex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>src_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_capture_stage"</literal></expr></argument>, <argument><expr><literal type="string">"failed to bind src_tex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name>dst_pbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_capture_stage"</literal></expr></argument>, <argument><expr><literal type="string">"failed to bind dst_pbo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGetTexImage</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_BGRA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_capture_stage"</literal></expr></argument>, <argument><expr><literal type="string">"failed to read src_tex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_shmem_capture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>last_fbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>last_tex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER_BINDING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_capture"</literal></expr></argument>, <argument><expr><literal type="string">"failed to get last fbo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_TEXTURE_BINDING_2D</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_error</name><argument_list>(<argument><expr><literal type="string">"gl_shmem_capture"</literal></expr></argument>, <argument><expr><literal type="string">"failed to get last texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_shmem_capture_queue_copy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_tex</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>cur_tex</name></name> <operator>==</operator> <name>NUM_BUFFERS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>data</name><operator>.</operator><name>cur_tex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_copy_backbuffer</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>textures</name><index>[<expr><name>next_tex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>copy_wait</name></name> <operator>&lt;</operator> <name>NUM_BUFFERS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>copy_wait</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>GLuint</name></type> <name>src</name> <init>= <expr><name><name>data</name><operator>.</operator><name>textures</name><index>[<expr><name>next_tex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLuint</name></type> <name>dst</name> <init>= <expr><name><name>data</name><operator>.</operator><name>pbos</name><index>[<expr><name>next_tex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>shmem_texture_data_lock</name><argument_list>(<argument><expr><name>next_tex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUnmapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>texture_mapped</name><index>[<expr><name>next_tex</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmem_texture_data_unlock</name><argument_list>(<argument><expr><name>next_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_shmem_capture_stage</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>texture_ready</name><index>[<expr><name>next_tex</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>last_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>last_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_capture</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>critical_failure</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>critical_failure</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>functions_initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>functions_initialized</name> <operator>=</operator> <call><name>init_gl_functions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>functions_initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>critical_failure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_should_stop</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>capture_should_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gl_init</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INIT_SHTEX_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>shmem_fallback</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_init</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>capture_ready</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>hdc</name> <operator>==</operator> <name><name>data</name><operator>.</operator><name>hdc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cy</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>get_window_size</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_cx</name> <operator>!=</operator> <name><name>data</name><operator>.</operator><name>base_cx</name></name> <operator>||</operator> <name>new_cy</name> <operator>!=</operator> <name><name>data</name><operator>.</operator><name>base_cy</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_cx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_cy</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>using_shtex</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_shtex_capture</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_shmem_capture</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>hook_swap_buffers</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_capture</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unhook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swap_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>call</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>swap_buffers</name><operator>.</operator><name>call_addr</name></name></expr></init>;</function_decl>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swap_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_capture</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>hook_wgl_swap_buffers</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_capture</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unhook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>call</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>wgl_swap_buffers</name><operator>.</operator><name>call_addr</name></name></expr></init>;</function_decl>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_capture</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>hook_wgl_swap_layer_buffers</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>planes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_capture</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unhook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_layer_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>call</name>)<parameter_list>(<parameter><decl><type><name>HDC</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>wgl_swap_layer_buffers</name><operator>.</operator><name>call_addr</name></name></expr></init>;</function_decl>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_layer_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_capture</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>hook_wgl_delete_context</name><parameter_list>(<parameter><decl><type><name>HGLRC</name></type> <name>hrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>functions_initialized</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HDC</name></type> <name>last_hdc</name> <init>= <expr><call><name>jimglGetCurrentDC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLRC</name></type> <name>last_hrc</name> <init>= <expr><call><name>jimglGetCurrentContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jimglMakeCurrent</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>hdc</name></name></expr></argument>, <argument><expr><name>hrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jimglMakeCurrent</name><argument_list>(<argument><expr><name>last_hdc</name></expr></argument>, <argument><expr><name>last_hrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unhook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_delete_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>call</name>)<parameter_list>(<parameter><decl><type><name>HGLRC</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>wgl_delete_context</name><operator>.</operator><name>call_addr</name></name></expr></init>;</function_decl>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call</name><argument_list>(<argument><expr><name>hrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_delete_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_register_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WNDCLASSW</name></type> <name>wc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>DefWindowProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>DUMMY_WINDOW_CLASS_NAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterClassW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"gl_register_window: failed to register window class: %d"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hook_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>wgl_dc_proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>wgl_slb_proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>wgl_sb_proc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gl</name> <operator>=</operator> <call><name>get_system_module</name><argument_list>(<argument><expr><literal type="string">"opengl32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gl</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>process_name</name> <init>= <expr><call><name>get_process_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_strcmpi</name><argument_list>(<argument><expr><name>process_name</name></expr></argument>, <argument><expr><literal type="string">"yo_cm_client.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>_strcmpi</name><argument_list>(<argument><expr><name>process_name</name></expr></argument>, <argument><expr><literal type="string">"cm_client.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"Ignoring opengl for game: %s"</literal></expr></argument>, <argument><expr><name>process_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_register_window</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wgl_dc_proc</name> <operator>=</operator> <call><name>base_get_proc</name><argument_list>(<argument><expr><literal type="string">"wglDeleteContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wgl_slb_proc</name> <operator>=</operator> <call><name>base_get_proc</name><argument_list>(<argument><expr><literal type="string">"wglSwapLayerBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wgl_sb_proc</name> <operator>=</operator> <call><name>base_get_proc</name><argument_list>(<argument><expr><literal type="string">"wglSwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hook_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swap_buffers</name></expr></argument>, <argument><expr><name>SwapBuffers</name></expr></argument>, <argument><expr><name>hook_swap_buffers</name></expr></argument>, <argument><expr><literal type="string">"SwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wgl_dc_proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hook_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_delete_context</name></expr></argument>, <argument><expr><name>wgl_dc_proc</name></expr></argument>,
<argument><expr><name>hook_wgl_delete_context</name></expr></argument>, <argument><expr><literal type="string">"wglDeleteContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_delete_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wgl_slb_proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hook_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_layer_buffers</name></expr></argument>, <argument><expr><name>wgl_slb_proc</name></expr></argument>,
<argument><expr><name>hook_wgl_swap_layer_buffers</name></expr></argument>, <argument><expr><literal type="string">"wglSwapLayerBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_layer_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wgl_sb_proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hook_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_buffers</name></expr></argument>, <argument><expr><name>wgl_sb_proc</name></expr></argument>, <argument><expr><name>hook_wgl_swap_buffers</name></expr></argument>,
<argument><expr><literal type="string">"wglSwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wgl_swap_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rehook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swap_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
