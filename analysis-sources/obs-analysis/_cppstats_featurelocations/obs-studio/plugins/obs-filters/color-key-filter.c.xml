<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-filters\color-key-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/matrix4.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec4.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_OPACITY</name></cpp:macro> <cpp:value>"opacity"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_CONTRAST</name></cpp:macro> <cpp:value>"contrast"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_BRIGHTNESS</name></cpp:macro> <cpp:value>"brightness"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_GAMMA</name></cpp:macro> <cpp:value>"gamma"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_COLOR_TYPE</name></cpp:macro> <cpp:value>"key_color_type"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_KEY_COLOR</name></cpp:macro> <cpp:value>"key_color"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_SIMILARITY</name></cpp:macro> <cpp:value>"similarity"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_SMOOTHNESS</name></cpp:macro> <cpp:value>"smoothness"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_OPACITY</name></cpp:macro> <cpp:value>obs_module_text("Opacity")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CONTRAST</name></cpp:macro> <cpp:value>obs_module_text("Contrast")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_BRIGHTNESS</name></cpp:macro> <cpp:value>obs_module_text("Brightness")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_GAMMA</name></cpp:macro> <cpp:value>obs_module_text("Gamma")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_COLOR_TYPE</name></cpp:macro> <cpp:value>obs_module_text("KeyColorType")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_KEY_COLOR</name></cpp:macro> <cpp:value>obs_module_text("KeyColor")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_SIMILARITY</name></cpp:macro> <cpp:value>obs_module_text("Similarity")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_SMOOTHNESS</name></cpp:macro> <cpp:value>obs_module_text("Smoothness")</cpp:value></cpp:define>



<struct>struct <name>color_key_filter_data</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>color_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>contrast_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>brightness_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gamma_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>key_color_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>similarity_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>smoothness_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>contrast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>brightness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>key_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>similarity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>smoothness</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_key_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ColorKeyFilter"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>color_settings_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>color_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>opacity</name> <init>=
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_OPACITY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>color</name> <init>= <expr><literal type="number">0xFFFFFF</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>opacity</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>contrast</name> <init>= <expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CONTRAST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>brightness</name> <init>= <expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_BRIGHTNESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>gamma</name> <init>= <expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_GAMMA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>contrast</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>contrast</name> <operator>&lt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><operator>-</operator><name>contrast</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name>contrast</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>brightness</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gamma</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>gamma</name> <operator>&lt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><name>gamma</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>gamma</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>contrast</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>contrast</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>brightness</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>brightness</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>gamma</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>gamma</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec4_from_rgba</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>key_settings_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>color_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>similarity</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_SIMILARITY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>smoothness</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_SMOOTHNESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>key_color</name> <init>=
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_KEY_COLOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_type</name> <init>=
<expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COLOR_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>, <argument><expr><literal type="string">"green"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_color</name> <operator>=</operator> <literal type="number">0x00FF00</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>, <argument><expr><literal type="string">"blue"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_color</name> <operator>=</operator> <literal type="number">0xFF0000</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>, <argument><expr><literal type="string">"red"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_color</name> <operator>=</operator> <literal type="number">0x0000FF</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>, <argument><expr><literal type="string">"magenta"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_color</name> <operator>=</operator> <literal type="number">0xFF00FF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec4_from_rgba</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>key_color</name></name></expr></argument>, <argument><expr><name>key_color</name> <operator>|</operator> <literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>similarity</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>similarity</name> <operator>/</operator> <literal type="number">1000.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>smoothness</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>smoothness</name> <operator>/</operator> <literal type="number">1000.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_key_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>color_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>color_settings_update</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>key_settings_update</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_key_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>color_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_destroy</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>color_key_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>color_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>=
<expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>color_key_filter_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effect_path</name> <init>= <expr><call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"color_key_filter.effect"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <call><name>gs_effect_create_from_file</name><argument_list>(<argument><expr><name>effect_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>color_param</name></name> <operator>=</operator>
<call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>contrast_param</name></name> <operator>=</operator>
<call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>brightness_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>gamma_param</name></name> <operator>=</operator>
<call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>key_color_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"key_color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>similarity_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"similarity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>smoothness_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"smoothness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>effect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>color_key_destroy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>color_key_update</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_key_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>color_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_process_filter_begin</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>,
<argument><expr><name>OBS_ALLOW_DIRECT_RENDERING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>color_param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>contrast_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>contrast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>brightness_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>brightness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>gamma_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>gamma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>key_color_param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>key_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>similarity_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>similarity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>smoothness_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>smoothness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_process_filter_end</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>key_type_changed</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COLOR_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>custom</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"custom"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_KEY_COLOR</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>custom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>color_key_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_COLOR_TYPE</name></expr></argument>,
<argument><expr><name>TEXT_COLOR_TYPE</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Green"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"green"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Blue"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"blue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Red"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"red"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Magenta"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"magenta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"CustomColor"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"custom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>key_type_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_color</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_KEY_COLOR</name></expr></argument>, <argument><expr><name>TEXT_KEY_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_SIMILARITY</name></expr></argument>,
<argument><expr><name>TEXT_SIMILARITY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_SMOOTHNESS</name></expr></argument>,
<argument><expr><name>TEXT_SMOOTHNESS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_OPACITY</name></expr></argument>, <argument><expr><name>TEXT_OPACITY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_CONTRAST</name></expr></argument>, <argument><expr><name>TEXT_CONTRAST</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_BRIGHTNESS</name></expr></argument>,
<argument><expr><name>TEXT_BRIGHTNESS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_GAMMA</name></expr></argument>, <argument><expr><name>TEXT_GAMMA</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>,
<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_key_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_OPACITY</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CONTRAST</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_BRIGHTNESS</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_GAMMA</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_KEY_COLOR</name></expr></argument>, <argument><expr><literal type="number">0x00FF00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COLOR_TYPE</name></expr></argument>, <argument><expr><literal type="string">"green"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_SIMILARITY</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_SMOOTHNESS</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>color_key_filter</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"color_key_filter"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>color_key_name</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>color_key_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>color_key_destroy</name></expr>,
<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>color_key_render</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>color_key_update</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>color_key_properties</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>color_key_defaults</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
