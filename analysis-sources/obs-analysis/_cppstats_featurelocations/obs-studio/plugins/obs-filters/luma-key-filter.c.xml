<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-filters\luma-key-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_LUMA_MAX</name></cpp:macro> <cpp:value>"luma_max"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_LUMA_MIN</name></cpp:macro> <cpp:value>"luma_min"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_LUMA_MAX_SMOOTH</name></cpp:macro> <cpp:value>"luma_max_smooth"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_LUMA_MIN_SMOOTH</name></cpp:macro> <cpp:value>"luma_min_smooth"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LUMA_MAX</name></cpp:macro> <cpp:value>obs_module_text("Luma.LumaMax")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LUMA_MIN</name></cpp:macro> <cpp:value>obs_module_text("Luma.LumaMin")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LUMA_MAX_SMOOTH</name></cpp:macro> <cpp:value>obs_module_text("Luma.LumaMaxSmooth")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LUMA_MIN_SMOOTH</name></cpp:macro> <cpp:value>obs_module_text("Luma.LumaMinSmooth")</cpp:value></cpp:define>



<struct>struct <name>luma_key_filter_data</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>luma_max_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>luma_min_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>luma_max_smooth_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>luma_min_smooth_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>luma_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>luma_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>luma_max_smooth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>luma_min_smooth</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luma_key_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"LumaKeyFilter"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_key_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lumaMax</name> <init>= <expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lumaMin</name> <init>= <expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lumaMaxSmooth</name> <init>=
<expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MAX_SMOOTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lumaMinSmooth</name> <init>=
<expr><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MIN_SMOOTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>lumaMax</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>lumaMin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max_smooth</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>lumaMaxSmooth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min_smooth</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>lumaMinSmooth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_key_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_destroy</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>luma_key_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>=
<expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>luma_key_filter_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effect_path</name> <init>= <expr><call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"luma_key_filter.effect"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <call><name>gs_effect_create_from_file</name><argument_list>(<argument><expr><name>effect_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max_param</name></name> <operator>=</operator>
<call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"lumaMax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min_param</name></name> <operator>=</operator>
<call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"lumaMin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max_smooth_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"lumaMaxSmooth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min_smooth_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"lumaMinSmooth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>effect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>luma_key_destroy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>luma_key_update</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_key_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_key_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_process_filter_begin</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>,
<argument><expr><name>OBS_ALLOW_DIRECT_RENDERING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min_param</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max_smooth_param</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_max_smooth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min_smooth_param</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>luma_min_smooth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_process_filter_end</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>luma_key_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MAX</name></expr></argument>, <argument><expr><name>TEXT_LUMA_MAX</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MAX_SMOOTH</name></expr></argument>,
<argument><expr><name>TEXT_LUMA_MAX_SMOOTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MIN</name></expr></argument>, <argument><expr><name>TEXT_LUMA_MIN</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MIN_SMOOTH</name></expr></argument>,
<argument><expr><name>TEXT_LUMA_MIN_SMOOTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_key_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MAX</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MIN</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MAX_SMOOTH</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LUMA_MIN_SMOOTH</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>luma_key_filter</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"luma_key_filter"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>luma_key_name</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>luma_key_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>luma_key_destroy</name></expr>,
<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>luma_key_render</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>luma_key_update</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>luma_key_properties</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>luma_key_defaults</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
