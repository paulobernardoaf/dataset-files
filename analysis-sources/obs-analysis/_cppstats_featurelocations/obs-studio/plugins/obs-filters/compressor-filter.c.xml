<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-filters\compressor-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;media-io/audio-math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/circlebuf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[compressor: '%s'] " format, obs_source_get_name(cd-&gt;context), ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RATIO</name></cpp:macro> <cpp:value>"ratio"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_THRESHOLD</name></cpp:macro> <cpp:value>"threshold"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ATTACK_TIME</name></cpp:macro> <cpp:value>"attack_time"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RELEASE_TIME</name></cpp:macro> <cpp:value>"release_time"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_OUTPUT_GAIN</name></cpp:macro> <cpp:value>"output_gain"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SIDECHAIN_SOURCE</name></cpp:macro> <cpp:value>"sidechain_source"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MT_</name></cpp:macro> <cpp:value>obs_module_text</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_RATIO</name></cpp:macro> <cpp:value>MT_("Compressor.Ratio")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_THRESHOLD</name></cpp:macro> <cpp:value>MT_("Compressor.Threshold")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_ATTACK_TIME</name></cpp:macro> <cpp:value>MT_("Compressor.AttackTime")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_RELEASE_TIME</name></cpp:macro> <cpp:value>MT_("Compressor.ReleaseTime")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_OUTPUT_GAIN</name></cpp:macro> <cpp:value>MT_("Compressor.OutputGain")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_SIDECHAIN_SOURCE</name></cpp:macro> <cpp:value>MT_("Compressor.SidechainSource")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_RATIO</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RATIO</name></cpp:macro> <cpp:value>32.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_THRESHOLD_DB</name></cpp:macro> <cpp:value>-60.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THRESHOLD_DB</name></cpp:macro> <cpp:value>0.0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_OUTPUT_GAIN_DB</name></cpp:macro> <cpp:value>-32.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OUTPUT_GAIN_DB</name></cpp:macro> <cpp:value>32.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ATK_RLS_MS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RLS_MS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ATK_MS</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_AUDIO_BUF_MS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_IN_S</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_IN_S_F</name></cpp:macro> <cpp:value>((float)MS_IN_S)</cpp:value></cpp:define>





<struct>struct <name>compressor_data</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>envelope_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>envelope_buf_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>attack_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>release_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>output_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>envelope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>slope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>sidechain_update_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sidechain_check_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak_sidechain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sidechain_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>sidechain_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name><name>sidechain_data</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>sidechain_buf</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_sidechain_frames</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>get_sidechain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>obs_weak_source_get_source</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_sidechain_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>max_sidechain_frames</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>max_sidechain_frames</name></name> <operator>=</operator> <name>num_samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clear</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>clear</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_env_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name> <operator>=</operator> <call><name>brealloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>brealloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>gain_coefficient</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>sample_rate</name> <operator>*</operator> <name>time</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressor_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Compressor"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sidechain_capture</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>max_sidechain_frames</name></name> <operator>&lt;</operator> <name><name>audio_data</name><operator>-&gt;</operator><name>frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>max_sidechain_frames</name></name> <operator>=</operator> <name><name>audio_data</name><operator>-&gt;</operator><name>frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>expected_size</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>max_sidechain_frames</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expected_size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>expected_size</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>muted</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_push_back_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>audio_data</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>audio_data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>audio_data</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compressor_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>sample_rate</name> <init>=
<expr><call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><call><name>obs_get_audio</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_channels</name> <init>= <expr><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><call><name>obs_get_audio</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>attack_time_ms</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_ATTACK_TIME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>release_time_ms</name> <init>=
<expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RELEASE_TIME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>output_gain_db</name> <init>=
<expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_OUTPUT_GAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sidechain_name</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_SIDECHAIN_SOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RATIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>attack_gain</name></name> <operator>=</operator>
<call><name>gain_coefficient</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>attack_time_ms</name> <operator>/</operator> <name>MS_IN_S_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>release_gain</name></name> <operator>=</operator>
<call><name>gain_coefficient</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>release_time_ms</name> <operator>/</operator> <name>MS_IN_S_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>output_gain</name></name> <operator>=</operator> <call><name>db_to_mul</name><argument_list>(<argument><expr><name>output_gain_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <name>num_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>slope</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <name><name>cd</name><operator>-&gt;</operator><name>ratio</name></name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid_sidechain</name> <init>= <expr><operator>*</operator><name>sidechain_name</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>sidechain_name</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>old_weak_sidechain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid_sidechain</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_weak_sidechain</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name></expr></argument>, <argument><expr><name>sidechain_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_weak_sidechain</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>sidechain_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_check_time</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">3000000000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_weak_sidechain</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>old_sidechain</name> <init>=
<expr><call><name>obs_weak_source_get_source</name><argument_list>(<argument><expr><name>old_weak_sidechain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_sidechain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_remove_audio_capture_callback</name><argument_list>(
<argument><expr><name>old_sidechain</name></expr></argument>, <argument><expr><name>sidechain_capture</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>old_sidechain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_weak_source_release</name><argument_list>(<argument><expr><name>old_weak_sidechain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sample_len</name> <init>= <expr><name>sample_rate</name> <operator>*</operator> <name>DEFAULT_AUDIO_BUF_MS</name> <operator>/</operator> <name>MS_IN_S</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resize_env_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>sample_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>compressor_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>compressor_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>compressor_update</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compressor_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>sidechain</name> <init>= <expr><call><name>get_sidechain</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sidechain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_remove_audio_capture_callback</name><argument_list>(
<argument><expr><name>sidechain</name></expr></argument>, <argument><expr><name>sidechain_capture</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>sidechain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_weak_source_release</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_envelope</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resize_env_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>attack_gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>attack_gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>release_gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>release_gain</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>chan</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>envelope_buf</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>env</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>envelope</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>env_in</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>&lt;</operator> <name>env_in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name>env_in</name> <operator>+</operator> <name>attack_gain</name> <operator>*</operator> <operator>(</operator><name>env</name> <operator>-</operator> <name>env_in</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name>env_in</name> <operator>+</operator> <name>release_gain</name> <operator>*</operator> <operator>(</operator><name>env</name> <operator>-</operator> <name>env_in</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope</name></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>num_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_sidechain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resize_env_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_sidechain_data</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>attack_gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>attack_gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>release_gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>release_gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>sidechain_buf</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>chan</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sidechain_buf</name><index>[<expr><name>chan</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>envelope_buf</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>env</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>envelope</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>env_in</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>sidechain_buf</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>env</name> <operator>&lt;</operator> <name>env_in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name>env_in</name> <operator>+</operator> <name>attack_gain</name> <operator>*</operator> <operator>(</operator><name>env</name> <operator>-</operator> <name>env_in</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name>env_in</name> <operator>+</operator> <name>release_gain</name> <operator>*</operator> <operator>(</operator><name>env</name> <operator>-</operator> <name>env_in</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope</name></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>num_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>process_compression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>env_db</name> <init>= <expr><call><name>mul_to_db</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>slope</name></name> <operator>*</operator> <operator>(</operator><name><name>cd</name><operator>-&gt;</operator><name>threshold</name></name> <operator>-</operator> <name>env_db</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>db_to_mul</name><argument_list>(<argument><expr><call><name>fminf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>gain</name> <operator>*</operator> <name><name>cd</name><operator>-&gt;</operator><name>output_gain</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compressor_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>-</operator> <name><name>cd</name><operator>-&gt;</operator><name>sidechain_check_time</name></name> <operator>&gt;</operator> <literal type="number">3000000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_check_time</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>sidechain</name> <init>=
<expr><ternary><condition><expr><name>new_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>new_name</name></expr> ?</condition><then> <expr><call><name>obs_get_source_by_name</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak_sidechain</name> <init>=
<expr><ternary><condition><expr><name>sidechain</name></expr> ?</condition><then> <expr><call><name>obs_source_get_weak_source</name><argument_list>(<argument><expr><name>sidechain</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>sidechain_name</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name> <operator>=</operator> <name>weak_sidechain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>weak_sidechain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sidechain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_add_audio_capture_callback</name><argument_list>(
<argument><expr><name>sidechain</name></expr></argument>, <argument><expr><name>sidechain_capture</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_weak_source_release</name><argument_list>(<argument><expr><name>weak_sidechain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>sidechain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type>
<name>compressor_filter_audio</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_samples</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>frames</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_samples</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>audio</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>audio</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak_sidechain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>weak_sidechain</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>sidechain_update_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>weak_sidechain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>analyze_sidechain</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>analyze_envelope</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>process_compression</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>audio</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compressor_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RATIO</name></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_THRESHOLD</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">18.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_ATTACK_TIME</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RELEASE_TIME</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_OUTPUT_GAIN</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_SIDECHAIN_SOURCE</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>sidechain_prop_info</name> <block>{
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>sources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sidechain_prop_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>caps</name> <init>= <expr><call><name>obs_source_get_output_flags</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>sources</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>compressor_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>compressor_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>obs_filter_get_parent</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_RATIO</name></expr></argument>, <argument><expr><name>TEXT_RATIO</name></expr></argument>,
<argument><expr><name>MIN_RATIO</name></expr></argument>, <argument><expr><name>MAX_RATIO</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_float_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_THRESHOLD</name></expr></argument>, <argument><expr><name>TEXT_THRESHOLD</name></expr></argument>,
<argument><expr><name>MIN_THRESHOLD_DB</name></expr></argument>, <argument><expr><name>MAX_THRESHOLD_DB</name></expr></argument>,
<argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_float_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" dB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_ATTACK_TIME</name></expr></argument>,
<argument><expr><name>TEXT_ATTACK_TIME</name></expr></argument>, <argument><expr><name>MIN_ATK_RLS_MS</name></expr></argument>,
<argument><expr><name>MAX_ATK_MS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_RELEASE_TIME</name></expr></argument>,
<argument><expr><name>TEXT_RELEASE_TIME</name></expr></argument>, <argument><expr><name>MIN_ATK_RLS_MS</name></expr></argument>,
<argument><expr><name>MAX_RLS_MS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_OUTPUT_GAIN</name></expr></argument>,
<argument><expr><name>TEXT_OUTPUT_GAIN</name></expr></argument>,
<argument><expr><name>MIN_OUTPUT_GAIN_DB</name></expr></argument>,
<argument><expr><name>MAX_OUTPUT_GAIN_DB</name></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_float_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" dB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>sources</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(
<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_SIDECHAIN_SOURCE</name></expr></argument>, <argument><expr><name>TEXT_SIDECHAIN_SOURCE</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sidechain_prop_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><name>sources</name></expr>, <expr><name>parent</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_enum_sources</name><argument_list>(<argument><expr><name>add_sources</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>compressor_filter</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"compressor_filter"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_AUDIO</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>compressor_name</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>compressor_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>compressor_destroy</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>compressor_update</name></expr>,
<expr><operator>.</operator><name>filter_audio</name> <operator>=</operator> <name>compressor_filter_audio</name></expr>,
<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>compressor_tick</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>compressor_defaults</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>compressor_properties</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
