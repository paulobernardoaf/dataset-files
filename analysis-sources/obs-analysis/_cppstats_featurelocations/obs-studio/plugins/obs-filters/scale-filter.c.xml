<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-filters\scale-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/math-defs.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RESOLUTION</name></cpp:macro> <cpp:value>"resolution"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SAMPLING</name></cpp:macro> <cpp:value>"sampling"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_UNDISTORT</name></cpp:macro> <cpp:value>"undistort"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_RESOLUTION</name></cpp:macro> <cpp:value>obs_module_text("Resolution")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NONE</name></cpp:macro> <cpp:value>obs_module_text("None")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SAMPLING</name></cpp:macro> <cpp:value>obs_module_text("ScaleFiltering")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SAMPLING_POINT</name></cpp:macro> <cpp:value>obs_module_text("ScaleFiltering.Point")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SAMPLING_BILINEAR</name></cpp:macro> <cpp:value>obs_module_text("ScaleFiltering.Bilinear")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SAMPLING_BICUBIC</name></cpp:macro> <cpp:value>obs_module_text("ScaleFiltering.Bicubic")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SAMPLING_LANCZOS</name></cpp:macro> <cpp:value>obs_module_text("ScaleFiltering.Lanczos")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SAMPLING_AREA</name></cpp:macro> <cpp:value>obs_module_text("ScaleFiltering.Area")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_UNDISTORT</name></cpp:macro> <cpp:value>obs_module_text("UndistortCenter")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BASE</name></cpp:macro> <cpp:value>obs_module_text("Base.Canvas")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SAMPLING_POINT</name></cpp:macro> <cpp:value>"point"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SAMPLING_BILINEAR</name></cpp:macro> <cpp:value>"bilinear"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SAMPLING_BICUBIC</name></cpp:macro> <cpp:value>"bicubic"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SAMPLING_LANCZOS</name></cpp:macro> <cpp:value>"lanczos"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SAMPLING_AREA</name></cpp:macro> <cpp:value>"area"</cpp:value></cpp:define>



<struct>struct <name>scale_filter_data</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>dimension_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>dimension_i_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>undistort_factor_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>dimension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>dimension_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>undistort_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cx_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cy_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cx_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cy_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>obs_scale_type</name></name></type> <name>sampling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>point_sampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>aspect_ratio_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>target_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>undistort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>upscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>base_canvas_resolution</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scale_filter_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ScaleFilter"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_filter_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res_str</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_RESOLUTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sampling</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SAMPLING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>base_canvas_resolution</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res_str</name></expr></argument>, <argument><expr><name>T_BASE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name></type> <name>ovi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_get_video_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>aspect_ratio_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>base_canvas_resolution</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_in</name></name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>base_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_in</name></name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>base_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>res_str</name></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>cx_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>cy_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>aspect_ratio_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>res_str</name></expr></argument>, <argument><expr><literal type="string">"%d:%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>cx_in</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>cy_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>aspect_ratio_only</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_POINT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>=</operator> <name>OBS_SCALE_POINT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_BILINEAR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>=</operator> <name>OBS_SCALE_BILINEAR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_LANCZOS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>=</operator> <name>OBS_SCALE_LANCZOS</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_AREA</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>=</operator> <name>OBS_SCALE_AREA</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>=</operator> <name>OBS_SCALE_BICUBIC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_UNDISTORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_filter_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_samplerstate_destroy</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>point_sampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>scale_filter_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>=
<expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>scale_filter_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_sampler_info</name></name></type> <name>sampler_info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>point_sampler</name></name> <operator>=</operator> <call><name>gs_samplerstate_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sampler_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scale_filter_update</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_filter_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>obs_base_effect</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>lower_than_2x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cx_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cy_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>base_canvas_resolution</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name></type> <name>ovi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_get_video_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_in</name></name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>base_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_in</name></name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>base_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>obs_filter_get_target</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>target_valid</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>target</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>target_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>obs_source_get_base_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <call><name>obs_source_get_base_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cx</name> <operator>||</operator> <operator>!</operator><name>cy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>target_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>cx_f</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cy_f</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>cy</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>old_aspect</name> <init>= <expr><name>cx_f</name> <operator>/</operator> <name>cy_f</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>new_aspect</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>cx_in</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>cy_in</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>aspect_ratio_only</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>old_aspect</name> <operator>-</operator> <name>new_aspect</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>EPSILON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>target_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_aspect</name> <operator>&gt;</operator> <name>old_aspect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cy_f</name> <operator>*</operator> <name>new_aspect</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cx_f</name> <operator>/</operator> <name>new_aspect</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>cx_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>cy_in</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>dimension</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>dimension_i</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>undistort</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor</name></name> <operator>=</operator> <name>new_aspect</name> <operator>/</operator> <name>old_aspect</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>upscale</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<expr_stmt><expr><name>lower_than_2x</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>&lt;</operator> <name>cx</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>&lt;</operator> <name>cy</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lower_than_2x</name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>!=</operator> <name>OBS_SCALE_POINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>OBS_EFFECT_BILINEAR_LOWRES</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>OBS_SCALE_POINT</name></expr>:</case>
<case>case <expr><name>OBS_SCALE_BILINEAR</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>OBS_EFFECT_DEFAULT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_SCALE_BICUBIC</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>OBS_EFFECT_BICUBIC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_SCALE_LANCZOS</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>OBS_EFFECT_LANCZOS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBS_SCALE_AREA</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>OBS_EFFECT_AREA</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name> <operator>&gt;=</operator> <name>cx</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name> <operator>&gt;=</operator> <name>cy</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>upscale</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>image_param</name></name> <operator>=</operator>
<call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OBS_EFFECT_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"base_dimension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_i_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"base_dimension_i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_i_param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_EFFECT_BICUBIC</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBS_EFFECT_LANCZOS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor_param</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"undistort_factor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor_param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_filter_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>technique</name> <init>=
<expr><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort</name></name></expr> ?</condition><then> <expr><literal type="string">"DrawUndistort"</literal></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>upscale</name></name></expr> ?</condition><then> <expr><literal type="string">"DrawUpscale"</literal></expr> </then><else>: <expr><literal type="string">"Draw"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>valid</name></name> <operator>||</operator> <operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>target_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_skip_video_filter</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_process_filter_begin</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>,
<argument><expr><name>OBS_NO_DIRECT_RENDERING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_param</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>dimension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_i_param</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>dimension_i_param</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>dimension_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor_param</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor_param</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>undistort_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>sampling</name></name> <operator>==</operator> <name>OBS_SCALE_POINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_next_sampler</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>image_param</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>point_sampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_process_filter_tech_end</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name></expr></argument>,
<argument><expr><name>technique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>downscale_vals</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.25</literal></expr>, <expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">0.75</literal><operator>)</operator></expr>, <expr><literal type="number">1.5</literal></expr>,
<expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">0.6</literal><operator>)</operator></expr>, <expr><literal type="number">1.75</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.25</literal></expr>,
<expr><literal type="number">2.5</literal></expr>, <expr><literal type="number">2.75</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_DOWNSCALES</name></cpp:macro> <cpp:value>(sizeof(downscale_vals) / sizeof(double))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>aspects</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"16:9"</literal></expr>, <expr><literal type="string">"16:10"</literal></expr>, <expr><literal type="string">"4:3"</literal></expr>, <expr><literal type="string">"1:1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ASPECTS</name></cpp:macro> <cpp:value>(sizeof(aspects) / sizeof(const char *))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sampling_modified</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sampling</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SAMPLING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_undistort</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_POINT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_undistort</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_BILINEAR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_undistort</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_LANCZOS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_undistort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>sampling</name></expr></argument>, <argument><expr><name>S_SAMPLING_AREA</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_undistort</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>has_undistort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_UNDISTORT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>has_undistort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>scale_filter_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name></type> <name>ovi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cy</name></decl>;</decl_stmt>
}</block> <decl><name><name>downscales</name><index>[<expr><name>NUM_DOWNSCALES</name></expr>]</index></name></decl>;</struct>



<expr_stmt><expr><call><name>obs_get_video_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>base_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>base_height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_DOWNSCALES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>downscales</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>cx</name> <operator>/</operator> <name><name>downscale_vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>downscales</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cy</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>cy</name> <operator>/</operator> <name><name>downscale_vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_SAMPLING</name></expr></argument>, <argument><expr><name>T_SAMPLING</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sampling_modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_SAMPLING_POINT</name></expr></argument>, <argument><expr><name>S_SAMPLING_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_SAMPLING_BILINEAR</name></expr></argument>,
<argument><expr><name>S_SAMPLING_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_SAMPLING_BICUBIC</name></expr></argument>, <argument><expr><name>S_SAMPLING_BICUBIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_SAMPLING_LANCZOS</name></expr></argument>, <argument><expr><name>S_SAMPLING_LANCZOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_SAMPLING_AREA</name></expr></argument>, <argument><expr><name>S_SAMPLING_AREA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_RESOLUTION</name></expr></argument>, <argument><expr><name>T_RESOLUTION</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_EDITABLE</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_NONE</name></expr></argument>, <argument><expr><name>T_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BASE</name></expr></argument>, <argument><expr><name>T_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ASPECTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>aspects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>aspects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_DOWNSCALES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><name><name>downscales</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cx</name></expr></argument>, <argument><expr><name><name>downscales</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_UNDISTORT</name></expr></argument>, <argument><expr><name>T_UNDISTORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_filter_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SAMPLING</name></expr></argument>, <argument><expr><name>S_SAMPLING_BICUBIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_RESOLUTION</name></expr></argument>, <argument><expr><name>T_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_UNDISTORT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>scale_filter_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>cx_out</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>scale_filter_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scale_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>cy_out</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>scale_filter</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"scale_filter"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>scale_filter_name</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>scale_filter_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>scale_filter_destroy</name></expr>,
<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>scale_filter_tick</name></expr>,
<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>scale_filter_render</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>scale_filter_update</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>scale_filter_properties</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>scale_filter_defaults</name></expr>,
<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>scale_filter_width</name></expr>,
<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>scale_filter_height</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
