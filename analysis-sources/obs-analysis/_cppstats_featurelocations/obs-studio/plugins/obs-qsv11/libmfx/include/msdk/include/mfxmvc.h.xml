<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxmvc.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXMVC_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXMVC_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <block>{

<decl><name>MFX_PROFILE_AVC_MULTIVIEW_HIGH</name> <init>=<expr><literal type="number">118</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_STEREO_HIGH</name> <init>=<expr><literal type="number">128</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_EXTBUFF_MVC_SEQ_DESC</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MVC_TARGET_VIEWS</name> <init>= <macro><name>MFX_MAKEFOURCC</name><argument_list>(<argument><literal type="char">'M'</literal></argument>,<argument><literal type="char">'V'</literal></argument>,<argument><literal type="char">'C'</literal></argument>,<argument><literal type="char">'T'</literal></argument>)</argument_list></macro></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ViewId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumAnchorRefsL0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumAnchorRefsL1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>AnchorRefL0</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>AnchorRefL1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumNonAnchorRefsL0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumNonAnchorRefsL1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>NonAnchorRefL0</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>NonAnchorRefL1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxMVCViewDependency</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TemporalId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LevelIdc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumViews</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumTargetViews</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name> <modifier>*</modifier></type><name>TargetViewId</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxMVCOperationPoint</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumViewAlloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxMVCViewDependency</name> <modifier>*</modifier></type><name>View</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumViewId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumViewIdAlloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name> <modifier>*</modifier></type><name>ViewId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumOP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumOPAlloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxMVCOperationPoint</name> <modifier>*</modifier></type><name>OP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRefsTotal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>Reserved</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mfxExtMVCSeqDesc</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>TemporalId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>ViewId</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtMVCTargetViews</name> ;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
