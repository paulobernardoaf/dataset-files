<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxaudio++.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXAUDIOPLUSPLUS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXAUDIOPLUSPLUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxaudio.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>MFXAudioSession</name>
<block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MFXAudioSession</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <operator>(</operator><name>mfxSession</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXAudioSession</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Init</name><argument_list>(<argument>mfxIMPL impl</argument>, <argument>mfxVersion *ver</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXInit</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mfxStatus</name></type> <name>mfxRes</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mfxRes</name> <operator>=</operator> <call><name>MFXClose</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <operator>(</operator><name>mfxSession</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>mfxRes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIMPL</name><parameter_list>(<parameter><decl><type><name>mfxIMPL</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryVersion</name><parameter_list>(<parameter><decl><type><name>mfxVersion</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>JoinSession</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>child_session</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXJoinSession</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>child_session</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DisjoinSession</name><parameter_list>( )</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXDisjoinSession</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>CloneSession</name><parameter_list>( <parameter><decl><type><name>mfxSession</name> <modifier>*</modifier></type><name>clone</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXCloneSession</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetPriority</name><parameter_list>( <parameter><decl><type><name>mfxPriority</name></type> <name>priority</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXSetPriority</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetPriority</name><parameter_list>( <parameter><decl><type><name>mfxPriority</name> <modifier>*</modifier></type><name>priority</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXGetPriority</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SyncOperation</name><parameter_list>(<parameter><decl><type><name>mfxSyncPoint</name></type> <name>syncp</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioCORE_SyncOperation</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>operator</name></type> <name>mfxSession</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>m_session</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MFXAudioDECODE</name>
<block>{<block_content>
<label><name>public</name>:</label>

<macro><name>MFXAudioDECODE</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXAudioDECODE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxAudioParam *in</argument>, <argument>mfxAudioParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXAudioDECODE_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DecodeHeader</name><parameter_list>(<parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_DecodeHeader</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSize</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxAudioAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_QueryIOSize</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetAudioParam</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_GetAudioParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DecodeFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxAudioFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioDECODE_DecodeFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MFXAudioENCODE</name>
<block>{<block_content>
<label><name>public</name>:</label>

<macro><name>MFXAudioENCODE</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXAudioENCODE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxAudioParam *in</argument>, <argument>mfxAudioParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXAudioENCODE_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSize</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxAudioAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioENCODE_QueryIOSize</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioENCODE_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioENCODE_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioENCODE_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetAudioParam</name><parameter_list>(<parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioENCODE_GetAudioParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>EncodeFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxAudioFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>buffer_out</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXAudioENCODE_EncodeFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer_out</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
