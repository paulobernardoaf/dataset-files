<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_vector.h">





























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxstructures.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;exception&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name> 
<block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>iterator_tmpl</name> 
<block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>U</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>MFXVector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>mIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>mRecords</name></decl>;</decl_stmt>
<macro><name>iterator_tmpl</name><argument_list>(<argument>mfxU32 index</argument> , <argument>T * records</argument>)</argument_list></macro> 
: <expr_stmt><expr><call><name>mIndex</name> <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>
<operator>,</operator> <macro><name>mRecords</name><argument_list>(<argument>records</argument>)</argument_list></macro>
<expr><block>{}</block>
<name>public</name><operator>:</operator>
<call><name>iterator_tmpl</name><argument_list>()</argument_list></call> 
<operator>:</operator> <call><name>mIndex</name> <argument_list>()</argument_list></call></expr>
<operator>,</operator> <macro><name>mRecords</name><argument_list>()</argument_list></macro> 
<expr><block>{}</block>
<name>bool</name> <name>operator</name> <operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>iterator_tmpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name> <operator>)</operator><specifier>const</specifier> 
<block>{
<return>return <expr><name>mIndex</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>mIndex</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name> <operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>iterator_tmpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name> <operator>)</operator><specifier>const</specifier> 
<block>{
<return>return <expr><name>mIndex</name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>mIndex</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>mfxU32</name> <name>operator</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name><name>iterator_tmpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>that</name><operator>)</operator> <specifier>const</specifier> 
<block>{
<return>return <expr><name>mIndex</name> <operator>-</operator> <name><name>that</name><operator>.</operator><name>mIndex</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>iterator_tmpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>operator</name> <operator>++</operator><operator>(</operator><operator>)</operator> 
<block>{
<expr><name>mIndex</name><operator>++</operator></expr>;
<return>return <expr><operator>*</operator> <name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>iterator_tmpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>operator</name> <operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> 
<block>{
<expr><name>mIndex</name><operator>++</operator></expr>;
<return>return <expr><operator>*</operator> <name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>T</name> <modifier>&amp;</modifier></type> <name>operator</name> <modifier>*</modifier><parameter_list>()</parameter_list> 
<block>{<block_content>
<return>return <expr><name><name>mRecords</name><index>[<expr><name>mIndex</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>T</name> <operator>*</operator> <name><name>operator</name> <operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> 
<block>{<block_content>
<return>return <expr><name>mRecords</name> <operator>+</operator> <name>mIndex</name></expr>;</return>
</block_content>}</block></block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVectorRangeError</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>exception</name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MFXVector</name> 
<block>{<block_content>
<decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>mRecords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>mNrecords</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MFXVector</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>mRecords</name><argument_list>()</argument_list></call></expr>
<operator>,</operator> <macro><name>mNrecords</name><argument_list>()</argument_list></macro>
<expr><block>{}</block>
<call><name>MFXVector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXVector</name> <operator>&amp;</operator> <name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>mRecords</name><argument_list>()</argument_list></call></expr>
<operator>,</operator> <macro><name>mNrecords</name><argument_list>()</argument_list></macro>
<expr><block>{
<expr><call><name>insert</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name>MFXVector</name> <operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>MFXVector</name> <operator>&amp;</operator> <name>rhs</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>rhs</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVector</name> <argument_list>()</argument_list></macro>
<block>{
<expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;
}</block></expr></expr_stmt>
<typedef>typedef <type><name><name>iterator_tmpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>iterator</name>;</typedef>

<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> 
<block>{
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><name>mRecords</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> 
<block>{
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>mNrecords</name></expr></argument>, <argument><expr><name>mRecords</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>beg_iter</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>end_iter</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>elementsToInsert</name> <init>= <expr><operator>(</operator><name>end_iter</name> <operator>-</operator> <name>beg_iter</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>elementsToInsert</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>where</name><operator>.</operator><name>mIndex</name></name> <operator>&gt;</operator> <name>mNrecords</name></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>throw</name></type> <name>MFXVectorRangeError</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>newRecords</name> <init>= <expr><name>new</name> <name><name>T</name><index>[<expr><name>mNrecords</name> <operator>+</operator> <name>elementsToInsert</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>where</name><operator>.</operator><name>mIndex</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><name><name>newRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mRecords</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>beg_iter</name> <operator>!=</operator> <name>end_iter</name></expr>;</condition> <incr><expr><name>beg_iter</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><name><name>newRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>beg_iter</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mNrecords</name> <operator>+</operator> <name>elementsToInsert</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><name><name>newRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mRecords</name><index>[<expr><name>i</name> <operator>-</operator> <name>elementsToInsert</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name><name>delete</name> <index>[]</index></name></type> <name>mRecords</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mRecords</name> <operator>=</operator> <name>newRecords</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mNrecords</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>T</name><modifier>&amp;</modifier></type> <name>operator</name> [] <parameter_list>(<parameter><decl><type><name>mfxU32</name></type> <name>idx</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><name><name>mRecords</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>obj</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>newRecords</name> <init>= <expr><name>new</name> <name><name>T</name><index>[<expr><name>mNrecords</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>mNrecords</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><name><name>newRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mRecords</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>newRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>delete</name> <index>[]</index></name></type> <name>mRecords</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mRecords</name> <operator>=</operator> <name>newRecords</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mNrecords</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>
<function><type><name>void</name></type> <name>erase</name> <parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>at</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>.</operator><name>mIndex</name></name> <operator>&gt;=</operator> <name>mNrecords</name></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>throw</name></type> <name>MFXVectorRangeError</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mNrecords</name><operator>--</operator></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>mfxU32</name></type> <name>i</name> <init>= <expr><name><name>at</name><operator>.</operator><name>mIndex</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>mNrecords</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mRecords</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>mfxU32</name></type> <name>nSize</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type> <name>newRecords</name> <init>= <expr><name>new</name> <name><name>T</name><index>[<expr><name>nSize</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>mfxU32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>mNrecords</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><name><name>newRecords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mRecords</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name><name>delete</name> <index>[]</index></name></type> <name>mRecords</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mRecords</name> <operator>=</operator> <name>newRecords</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mNrecords</name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>mfxU32</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> 
<block>{
<return>return <expr><name>mNrecords</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name><name>delete</name> <index>[]</index></name></type> <name>mRecords</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mRecords</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mNrecords</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}
</unit>
