<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_dispatcher_log.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFX_DISPATCHER_LOG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFX_DISPATCHER_LOG_H</name></cpp:macro></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_INFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_WRN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_ERROR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_LOADED_LIBRARY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<enum>enum
<block>{
<decl><name>DL_EVENT_START</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>DL_EVENT_STOP</name></decl>,
<decl><name>DL_EVENT_MSG</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SINK_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SINK_PRINTF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SINK_IMsgHandler</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFXFOURCCTYPE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>"%c%c%c%c"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO_OR_SPACE</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((0==(value)) ? '0' : (value))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFXU32TOFOURCC</name><parameter_list>(<parameter><type><name>mfxu32</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>ZERO_OR_SPACE((char)(mfxu32 &amp; 0xFF)), ZERO_OR_SPACE((char)((mfxu32 &gt;&gt; 8) &amp; 0xFF)),ZERO_OR_SPACE((char)((mfxu32 &gt;&gt; 16) &amp; 0xFF)),ZERO_OR_SPACE((char)((mfxu32 &gt;&gt; 24) &amp; 0xFF))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFXGUIDTYPE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>"%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFXGUIDTOHEX</name><parameter_list>(<parameter><type><name>guid</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(guid)-&gt;Data[0],(guid)-&gt;Data[1],(guid)-&gt;Data[2],(guid)-&gt;Data[3],(guid)-&gt;Data[4],(guid)-&gt;Data[5],(guid)-&gt;Data[6],(guid)-&gt;Data[7],(guid)-&gt;Data[8],(guid)-&gt;Data[9],(guid)-&gt;Data[10],(guid)-&gt;Data[11],(guid)-&gt;Data[12],(guid)-&gt;Data[13],(guid)-&gt;Data[14],(guid)-&gt;Data[15]</cpp:value></cpp:define>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MFX_DISPATCHER_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_USE_FORMATING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_HEAP_SINGLETONES</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_EVENT_GUID</name></cpp:macro> <cpp:value>L"{EB0538CC-4FEE-484d-ACEE-1182E9F37A57}"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPACTHER_LOG_FW_PATH</name></cpp:macro> <cpp:value>"c:\\dispatcher.log"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>class</name></type> <name>IMsgHandler</name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>IMsgHandler</name><argument_list>()</argument_list></macro><block>{}</block>
<name>virtual</name> <name>void</name> <macro><name>Write</name><argument_list>(<argument>int level</argument>, <argument>int opcode</argument>, <argument>const char * msg</argument>, <argument>va_list argptr</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DISPATCHER_LOG_USE_FORMATING</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG</name><parameter_list>(<parameter><type><name>lvl</name></type></parameter>, <parameter><type><name>opcode</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{DispatcherLogBracketsHelper wrt(lvl,opcode);wrt.Write str;}</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_VA_ARGS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wrt.Write(__VA_ARGS__, NULL)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG</name><parameter_list>(<parameter><type><name>lvl</name></type></parameter>, <parameter><type><name>opcode</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{DispatcherLogBracketsHelper wrt(lvl, opcode);DISPATCHER_LOG_VA_ARGS str;}</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_OPERATION</name><parameter_list>(<parameter><type><name>operation</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>operation</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG</name><parameter_list>(<parameter><type><name>lvl</name></type></parameter>, <parameter><type><name>opcode</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_OPERATION</name><parameter_list>(<parameter><type><name>operation</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__name_from_line</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>line</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>name ##line</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_name_from_line</name><parameter_list>( <parameter><type><name>name</name></type></parameter> , <parameter><type><name>line</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__name_from_line( name, line )</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>name_from_line</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>_name_from_line( name, __LINE__)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_AUTO</name><parameter_list>(<parameter><type><name>lvl</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>DispatchLogBlockHelper name_from_line(__auto_log_)(lvl); name_from_line(__auto_log_).Write msg;</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> 
<name>class</name></type> <name>DSSingleTone</name>
<block>{<block_content>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>TParam1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <specifier>static</specifier> <name>T</name> <modifier>&amp;</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name>TParam1</name></type> <name>par1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type> <name>pstored</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>pstored</name> <operator>=</operator> <call><name>store_or_load</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>*</operator><macro><name>store_or_load</name><argument_list>(<argument>new T(par1)</argument>)</argument_list></macro></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name>pstored</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>T</name> <modifier>&amp;</modifier></type> <name>get</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type> <name>pstored</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>pstored</name> <operator>=</operator> <call><name>store_or_load</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>*</operator><macro><name>store_or_load</name><argument_list>(<argument>new T()</argument>)</argument_list></macro></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name>pstored</name></expr>;</return>
</block_content>}</block></function>
<label><name>private</name>:</label>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>T</name> <modifier>*</modifier></type> <name>store_or_load</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type> <name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>instance</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>obj</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>instance</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DispatchLog</name> 
<range>: <expr><name>public</name> <name><name>DSSingleTone</name><argument_list type="generic">&lt;<argument><expr><name>DispatchLog</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>friend</name> <name>class</name> <name><name>DSSingleTone</name><argument_list type="generic">&lt;<argument><expr><name>DispatchLog</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>IMsgHandler</name><operator>*</operator></expr></argument>&gt;</argument_list></name><name>m_Recepients</name></expr>;
<expr><name>int</name> <name>m_DispatcherLogSink</name></expr>;

<expr><name>public</name><operator>:</operator>

<name>void</name> <macro><name>SetSink</name><argument_list>(<argument>int nsink</argument>, <argument>IMsgHandler *pHandler</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>AttachSink</name><argument_list>(<argument>int nsink</argument>, <argument>IMsgHandler *pHandler</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>DetachSink</name><argument_list>(<argument>int nsink</argument>, <argument>IMsgHandler *pHandler</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>ExchangeSink</name><argument_list>(<argument>int nsink</argument>, <argument>IMsgHandler *pOld</argument>, <argument>IMsgHandler *pNew</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <call><name>DetachAllSinks</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>Write</name><argument_list>(<argument>int level</argument>, <argument>int opcode</argument>, <argument>const char * msg</argument>, <argument>va_list argptr</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>DispatchLog</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>


<struct>struct <name>DispatcherLogBracketsHelper</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>m_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_opcode</name></decl>;</decl_stmt>
<macro><name>DispatcherLogBracketsHelper</name><argument_list>(<argument>int level</argument>, <argument>int opcode</argument>)</argument_list></macro>
:<expr_stmt><expr><call><name>m_level</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>
<operator>,</operator><macro><name>m_opcode</name><argument_list>(<argument>opcode</argument>)</argument_list></macro>
<expr><block>{
}</block>
<name>void</name> <call><name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>str</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> ;</struct>


<struct>struct <name>DispatchLogBlockHelper</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>m_level</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>DispatchLogBlockHelper</name> <argument_list>(<argument>int level</argument>)</argument_list></macro>
: <macro><name>m_level</name><argument_list>(<argument>level</argument>)</argument_list></macro>
<block>{<block_content>
</block_content>}</block>
<expr_stmt><expr><operator>~</operator><call><name>DispatchLogBlockHelper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISPATCHER_LOG_REGISTER_EVENT_PROVIDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>ETWHandlerFactory</name>
<range>: <expr><name>public</name> <name><name>DSSingleTone</name><argument_list type="generic">&lt;<argument><expr><name>ETWHandlerFactory</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>friend</name> <name>class</name> <name><name>DSSingleTone</name><argument_list type="generic">&lt;<argument><expr><name>ETWHandlerFactory</name></expr></argument>&gt;</argument_list></name></expr>;
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>wstring</name></expr></argument>, <argument><expr><name>IMsgHandler</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_storage_type</name></expr>;</expr_stmt></typedef>
<name>_storage_type</name> <name>m_storage</name></block></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><call><name>ETWHandlerFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>IMsgHandler</name> <modifier>*</modifier></type><name>GetSink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>sguid</name> <init>= <expr><name>DISPATCHER_LOG_EVENT_GUID</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<macro><name>ETWHandlerFactory</name><argument_list>()</argument_list></macro><block>{<block_content/>}</block>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISPATCHER_LOG_REGISTER_FILE_WRITER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>FileSink</name> 
<range>: <expr><name>public</name> <name><name>DSSingleTone</name><argument_list type="generic">&lt;<argument><expr><name>FileSink</name></expr></argument>&gt;</argument_list></name></expr></range></decl>
, <decl><type ref="prev"/><name>public</name> <name>IMsgHandler</name>
<block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>DSSingleTone</name><argument_list type="generic">&lt;<argument><expr><name>FileSink</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>argptr</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><macro><name>FileSink</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>m_hdl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>m_hdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>m_hdl</name></decl>;</decl_stmt>
<macro><name>FileSink</name><argument_list>(<argument>const std::string &amp; log_file</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_hdl</name></expr></argument>, <argument><expr><call><name><name>log_file</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>m_hdl</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><call><name><name>log_file</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>DispatcherLog_GetMFXImplString</name><argument_list>(<argument>int impl</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DispatcherLog_GetMFXStatusString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sts</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>opcode</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_AUTO</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_OPERATION</name><parameter_list>(<parameter><type><name>operation</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_INFO</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DISPATCHER_LOG(DL_INFO, DL_EVENT_MSG, msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_WRN</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DISPATCHER_LOG(DL_WRN, DL_EVENT_MSG, msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_ERROR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DISPATCHER_LOG(DL_ERROR, DL_EVENT_MSG, msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_LIBRARY</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DISPATCHER_LOG(DL_LOADED_LIBRARY, DL_EVENT_MSG, msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCHER_LOG_BLOCK</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DISPATCHER_LOG_AUTO(DL_INFO, msg)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
