<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_win_reg_key.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFX_WIN_REG_KEY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFX_WIN_REG_KEY_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxplugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_dispatcher_log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name> <block>{<block_content>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator> struct <name>RegKey</name><block>{}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><block>{enum <expr><block>{<expr><name>type</name> <operator>=</operator> <name>REG_DWORD</name></expr>}</block></expr>;}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>mfxU32</name></expr></argument>&gt;</argument_list></name><block>{enum <expr><block>{<expr><name>type</name> <operator>=</operator> <name>REG_DWORD</name></expr>}</block></expr>;}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>mfxPluginUID</name></expr></argument>&gt;</argument_list></name><block>{enum <expr><block>{<expr><name>type</name> <operator>=</operator> <name>REG_BINARY</name></expr>}</block></expr>;}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>mfxVersion</name></expr></argument>&gt;</argument_list></name><block>{enum <expr><block>{<expr><name>type</name> <operator>=</operator> <name>REG_DWORD</name></expr>}</block></expr>;}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><block>{enum <expr><block>{<expr><name>type</name> <operator>=</operator> <name>REG_SZ</name></expr>}</block></expr>;}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><block>{enum <expr><block>{<expr><name>type</name> <operator>=</operator> <name>REG_SZ</name></expr>}</block></expr>;}</block></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>WinRegKey</name>
<block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>WinRegKey</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>WinRegKey</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hRootKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pSubKey</name></decl></parameter>, <parameter><decl><type><name>REGSAM</name></type> <name>samDesired</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>WinRegKey</name> <modifier>&amp;</modifier></type><name>rootKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pSubKey</name></decl></parameter>, <parameter><decl><type><name>REGSAM</name></type> <name>samDesired</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>QueryInfo</name><parameter_list>(<parameter><decl><type><name>LPDWORD</name></type> <name>lpcSubkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>QueryValueSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>pcbData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LPBYTE</name></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>pcbData</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name> <modifier>&amp;</modifier></type><name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dw</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nData</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Query</name><argument_list>(<argument><expr><name>pValueName</name></expr></argument>, <argument><expr><name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nData</name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>bool</name></type> <name>EnumValue</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>pcchValueName</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>pType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>EnumKey</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>pcchValueName</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>


<function_decl><type><name>void</name></type> <name>Release</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>HKEY</name></type> <name>m_hKey</name></decl>;</decl_stmt> 

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>WinRegKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WinRegKey</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>WinRegKey</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>QueryKey</name><parameter_list>(<parameter><decl><type><name>WinRegKey</name> <modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>key</name><operator>.</operator><name>Query</name></name><argument_list>(<argument><expr><name>pValueName</name></expr></argument>, <argument><expr><name><name>RegKey</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name><name>QueryKey</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><parameter_list>(<parameter><decl><type><name>WinRegKey</name> <modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pValueName</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bRes</name> <init>= <expr><call><name>QueryKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pValueName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>==</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>bRes</name></expr>;</return>
</block_content>}</block></function>


</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
