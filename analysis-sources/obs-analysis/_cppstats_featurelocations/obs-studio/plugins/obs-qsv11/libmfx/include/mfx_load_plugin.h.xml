<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_load_plugin.h">





























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxplugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_dispatcher_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_plugin_hive.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>CreatePluginPtr_t</name>)<parameter_list>(<parameter><decl><type><name>mfxPluginUID</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>mfxPlugin</name><modifier>*</modifier></type> <name>plugin</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>PluginModule</name>
<block>{<block_content>
<decl_stmt><decl><type><name>mfxModuleHandle</name></type> <name>mHmodule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CreatePluginPtr_t</name></type> <name>mCreatePluginPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msdk_disp_char</name></type> <name><name>mPath</name><index>[<expr><name>MAX_PLUGIN_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>PluginModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PluginModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>msdk_disp_char</name> <operator>*</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PluginModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PluginModule</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>PluginModule</name> <modifier>&amp;</modifier></type> <name>operator</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>PluginModule</name> <operator>&amp;</operator> <name>that</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><name>mfxPluginUID</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><name>mfxPlugin</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>PluginModule</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>Tidy</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXPluginFactory</name> <block>{<block_content>
<struct>struct <name>FactoryRecord</name> <block>{
<decl_stmt><decl><type><name>mfxPluginParam</name></type> <name>plgParams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PluginModule</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxPlugin</name></type> <name>plugin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FactoryRecord</name> <argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>plugin</name><argument_list>()</argument_list></macro>
<block>{}</block>
<macro><name>FactoryRecord</name><argument_list>(<argument>const mfxPluginParam &amp;plgParams</argument>,
<argument>PluginModule &amp;module</argument>,
<argument>mfxPlugin plugin</argument>)</argument_list></macro> 
<operator>:</operator> <call><name>plgParams</name><argument_list>(<argument><expr><name>plgParams</name></expr></argument>)</argument_list></call></expr> 
<operator>,</operator> <expr><call><name>module</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>
<operator>,</operator> <macro><name>plugin</name><argument_list>(<argument>plugin</argument>)</argument_list></macro> <expr><block>{
}</block></expr></expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name><name>MFXVector</name><argument_list type="generic">&lt;<argument><expr><name>FactoryRecord</name></expr></argument>&gt;</argument_list></name></type> <name>mPlugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>nPlugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxSession</name></type> <name>mSession</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>MFXPluginFactory</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>Close</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PluginDescriptionRecord</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mfxPluginUID</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><operator>~</operator><call><name>MFXPluginFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>protected</name>:</label>
<function_decl><type><name>void</name></type> <name>DestroyPlugin</name><parameter_list>( <parameter><decl><type><name>FactoryRecord</name> <modifier>&amp;</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RunVerification</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxPlugin</name> <modifier>&amp;</modifier></type> <name>plg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PluginDescriptionRecord</name> <modifier>&amp;</modifier></type><name>dsc</name></decl></parameter>, <parameter><decl><type><name>mfxPluginParam</name> <modifier>&amp;</modifier></type><name>pluginParams</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyEncoder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxVideoCodecPlugin</name> <modifier>&amp;</modifier></type><name>videoCodec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyAudioEncoder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxAudioCodecPlugin</name> <modifier>&amp;</modifier></type><name>audioCodec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyEnc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxVideoCodecPlugin</name> <modifier>&amp;</modifier></type><name>videoEnc</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyVpp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxVideoCodecPlugin</name> <modifier>&amp;</modifier></type><name>videoCodec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyDecoder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxVideoCodecPlugin</name> <modifier>&amp;</modifier></type><name>videoCodec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyAudioDecoder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxAudioCodecPlugin</name> <modifier>&amp;</modifier></type><name>audioCodec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>VerifyCodecCommon</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mfxVideoCodecPlugin</name> <modifier>&amp;</modifier></type> <name>Video</name></decl></parameter> )</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</unit>
