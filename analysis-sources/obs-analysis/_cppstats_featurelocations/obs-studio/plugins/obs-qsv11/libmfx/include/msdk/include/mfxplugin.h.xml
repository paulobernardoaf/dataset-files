<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxplugin.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXPLUGIN_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXPLUGIN_H__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxaudio.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU8</name></type> <name><name>Data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxPluginUID</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCD_SW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xa6</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCD_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x8e</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCE_SW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xf7</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCE_GACC</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x0b</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCE_DP_GACC</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x68</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCE_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x47</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_VP8D_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x31</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_VP8E_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xac</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_VP9E_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x82</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_VP9D_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x31</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_CAMERA_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x55</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_CAPTURE_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xe4</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_ITELECINE_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x79</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_H264LA_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xb4</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_AACD</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xf4</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_AACE</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x18</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVCE_FEI_HW</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xe6</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxPluginUID</name></type> <name>MFX_PLUGINID_HEVC_FEI_ENCODE</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x9b</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><enum>enum <block>{
<decl><name>MFX_PLUGINTYPE_VIDEO_GENERAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_PLUGINTYPE_VIDEO_DECODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_PLUGINTYPE_VIDEO_ENCODE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_PLUGINTYPE_VIDEO_VPP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_PLUGINTYPE_VIDEO_ENC</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_PLUGINTYPE_AUDIO_DECODE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>MFX_PLUGINTYPE_AUDIO_ENCODE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>
}</block></enum></type> <name>mfxPluginType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>MFX_THREADPOLICY_SERIAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_THREADPOLICY_PARALLEL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>mfxThreadPolicy</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mfxPluginParam</name> <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PluginVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVersion</name></type> <name>APIVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxPluginUID</name></type> <name>PluginUID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>CodecId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxThreadPolicy</name></type> <name>ThreadPolicy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxThreadNum</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxPluginParam</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mfxCoreParam</name><block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>Impl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVersion</name></type> <name>Version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumWorkingThread</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxCoreParam</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mfxCoreInterface</name> <block>{
<decl_stmt><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameAllocator</name></type> <name>FrameAllocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxBufferAllocator</name></type> <name>reserved3</name></decl>;</decl_stmt>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetCoreParam</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxCoreParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetHandle</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>IncreaseReference</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>DecreaseReference</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>CopyFrame</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>CopyBuffer</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>MapOpaqueSurface</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>op_surf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>UnmapOpaqueSurface</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>op_surf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetRealSurface</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>op_surf</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetOpaqueSurface</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>op_surf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>CreateAccelerationDevice</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetFrameHandle</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>QueryPlatform</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxPlatform</name> <modifier>*</modifier></type><name>platform</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name><name>reserved4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxCoreInterface</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>_mfxENCInput</name></name></type> <name>mfxENCInput</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_mfxENCOutput</name></name></type> <name>mfxENCOutput</name>;</typedef>
<typedef>typedef <type><struct>struct <name>mfxVideoCodecPlugin</name><block>{
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Query</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>QueryIOSurf</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Init</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Reset</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Close</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetVideoParam</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>EncodeFrameSubmit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxEncodeCtrl</name> <modifier>*</modifier></type><name>ctrl</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>DecodeHeader</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetPayload</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxU64</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>mfxPayload</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>DecodeFrameSubmit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface_work</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_out</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>VPPFrameSubmit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxExtVppAuxData</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>VPPFrameSubmitEx</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface_work</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_out</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>ENCFrameSubmit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxENCInput</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxENCOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxVideoCodecPlugin</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mfxAudioCodecPlugin</name><block>{
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Query</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>QueryIOSize</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxAudioAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Init</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Reset</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Close</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetAudioParam</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>EncodeFrameSubmit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxAudioFrame</name> <modifier>*</modifier></type><name>aFrame</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>DecodeHeader</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxAudioParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>DecodeFrameSubmit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxAudioFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxAudioCodecPlugin</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mfxPlugin</name><block>{
<decl_stmt><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl>;</decl_stmt>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>PluginInit</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxCoreInterface</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>PluginClose</name>) <parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>GetPluginParam</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxPluginParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Submit</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>in_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>out_num</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>Execute</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>uid_p</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>uid_a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name></type> (<name>MFX_CDECL</name> <modifier>*</modifier><name>FreeResources</name>)<parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>mfxStatus</name></type> <name>sts</name></decl></parameter>)</parameter_list>;</function_decl>

<union>union <block>{
<decl_stmt><decl><type><name>mfxVideoCodecPlugin</name> <modifier>*</modifier></type><name>Video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxAudioCodecPlugin</name> <modifier>*</modifier></type><name>Audio</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name><name>reserved</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxPlugin</name>;</typedef>



<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_Register</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPlugin</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_Unregister</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_GetPlugin</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxPlugin</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_ProcessFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>in_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>out_num</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_Load</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPluginUID</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_LoadByPath</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPluginUID</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxChar</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoUSER_UnLoad</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPluginUID</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXAudioUSER_Register</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPlugin</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXAudioUSER_Unregister</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXAudioUSER_ProcessFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>in_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>out_num</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXAudioUSER_Load</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPluginUID</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXAudioUSER_UnLoad</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPluginUID</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
