<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_critical_section.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFX_CRITICAL_SECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFX_CRITICAL_SECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfxdefs.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name>
<block>{<block_content>


<typedef>typedef <type><specifier>volatile</specifier> <name>mfxL32</name></type> <name>mfxCriticalSection</name>;</typedef>


<function_decl><type><name>void</name></type> <name>mfxEnterCriticalSection</name><parameter_list>(<parameter><decl><type><name>mfxCriticalSection</name> <modifier>*</modifier></type><name>pCSection</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mfxLeaveCriticalSection</name><parameter_list>(<parameter><decl><type><name>mfxCriticalSection</name> <modifier>*</modifier></type><name>pCSection</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>MFXAutomaticCriticalSection</name>
<block>{<block_content>
<label><name>public</name>:</label>

<function><type><name>explicit</name></type> <name>MFXAutomaticCriticalSection</name><parameter_list>(<parameter><decl><type><name>mfxCriticalSection</name> <modifier>*</modifier></type><name>pCSection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>m_pCSection</name> <operator>=</operator> <name>pCSection</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mfxEnterCriticalSection</name><argument_list>(<argument><expr><name>m_pCSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><operator>~</operator><macro><name>MFXAutomaticCriticalSection</name><argument_list>()</argument_list></macro>
<block>{
<expr><call><name>mfxLeaveCriticalSection</name><argument_list>(<argument><expr><name>m_pCSection</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>protected</name><operator>:</operator>

<name>mfxCriticalSection</name> <operator>*</operator><name>m_pCSection</name></expr>;</expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>MFXAutomaticCriticalSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXAutomaticCriticalSection</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MFXAutomaticCriticalSection</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
