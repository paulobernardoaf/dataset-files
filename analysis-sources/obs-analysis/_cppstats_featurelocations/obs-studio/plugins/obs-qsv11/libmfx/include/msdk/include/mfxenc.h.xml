<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxenc.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXENC_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXENC_H__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxvstructures.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name><name>struct</name> <name>_mfxENCInput</name></name></type> <name>mfxENCInput</name>;</typedef>
<struct>struct <name>_mfxENCInput</name><block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>InSurface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumFrameL0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>L0Surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumFrameL1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>L1Surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExtParam</name></decl>;</decl_stmt>
}</block> ;</struct>

<typedef>typedef <type><name><name>struct</name> <name>_mfxENCOutput</name></name></type> <name>mfxENCOutput</name>;</typedef>
<struct>struct <name>_mfxENCOutput</name><block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>OutSurface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExtParam</name></decl>;</decl_stmt>
}</block> ;</struct>


<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_Query</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_QueryIOSurf</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_Init</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_Reset</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_Close</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_ProcessFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxENCInput</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxENCOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name> <name>MFX_CDECL</name></type> <name>MFXVideoENC_GetVideoParam</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
