<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxplugin++.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXPLUGINPLUSPLUS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXPLUGINPLUSPLUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxplugin.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><name>class</name></type> <name>MFXBaseUSER</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>MFXBaseUSER</name><argument_list>(<argument>mfxSession session = NULL</argument>)</argument_list></macro>
: <macro><name>m_session</name><argument_list>(<argument>session</argument>)</argument_list></macro><block>{<block_content/>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXBaseUSER</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>Register</name><parameter_list>(<parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxPlugin</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>Unregister</name><parameter_list>(<parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>ProcessFrameAsync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>in_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxHDL</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>out_num</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoUSER</name><range>: <expr><name>public</name> <name>MFXBaseUSER</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>MFXVideoUSER</name><argument_list>(<argument>mfxSession session = NULL</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>MFXBaseUSER</name><argument_list>(<argument>session</argument>)</argument_list></macro><block>{}</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Register</name><argument_list>(<argument>mfxU32 type</argument>, <argument>const mfxPlugin *par</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>MFXVideoUSER_Register</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>mfxStatus</name> <macro><name>Unregister</name><argument_list>(<argument>mfxU32 type</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>MFXVideoUSER_Unregister</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>mfxStatus</name> <macro><name>ProcessFrameAsync</name><argument_list>(<argument>const mfxHDL *in</argument>, <argument>mfxU32 in_num</argument>, <argument>const mfxHDL *out</argument>, <argument>mfxU32 out_num</argument>, <argument>mfxSyncPoint *syncp</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>MFXVideoUSER_ProcessFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_num</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_num</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>MFXAudioUSER</name><operator>:</operator> <name>public</name> <name>MFXBaseUSER</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>MFXAudioUSER</name><argument_list>(<argument>mfxSession session = NULL</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>MFXBaseUSER</name><argument_list>(<argument>session</argument>)</argument_list></macro><block>{}</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Register</name><argument_list>(<argument>mfxU32 type</argument>, <argument>const mfxPlugin *par</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>MFXAudioUSER_Register</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>mfxStatus</name> <macro><name>Unregister</name><argument_list>(<argument>mfxU32 type</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>MFXAudioUSER_Unregister</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>mfxStatus</name> <macro><name>ProcessFrameAsync</name><argument_list>(<argument>const mfxHDL *in</argument>, <argument>mfxU32 in_num</argument>, <argument>const mfxHDL *out</argument>, <argument>mfxU32 out_num</argument>, <argument>mfxSyncPoint *syncp</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>MFXAudioUSER_ProcessFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_num</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_num</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>MFXPluginParam</name> <block>{
<expr><name>mfxPluginParam</name> <name>m_param</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>MFXPluginParam</name><argument_list>(<argument>mfxU32 CodecId</argument>, <argument>mfxU32 Type</argument>, <argument>mfxPluginUID uid</argument>, <argument>mfxThreadPolicy ThreadPolicy = MFX_THREADPOLICY_SERIAL</argument>, <argument>mfxU32 MaxThreadNum = <literal type="number">1</literal></argument>)</argument_list></macro>
<operator>:</operator> <macro><name>m_param</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_param</name><operator>.</operator><name>PluginUID</name></name> <operator>=</operator> <name>uid</name></expr>;
<expr><name><name>m_param</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>Type</name></expr>;
<expr><name><name>m_param</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name>CodecId</name></expr>;
<expr><name><name>m_param</name><operator>.</operator><name>MaxThreadNum</name></name> <operator>=</operator> <name>MaxThreadNum</name></expr>;
<expr><name><name>m_param</name><operator>.</operator><name>ThreadPolicy</name></name> <operator>=</operator> <name>ThreadPolicy</name></expr>;
}</block>
<name>operator</name> <specifier>const</specifier> <name>mfxPluginParam</name><operator>&amp;</operator> <operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>m_param</name></expr>;</return>
}</block>
<name>operator</name> <name>mfxPluginParam</name><operator>&amp;</operator> <operator>(</operator><operator>)</operator> <block>{
<return>return <expr><name>m_param</name></expr>;</return>
}</block>
}</expr>;


struct <expr><name>MFXPlugin</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><macro><name>MFXPlugin</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;



<expr><name>virtual</name> <name>mfxStatus</name> <call><name>PluginInit</name><argument_list>(<argument><expr><name>mfxCoreInterface</name> <operator>*</operator><name>core</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <call><name>PluginClose</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>GetPluginParam</name><argument_list>(<argument><expr><name>mfxPluginParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>Execute</name><argument_list>(<argument>mfxThreadTask task</argument>, <argument>mfxU32 uid_p</argument>, <argument>mfxU32 uid_a</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>FreeResources</name><argument_list>(<argument>mfxThreadTask task</argument>, <argument>mfxStatus sts</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>Release</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Close</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>SetAuxParams</name><argument_list>(<argument>void* auxParam</argument>, <argument>int auxParamSize</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXCodecPlugin</name> <operator>:</operator> <name>MFXPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Init</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>QueryIOSurf</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>, <argument><expr><name>mfxFrameAllocRequest</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxFrameAllocRequest</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Query</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></call> <operator>=</operator><literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Reset</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>GetVideoParam</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXAudioCodecPlugin</name> <operator>:</operator> <name>MFXPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Init</name><argument_list>(<argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Query</name><argument_list>(<argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></call> <operator>=</operator><literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>QueryIOSize</name><argument_list>(<argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>par</name></expr></argument>, <argument><expr><name>mfxAudioAllocRequest</name> <operator>*</operator><name>request</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Reset</name><argument_list>(<argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>GetAudioParam</name><argument_list>(<argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXGenericPlugin</name> <operator>:</operator> <name>MFXPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Init</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>QueryIOSurf</name><argument_list>(<argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>, <argument><expr><name>mfxFrameAllocRequest</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxFrameAllocRequest</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>Submit</name><argument_list>(<argument>const mfxHDL *in</argument>, <argument>mfxU32 in_num</argument>, <argument>const mfxHDL *out</argument>, <argument>mfxU32 out_num</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXDecoderPlugin</name> <operator>:</operator> <name>MFXCodecPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>DecodeHeader</name><argument_list>(<argument><expr><name>mfxBitstream</name> <operator>*</operator><name>bs</name></expr></argument>, <argument><expr><name>mfxVideoParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>GetPayload</name><argument_list>(<argument><expr><name>mfxU64</name> <operator>*</operator><name>ts</name></expr></argument>, <argument><expr><name>mfxPayload</name> <operator>*</operator><name>payload</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>DecodeFrameSubmit</name><argument_list>(<argument><expr><name>mfxBitstream</name> <operator>*</operator><name>bs</name></expr></argument>, <argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>surface_work</name></expr></argument>, <argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><operator>*</operator><name>surface_out</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXAudioDecoderPlugin</name> <operator>:</operator> <name>MFXAudioCodecPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>DecodeHeader</name><argument_list>(<argument><expr><name>mfxBitstream</name> <operator>*</operator><name>bs</name></expr></argument>, <argument><expr><name>mfxAudioParam</name> <operator>*</operator><name>par</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <call><name>DecodeFrameSubmit</name><argument_list>(<argument><expr><name>mfxBitstream</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxAudioFrame</name> <operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXEncoderPlugin</name> <operator>:</operator> <name>MFXCodecPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>EncodeFrameSubmit</name><argument_list>(<argument><expr><name>mfxEncodeCtrl</name> <operator>*</operator><name>ctrl</name></expr></argument>, <argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>surface</name></expr></argument>, <argument><expr><name>mfxBitstream</name> <operator>*</operator><name>bs</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXAudioEncoderPlugin</name> <operator>:</operator> <name>MFXAudioCodecPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>EncodeFrameSubmit</name><argument_list>(<argument><expr><name>mfxAudioFrame</name> <operator>*</operator><name>aFrame</name></expr></argument>, <argument><expr><name>mfxBitstream</name> <operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


struct <expr><name>MFXVPPPlugin</name> <operator>:</operator> <name>MFXCodecPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>VPPFrameSubmit</name><argument_list>(<argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>surface_in</name></expr></argument>, <argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>surface_out</name></expr></argument>, <argument><expr><name>mfxExtVppAuxData</name> <operator>*</operator><name>aux</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>VPPFrameSubmitEx</name><argument_list>(<argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>surface_work</name></expr></argument>, <argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><operator>*</operator><name>surface_out</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;

struct <expr><name>MFXEncPlugin</name> <operator>:</operator> <name>MFXCodecPlugin</name>
<block>{
<expr><name>virtual</name> <name>mfxStatus</name> <call><name>EncFrameSubmit</name><argument_list>(<argument><expr><name>mfxENCInput</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>mfxENCOutput</name> <operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>mfxThreadTask</name> <operator>*</operator><name>task</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;




<expr><name>class</name> <name>MFXCoreInterface</name>
<block>{
<expr><name>protected</name><operator>:</operator>
<name>mfxCoreInterface</name> <name>m_core</name></expr>;
<expr><name>public</name><operator>:</operator>

<call><name>MFXCoreInterface</name><argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>m_core</name><argument_list>()</argument_list></macro> <block>{
}</block>
<call><name>MFXCoreInterface</name><argument_list>(<argument><expr><specifier>const</specifier> <name>mfxCoreInterface</name> <operator>&amp;</operator> <name>pCore</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_core</name><argument_list>(<argument>pCore</argument>)</argument_list></macro> <block>{
}</block>

<call><name>MFXCoreInterface</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXCoreInterface</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_core</name><argument_list>(<argument>that.m_core</argument>)</argument_list></macro> <block>{
}</block>
<name>MFXCoreInterface</name> <operator>&amp;</operator><name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>MFXCoreInterface</name> <operator>&amp;</operator> <name>that</name><operator>)</operator>
<block>{
<expr><name>m_core</name> <operator>=</operator> <name><name>that</name><operator>.</operator><name>m_core</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<name>bool</name> <macro><name>IsCoreSet</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
}</block>
<name>mfxStatus</name> <macro><name>GetCoreParam</name><argument_list>(<argument>mfxCoreParam *par</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
<expr_stmt/>}</block_content>
return m_core.GetCoreParam(m_core.pthis</block><operator>,</operator> <expr_stmt><expr><name>par</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
}</block>
<name>mfxStatus</name> <macro><name>GetHandle</name> <argument_list>(<argument>mfxHandleType type</argument>, <argument>mfxHDL *handle</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
<expr_stmt/>}</block_content>
return m_core.GetHandle(m_core.pthis</block><operator>,</operator> <expr_stmt><expr><name>type</name></expr><operator>,</operator> <expr><name>handle</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
}</block>
<name>mfxStatus</name> <macro><name>IncreaseReference</name> <argument_list>(<argument>mfxFrameData *fd</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
<expr_stmt/>}</block_content>
return m_core.IncreaseReference(m_core.pthis</block><operator>,</operator> <expr_stmt><expr><name>fd</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
}</block>
<name>mfxStatus</name> <macro><name>DecreaseReference</name> <argument_list>(<argument>mfxFrameData *fd</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
<expr_stmt/>}</block_content>
return m_core.DecreaseReference(m_core.pthis</block><operator>,</operator> <expr_stmt><expr><name>fd</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
}</block>
<name>mfxStatus</name> <macro><name>CopyFrame</name> <argument_list>(<argument>mfxFrameSurface1 *dst</argument>, <argument>mfxFrameSurface1 *src</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
<expr_stmt/>}</block_content>
return m_core.CopyFrame(m_core.pthis</block><operator>,</operator> <expr_stmt><expr><name>dst</name></expr><operator>,</operator> <expr><name>src</name></expr></expr_stmt></if></if_stmt>)</block></expr></range></decl>;</decl_stmt>
}
mfxStatus <macro><name>CopyBuffer</name><argument_list>(<argument>mfxU8 *dst</argument>, <argument>mfxU32 size</argument>, <argument>mfxFrameSurface1 *src</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>CopyBuffer</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<function><type><name>mfxStatus</name></type> <name>MapOpaqueSurface</name><parameter_list>(<parameter><decl><type><name>mfxU32</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>op_surf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>MapOpaqueSurface</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>op_surf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxStatus</name></type> <name>UnmapOpaqueSurface</name><parameter_list>(<parameter><decl><type><name>mfxU32</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>op_surf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>UnmapOpaqueSurface</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>op_surf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxStatus</name></type> <name>GetRealSurface</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>op_surf</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>GetRealSurface</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>op_surf</name></expr></argument>, <argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxStatus</name></type> <name>GetOpaqueSurface</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>op_surf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>GetOpaqueSurface</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>surf</name></expr></argument>, <argument><expr><name>op_surf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxStatus</name></type> <name>CreateAccelerationDevice</name><parameter_list>(<parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>CreateAccelerationDevice</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxFrameAllocator</name> <modifier>&amp;</modifier></type> <name>FrameAllocator</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>m_core</name><operator>.</operator><name>FrameAllocator</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxStatus</name></type> <name>GetFrameHandle</name><parameter_list>(<parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>GetFrameHandle</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>mfxStatus</name></type> <name>QueryPlatform</name><parameter_list>(<parameter><decl><type><name>mfxPlatform</name> <modifier>*</modifier></type><name>platform</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoreSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MFX_ERR_NULL_PTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>m_core</name><operator>.</operator><name>QueryPlatform</name></name><argument_list>(<argument><expr><name><name>m_core</name><operator>.</operator><name>pthis</name></name></expr></argument>, <argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
} ;



<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name>
<block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MFXPluginAdapterBase</name>
<block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>mfxPlugin</name></type> <name>m_mfxAPI</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MFXPluginAdapterBase</name><argument_list>( <argument><expr><name>T</name> <operator>*</operator><name>plugin</name></expr></argument>, <argument><expr><name>mfxVideoCodecPlugin</name> <operator>*</operator><name>pCodec</name> <operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_mfxAPI</name><argument_list>()</argument_list></macro>
<block>{
<expr><call><name>SetupCallbacks</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>pCodec</name></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>MFXPluginAdapterBase</name><argument_list>( <argument><expr><name>T</name> <operator>*</operator><name>plugin</name></expr></argument>, <argument><expr><name>mfxAudioCodecPlugin</name> <operator>*</operator><name>pCodec</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_mfxAPI</name><argument_list>()</argument_list></macro>
<block>{
<expr><call><name>SetupCallbacks</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>pCodec</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>operator</name> <macro><name>mfxPlugin</name> <argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_mfxAPI</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>SetupCallbacks</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>pthis</name></name> <operator>=</operator> <name>plugin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>PluginInit</name></name> <operator>=</operator> <name>_PluginInit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>PluginClose</name></name> <operator>=</operator> <name>_PluginClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>GetPluginParam</name></name> <operator>=</operator> <name>_GetPluginParam</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>Submit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>Execute</name></name> <operator>=</operator> <name>_Execute</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>FreeResources</name></name> <operator>=</operator> <name>_FreeResources</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetupCallbacks</name><parameter_list>( <parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><name>mfxVideoCodecPlugin</name> <modifier>*</modifier></type><name>pCodec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>SetupCallbacks</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>Video</name></name> <operator>=</operator> <name>pCodec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetupCallbacks</name><parameter_list>( <parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><name>mfxAudioCodecPlugin</name> <modifier>*</modifier></type><name>pCodec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>SetupCallbacks</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_mfxAPI</name><operator>.</operator><name>Audio</name></name> <operator>=</operator> <name>pCodec</name></expr>;</expr_stmt>
</block_content>}</block></function>
<label><name>private</name>:</label>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>_PluginInit</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxCoreInterface</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>PluginInit</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>_PluginClose</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>PluginClose</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>_GetPluginParam</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxPluginParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetPluginParam</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>_Execute</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>thread_id</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>call_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Execute</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>call_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>_FreeResources</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxThreadTask</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>mfxStatus</name></type> <name>sts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>FreeResources</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MFXCodecPluginAdapterBase</name> <range>: <expr><name>public</name> <name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>protected</name><operator>:</operator>

<name>mfxVideoCodecPlugin</name> <name>m_codecPlg</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>MFXCodecPluginAdapterBase</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator> <name>pCodecPlg</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pCodecPlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_codecPlg</name></expr></argument>)</argument_list></call></expr>
, <macro><name>m_codecPlg</name><argument_list>()</argument_list></macro>
<expr><block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Query</name></name> <operator>=</operator> <name>_Query</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>QueryIOSurf</name></name> <operator>=</operator> <name>_QueryIOSurf</name></expr> ;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Init</name></name> <operator>=</operator> <name>_Init</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Reset</name></name> <operator>=</operator> <name>_Reset</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Close</name></name> <operator>=</operator> <name>_Close</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>GetVideoParam</name></name> <operator>=</operator> <name>_GetVideoParam</name></expr>;
}</block>
<call><name>MFXCodecPluginAdapterBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>m_mfxAPI</name><operator>.</operator><name>pthis</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_codecPlg</name></expr></argument>)</argument_list></call></expr>
, <macro><name>m_codecPlg</name><argument_list>()</argument_list></macro> <expr><block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>
<name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <call><name>SetupCallbacks</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>m_mfxAPI</name><operator>.</operator><name>pthis</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_codecPlg</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetupCallbacks</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Query</name></name> <operator>=</operator> <name>_Query</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>QueryIOSurf</name></name> <operator>=</operator> <name>_QueryIOSurf</name></expr> ;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Init</name></name> <operator>=</operator> <name>_Init</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Reset</name></name> <operator>=</operator> <name>_Reset</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Close</name></name> <operator>=</operator> <name>_Close</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>GetVideoParam</name></name> <operator>=</operator> <name>_GetVideoParam</name></expr>;
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Query</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxVideoParam *in</argument>, <argument>mfxVideoParam *out</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Query</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_QueryIOSurf</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxVideoParam *par</argument>, <argument>mfxFrameAllocRequest *in</argument>, <argument>mfxFrameAllocRequest *out</argument>)</argument_list></macro><block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>QueryIOSurf</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Init</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxVideoParam *par</argument>)</argument_list></macro><block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Init</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Reset</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxVideoParam *par</argument>)</argument_list></macro><block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Reset</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Close</name><argument_list>(<argument>mfxHDL pthis</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Close</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_GetVideoParam</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxVideoParam *par</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetVideoParam</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>MFXAudioCodecPluginAdapterBase</name> <operator>:</operator> <name>public</name> <name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>protected</name><operator>:</operator>

<name>mfxAudioCodecPlugin</name> <name>m_codecPlg</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>MFXAudioCodecPluginAdapterBase</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator> <name>pCodecPlg</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pCodecPlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_codecPlg</name></expr></argument>)</argument_list></call></expr>
, <macro><name>m_codecPlg</name><argument_list>()</argument_list></macro>
<expr><block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Query</name></name> <operator>=</operator> <name>_Query</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>QueryIOSize</name></name> <operator>=</operator> <name>_QueryIOSize</name></expr> ;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Init</name></name> <operator>=</operator> <name>_Init</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Reset</name></name> <operator>=</operator> <name>_Reset</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Close</name></name> <operator>=</operator> <name>_Close</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>GetAudioParam</name></name> <operator>=</operator> <name>_GetAudioParam</name></expr>;
}</block>
<call><name>MFXAudioCodecPluginAdapterBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>m_mfxAPI</name><operator>.</operator><name>pthis</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_codecPlg</name></expr></argument>)</argument_list></call></expr>
, <macro><name>m_codecPlg</name><argument_list>()</argument_list></macro> <expr><block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>
<name><name>MFXAudioCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXAudioCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <call><name>SetupCallbacks</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>m_mfxAPI</name><operator>.</operator><name>pthis</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_codecPlg</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetupCallbacks</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Query</name></name> <operator>=</operator> <name>_Query</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>QueryIOSize</name></name> <operator>=</operator> <name>_QueryIOSize</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Init</name></name> <operator>=</operator> <name>_Init</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Reset</name></name> <operator>=</operator> <name>_Reset</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>Close</name></name> <operator>=</operator> <name>_Close</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>GetAudioParam</name></name> <operator>=</operator> <name>_GetAudioParam</name></expr>;
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Query</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxAudioParam *in</argument>, <argument>mfxAudioParam *out</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Query</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_QueryIOSize</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxAudioParam *par</argument>, <argument>mfxAudioAllocRequest *request</argument>)</argument_list></macro><block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>QueryIOSize</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Init</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxAudioParam *par</argument>)</argument_list></macro><block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Init</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Reset</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxAudioParam *par</argument>)</argument_list></macro><block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Reset</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Close</name><argument_list>(<argument>mfxHDL pthis</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Close</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_GetAudioParam</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxAudioParam *par</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetAudioParam</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct <name>MFXPluginAdapterInternal</name><block>{}</block></expr>;
<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXGenericPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXGenericPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXGenericPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXGenericPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><name><name>m_mfxAPI</name><operator>.</operator><name>Submit</name></name> <operator>=</operator> <name>_Submit</name></expr>;
}</block>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument> )</argument_list></call>
<operator>:</operator> <macro><name>MFXPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXGenericPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><name><name>m_mfxAPI</name><operator>.</operator><name>Submit</name></name> <operator>=</operator> <name><name>that</name><operator>.</operator><name>_Submit</name></name></expr>;
}</block>
<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXGenericPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXGenericPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXGenericPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><name><name>m_mfxAPI</name><operator>.</operator><name>Submit</name></name> <operator>=</operator> <name><name>that</name><operator>.</operator><name>_Submit</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_Submit</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>const mfxHDL *in</argument>, <argument>mfxU32 in_num</argument>, <argument>const mfxHDL *out</argument>, <argument>mfxU32 out_num</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXGenericPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Submit</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_num</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_num</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXDecoderPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXDecoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXDecoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetupCallbacks</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>DecodeHeader</name></name> <operator>=</operator> <name>_DecodeHeader</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>GetPayload</name></name> <operator>=</operator> <name>_GetPayload</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>DecodeFrameSubmit</name></name> <operator>=</operator> <name>_DecodeFrameSubmit</name></expr>;
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_DecodeHeader</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxBitstream *bs</argument>, <argument>mfxVideoParam *par</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>DecodeHeader</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_GetPayload</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxU64 *ts</argument>, <argument>mfxPayload *payload</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetPayload</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_DecodeFrameSubmit</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxBitstream *bs</argument>, <argument>mfxFrameSurface1 *surface_work</argument>, <argument>mfxFrameSurface1 **surface_out</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXDecoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>DecodeFrameSubmit</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>surface_work</name></expr></argument>, <argument><expr><name>surface_out</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXAudioCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXAudioDecoderPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXAudioCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXAudioDecoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXAudioCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXAudioDecoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXAudioCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetupCallbacks</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>DecodeHeader</name></name> <operator>=</operator> <name>_DecodeHeader</name></expr>;

<expr><name><name>m_codecPlg</name><operator>.</operator><name>DecodeFrameSubmit</name></name> <operator>=</operator> <name>_DecodeFrameSubmit</name></expr>;
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_DecodeHeader</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxBitstream *bs</argument>, <argument>mfxAudioParam *par</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>DecodeHeader</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_DecodeFrameSubmit</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxBitstream *in</argument>, <argument>mfxAudioFrame *out</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioDecoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>DecodeFrameSubmit</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncoderPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXEncoderPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXEncoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>EncodeFrameSubmit</name></name> <operator>=</operator> <name>_EncodeFrameSubmit</name></expr>;
}</block>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXEncoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>EncodeFrameSubmit</name></name> <operator>=</operator> <name>_EncodeFrameSubmit</name></expr>;
}</block>

<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name> <operator>=</operator> <operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>EncodeFrameSubmit</name></name> <operator>=</operator> <name>_EncodeFrameSubmit</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_EncodeFrameSubmit</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxEncodeCtrl *ctrl</argument>, <argument>mfxFrameSurface1 *surface</argument>, <argument>mfxBitstream *bs</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>EncodeFrameSubmit</name><argument_list>(<argument><expr><name>ctrl</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioEncoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXAudioCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioEncoderPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXAudioEncoderPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXAudioCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXAudioEncoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXAudioCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXAudioEncoderPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioEncoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioEncoderPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXAudioCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioEncoderPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetupCallbacks</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>EncodeFrameSubmit</name></name> <operator>=</operator> <name>_EncodeFrameSubmit</name></expr>;
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_EncodeFrameSubmit</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxAudioFrame *aFrame</argument>, <argument>mfxBitstream *out</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXAudioEncoderPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>EncodeFrameSubmit</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXEncPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXEncPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>ENCFrameSubmit</name></name> <operator>=</operator> <name>_ENCFrameSubmit</name></expr>;
}</block>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXEncPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>ENCFrameSubmit</name></name> <operator>=</operator> <name>_ENCFrameSubmit</name></expr>;
}</block>

<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name> <operator>=</operator> <operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>ENCFrameSubmit</name></name> <operator>=</operator> <name>_ENCFrameSubmit</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_ENCFrameSubmit</name><argument_list>(<argument>mfxHDL pthis</argument>,<argument>mfxENCInput *in</argument>, <argument>mfxENCOutput *out</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXEncPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>EncFrameSubmit</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><name>MFXVPPPlugin</name> <operator>*</operator><name>pPlugin</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXVPPPlugin</name><operator>&gt;</operator><operator>(</operator><name>pPlugin</name><operator>)</operator>
<block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>
<call><name>MFXPluginAdapterInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXPluginAdapterInternal</name> <operator>&amp;</operator> <name>that</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MFXCodecPluginAdapterBase</name></macro><operator>&lt;</operator><name>MFXVPPPlugin</name><operator>&gt;</operator><operator>(</operator><name>that</name><operator>)</operator> <block>{
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>that</name><operator>)</operator> <block>{
<expr><name><name>MFXCodecPluginAdapterBase</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name> <operator>=</operator> <operator>(</operator><name>that</name><operator>)</operator></expr>;
<expr><call><name>SetupCallbacks</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetupCallbacks</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>m_codecPlg</name><operator>.</operator><name>VPPFrameSubmit</name></name> <operator>=</operator> <name>_VPPFrameSubmit</name></expr>;
<expr><name><name>m_codecPlg</name><operator>.</operator><name>VPPFrameSubmitEx</name></name> <operator>=</operator> <name>_VPPFrameSubmitEx</name></expr>;
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_VPPFrameSubmit</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxFrameSurface1 *surface_in</argument>, <argument>mfxFrameSurface1 *surface_out</argument>, <argument>mfxExtVppAuxData *aux</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>VPPFrameSubmit</name><argument_list>(<argument><expr><name>surface_in</name></expr></argument>, <argument><expr><name>surface_out</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>mfxStatus</name> <macro><name>_VPPFrameSubmitEx</name><argument_list>(<argument>mfxHDL pthis</argument>, <argument>mfxFrameSurface1 *surface_in</argument>, <argument>mfxFrameSurface1 *surface_work</argument>, <argument>mfxFrameSurface1 **surface_out</argument>, <argument>mfxThreadTask *task</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MFXVPPPlugin</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pthis</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>VPPFrameSubmitEx</name><argument_list>(<argument><expr><name>surface_in</name></expr></argument>, <argument><expr><name>surface_work</name></expr></argument>, <argument><expr><name>surface_out</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;
}</block>


<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>MFXPluginAdapter</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>detail</name><operator>::</operator><name><name>MFXPluginAdapterInternal</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>m_Adapter</name></expr>;

<expr><name>operator</name> <macro><name>mfxPlugin</name> <argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>m_Adapter</name><operator>.</operator><name>operator</name></name> <call><name>mfxPlugin</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<call><name>MFXPluginAdapter</name><argument_list>(<argument><expr><name>T</name><operator>*</operator> <name>pPlugin</name> <operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_Adapter</name><argument_list>(<argument>pPlugin</argument>)</argument_list></macro>
<block>{
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name><name>MFXPluginAdapter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>make_mfx_plugin_adapter</name><argument_list>(<argument>T* pPlugin</argument>)</argument_list></macro> <block>{

<expr><name><name>MFXPluginAdapter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <call><name>adapt</name><argument_list>(<argument><expr><name>pPlugin</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>adapt</name></expr>;</return>
}</block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
