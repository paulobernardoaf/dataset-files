<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxstructures.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXSTRUCTURES_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXSTRUCTURES_H__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxcommon.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name> <name>4201</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TemporalId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PriorityId</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DependencyId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>QualityId</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ViewId</name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block></struct></type> <name>mfxFrameId</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>4</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BitDepthLuma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BitDepthChroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameId</name></type> <name>FrameId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>FourCC</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropH</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU64</name></type> <name>BufferSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>reserved5</name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameRateExtN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameRateExtD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>AspectRatioW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>AspectRatioH</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxFrameInfo</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>


<enum>enum <block>{
<decl><name>MFX_FOURCC_NV12</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_YV12</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_NV16</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_YUY2</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_RGB3</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_RGB4</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_P8</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>, 
<decl><name>MFX_FOURCC_P8_TEXTURE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_P010</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_P210</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_BGR4</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_A2RGB10</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_ARGB16</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_ABGR16</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_R16</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_AYUV</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_AYUV_RGB4</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
<decl><name>MFX_FOURCC_UYVY</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_Y210</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_FOURCC_Y410</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_PICSTRUCT_UNKNOWN</name> <init>=<expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_PROGRESSIVE</name> <init>=<expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_FIELD_TFF</name> <init>=<expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_FIELD_BFF</name> <init>=<expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>MFX_PICSTRUCT_FIELD_REPEATED</name><init>=<expr><literal type="number">0x10</literal></expr></init></decl>, 
<decl><name>MFX_PICSTRUCT_FRAME_DOUBLING</name><init>=<expr><literal type="number">0x20</literal></expr></init></decl>, 
<decl><name>MFX_PICSTRUCT_FRAME_TRIPLING</name><init>=<expr><literal type="number">0x40</literal></expr></init></decl>, 

<decl><name>MFX_PICSTRUCT_FIELD_SINGLE</name> <init>=<expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_FIELD_TOP</name> <init>=<expr><name>MFX_PICSTRUCT_FIELD_SINGLE</name> <operator>|</operator> <name>MFX_PICSTRUCT_FIELD_TFF</name></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_FIELD_BOTTOM</name> <init>=<expr><name>MFX_PICSTRUCT_FIELD_SINGLE</name> <operator>|</operator> <name>MFX_PICSTRUCT_FIELD_BFF</name></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_FIELD_PAIRED_PREV</name> <init>=<expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>MFX_PICSTRUCT_FIELD_PAIRED_NEXT</name> <init>=<expr><literal type="number">0x400</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_CHROMAFORMAT_MONOCHROME</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV420</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV422</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV444</name> <init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV400</name> <init>= <expr><name>MFX_CHROMAFORMAT_MONOCHROME</name></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV411</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV422H</name> <init>= <expr><name>MFX_CHROMAFORMAT_YUV422</name></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_YUV422V</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>MFX_CHROMAFORMAT_RESERVED1</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_TIMESTAMP_UNKNOWN</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_FRAMEORDER_UNKNOWN</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_FRAMEDATA_ORIGINAL_TIMESTAMP</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_CORRUPTION_MINOR</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MFX_CORRUPTION_MAJOR</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>MFX_CORRUPTION_ABSENT_TOP_FIELD</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>MFX_CORRUPTION_ABSENT_BOTTOM_FIELD</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>MFX_CORRUPTION_REFERENCE_FRAME</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
<decl><name>MFX_CORRUPTION_REFERENCE_LIST</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>
}</block>;</enum>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>4</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>U</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Y</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>V</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>A</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>mfxY410</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>4</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>B</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>G</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>R</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>A</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>mfxA2RGB10</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>



<typedef>typedef <type><struct>struct <block>{
<union>union <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MemType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PitchHigh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU64</name></type> <name>TimeStamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameOrder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Locked</name></decl>;</decl_stmt>
<union>union<block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PitchLow</name></decl>;</decl_stmt>
}</block>;</union>


<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>Y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name> <modifier>*</modifier></type><name>Y16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>R</name></decl>;</decl_stmt>
}</block>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>UV</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>VU</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>CbCr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>CrCb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>Cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>U</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name> <modifier>*</modifier></type><name>U16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>G</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxY410</name> <modifier>*</modifier></type><name>Y410</name></decl>;</decl_stmt> 
}</block>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>Cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name> <modifier>*</modifier></type><name>V16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxA2RGB10</name> <modifier>*</modifier></type><name>A2RGB10</name></decl>;</decl_stmt> 
}</block>;</union>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxMemId</name></type> <name>MemId</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxU16</name></type> <name>Corrupted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DataFlag</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxFrameData</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameInfo</name></type> <name>Info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameData</name></type> <name>Data</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxFrameSurface1</name>;</typedef>

<enum>enum <block>{
<decl><name>MFX_TIMESTAMPCALC_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_TIMESTAMPCALC_TELECINE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>LowPower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BRCParamMultiplier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameInfo</name></type> <name>FrameInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>CodecId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CodecProfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CodecLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumThread</name></decl>;</decl_stmt>

<union>union <block>{
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TargetUsage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>GopPicSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>GopRefDist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>GopOptFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>IdrInterval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>RateControlMethod</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>InitialDelayInKB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>QPI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Accuracy</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BufferSizeInKB</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TargetKbps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>QPP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ICQQuality</name></decl>;</decl_stmt>
}</block>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MaxKbps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>QPB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Convergence</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSlice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRefFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EncodedOrder</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DecodedOrder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ExtendedPicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TimeStampCalc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SliceGroupsPresent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MaxDecFrameBuffering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableReallocRequest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>JPEGChromaFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>JPEGColorFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>InterleavedDec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name></type> <name><name>SamplingFactorH</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name></type> <name><name>SamplingFactorV</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Interleaved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RestartInterval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved5</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block></struct></type> <name>mfxInfoMFX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameInfo</name></type> <name>In</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameInfo</name></type> <name>Out</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxInfoVPP</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>AllocId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>AsyncDepth</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>mfxInfoMFX</name></type> <name>mfx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxInfoVPP</name></type> <name>vpp</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Protected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>IOPattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name><modifier>*</modifier><modifier>*</modifier></type> <name>ExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxVideoParam</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_IOPATTERN_IN_VIDEO_MEMORY</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MFX_IOPATTERN_IN_SYSTEM_MEMORY</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>MFX_IOPATTERN_OUT_VIDEO_MEMORY</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_CODEC_AVC</name> <init>=<expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_CODEC_HEVC</name> <init>=<expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_CODEC_MPEG2</name> <init>=<expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_CODEC_VC1</name> <init>=<expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_CODEC_CAPTURE</name> <init>=<expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_CODEC_VP9</name> <init>=<expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'9'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_CODEC_AV1</name> <init>=<macro><name>MFX_MAKEFOURCC</name><argument_list>(<argument><literal type="char">'A'</literal></argument>,<argument><literal type="char">'V'</literal></argument>,<argument><literal type="char">'1'</literal></argument>,<argument><literal type="char">' '</literal></argument>)</argument_list></macro></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_PROFILE_UNKNOWN</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_UNKNOWN</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>MFX_PROFILE_AVC_CONSTRAINT_SET0</name> <init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINT_SET1</name> <init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINT_SET2</name> <init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINT_SET3</name> <init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINT_SET4</name> <init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINT_SET5</name> <init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,

<decl><name>MFX_PROFILE_AVC_BASELINE</name> <init>=<expr><literal type="number">66</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_MAIN</name> <init>=<expr><literal type="number">77</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_EXTENDED</name> <init>=<expr><literal type="number">88</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_HIGH</name> <init>=<expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_HIGH_422</name> <init>=<expr><literal type="number">122</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINED_BASELINE</name> <init>=<expr><name>MFX_PROFILE_AVC_BASELINE</name> <operator>+</operator> <name>MFX_PROFILE_AVC_CONSTRAINT_SET1</name></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_CONSTRAINED_HIGH</name> <init>=<expr><name>MFX_PROFILE_AVC_HIGH</name> <operator>+</operator> <name>MFX_PROFILE_AVC_CONSTRAINT_SET4</name>
<operator>+</operator> <name>MFX_PROFILE_AVC_CONSTRAINT_SET5</name></expr></init></decl>,
<decl><name>MFX_PROFILE_AVC_PROGRESSIVE_HIGH</name> <init>=<expr><name>MFX_PROFILE_AVC_HIGH</name> <operator>+</operator> <name>MFX_PROFILE_AVC_CONSTRAINT_SET4</name></expr></init></decl>,

<decl><name>MFX_LEVEL_AVC_1</name> <init>=<expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_1b</name> <init>=<expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_11</name> <init>=<expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_12</name> <init>=<expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_13</name> <init>=<expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_2</name> <init>=<expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_21</name> <init>=<expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_22</name> <init>=<expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_3</name> <init>=<expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_31</name> <init>=<expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_32</name> <init>=<expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_4</name> <init>=<expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_41</name> <init>=<expr><literal type="number">41</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_42</name> <init>=<expr><literal type="number">42</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_5</name> <init>=<expr><literal type="number">50</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_51</name> <init>=<expr><literal type="number">51</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_AVC_52</name> <init>=<expr><literal type="number">52</literal></expr></init></decl>,


<decl><name>MFX_PROFILE_MPEG2_SIMPLE</name> <init>=<expr><literal type="number">0x50</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_MPEG2_MAIN</name> <init>=<expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_MPEG2_HIGH</name> <init>=<expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>MFX_LEVEL_MPEG2_LOW</name> <init>=<expr><literal type="number">0xA</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_MPEG2_MAIN</name> <init>=<expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_MPEG2_HIGH</name> <init>=<expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_MPEG2_HIGH1440</name> <init>=<expr><literal type="number">0x6</literal></expr></init></decl>,


<decl><name>MFX_PROFILE_VC1_SIMPLE</name> <init>=<expr><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_VC1_MAIN</name> <init>=<expr><operator>(</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_PROFILE_VC1_ADVANCED</name> <init>=<expr><operator>(</operator><literal type="number">12</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,


<decl><name>MFX_LEVEL_VC1_LOW</name> <init>=<expr><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_LEVEL_VC1_MEDIAN</name> <init>=<expr><operator>(</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_LEVEL_VC1_HIGH</name> <init>=<expr><operator>(</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,


<decl><name>MFX_LEVEL_VC1_0</name> <init>=<expr><operator>(</operator><literal type="number">0x00</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_LEVEL_VC1_1</name> <init>=<expr><operator>(</operator><literal type="number">0x01</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_LEVEL_VC1_2</name> <init>=<expr><operator>(</operator><literal type="number">0x02</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_LEVEL_VC1_3</name> <init>=<expr><operator>(</operator><literal type="number">0x03</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_LEVEL_VC1_4</name> <init>=<expr><operator>(</operator><literal type="number">0x04</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,


<decl><name>MFX_PROFILE_HEVC_MAIN</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_HEVC_MAIN10</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_HEVC_MAINSP</name> <init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_HEVC_REXT</name> <init>=<expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>MFX_LEVEL_HEVC_1</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_2</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_21</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_3</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_31</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_4</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_41</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_5</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_51</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_52</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_6</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_61</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,
<decl><name>MFX_LEVEL_HEVC_62</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,

<decl><name>MFX_TIER_HEVC_MAIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_TIER_HEVC_HIGH</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,


<decl><name>MFX_PROFILE_VP9_0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_VP9_1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_VP9_2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_PROFILE_VP9_3</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_GOP_CLOSED</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_GOP_STRICT</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_TARGETUSAGE_1</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_2</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_3</name> <init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_4</name> <init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_5</name> <init>=<expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_6</name> <init>=<expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_7</name> <init>=<expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>MFX_TARGETUSAGE_UNKNOWN</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_BEST_QUALITY</name> <init>=<expr><name>MFX_TARGETUSAGE_1</name></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_BALANCED</name> <init>=<expr><name>MFX_TARGETUSAGE_4</name></expr></init></decl>,
<decl><name>MFX_TARGETUSAGE_BEST_SPEED</name> <init>=<expr><name>MFX_TARGETUSAGE_7</name></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_RATECONTROL_CBR</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_VBR</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_CQP</name> <init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_AVBR</name> <init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_RESERVED1</name> <init>=<expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_RESERVED2</name> <init>=<expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_RESERVED3</name> <init>=<expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_RESERVED4</name> <init>=<expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_LA</name> <init>=<expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_ICQ</name> <init>=<expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_VCM</name> <init>=<expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_LA_ICQ</name> <init>=<expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_LA_EXT</name> <init>=<expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_LA_HRD</name> <init>=<expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>MFX_RATECONTROL_QVBR</name> <init>=<expr><literal type="number">14</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_TRELLIS_UNKNOWN</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_TRELLIS_OFF</name> <init>=<expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MFX_TRELLIS_I</name> <init>=<expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MFX_TRELLIS_P</name> <init>=<expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>MFX_TRELLIS_B</name> <init>=<expr><literal type="number">0x08</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RateDistortionOpt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MECostType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MESearchType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16Pair</name></type> <name>MVSearchWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EndOfSequence</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FramePicture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>CAVLC</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RecoveryPointSEI</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ViewOutput</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NalHrdConformance</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SingleSeiNalUnit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>VuiVclHrdParameters</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>RefPicListReordering</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ResetRefList</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RefPicMarkRep</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FieldOutput</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>IntraPredBlockSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>InterPredBlockSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MVPrecision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MaxDecFrameBuffering</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>AUDelimiter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EndOfStream</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicTimingSEI</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>VuiNalHrdParameters</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mfxExtCodingOption</name>;</typedef>

<enum>enum <block>{
<decl><name>MFX_B_REF_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_B_REF_OFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_B_REF_PYRAMID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_LOOKAHEAD_DS_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_LOOKAHEAD_DS_OFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_LOOKAHEAD_DS_2x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_LOOKAHEAD_DS_4x</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_BPSEI_DEFAULT</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>MFX_BPSEI_IFRAME</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_SKIPFRAME_NO_SKIP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_SKIPFRAME_INSERT_DUMMY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_SKIPFRAME_INSERT_NOTHING</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_SKIPFRAME_BRC_ONLY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_REFRESH_NO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_REFRESH_VERTICAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_REFRESH_HORIZONTAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_REFRESH_SLICE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>IntRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>IntRefCycleSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>IntRefQPDelta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxFrameSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxSliceSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>BitrateLimit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MBBRC</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ExtBRC</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LookAheadDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Trellis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RepeatPPS</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>AdaptiveI</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>AdaptiveB</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LookAheadDS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumMbPerSlice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SkipFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name></type> <name>MinQPI</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name></type> <name>MaxQPI</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name></type> <name>MinQPP</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name></type> <name>MaxQPP</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name></type> <name>MinQPB</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU8</name></type> <name>MaxQPB</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FixedFrameRate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DisableDeblockingIdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DisableVUI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BufferingPeriodSEI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableMAD</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>UseRawRef</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mfxExtCodingOption2</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_WEIGHTED_PRED_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_WEIGHTED_PRED_DEFAULT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_WEIGHTED_PRED_EXPLICIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_WEIGHTED_PRED_IMPLICIT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_SCENARIO_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_SCENARIO_DISPLAY_REMOTING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_SCENARIO_VIDEO_CONFERENCE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_SCENARIO_ARCHIVE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_SCENARIO_LIVE_STREAMING</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_SCENARIO_CAMERA_CAPTURE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_CONTENT_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_CONTENT_FULL_SCREEN_VIDEO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_CONTENT_NON_VIDEO_SCREEN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_P_REF_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_P_REF_SIMPLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_P_REF_PYRAMID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSliceI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSliceP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSliceB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>WinBRCMaxAvgKbps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>WinBRCSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>QVBRQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableMBQP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>IntRefCycleDist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DirectBiasAdjustment</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>GlobalMotionBiasAdjustment</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MVCostScalingFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MBDisableSkipMap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>WeightedPred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>WeightedBiPred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>AspectRatioInfoPresent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>OverscanInfoPresent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>OverscanAppropriate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TimingInfoPresent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BitstreamRestriction</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LowDelayHrd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MotionVectorsOverPicBoundaries</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>ScenarioInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ContentInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>PRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FadeDetection</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>GPB</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxFrameSizeI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxFrameSizeP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableQPOffset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxI16</name></type> <name><name>QPOffset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>NumRefActiveP</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>NumRefActiveBL0</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>NumRefActiveBL1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TransformSkip</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TargetChromaFormatPlus1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TargetBitDepthLuma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TargetBitDepthChroma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BRCPanicMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>LowDelayBRC</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableMBForceIntra</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>AdaptiveMaxFrameSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>RepartitionCheckEnable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EncodedUnitsInfo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableNalUnitType</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ExtBrcAdaptiveLTR</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">163</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtCodingOption3</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_BLOCKSIZE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_BLOCKSIZE_MIN_16X16</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>MFX_BLOCKSIZE_MIN_8X8</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>MFX_BLOCKSIZE_MIN_4X4</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> 
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_MVPRECISION_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_MVPRECISION_INTEGER</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_MVPRECISION_HALFPEL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_MVPRECISION_QUARTERPEL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_CODINGOPTION_UNKNOWN</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_CODINGOPTION_ON</name> <init>=<expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>MFX_CODINGOPTION_OFF</name> <init>=<expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>MFX_CODINGOPTION_ADAPTIVE</name> <init>=<expr><literal type="number">0x30</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_BITSTREAM_COMPLETE_FRAME</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>, 
<decl><name>MFX_BITSTREAM_EOS</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_EXTBUFF_CODING_OPTION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_CODING_OPTION_SPSPPS</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_DONOTUSE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_AUXDATA</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_DENOISE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_SCENE_ANALYSIS</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_SCENE_CHANGE</name> <init>= <expr><name>MFX_EXTBUFF_VPP_SCENE_ANALYSIS</name></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_PROCAMP</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_DETAIL</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VIDEO_SIGNAL_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_DOUSE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_OPAQUE_SURFACE_ALLOCATION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_AVC_REFLIST_CTRL</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_FRAME_RATE_CONVERSION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_PICTURE_TIMING_SEI</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_AVC_TEMPORAL_LAYERS</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_CODING_OPTION2</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_IMAGE_STABILIZATION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_PICSTRUCT_DETECTION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_ENCODER_CAPABILITY</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_ENCODER_RESET_OPTION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_ENCODED_FRAME_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'F'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_COMPOSITE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_VIDEO_SIGNAL_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_ENCODER_ROI</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_DEINTERLACING</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_AVC_REFLISTS</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_DEC_VIDEO_PROCESSING</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_FIELD_PROCESSING</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_CODING_OPTION3</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_CHROMA_LOC_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MBQP</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MB_FORCE_INTRA</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'F'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_HEVC_TILES</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MB_DISABLE_SKIP_MAP</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_HEVC_PARAM</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_DECODED_FRAME_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'F'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_TIME_CODE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_HEVC_REGION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_PRED_WEIGHT_TABLE</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'W'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_DIRTY_RECTANGLES</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MOVING_RECTANGLES</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_CODING_OPTION_VPS</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_ROTATION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_ENCODED_SLICES_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_SCALING</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_HEVC_REFLIST_CTRL</name> <init>= <expr><name>MFX_EXTBUFF_AVC_REFLIST_CTRL</name></expr></init></decl>,
<decl><name>MFX_EXTBUFF_HEVC_REFLISTS</name> <init>= <expr><name>MFX_EXTBUFF_AVC_REFLISTS</name></expr></init></decl>,
<decl><name>MFX_EXTBUFF_HEVC_TEMPORAL_LAYERS</name> <init>= <expr><name>MFX_EXTBUFF_AVC_TEMPORAL_LAYERS</name></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_MIRRORING</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MV_OVER_PIC_BOUNDARIES</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_COLORFILL</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_DECODE_ERROR_REPORT</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_COLOR_CONVERSION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_CONTENT_LIGHT_LEVEL_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MASTERING_DISPLAY_COLOUR_VOLUME</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MULTI_FRAME_PARAM</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_MULTI_FRAME_CONTROL</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_ENCODED_UNITS_INFO</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VPP_MCTF</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VP9_SEGMENTATION</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VP9_TEMPORAL_LAYERS</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_VP9_PARAM</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>MFX_EXTBUFF_AVC_ROUNDING_OFFSET</name> <init>= <expr><call><name>MFX_MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
}</block>;</enum>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumAlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name><modifier>*</modifier></type> <name>AlgList</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPDoNotUse</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DenoiseFactor</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPDenoise</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DetailFactor</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPDetail</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxF64</name></type> <name>Brightness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxF64</name></type> <name>Contrast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxF64</name></type> <name>Hue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxF64</name></type> <name>Saturation</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPProcAmp</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>NumBit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumCachedFrame</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxEncodeStat</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumSkippedFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumCachedFrame</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxDecodeStat</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumCachedFrame</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxVPPStat</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<union>union<block>{
<struct>struct<block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>SpatialComplexity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>TemporalComplexity</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct<block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SceneChangeRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RepeatedFrame</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVppAuxData</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_PAYLOAD_CTRL_SUFFIX</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl> 
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>CtrlFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumBit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BufSize</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mfxPayload</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MfxNalUnitType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SkipFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>QP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>FrameType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumPayload</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExtParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxPayload</name> <modifier>*</modifier><modifier>*</modifier></type><name>Payload</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mfxEncodeCtrl</name>;</typedef>


<enum>enum <block>{

<decl><name>MFX_MEMTYPE_PERSISTENT_MEMORY</name> <init>=<expr><literal type="number">0x0002</literal></expr></init></decl>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_MEMTYPE_BASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x90ff &amp; (x))</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>MFX_MEMTYPE_DXVA2_DECODER_TARGET</name> <init>=<expr><literal type="number">0x0010</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_DXVA2_PROCESSOR_TARGET</name> <init>=<expr><literal type="number">0x0020</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name> <init>= <expr><name>MFX_MEMTYPE_DXVA2_DECODER_TARGET</name></expr></init></decl>,
<decl><name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name> <init>= <expr><name>MFX_MEMTYPE_DXVA2_PROCESSOR_TARGET</name></expr></init></decl>,
<decl><name>MFX_MEMTYPE_SYSTEM_MEMORY</name> <init>=<expr><literal type="number">0x0040</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_RESERVED1</name> <init>=<expr><literal type="number">0x0080</literal></expr></init></decl>,

<decl><name>MFX_MEMTYPE_FROM_ENCODE</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_FROM_DECODE</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_FROM_VPPIN</name> <init>= <expr><literal type="number">0x0400</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_FROM_VPPOUT</name> <init>= <expr><literal type="number">0x0800</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_FROM_ENC</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_FROM_PAK</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>, 

<decl><name>MFX_MEMTYPE_INTERNAL_FRAME</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_EXTERNAL_FRAME</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_OPAQUE_FRAME</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_EXPORT_FRAME</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>MFX_MEMTYPE_SHARED_RESOURCE</name> <init>= <expr><name>MFX_MEMTYPE_EXPORT_FRAME</name></expr></init></decl>,
<decl><name>MFX_MEMTYPE_VIDEO_MEMORY_ENCODER_TARGET</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<union>union <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>AllocId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameInfo</name></type> <name>Info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumFrameMin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumFrameSuggested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxFrameAllocRequest</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>AllocId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxMemId</name> <modifier>*</modifier></type><name>mids</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumFrameActual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxFrameAllocResponse</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_FRAMETYPE_UNKNOWN</name> <init>=<expr><literal type="number">0x0000</literal></expr></init></decl>,

<decl><name>MFX_FRAMETYPE_I</name> <init>=<expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_P</name> <init>=<expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_B</name> <init>=<expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_S</name> <init>=<expr><literal type="number">0x0008</literal></expr></init></decl>,

<decl><name>MFX_FRAMETYPE_REF</name> <init>=<expr><literal type="number">0x0040</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_IDR</name> <init>=<expr><literal type="number">0x0080</literal></expr></init></decl>,

<decl><name>MFX_FRAMETYPE_xI</name> <init>=<expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_xP</name> <init>=<expr><literal type="number">0x0200</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_xB</name> <init>=<expr><literal type="number">0x0400</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_xS</name> <init>=<expr><literal type="number">0x0800</literal></expr></init></decl>,

<decl><name>MFX_FRAMETYPE_xREF</name> <init>=<expr><literal type="number">0x4000</literal></expr></init></decl>,
<decl><name>MFX_FRAMETYPE_xIDR</name> <init>=<expr><literal type="number">0x8000</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>MFX_HEVC_NALU_TYPE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_TRAIL_N</name> <init>= <expr><operator>(</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_TRAIL_R</name> <init>= <expr><operator>(</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_RADL_N</name> <init>= <expr><operator>(</operator> <literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_RADL_R</name> <init>= <expr><operator>(</operator> <literal type="number">7</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_RASL_N</name> <init>= <expr><operator>(</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_RASL_R</name> <init>= <expr><operator>(</operator> <literal type="number">9</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_IDR_W_RADL</name> <init>= <expr><operator>(</operator><literal type="number">19</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_IDR_N_LP</name> <init>= <expr><operator>(</operator><literal type="number">20</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_NALU_TYPE_CRA_NUT</name> <init>= <expr><operator>(</operator><literal type="number">21</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><enum>enum <block>{
<decl><name>MFX_HANDLE_DIRECT3D_DEVICE_MANAGER9</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>MFX_HANDLE_D3D9_DEVICE_MANAGER</name> <init>= <expr><name>MFX_HANDLE_DIRECT3D_DEVICE_MANAGER9</name></expr></init></decl>,
<decl><name>MFX_HANDLE_RESERVED1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_HANDLE_D3D11_DEVICE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_HANDLE_VA_DISPLAY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_HANDLE_RESERVED3</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block></enum></type> <name>mfxHandleType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>MFX_SKIPMODE_NOSKIP</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_SKIPMODE_MORE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_SKIPMODE_LESS</name><init>=<expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>mfxSkipMode</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>SPSBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>PPSBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SPSBufSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PPSBufSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SPSId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PPSId</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtCodingOptionSPSPPS</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>VPSBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>VPSBufSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>VPSId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtCodingOptionVPS</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>VideoFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>VideoFullRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ColourDescriptionPresent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ColourPrimaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TransferCharacteristics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MatrixCoefficients</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVideoSignalInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumAlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name> <modifier>*</modifier></type><name>AlgList</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPDoUse</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>Surfaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSurface</name></decl>;</decl_stmt>
}</block> <decl><name>In</name></decl>, <name>Out</name>;</struct>
}</block></struct></type> <name>mfxExtOpaqueSurfaceAlloc</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRefIdxL0Active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRefIdxL1Active</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameOrder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ViewId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LongTermIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>PreferredRefList</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <name><name>RejectedRefList</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>, <name><name>LongTermRefList</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>;</struct>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>ApplyLongTermIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtAVCRefListCtrl</name>;</typedef>

<enum>enum <block>{
<decl><name>MFX_FRCALGM_PRESERVE_TIMESTAMP</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MFX_FRCALGM_DISTRIBUTED_TIMESTAMP</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>MFX_FRCALGM_FRAME_INTERPOLATION</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPFrameRateConversion</name>;</typedef>

<enum>enum <block>{
<decl><name>MFX_IMAGESTAB_MODE_UPSCALE</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MFX_IMAGESTAB_MODE_BOXING</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPImageStab</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_PAYLOAD_OFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_PAYLOAD_IDR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>InsertPayloadToggle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>DisplayPrimariesX</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>DisplayPrimariesY</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>WhitePointX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>WhitePointY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxDisplayMasteringLuminance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MinDisplayMasteringLuminance</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtMasteringDisplayColourVolume</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>InsertPayloadToggle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MaxContentLightLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MaxPicAverageLightLevel</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtContentLightLevelInfo</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ClockTimestampFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CtType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NuitFieldBasedFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CountingType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FullTimestampFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>DiscontinuityFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CntDroppedFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NFrames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SecondsFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MinutesFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>HoursFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SecondsValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MinutesValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>HoursValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>TimeOffset</name></decl>;</decl_stmt>
}</block> <decl><name><name>TimeStamp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>mfxExtPictureTimingSEI</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BaseLayerPID</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block><decl><name><name>Layer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>mfxExtAvcTemporalLayers</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>MBPerSec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">58</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtEncoderCapability</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>StartNewSequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtEncoderResetOption</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_LONGTERM_IDX_NO_IDX</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameOrder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LongTermIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MAD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BRCPanicMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>QP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>SecondFieldOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameOrder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LongTermIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>UsedRefListL0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <name><name>UsedRefListL1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name>;</struct>
}</block></struct></type> <name>mfxExtAVCEncodedFrameInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mfxVPPCompInputStream</name> <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DstX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DstY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DstW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DstH</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>LumaKeyEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LumaKeyMin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LumaKeyMax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>GlobalAlphaEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>GlobalAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PixelAlphaEnable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>TileId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxVPPCompInputStream</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>


<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>R</name></decl>;</decl_stmt>
}</block>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>U</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>G</name></decl>;</decl_stmt>
}</block>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>B</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumTiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumInputStream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVPPCompInputStream</name> <modifier>*</modifier></type><name>InputStream</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPComposite</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_TRANSFERMATRIX_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_TRANSFERMATRIX_BT709</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_TRANSFERMATRIX_BT601</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_NOMINALRANGE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_NOMINALRANGE_0_255</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_NOMINALRANGE_16_235</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<union>union <block>{
<struct>struct <block>{ 
<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TransferMatrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NominalRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>In</name></decl>, <name>Out</name>;</struct>
}</block>;</struct>
<struct>struct <block>{ 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TransferMatrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NominalRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved3</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block></struct></type> <name>mfxExtVPPVideoSignalInfo</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_ROI_MODE_PRIORITY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_ROI_MODE_QP_DELTA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumROI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ROIMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Bottom</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>mfxI16</name></type> <name>Priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>DeltaQP</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>ROI</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>mfxExtEncoderROI</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_DEINTERLACING_BOB</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_ADVANCED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_AUTO_DOUBLE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_AUTO_SINGLE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_FULL_FR_OUT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_HALF_FR_OUT</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_24FPS_OUT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_FIXED_TELECINE_PATTERN</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_30FPS_OUT</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_DETECT_INTERLACE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_ADVANCED_NOREF</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_ADVANCED_SCD</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>MFX_DEINTERLACING_FIELD_WEAVING</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_TELECINE_PATTERN_32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_TELECINE_PATTERN_2332</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_TELECINE_PATTERN_FRAME_REPEAT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_TELECINE_PATTERN_41</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MFX_TELECINE_POSITION_PROVIDED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TelecinePattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TelecineLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPDeinterlacing</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRefIdxL0Active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRefIdxL1Active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>mfxRefPic</name><block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>FrameOrder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>RefPicList0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <name><name>RefPicList1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name>;</struct>

}</block></struct></type><name>mfxExtAVCRefLists</name>;</typedef>

<enum>enum <block>{
<decl><name>MFX_VPP_COPY_FRAME</name> <init>=<expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MFX_VPP_COPY_FIELD</name> <init>=<expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MFX_VPP_SWAP_FIELDS</name> <init>=<expr><literal type="number">0x03</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_PICTYPE_UNKNOWN</name> <init>=<expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>MFX_PICTYPE_FRAME</name> <init>=<expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MFX_PICTYPE_TOPFIELD</name> <init>=<expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MFX_PICTYPE_BOTTOMFIELD</name> <init>=<expr><literal type="number">0x04</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>InField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>OutField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPFieldProcessing</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<struct>struct <name>mfxIn</name><block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
}</block><decl><name>In</name></decl>;</struct>

<struct>struct <name>mfxOut</name><block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>FourCC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>CropH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
}</block><decl><name>Out</name></decl>;</struct>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtDecVideoProcessing</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaLocInfoPresentFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaSampleLocTypeTopField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaSampleLocTypeBottomField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtChromaLocInfo</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_MBQP_MODE_QP_VALUE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>MFX_MBQP_MODE_QP_DELTA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>BlockSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumQPAlloc</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>QP</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxI8</name> <modifier>*</modifier></type><name>DeltaQP</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block>;</union>
}</block></struct></type> <name>mfxExtMBQP</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MapSize</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>Map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block>;</union>
}</block></struct></type> <name>mfxExtMBForceIntra</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumTileRows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumTileColumns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">74</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type><name>mfxExtHEVCTiles</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>MapSize</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>Map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block>;</union>
}</block></struct></type> <name>mfxExtMBDisableSkipMap</name>;</typedef>



<enum>enum <block>{

<decl><name>MFX_HEVC_CONSTR_REXT_MAX_12BIT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_MAX_10BIT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_MAX_8BIT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_MAX_422CHROMA</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_MAX_420CHROMA</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_MAX_MONOCHROME</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_INTRA</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_ONE_PICTURE_ONLY</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_HEVC_CONSTR_REXT_LOWER_BIT_RATE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>



<enum>enum <block>{
<decl><name>MFX_SAO_UNKNOWN</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>MFX_SAO_DISABLE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MFX_SAO_ENABLE_LUMA</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MFX_SAO_ENABLE_CHROMA</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>
}</block>;</enum>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>4</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicWidthInLumaSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicHeightInLumaSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>GeneralConstraintFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SampleAdaptiveOffset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>LCUSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">116</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtHEVCParam</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>


<enum>enum <block>{
<decl><name>MFX_ERROR_PPS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_ERROR_SPS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_ERROR_SLICEHEADER</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_ERROR_SLICEDATA</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>MFX_ERROR_FRAME_GAP</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>ErrorTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtDecodeErrorReport</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>FrameType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">59</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtDecodedFrameInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>DropFrameFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TimeCodeHours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TimeCodeMinutes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TimeCodeSeconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TimeCodePictures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtTimeCode</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_HEVC_REGION_SLICE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_HEVC_REGION_ENCODING_ON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_HEVC_REGION_ENCODING_OFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>RegionId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RegionType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RegionEncoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtHEVCRegion</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>LumaLog2WeightDenom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaLog2WeightDenom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>LumaWeightFlag</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>ChromaWeightFlag</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxI16</name></type> <name><name>Weights</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">58</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtPredWeightTable</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableRoundingIntra</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RoundingOffsetIntra</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>EnableRoundingInter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>RoundingOffsetInter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtAVCRoundingOffset</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>Rect</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>mfxExtDirtyRect</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DestLeft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DestTop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DestRight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>DestBottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>SourceLeft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>SourceTop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>Rect</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>mfxExtMoveRect</name>;</typedef>



<enum>enum <block>{
<decl><name>MFX_ANGLE_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_ANGLE_90</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>,
<decl><name>MFX_ANGLE_180</name> <init>= <expr><literal type="number">180</literal></expr></init></decl>,
<decl><name>MFX_ANGLE_270</name> <init>= <expr><literal type="number">270</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPRotation</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>SliceSizeOverflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSliceNonCopliant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumEncodedSlice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSliceSizeAlloc</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>mfxU16</name> <modifier>*</modifier></type><name>SliceSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtEncodedSlicesInfo</name>;</typedef>


<enum>enum <block>{
<decl><name>MFX_SCALING_MODE_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_SCALING_MODE_LOWPOWER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_SCALING_MODE_QUALITY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>ScalingMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPScaling</name>;</typedef>


<typedef>typedef <type><name>mfxExtAVCRefListCtrl</name></type> <name>mfxExtHEVCRefListCtrl</name>;</typedef>
<typedef>typedef <type><name>mfxExtAVCRefLists</name></type> <name>mfxExtHEVCRefLists</name>;</typedef>
<typedef>typedef <type><name>mfxExtAvcTemporalLayers</name></type> <name>mfxExtHEVCTemporalLayers</name>;</typedef>


<enum>enum
<block>{
<decl><name>MFX_MIRRORING_DISABLED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_MIRRORING_HORIZONTAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_MIRRORING_VERTICAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPMirroring</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>StickTop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>StickBottom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>StickLeft</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>StickRight</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtMVOverPicBoundaries</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Enable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVPPColorFill</name>;</typedef>



<enum>enum <block>{
<decl><name>MFX_CHROMA_SITING_UNKNOWN</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl>,
<decl><name>MFX_CHROMA_SITING_VERTICAL_TOP</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>, 
<decl><name>MFX_CHROMA_SITING_VERTICAL_CENTER</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>, 
<decl><name>MFX_CHROMA_SITING_VERTICAL_BOTTOM</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>, 
<decl><name>MFX_CHROMA_SITING_HORIZONTAL_LEFT</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>, 
<decl><name>MFX_CHROMA_SITING_HORIZONTAL_CENTER</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl> 
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>ChromaSiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtColorConversion</name>;</typedef>



<enum>enum <block>{
<decl><name>MFX_VP9_REF_INTRA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_VP9_REF_LAST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_VP9_REF_GOLDEN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_VP9_REF_ALTREF</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_VP9_SEGMENT_ID_BLOCK_SIZE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_ID_BLOCK_SIZE_8x8</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_ID_BLOCK_SIZE_16x16</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_ID_BLOCK_SIZE_32x32</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_ID_BLOCK_SIZE_64x64</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <block>{
<decl><name>MFX_VP9_SEGMENT_FEATURE_QINDEX</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_FEATURE_LOOP_FILTER</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_FEATURE_REFERENCE</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>MFX_VP9_SEGMENT_FEATURE_SKIP</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl> 
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FeatureEnabled</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxI16</name></type> <name>QIndexDelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>LoopFilterLevelDelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>ReferenceFrame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxVP9SegmentParam</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumSegments</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxVP9SegmentParam</name></type> <name><name>Segment</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>SegmentIdBlockSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU32</name></type> <name>NumSegmentIdAlloc</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>mfxU8</name> <modifier>*</modifier></type><name>SegmentId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVP9Segmentation</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FrameRateScale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>TargetKbps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxVP9TemporalLayer</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVP9TemporalLayer</name></type> <name><name>Layer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVP9TemporalLayers</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>FrameWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FrameHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>WriteIVFHeaders</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxI16</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>QIndexDeltaLumaDC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>QIndexDeltaChromaAC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>QIndexDeltaChromaDC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">112</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVP9Param</name>;</typedef>



<enum>enum <block>{
<decl><name>MFX_MF_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MFX_MF_DISABLED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MFX_MF_AUTO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MFX_MF_MANUAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>MFMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>MaxNumFrames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">58</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtMultiFrameParam</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>Timeout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Flush</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtMultiFrameControl</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxEncodedUnitInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>mfxEncodedUnitInfo</name> <modifier>*</modifier></type><name>UnitInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumUnitsAlloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumUnitsEncoded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtEncodedUnitsInfo</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>FilterStrength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxExtVppMctf</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
