<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_exposed_functions_list.h">















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{0, 1}}</cpp:value></cpp:define>


<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoCORE_SetBufferAllocator</argument>, <argument>(mfxSession session, mfxBufferAllocator *allocator)</argument>, <argument>(session, allocator)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoCORE_SetFrameAllocator</argument>, <argument>(mfxSession session, mfxFrameAllocator *allocator)</argument>, <argument>(session, allocator)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoCORE_SetHandle</argument>, <argument>(mfxSession session, mfxHandleType type, mfxHDL hdl)</argument>, <argument>(session, type, hdl)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoCORE_GetHandle</argument>, <argument>(mfxSession session, mfxHandleType type, mfxHDL *hdl)</argument>, <argument>(session, type, hdl)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoCORE_SyncOperation</argument>, <argument>(mfxSession session, mfxSyncPoint syncp, mfxU32 wait)</argument>, <argument>(session, syncp, wait)</argument>)</argument_list></macro>


<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_Query</argument>, <argument>(mfxSession session, mfxVideoParam *in, mfxVideoParam *out)</argument>, <argument>(session, in, out)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_QueryIOSurf</argument>, <argument>(mfxSession session, mfxVideoParam *par, mfxFrameAllocRequest *request)</argument>, <argument>(session, par, request)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_Init</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_Reset</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_Close</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_GetVideoParam</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_GetEncodeStat</argument>, <argument>(mfxSession session, mfxEncodeStat *stat)</argument>, <argument>(session, stat)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENCODE_EncodeFrameAsync</argument>, <argument>(mfxSession session, mfxEncodeCtrl *ctrl, mfxFrameSurface1 *surface, mfxBitstream *bs, mfxSyncPoint *syncp)</argument>, <argument>(session, ctrl, surface, bs, syncp)</argument>)</argument_list></macro>


<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_Query</argument>, <argument>(mfxSession session, mfxVideoParam *in, mfxVideoParam *out)</argument>, <argument>(session, in, out)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_DecodeHeader</argument>, <argument>(mfxSession session, mfxBitstream *bs, mfxVideoParam *par)</argument>, <argument>(session, bs, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_QueryIOSurf</argument>, <argument>(mfxSession session, mfxVideoParam *par, mfxFrameAllocRequest *request)</argument>, <argument>(session, par, request)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_Init</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_Reset</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_Close</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_GetVideoParam</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_GetDecodeStat</argument>, <argument>(mfxSession session, mfxDecodeStat *stat)</argument>, <argument>(session, stat)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_SetSkipMode</argument>, <argument>(mfxSession session, mfxSkipMode mode)</argument>, <argument>(session, mode)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_GetPayload</argument>, <argument>(mfxSession session, mfxU64 *ts, mfxPayload *payload)</argument>, <argument>(session, ts, payload)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoDECODE_DecodeFrameAsync</argument>, <argument>(mfxSession session, mfxBitstream *bs, mfxFrameSurface1 *surface_work, mfxFrameSurface1 **surface_out, mfxSyncPoint *syncp)</argument>, <argument>(session, bs, surface_work, surface_out, syncp)</argument>)</argument_list></macro>


<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_Query</argument>, <argument>(mfxSession session, mfxVideoParam *in, mfxVideoParam *out)</argument>, <argument>(session, in, out)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_QueryIOSurf</argument>, <argument>(mfxSession session, mfxVideoParam *par, mfxFrameAllocRequest *request)</argument>, <argument>(session, par, request)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_Init</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_Reset</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_Close</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_GetVideoParam</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_GetVPPStat</argument>, <argument>(mfxSession session, mfxVPPStat *stat)</argument>, <argument>(session, stat)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_RunFrameVPPAsync</argument>, <argument>(mfxSession session, mfxFrameSurface1 *in, mfxFrameSurface1 *out, mfxExtVppAuxData *aux, mfxSyncPoint *syncp)</argument>, <argument>(session, in, out, aux, syncp)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{1, 1}}</cpp:value></cpp:define>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoUSER_Register</argument>, <argument>(mfxSession session, mfxU32 type, const mfxPlugin *par)</argument>, <argument>(session, type, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoUSER_Unregister</argument>, <argument>(mfxSession session, mfxU32 type)</argument>, <argument>(session, type)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoUSER_ProcessFrameAsync</argument>, <argument>(mfxSession session, const mfxHDL *in, mfxU32 in_num, const mfxHDL *out, mfxU32 out_num, mfxSyncPoint *syncp)</argument>, <argument>(session, in, in_num, out, out_num, syncp)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{10, 1}}</cpp:value></cpp:define>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_Query</argument>,<argument>(mfxSession session, mfxVideoParam *in, mfxVideoParam *out)</argument>, <argument>(session,in,out)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_QueryIOSurf</argument>,<argument>(mfxSession session, mfxVideoParam *par, mfxFrameAllocRequest *request)</argument>, <argument>(session,par,request)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_Init</argument>,<argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session,par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_Reset</argument>,<argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session,par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_Close</argument>,<argument>(mfxSession session)</argument>,<argument>(session)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_ProcessFrameAsync</argument>,<argument>(mfxSession session, mfxENCInput *in, mfxENCOutput *out, mfxSyncPoint *syncp)</argument>,<argument>(session,in,out,syncp)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoVPP_RunFrameVPPAsyncEx</argument>, <argument>(mfxSession session, mfxFrameSurface1 *in, mfxFrameSurface1 *work, mfxFrameSurface1 **out, mfxSyncPoint *syncp)</argument>, <argument>(session, in, work, out, syncp)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{13, 1}}</cpp:value></cpp:define>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_Query</argument>, <argument>(mfxSession session, mfxVideoParam *in, mfxVideoParam *out)</argument>, <argument>(session, in, out)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_QueryIOSurf</argument>, <argument>(mfxSession session, mfxVideoParam *par, mfxFrameAllocRequest *request)</argument>, <argument>(session, par, request)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_Init</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_Reset</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_Close</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_ProcessFrameAsync</argument>, <argument>(mfxSession session, mfxPAKInput *in, mfxPAKOutput *out, mfxSyncPoint *syncp)</argument>, <argument>(session, in, out, syncp)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{14, 1}}</cpp:value></cpp:define>


<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXDoWork</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{19, 1}}</cpp:value></cpp:define>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoENC_GetVideoParam</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoPAK_GetVideoParam</argument>, <argument>(mfxSession session, mfxVideoParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoCORE_QueryPlatform</argument>, <argument>(mfxSession session, mfxPlatform* platform)</argument>, <argument>(session, platform)</argument>)</argument_list></macro>
<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXVideoUSER_GetPlugin</argument>, <argument>(mfxSession session, mfxU32 type, mfxPlugin *par)</argument>, <argument>(session, type, par)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef></unit>
