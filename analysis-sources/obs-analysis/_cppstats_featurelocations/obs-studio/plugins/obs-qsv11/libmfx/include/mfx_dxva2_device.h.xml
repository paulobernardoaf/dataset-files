<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_dxva2_device.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFX_DXVA2_DEVICE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFX_DXVA2_DEVICE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOSTRING</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TOSTRING(L)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_LOADER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_PROCTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MFX_D3D9_ENABLED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MFX_FORCE_D3D9_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MFX_D3D9_ENABLED</name></cpp:undef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"\n\nATTENTION:\nin file\n\t"</cpp:literal> <name>__FILE__</name> <cpp:literal>" ("</cpp:literal> <name>STRINGIFY</name><name>(</name><name>__LINE__</name><name>)</name> <cpp:literal>"):\nUsing of D3D9 disabled for UWP!\n\n"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MFX_FORCE_D3D9_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_D3D9_ENABLED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_D3D9_ENABLED</name></cpp:macro></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"\n\nATTENTION:\nin file\n\t"</cpp:literal> <name>__FILE__</name> <cpp:literal>" ("</cpp:literal> <name>STRINGIFY</name><name>(</name><name>__LINE__</name><name>)</name> <cpp:literal>"):\nUsing of D3D9 enabled!\n\n"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfxdefs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DXVA2DEVICE_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2DEVICE_TRACE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf expr;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2DEVICE_TRACE_OPERATION</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>expr;</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2DEVICE_TRACE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2DEVICE_TRACE_OPERATION</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name>
<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DXDevice</name>
<block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>DXDevice</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name>
<operator>~</operator><call><name>DXDevice</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<function_decl><type><name>virtual</name>
<name>bool</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>mfxU32</name></type> <name>GetVendorID</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>GetDeviceID</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>GetDriverVersion</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>GetLUID</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxU32</name></type> <name>GetAdapterCount</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>virtual</name>
<name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>LoadDLLModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pModuleName</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>


<function_decl><type><name>void</name></type> <name>UnloadDLLModule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>m_hModule</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_numAdapters</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_vendorID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_deviceID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU64</name></type> <name>m_driverVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU64</name></type> <name>m_luid</name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>DXDevice</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DXDevice</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DXDevice</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MFX_D3D9_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>D3D9Device</name> <range>: <expr><name>public</name> <name>DXDevice</name>
<block>{
<expr><name>public</name><operator>:</operator>

<call><name>D3D9Device</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name>
<operator>~</operator><call><name>D3D9Device</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;


<expr><name>virtual</name>
<name>bool</name> <macro><name>Init</name><argument_list>(<argument>const mfxU32 adapterNum</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name>
<name>void</name> <call><name>Close</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>


<name>void</name> <operator>*</operator><name>m_pD3D9</name></expr>;

<expr><name>void</name> <operator>*</operator><name>m_pD3D9Ex</name></expr>;

}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>class</name></type> <name>DXGI1Device</name> <range>: <expr><name>public</name> <name>DXDevice</name>
<block>{
<expr><name>public</name><operator>:</operator>

<call><name>DXGI1Device</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name>
<operator>~</operator><call><name>DXGI1Device</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;


<expr><name>virtual</name>
<name>bool</name> <macro><name>Init</name><argument_list>(<argument>const mfxU32 adapterNum</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name>
<name>void</name> <call><name>Close</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>


<name>void</name> <operator>*</operator><name>m_pDXGIFactory1</name></expr>;

<expr><name>void</name> <operator>*</operator><name>m_pDXGIAdapter1</name></expr>;

}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>class</name></type> <name>DXVA2Device</name>
<block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>DXVA2Device</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>DXVA2Device</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>InitD3D9</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>InitDXGI1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>mfxU32</name></type> <name>GetVendorID</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU32</name></type> <name>GetDeviceID</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU64</name></type> <name>GetDriverVersion</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxU32</name></type> <name>GetAdapterCount</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MFX_D3D9_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>UseAlternativeWay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>D3D9Device</name> <modifier>*</modifier></type><name>pD3D9Device</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_numAdapters</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_vendorID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_deviceID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU64</name></type> <name>m_driverVersion</name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>DXVA2Device</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DXVA2Device</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DXVA2Device</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
