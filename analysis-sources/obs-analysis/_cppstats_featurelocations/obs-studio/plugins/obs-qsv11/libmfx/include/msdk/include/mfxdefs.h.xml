<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxdefs.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MFXDEFS_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MFXDEFS_H__</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_VERSION_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_VERSION_MINOR</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_VERSION_NEXT</name></cpp:macro> <cpp:value>1028</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MFX_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_VERSION</name></cpp:macro> <cpp:value>(MFX_VERSION_MAJOR * 1000 + MFX_VERSION_MINOR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>( <argument><expr><name>_WIN64</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT64</name></cpp:macro> <cpp:value>__int64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT64</name></cpp:macro> <cpp:value>unsigned __int64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT64</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT64</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_CDECL</name></cpp:macro> <cpp:value>__cdecl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_STDCALL</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_CDECL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_STDCALL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_INFINITE</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>mfxU8</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>mfxI8</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>mfxI16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>mfxU16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>mfxU32</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>mfxI32</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>( <argument><expr><name>_WIN64</name></expr></argument> )</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>mfxUL32</name>;</typedef>
<typedef>typedef <type><name>long</name></type> <name>mfxL32</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>mfxUL32</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>mfxL32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>float</name></type> <name>mfxF32</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>mfxF64</name>;</typedef>
<typedef>typedef <type><name>__UINT64</name></type> <name>mfxU64</name>;</typedef>
<typedef>typedef <type><name>__INT64</name></type> <name>mfxI64</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>mfxHDL</name>;</typedef>
<typedef>typedef <type><name>mfxHDL</name></type> <name>mfxMemId</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>mfxThreadTask</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>mfxChar</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxI16</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxI16</name></type> <name>y</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxI16Pair</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxHDL</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxHDL</name></type> <name>second</name></decl>;</decl_stmt>
}</block></struct></type> <name>mfxHDLPair</name>;</typedef>





<typedef>typedef <type><enum>enum
<block>{

<decl><name>MFX_ERR_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 


<decl><name>MFX_ERR_UNKNOWN</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 


<decl><name>MFX_ERR_NULL_PTR</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, 
<decl><name>MFX_ERR_UNSUPPORTED</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>, 
<decl><name>MFX_ERR_MEMORY_ALLOC</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>, 
<decl><name>MFX_ERR_NOT_ENOUGH_BUFFER</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>, 
<decl><name>MFX_ERR_INVALID_HANDLE</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>, 
<decl><name>MFX_ERR_LOCK_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">7</literal></expr></init></decl>, 
<decl><name>MFX_ERR_NOT_INITIALIZED</name> <init>= <expr><operator>-</operator><literal type="number">8</literal></expr></init></decl>, 
<decl><name>MFX_ERR_NOT_FOUND</name> <init>= <expr><operator>-</operator><literal type="number">9</literal></expr></init></decl>, 
<decl><name>MFX_ERR_MORE_DATA</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>, 
<decl><name>MFX_ERR_MORE_SURFACE</name> <init>= <expr><operator>-</operator><literal type="number">11</literal></expr></init></decl>, 
<decl><name>MFX_ERR_ABORTED</name> <init>= <expr><operator>-</operator><literal type="number">12</literal></expr></init></decl>, 
<decl><name>MFX_ERR_DEVICE_LOST</name> <init>= <expr><operator>-</operator><literal type="number">13</literal></expr></init></decl>, 
<decl><name>MFX_ERR_INCOMPATIBLE_VIDEO_PARAM</name> <init>= <expr><operator>-</operator><literal type="number">14</literal></expr></init></decl>, 
<decl><name>MFX_ERR_INVALID_VIDEO_PARAM</name> <init>= <expr><operator>-</operator><literal type="number">15</literal></expr></init></decl>, 
<decl><name>MFX_ERR_UNDEFINED_BEHAVIOR</name> <init>= <expr><operator>-</operator><literal type="number">16</literal></expr></init></decl>, 
<decl><name>MFX_ERR_DEVICE_FAILED</name> <init>= <expr><operator>-</operator><literal type="number">17</literal></expr></init></decl>, 
<decl><name>MFX_ERR_MORE_BITSTREAM</name> <init>= <expr><operator>-</operator><literal type="number">18</literal></expr></init></decl>, 
<decl><name>MFX_ERR_INCOMPATIBLE_AUDIO_PARAM</name> <init>= <expr><operator>-</operator><literal type="number">19</literal></expr></init></decl>, 
<decl><name>MFX_ERR_INVALID_AUDIO_PARAM</name> <init>= <expr><operator>-</operator><literal type="number">20</literal></expr></init></decl>, 
<decl><name>MFX_ERR_GPU_HANG</name> <init>= <expr><operator>-</operator><literal type="number">21</literal></expr></init></decl>, 
<decl><name>MFX_ERR_REALLOC_SURFACE</name> <init>= <expr><operator>-</operator><literal type="number">22</literal></expr></init></decl>, 


<decl><name>MFX_WRN_IN_EXECUTION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>MFX_WRN_DEVICE_BUSY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>MFX_WRN_VIDEO_PARAM_CHANGED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>MFX_WRN_PARTIAL_ACCELERATION</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>MFX_WRN_INCOMPATIBLE_VIDEO_PARAM</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>MFX_WRN_VALUE_NOT_CHANGED</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>MFX_WRN_OUT_OF_RANGE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>MFX_WRN_FILTER_SKIPPED</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 
<decl><name>MFX_WRN_INCOMPATIBLE_AUDIO_PARAM</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 


<decl><name>MFX_TASK_DONE</name> <init>= <expr><name>MFX_ERR_NONE</name></expr></init></decl>, 
<decl><name>MFX_TASK_WORKING</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>MFX_TASK_BUSY</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 


<decl><name>MFX_ERR_MORE_DATA_SUBMIT_TASK</name> <init>= <expr><operator>-</operator><literal type="number">10000</literal></expr></init></decl>, 

}</block></enum></type> <name>mfxStatus</name>;</typedef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MFX_DISPATCHER_EXPOSED_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxdispatcherprefixedfunctions.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
