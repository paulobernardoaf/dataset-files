<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-qsv11\QSV_Encoder.h">























































<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxstructures.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>qsv_rate_control_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>haswell_or_greater</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>qsv_rate_control_info</name></name></type> <name><name>qsv_ratecontrols</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"CBR"</literal></expr>, <expr><name>false</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"VBR"</literal></expr>, <expr><name>false</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"VCM"</literal></expr>, <expr><name>true</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"CQP"</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"AVBR"</literal></expr>, <expr><name>false</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"ICQ"</literal></expr>, <expr><name>true</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"LA_ICQ"</literal></expr>, <expr><name>true</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"LA_CBR"</literal></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"LA_VBR"</literal></expr>, <expr><name>true</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>qsv_profile_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"high"</literal></expr>, <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"baseline"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>qsv_usage_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"balanced"</literal></expr>, <expr><literal type="string">"speed"</literal></expr>,
<expr><literal type="string">"veryslow"</literal></expr>, <expr><literal type="string">"slower"</literal></expr>, <expr><literal type="string">"slow"</literal></expr>,
<expr><literal type="string">"medium"</literal></expr>, <expr><literal type="string">"fast"</literal></expr>, <expr><literal type="string">"faster"</literal></expr>,
<expr><literal type="string">"veryfast"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>qsv_t</name></name></type> <name>qsv_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nTargetUsage</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU16</name></type> <name>nWidth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nHeight</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nAsyncDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nFpsNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nFpsDen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nTargetBitRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nMaxBitRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nCodecProfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nRateControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nAccuracy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nConvergence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nQPI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nQPP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nQPB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nLADEPTH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nKeyIntSec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nbFrames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>nICQQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bMBBRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bCQM</name></decl>;</decl_stmt>
}</block></struct></type> <name>qsv_param_t</name>;</typedef>

<enum>enum <name>qsv_cpu_platform</name> <block>{
<decl><name>QSV_CPU_PLATFORM_UNKNOWN</name></decl>,
<decl><name>QSV_CPU_PLATFORM_BNL</name></decl>,
<decl><name>QSV_CPU_PLATFORM_SNB</name></decl>,
<decl><name>QSV_CPU_PLATFORM_IVB</name></decl>,
<decl><name>QSV_CPU_PLATFORM_SLM</name></decl>,
<decl><name>QSV_CPU_PLATFORM_CHT</name></decl>,
<decl><name>QSV_CPU_PLATFORM_HSW</name></decl>,
<decl><name>QSV_CPU_PLATFORM_BDW</name></decl>,
<decl><name>QSV_CPU_PLATFORM_SKL</name></decl>,
<decl><name>QSV_CPU_PLATFORM_KBL</name></decl>,
<decl><name>QSV_CPU_PLATFORM_ICL</name></decl>,
<decl><name>QSV_CPU_PLATFORM_INTEL</name></decl>
}</block>;</enum>

<function_decl><type><name>int</name></type> <name>qsv_encoder_close</name><parameter_list>(<parameter><decl><type><name>qsv_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qsv_param_parse</name><parameter_list>(<parameter><decl><type><name>qsv_param_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qsv_param_apply_profile</name><parameter_list>(<parameter><decl><type><name>qsv_param_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qsv_param_default_preset</name><parameter_list>(<parameter><decl><type><name>qsv_param_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tune</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qsv_encoder_reconfig</name><parameter_list>(<parameter><decl><type><name>qsv_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>qsv_param_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>qsv_encoder_version</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>qsv_t</name> <modifier>*</modifier></type><name>qsv_encoder_open</name><parameter_list>(<parameter><decl><type><name>qsv_param_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qsv_encoder_encode</name><parameter_list>(<parameter><decl><type><name>qsv_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier><modifier>*</modifier></type><name>pBS</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qsv_encoder_headers</name><parameter_list>(<parameter><decl><type><name>qsv_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pSPS</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pPPS</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pnSPS</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pnPPS</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>qsv_cpu_platform</name></name></type> <name>qsv_get_cpu_platform</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
