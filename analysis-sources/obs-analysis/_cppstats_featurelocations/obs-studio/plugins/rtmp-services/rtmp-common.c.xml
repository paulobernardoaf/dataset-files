<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\rtmp-services\rtmp-common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmp-format-ver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"twitch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"younow.h"</cpp:file></cpp:include>

<struct>struct <name>rtmp_common</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtmp_common_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"StreamingServices"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>open_services_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>json_t</name> <modifier>*</modifier></type><name>find_service</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_new_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_string_val</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>twitch_ingests_refresh</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ensure_valid_url</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>servers</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"servers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>top_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>server</name></name> <operator>||</operator> <operator>!</operator><name>servers</name> <operator>||</operator> <operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>astrstri</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><literal type="string">"Facebook"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<macro><name>json_array_foreach</name> <argument_list>(<argument>servers</argument>, <argument>index</argument>, <argument>server</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>get_string_val</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top_url</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_url</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name>top_url</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>, <argument><expr><name>top_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_common_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"service"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>open_services_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>serv</name> <init>= <expr><call><name>find_service</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>serv</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><literal type="string">"recommended"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_object</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>get_string_val</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ensure_valid_url</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><literal type="string">"rtmp_output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_common_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rtmp_common_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rtmp_common</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtmp_common_update</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_string_val</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>str_val</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str_val</name> <operator>||</operator> <operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_int_val</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>integer_val</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>integer_val</name> <operator>||</operator> <operator>!</operator><call><name>json_is_integer</name><argument_list>(<argument><expr><name>integer_val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>json_integer_value</name><argument_list>(<argument><expr><name>integer_val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_bool_val</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>bool_val</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bool_val</name> <operator>||</operator> <operator>!</operator><call><name>json_is_boolean</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>json_is_true</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_service</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_all</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>servers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>common</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rtmp-common.c: [add_service] service "</literal>
<literal type="string">"is not an object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_string_val</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rtmp-common.c: [add_service] service "</literal>
<literal type="string">"has no name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>common</name> <operator>=</operator> <call><name>get_bool_val</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"common"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>show_all</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>common</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cur_service</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>servers</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"servers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>servers</name> <operator>||</operator> <operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"rtmp-common.c: [add_service] service "</literal>
<literal type="string">"'%s' has no servers"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_services</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_all</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rtmp-common.c: [add_services] JSON file "</literal>
<literal type="string">"root is not an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<macro><name>json_array_foreach</name> <argument_list>(<argument>root</argument>, <argument>index</argument>, <argument>service</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>add_service</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>show_all</name></expr></argument>, <argument><expr><name>cur_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>find_service</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>cur_service</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name> <operator>&amp;&amp;</operator> <name>cur_service</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur_service</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_property_list_insert_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cur_service</name></expr></argument>,
<argument><expr><name>cur_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_item_disable</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>open_json_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_data</name> <init>= <expr><call><name>os_quick_read_utf8_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format_ver</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>file_data</name></expr></argument>, <argument><expr><name>JSON_REJECT_DUPLICATES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"rtmp-common.c: [open_json_file] "</literal>
<literal type="string">"Error reading JSON file (%d): %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>format_ver</name> <operator>=</operator> <call><name>get_int_val</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"format_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format_ver</name> <operator>!=</operator> <name>RTMP_SERVICES_FORMAT_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"rtmp-common.c: [open_json_file] "</literal>
<literal type="string">"Wrong format version (%d), expected %d"</literal></expr></argument>,
<argument><expr><name>format_ver</name></expr></argument>, <argument><expr><name>RTMP_SERVICES_FORMAT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"services"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rtmp-common.c: [open_json_file] "</literal>
<literal type="string">"No services list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>open_services_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>obs_module_config_path</name><argument_list>(<argument><expr><literal type="string">"services.json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>open_json_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"services.json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>open_json_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_service_list</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>show_all</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_property_list_clear</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_services</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>show_all</name></expr></argument>, <argument><expr><name>cur_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>properties_data_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fill_twitch_servers_locked</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>servers_prop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>twitch_ingest_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>servers_prop</name></expr></argument>,
<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Server.Auto"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>twitch_ingest</name></name></type> <name>ing</name> <init>= <expr><call><name>twitch_ingest</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>servers_prop</name></expr></argument>, <argument><expr><name><name>ing</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ing</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>fill_twitch_servers</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>servers_prop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>twitch_ingests_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>fill_twitch_servers_locked</name><argument_list>(<argument><expr><name>servers_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twitch_ingests_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_servers</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>servers_prop</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>servers</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_clear</name><argument_list>(<argument><expr><name>servers_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>servers</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"servers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_is_array</name><argument_list>(<argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"rtmp-common.c: [fill_servers] "</literal>
<literal type="string">"Servers for service '%s' not a valid object"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Mixer.com - FTL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(
<argument><expr><name>servers_prop</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Server.Auto"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Twitch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fill_twitch_servers</name><argument_list>(<argument><expr><name>servers_prop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>json_array_foreach</name> <argument_list>(<argument>servers</argument>, <argument>index</argument>, <argument>server</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name> <init>= <expr><call><name>get_string_val</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>get_string_val</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server_name</name> <operator>||</operator> <operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>servers_prop</name></expr></argument>, <argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>json_t</name> <modifier>*</modifier></type><name>find_service</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_new_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_new_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_new_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>json_array_foreach</name> <argument_list>(<argument>root</argument>, <argument>index</argument>, <argument>service</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_name</name> <init>= <expr><call><name>get_string_val</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>cur_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>service</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>alt_names</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"alt_names"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alt_name_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>alt_name_obj</name></decl>;</decl_stmt>

<macro><name>json_array_foreach</name> <argument_list>(<argument>alt_names</argument>, <argument>alt_name_idx</argument>, <argument>alt_name_obj</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alt_name</name> <init>= <expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>alt_name_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alt_name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alt_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_new_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_new_name</name> <operator>=</operator> <name>cur_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>service</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>service_selected</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"service"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>obs_properties_get_param</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>find_service</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_insert_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_item_disable</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_insert_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_property_list_item_disable</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>new_name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"service"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fill_servers</name><argument_list>(<argument><expr><call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>show_all_services_toggled</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_service</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"service"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_all</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"show_all"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>obs_properties_get_param</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>build_service_list</name><argument_list>(<argument><expr><call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"service"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>show_all</name></expr></argument>,
<argument><expr><name>cur_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>rtmp_common_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>open_services_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_properties_set_param</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>properties_data_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"service"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Service"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>service_selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"show_all"</literal></expr></argument>,
<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ShowAll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>show_all_services_toggled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Server"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_text</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"StreamKey"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OBS_TEXT_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ppts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_video_encoder_settings</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>recommended</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>recommended</name></expr></argument>, <argument><expr><literal type="string">"keyint"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_integer</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keyint</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>json_integer_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>, <argument><expr><name>keyint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"rate_control"</literal></expr></argument>, <argument><expr><literal type="string">"CBR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>recommended</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>enc_item</name> <init>= <expr><call><name>obs_data_item_byname</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>obs_data_item_gettype</name><argument_list>(<argument><expr><name>enc_item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBS_DATA_STRING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name> <init>= <expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>recommended</name></expr></argument>, <argument><expr><literal type="string">"max video bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_integer</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_bitrate</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>json_integer_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_bitrate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name>max_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>, <argument><expr><name>max_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>recommended</name></expr></argument>, <argument><expr><literal type="string">"bframes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_integer</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>recommended</name></expr></argument>, <argument><expr><literal type="string">"x264opts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x264_settings</name> <init>= <expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_settings</name> <init>=
<expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"x264opts"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>cur_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>x264_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"x264opts"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_audio_encoder_settings</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>recommended</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>json_object_get</name><argument_list>(<argument><expr><name>recommended</name></expr></argument>, <argument><expr><literal type="string">"max audio bitrate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_is_integer</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_bitrate</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>json_integer_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_bitrate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name>max_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>video_settings</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>audio_settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_service</name> <init>= <expr><call><name>find_service</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>recommended</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json_service</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"rtmp-common.c: [initialize_output] "</literal>
<literal type="string">"Could not find service '%s'"</literal></expr></argument>,
<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>recommended</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>json_service</name></expr></argument>, <argument><expr><literal type="string">"recommended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recommended</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>video_settings</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_video_encoder_settings</name><argument_list>(<argument><expr><name>video_settings</name></expr></argument>, <argument><expr><name>recommended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>audio_settings</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_audio_encoder_settings</name><argument_list>(<argument><expr><name>audio_settings</name></expr></argument>, <argument><expr><name>recommended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_common_apply_settings</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>video_settings</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>audio_settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>open_services_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>initialize_output</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>video_settings</name></expr></argument>,
<argument><expr><name>audio_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtmp_common_get_output_type</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtmp_common_url</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><literal type="string">"Twitch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>twitch_ingest</name></name></type> <name>ing</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>twitch_ingests_refresh</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twitch_ingests_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ing</name> <operator>=</operator> <call><name>twitch_ingest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twitch_ingests_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ing</name><operator>.</operator><name>url</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><literal type="string">"YouNow"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <name><name>service</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>younow_get_ingest</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtmp_common_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_common</name></name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>service</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_service_info</name></name></type> <name>rtmp_common_service</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"rtmp_common"</literal></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>rtmp_common_getname</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>rtmp_common_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>rtmp_common_destroy</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>rtmp_common_update</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>rtmp_common_properties</name></expr>,
<expr><operator>.</operator><name>get_url</name> <operator>=</operator> <name>rtmp_common_url</name></expr>,
<expr><operator>.</operator><name>get_key</name> <operator>=</operator> <name>rtmp_common_key</name></expr>,
<expr><operator>.</operator><name>apply_encoder_settings</name> <operator>=</operator> <name>rtmp_common_apply_settings</name></expr>,
<expr><operator>.</operator><name>get_output_type</name> <operator>=</operator> <name>rtmp_common_get_output_type</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
