<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\linux-v4l2\v4l2-helpers.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bmem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2-helpers.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blog</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "v4l2-helpers: " msg, ##__VA_ARGS__)</cpp:value></cpp:define>

<function><type><name>int_fast32_t</name></type> <name>v4l2_start_capture</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v4l2_buffer_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_buf_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>enq</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>enq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enq</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enq</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>enq</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>enq</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>enq</name><operator>.</operator><name>index</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_QBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to queue buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to start stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_stop_capture</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_buf_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMOFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to stop stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_create_mmap</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v4l2_buffer_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_requestbuffers</name></name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_REQBUFS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Request for buffers failed !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Device returned less than 2 buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>v4l2_mmap_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>memory</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>map</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>map</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>map</name><operator>.</operator><name>index</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_QUERYBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query buffer details"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name><name>map</name><operator>.</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>map</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name><name>map</name><operator>.</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator>
<call><name>v4l2_mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>map</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
<argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>map</name><operator>.</operator><name>m</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name><name>map</name><operator>.</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>start</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mmap for buffer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_destroy_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>v4l2_buffer_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>uint_fast32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>MAP_FAILED</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_munmap</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_set_input</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_G_INPUT</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_S_INPUT</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_get_input_caps</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>caps</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_G_INPUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_input</name></name></type> <name>in</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_ENUMINPUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>caps</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>capabilities</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_set_format</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resolution</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pixelformat</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytesperline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>fmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>resolution</name> <operator>||</operator> <operator>!</operator><name>pixelformat</name> <operator>||</operator> <operator>!</operator><name>bytesperline</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_G_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>resolution</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>v4l2_unpack_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>*</operator><name>resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pixelformat</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name> <operator>=</operator> <operator>*</operator><name>pixelformat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_S_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>resolution</name> <operator>=</operator> <call><name>v4l2_pack_tuple</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pixelformat</name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bytesperline</name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>bytesperline</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_set_framerate</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>framerate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_streamparm</name></name></type> <name>par</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>framerate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>par</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_G_PARM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>framerate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>v4l2_unpack_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>denom</name></expr></argument>, <argument><expr><operator>*</operator><name>framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>numerator</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>denominator</name></name> <operator>=</operator> <name>denom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_S_PARM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>framerate</name> <operator>=</operator> <call><name>v4l2_pack_tuple</name><argument_list>(<argument><expr><name><name>par</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>numerator</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_set_standard</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>standard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>standard</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>standard</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_G_STD</name></expr></argument>, <argument><expr><name>standard</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_S_STD</name></expr></argument>, <argument><expr><name>standard</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_enum_dv_timing</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v4l2_dv_timings</name></name> <modifier>*</modifier></type><name>dvt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIDIOC_ENUM_DV_TIMINGS</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_IN_CAP_DV_TIMINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>dvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>dvt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_enum_dv_timings</name></name></type> <name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_DV_TIMINGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dvt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>.</operator><name>timings</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>v4l2_dv_timings</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>v4l2_set_dv_timing</name><parameter_list>(<parameter><decl><type><name>int_fast32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name>timing</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>timing</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_dv_timings</name></name></type> <name>dvt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_enum_dv_timing</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dvt</name></expr></argument>, <argument><expr><operator>*</operator><name>timing</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>VIDIOC_S_DV_TIMINGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dvt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
