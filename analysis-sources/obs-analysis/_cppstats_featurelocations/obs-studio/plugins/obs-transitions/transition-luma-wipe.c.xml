<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\plugins\obs-transitions\transition-luma-wipe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/image-file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_LUMA_IMG</name></cpp:macro> <cpp:value>"luma_image"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_LUMA_INV</name></cpp:macro> <cpp:value>"luma_invert"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_LUMA_SOFT</name></cpp:macro> <cpp:value>"luma_softness"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LUMA_IMG</name></cpp:macro> <cpp:value>obs_module_text("LumaWipe.Image")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LUMA_INV</name></cpp:macro> <cpp:value>obs_module_text("LumaWipe.Invert")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LUMA_SOFT</name></cpp:macro> <cpp:value>obs_module_text("LumaWipe.Softness")</cpp:value></cpp:define>



<struct>struct <name>luma_wipe_info</name> <block>{
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>ep_a_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>ep_b_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>ep_l_tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>ep_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>ep_invert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>ep_softness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_image_file_t</name></type> <name>luma_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>invert_luma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>softness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>wipes_list</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luma_wipe_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>type_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"LumaWipeTransition"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_wipe_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LUMA_IMG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>invert_luma</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LUMA_INV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>softness</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LUMA_SOFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"luma_wipes/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>obs_module_file</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lwipe</name><operator>-&gt;</operator><name>luma_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lwipe</name><operator>-&gt;</operator><name>luma_image</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_image_file_init_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lwipe</name><operator>-&gt;</operator><name>luma_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_wipe_get_list</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"luma_wipes/wipes.json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>wipes_list</name></name> <operator>=</operator> <call><name>obs_data_create_from_json_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>luma_wipe_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"luma_wipe_transition.effect"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>gs_effect_create_from_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not open luma_wipe_transition.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lwipe</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lwipe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>effect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_a_tex</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"a_tex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_b_tex</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"b_tex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_l_tex</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"l_tex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_progress</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_invert</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"invert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_softness</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"softness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwipe</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luma_wipe_get_list</name><argument_list>(<argument><expr><name>lwipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luma_wipe_update</name><argument_list>(<argument><expr><name>lwipe</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>lwipe</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_wipe_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lwipe</name><operator>-&gt;</operator><name>luma_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>wipes_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>lwipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>luma_wipe_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_LUMA_IMG</name></expr></argument>, <argument><expr><name>T_LUMA_IMG</name></expr></argument>,
<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,
<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>obs_data_first</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>wipes_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><call><name>obs_data_item_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_data_item_get_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>obs_data_item_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>obs_properties_add_float</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_LUMA_SOFT</name></expr></argument>, <argument><expr><name>T_LUMA_SOFT</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
<argument><expr><literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_LUMA_INV</name></expr></argument>, <argument><expr><name>T_LUMA_INV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_wipe_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LUMA_IMG</name></expr></argument>, <argument><expr><literal type="string">"linear-h.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LUMA_SOFT</name></expr></argument>, <argument><expr><literal type="number">0.03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LUMA_INV</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luma_wipe_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_a_tex</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_b_tex</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_l_tex</name></name></expr></argument>, <argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>luma_image</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_progress</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_bool</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_invert</name></name></expr></argument>, <argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>invert_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>ep_softness</name></name></expr></argument>, <argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>softness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"LumaWipe"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>luma_wipe_video_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_transition_video_render</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>luma_wipe_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mix_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mix_b</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>luma_wipe_audio_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>luma_wipe_info</name></name> <modifier>*</modifier></type><name>lwipe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>obs_transition_audio_render</name><argument_list>(<argument><expr><name><name>lwipe</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>ts_out</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>,
<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>mix_a</name></expr></argument>, <argument><expr><name>mix_b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>luma_wipe_transition</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"wipe_transition"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>luma_wipe_get_name</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>luma_wipe_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>luma_wipe_destroy</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>luma_wipe_update</name></expr>,
<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>luma_wipe_video_render</name></expr>,
<expr><operator>.</operator><name>audio_render</name> <operator>=</operator> <name>luma_wipe_audio_render</name></expr>,
<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>luma_wipe_properties</name></expr>,
<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>luma_wipe_defaults</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
