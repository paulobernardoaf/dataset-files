<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs-opengl\gl-shaderparser.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-shaderparser.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_function_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>sp_getparam</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>param</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>sp_getsampler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_sampler</name></name> <modifier>*</modifier></type><name>sampler</name> <init>=
<expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>samplers</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cmp_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>type_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>min_len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>name_len</name> <operator>&lt;</operator> <name>type_len</name><operator>)</operator></expr> ?</condition><then> <expr><name>type_len</name></expr> </then><else>: <expr><name>name_len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>astrcmp_n</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_write_type_n</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"float2"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"vec2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"float3"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"vec3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"float4"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"vec4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"int2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"ivec2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"int3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"ivec3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"int4"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"ivec4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"float3x3"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"mat3x3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"float3x4"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"mat3x4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"float4x4"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"mat4x4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"texture2d"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"sampler2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"texture3d"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"sampler3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"texture_cube"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"samplerCube"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cmp_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"texture_rect"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"sampler2DRect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_write_type_n</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_write_type_token</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gl_write_type_n</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>SHADER_VAR_UNIFORM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"uniform "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>SHADER_VAR_CONST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"const "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>SHADER_VAR_INOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"inout "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>SHADER_VAR_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"out "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_write_type</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_write_var</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_storage_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_unwrap_storage_struct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_struct</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>prefix_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix_str</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix_str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix_str</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>st_var</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_write_storage_var</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>st_var</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>prefix_str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_storage_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_struct</name></name> <modifier>*</modifier></type><name>st</name> <init>=
<expr><call><name>shader_parser_getstruct</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gl_unwrap_storage_struct</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="string">"VERTEXID"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="string">"POSITION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_VERTEX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PIXEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gl_parser_attrib</name></name></type> <name>attrib</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_parser_attrib_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><literal type="string">"in "</literal></expr> </then><else>: <expr><literal type="string">"out "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attrib</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attrib</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_write_type</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>attrib</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>.</operator><name>mapping</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_inputs</name><argument_list>(<argument><expr>struct <name>gl_shader_parser</name> <operator>*</operator><name>glsp</name></expr></argument>,
<argument><expr>struct <name>shader_func</name> <operator>*</operator>main</expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> main<operator>-&gt;</operator><name><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_write_storage_var</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr>main<operator>-&gt;</operator><name><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><literal type="string">"inputval_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_outputs</name><argument_list>(<argument><expr>struct <name>gl_shader_parser</name> <operator>*</operator><name>glsp</name></expr></argument>,
<argument><expr>struct <name>shader_func</name> <operator>*</operator>main</expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name></type> <name>var</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>var</name><operator>.</operator><name>type</name></name> <operator>=</operator> main<operator>-&gt;</operator><name>return_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"outputval"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr>main<operator>-&gt;</operator><name>mapping</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>var</name><operator>.</operator><name>mapping</name></name> <operator>=</operator> main<operator>-&gt;</operator><name>mapping</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_write_storage_var</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_struct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_struct</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"struct "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_var</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_interface_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_VERTEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"out gl_PerVertex {\n"</literal>
<literal type="string">"\tvec4 gl_Position;\n};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_structs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>structs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_struct</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>structs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_write_struct</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_write_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name> <operator>=</operator> <operator>*</operator><name>p_token</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">") * ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_token</name> <operator>=</operator> <name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_write_saturate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name> <operator>=</operator> <operator>*</operator><name>p_token</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"clamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">", 0.0, 1.0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_token</name> <operator>=</operator> <name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_write_texture_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>call</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sampler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampler</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sampler_id</name> <init>= <expr><call><name>sp_getsampler</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sampler_id</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>gl_sampler_id</name></name> <operator>=</operator> <name>sampler_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_write_texture_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_token</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_parser</name></name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>written</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name> <operator>=</operator> <operator>*</operator><name>p_token</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function_end</name> <init>= <expr><literal type="string">")"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"Sample"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_texture_call</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"texture"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"SampleBias"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_texture_call</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"texture"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"SampleGrad"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_texture_call</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"textureGrad"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"SampleLevel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_texture_call</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"textureLod"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"Load"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_texture_call</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"texelFetch"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>function_end</name> <operator>=</operator> <literal type="string">").xy, 0)"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>written</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name>function_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_token</name> <operator>=</operator> <name><name>cfp</name><operator>-&gt;</operator><name>cur_token</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_write_intrinsic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name> <init>= <expr><operator>*</operator><name>p_token</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>written</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"atan2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"atan2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"ddx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"dFdx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"ddy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"dFdy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"frac"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"fract"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"lerp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"mix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"fmod"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"mod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"rsqrt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"inversesqrt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"saturate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_saturate</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"mul"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_mul</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>sp_getparam</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>var</name> <operator>&amp;&amp;</operator> <call><name>astrcmp_n</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"texture"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>gl_write_texture_code</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>written</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_token</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_function_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name> <init>= <expr><operator>*</operator><name>p_token</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NAME</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>gl_write_type_token</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>gl_write_intrinsic</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&amp;&amp;</operator> <call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_write_type_token</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>gl_write_intrinsic</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_OTHER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p_token</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_function</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gl_write_type</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>return_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"_main_wrap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gl_write_var</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>func</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_function_contents</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_functions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>funcs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_func</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>funcs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_write_function</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_main_interface_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_VERTEX</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="string">"POSITION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\tgl_Position = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_main_storage_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_struct</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dst_copy</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch_left</name> <init>= <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><literal type="char">'.'</literal></expr> </then><else>: <expr><literal type="char">'_'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch_right</name> <init>= <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><literal type="char">'_'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>, <argument><expr><name>ch_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>shader_parser_getstruct</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>src_copy</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_copy</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_copy</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_copy</name></expr></argument>, <argument><expr><name>ch_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>st_var</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_write_main_storage_assign</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>st_var</name></expr></argument>,
<argument><expr><name><name>dst_copy</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name><name>src_copy</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>||</operator> <operator>(</operator><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_SHADER_VERTEX</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="string">"POSITION"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="string">"VERTEXID"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"uint(gl_VertexID)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PIXEL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="string">"POSITION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"gl_FragCoord"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_write_main_interface_assign</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_main_storage_inputs</name><argument_list>(<argument><expr>struct <name>gl_shader_parser</name> <operator>*</operator><name>glsp</name></expr></argument>,
<argument><expr>struct <name>shader_func</name> <operator>*</operator>main</expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gl_write_main_storage_assign</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr>main<operator>-&gt;</operator><name><name>params</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"inputval_"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_main_storage_outputs</name><argument_list>(<argument><expr>struct <name>gl_shader_parser</name> <operator>*</operator><name>glsp</name></expr></argument>,
<argument><expr>struct <name>shader_func</name> <operator>*</operator>main</expr></argument>)</argument_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator>main<operator>-&gt;</operator><name>mapping</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_var</name></name></type> <name>var</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>var</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"outputval"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>.</operator><name>type</name></name> <operator>=</operator> main<operator>-&gt;</operator><name>return_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_main_storage_assign</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_main_vars</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_func</name></name> <modifier>*</modifier></type><name>main_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>main_func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>main_func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>main_func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>main_func</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>main_func</name><operator>-&gt;</operator><name>return_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">" outputval;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_write_main_func_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_func</name></name> <modifier>*</modifier></type><name>main_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"\n\toutputval = _main_wrap("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>main_func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>main_func</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">");\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>gl_write_main</name><argument_list>(<argument><expr>struct <name>gl_shader_parser</name> <operator>*</operator><name>glsp</name></expr></argument>,
<argument><expr>struct <name>shader_func</name> <operator>*</operator>main</expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"void main(void)\n{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_write_main_vars</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr>main</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_main_storage_inputs</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr>main</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_main_func_call</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr>main</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_main_storage_outputs</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr>main</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_rename_attributes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>input_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>output_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gl_parser_attrib</name></name> <modifier>*</modifier></type><name>attrib</name> <init>= <expr><name><name>glsp</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>new_name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>glsp</name><operator>-&gt;</operator><name>input_prefix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>input_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>glsp</name><operator>-&gt;</operator><name>output_prefix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>output_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name><name>new_name</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_move</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attrib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_shader_buildstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_func</name></name> <modifier>*</modifier></type><name>main_func</name></decl>;</decl_stmt>

<expr_stmt><expr><name>main_func</name> <operator>=</operator> <call><name>shader_parser_getfunc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>main_func</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"function 'main' not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"#version 330\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>, <argument><expr><literal type="string">"const bool obs_glsl_compile = true;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_params</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_inputs</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>main_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_outputs</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>main_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_interface_block</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_structs</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_functions</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_write_main</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>, <argument><expr><name>main_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_rename_attributes</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gl_shader_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader_str</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>shader_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>shader_str</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>shader_parser_geterrors</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Shader parser errors/warnings:\n%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_shader_buildstring</name><argument_list>(<argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>
</unit>
