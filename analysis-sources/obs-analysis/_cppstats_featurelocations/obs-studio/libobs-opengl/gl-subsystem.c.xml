<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs-opengl\gl-subsystem.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/matrix3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>far</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>near</name></cpp:undef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <name>APIENTRY</name></type> <name>gl_debug_proc</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>severity_str</name></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_ALL_GL_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>GL_DEBUG_TYPE_PORTABILITY</name> <operator>&amp;&amp;</operator>
<name>severity</name> <operator>!=</operator> <name>GL_DEBUG_SEVERITY_HIGH</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GL_DEBUG_SOURCE_API</name></expr>:</case>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"API"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM</name></expr>:</case>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"Window System"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SOURCE_SHADER_COMPILER</name></expr>:</case>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"Shader Compiler"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SOURCE_THIRD_PARTY</name></expr>:</case>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"Third Party"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SOURCE_APPLICATION</name></expr>:</case>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"Application"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SOURCE_OTHER</name></expr>:</case>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"Other"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GL_DEBUG_TYPE_ERROR</name></expr>:</case>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Error"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</name></expr>:</case>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Deprecated Behavior"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</name></expr>:</case>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Undefined Behavior"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_TYPE_PORTABILITY</name></expr>:</case>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Portability"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_TYPE_PERFORMANCE</name></expr>:</case>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Performance"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_TYPE_OTHER</name></expr>:</case>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Other"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>severity</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GL_DEBUG_SEVERITY_HIGH</name></expr>:</case>
<expr_stmt><expr><name>severity_str</name> <operator>=</operator> <literal type="string">"High"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SEVERITY_MEDIUM</name></expr>:</case>
<expr_stmt><expr><name>severity_str</name> <operator>=</operator> <literal type="string">"Medium"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SEVERITY_LOW</name></expr>:</case>
<expr_stmt><expr><name>severity_str</name> <operator>=</operator> <literal type="string">"Low"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_DEBUG_SEVERITY_NOTIFICATION</name></expr>:</case>
<expr_stmt><expr><name>severity_str</name> <operator>=</operator> <literal type="string">"Notification"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>severity_str</name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[%s][%s]{%s}: %.*s"</literal></expr></argument>, <argument><expr><name>source_str</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>,
<argument><expr><name>severity_str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_enable_debug</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>GLAD_GL_VERSION_4_3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDebugMessageCallback</name><argument_list>(<argument><expr><name>gl_debug_proc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_DEBUG_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>GLAD_GL_ARB_debug_output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDebugMessageCallbackARB</name><argument_list>(<argument><expr><name>gl_debug_proc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Failed to set GL debug callback as it is "</literal>
<literal type="string">"not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_enable_debug</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_init_extensions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"obs-studio requires OpenGL version 3.3 or higher."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_enable_debug</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_SEAMLESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>GLAD_GL_VERSION_4_3</name> <operator>||</operator> <name>GLAD_GL_ARB_copy_image</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>copy_type</name></name> <operator>=</operator> <name>COPY_TYPE_ARB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>GLAD_GL_NV_copy_image</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>copy_type</name></name> <operator>=</operator> <name>COPY_TYPE_NV</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>copy_type</name></name> <operator>=</operator> <name>COPY_TYPE_FBO_BLIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_textures</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GS_MAX_TEXTURES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_textures</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gl_active_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>cur_textures</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>gl_target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_textures</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>convert_sampler_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_sampler_state</name></name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_sampler_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>max_anisotropy_max</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>convert_filter</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sampler</name><operator>-&gt;</operator><name>min_filter</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sampler</name><operator>-&gt;</operator><name>mag_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>address_u</name></name> <operator>=</operator> <call><name>convert_address_mode</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>address_u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>address_v</name></name> <operator>=</operator> <call><name>convert_address_mode</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>address_v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>address_w</name></name> <operator>=</operator> <call><name>convert_address_mode</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>address_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>max_anisotropy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_anisotropy_max</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>GLAD_GL_EXT_texture_filter_anisotropic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>max_anisotropy_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetIntegerv(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>&amp;&amp;</operator>
<name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>&lt;=</operator> <name>max_anisotropy_max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>&gt;</operator> <name>max_anisotropy_max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name> <operator>=</operator> <name>max_anisotropy_max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"convert_sampler_info: 1 &lt;= max_anisotropy &lt;= "</literal>
<literal type="string">"%d violated, selected: %d, set: %d"</literal></expr></argument>,
<argument><expr><name>max_anisotropy_max</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>max_anisotropy</name></name></expr></argument>, <argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>max_anisotropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_get_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">"OpenGL"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>device_get_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>GS_DEVICE_OPENGL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_preprocessor_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">"_OPENGL"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>device_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_device</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorcode</name> <init>= <expr><name>GS_ERROR_FAIL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"---------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Initializing OpenGL..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>plat</name></name> <operator>=</operator> <call><name>gl_platform_create</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>plat</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glVendor</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VENDOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glRenderer</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_RENDERER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Loading up OpenGL on adapter %s %s"</literal></expr></argument>, <argument><expr><name>glVendor</name></expr></argument>,
<argument><expr><name>glRenderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_init_extensions</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>GS_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glVersion</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glShadingLanguage</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_SHADING_LANGUAGE_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"OpenGL loaded successfully, version %s, shading "</literal>
<literal type="string">"language %s"</literal></expr></argument>,
<argument><expr><name>glVersion</name></expr></argument>, <argument><expr><name>glShadingLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_gen_vertex_arrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>empty_vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_clear_context</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Warning: The OpenGL renderer is currently in use. "</literal>
<literal type="string">"On windows, the OpenGL renderer can decrease "</literal>
<literal type="string">"capture performance due to the lack of specific "</literal>
<literal type="string">"features used to maximize capture performance. "</literal>
<literal type="string">"The Direct3D 11 renderer is recommended instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>p_device</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>
<return>return <expr><name>GS_SUCCESS</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_device</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>errorcode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_destroy</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>first_program</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_program_destroy</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>first_program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>gl_delete_vertex_arrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>empty_vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>proj_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_platform_destroy</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>plat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>device_swapchain_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_swap_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>wi</name></name> <operator>=</operator> <call><name>gl_windowinfo_create</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>swap</name><operator>-&gt;</operator><name>wi</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_swapchain_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_swapchain_destroy</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_platform_init_swapchain</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gl_platform_init_swapchain failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_swapchain_destroy</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>swap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_resize</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"device_resize (GL): No active swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gl_update</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"device_get_size (GL): No active swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>device_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cx</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"device_get_width (GL): No active swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>device_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cy</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"device_get_height (GL): No active swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type>
<name>device_samplerstate_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_sampler_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_sampler_state</name></name> <modifier>*</modifier></type><name>sampler</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sampler</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_sampler_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_sampler_info</name><argument_list>(<argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sampler</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>device_timer_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name><name>queries</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGenQueries</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGenQueries"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>queries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>queries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>device_timer_range_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_texture_type</name></name></type> <name>device_get_texture_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>texture</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>strip_mipmap_filter</name><parameter_list>(<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>filter</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GL_NEAREST</name></expr>:</case>
<case>case <expr><name>GL_LINEAR</name></expr>:</case>
<return>return;</return>
<case>case <expr><name>GL_NEAREST_MIPMAP_NEAREST</name></expr>:</case>
<case>case <expr><name>GL_NEAREST_MIPMAP_LINEAR</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>filter</name> <operator>=</operator> <name>GL_NEAREST</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GL_LINEAR_MIPMAP_NEAREST</name></expr>:</case>
<case>case <expr><name>GL_LINEAR_MIPMAP_LINEAR</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>filter</name> <operator>=</operator> <name>GL_LINEAR</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>filter</name> <operator>=</operator> <name>GL_NEAREST</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_swizzle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>GS_A8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_R</name></expr></argument>, <argument><expr><name>GL_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_G</name></expr></argument>, <argument><expr><name>GL_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_B</name></expr></argument>, <argument><expr><name>GL_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_A</name></expr></argument>, <argument><expr><name>GL_RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_texture_sampler</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>min_filter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>cur_sampler</name></name> <operator>==</operator> <name>ss</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>cur_sampler</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>samplerstate_release</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>cur_sampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>cur_sampler</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>samplerstate_addref</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_filter</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>min_filter</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gs_texture_is_rect</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strip_mipmap_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>min_filter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>,
<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>mag_filter</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>address_u</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>address_v</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_R</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>address_w</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>GLAD_GL_EXT_texture_filter_anisotropic</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>,
<argument><expr><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></expr></argument>,
<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>max_anisotropy</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_swizzle</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>get_texture_param</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>texture_id</name></name> <operator>==</operator> <name>unit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>param</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_texture</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_sampler_state</name></name> <modifier>*</modifier></type><name>sampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>cur_tex</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_textures</name><index>[<expr><name>unit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_tex</name> <operator>==</operator> <name>tex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_active_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>unit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>cur_tex</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>tex</name> <operator>||</operator> <name><name>cur_tex</name><operator>-&gt;</operator><name>gl_target</name></name> <operator>!=</operator> <name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name><name>cur_tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_textures</name><index>[<expr><name>unit</name></expr>]</index></name> <operator>=</operator> <name>tex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>get_texture_param</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>tex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>sampler_id</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sampler</name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name><name>param</name><operator>-&gt;</operator><name>sampler_id</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sampler</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sampler</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>load_texture_sampler</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_load_texture (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_sampler_on_textures</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sampler_unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name> <operator>&amp;&amp;</operator>
<name><name>param</name><operator>-&gt;</operator><name>sampler_id</name></name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>sampler_unit</name> <operator>&amp;&amp;</operator>
<name><name>param</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_active_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name><name>param</name><operator>-&gt;</operator><name>texture_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_texture_sampler</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_samplerstate</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name>unit</name></expr>]</index></name> <operator>==</operator> <name>ss</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name>unit</name></expr>]</index></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_sampler_on_textures</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_load_samplerstate (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_vertexshader</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>vertshader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name> <operator>==</operator> <name>vertshader</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertshader</name> <operator>&amp;&amp;</operator> <name><name>vertshader</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_SHADER_VERTEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified shader is not a vertex shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_load_vertexshader (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name> <operator>=</operator> <name>vertshader</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_default_pixelshader_samplers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ps</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_sampler_state</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GS_MAX_TEXTURES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_pixelshader</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>pixelshader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name> <operator>==</operator> <name>pixelshader</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixelshader</name> <operator>&amp;&amp;</operator> <name><name>pixelshader</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_SHADER_PIXEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified shader is not a pixel shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name> <operator>=</operator> <name>pixelshader</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_textures</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixelshader</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_default_pixelshader_samplers</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>pixelshader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_load_pixelshader (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_default_samplerstate</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_3d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>b_3d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>device_get_vertex_shader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>device_get_pixel_shader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>device_get_render_target</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>device_get_zstencil_target</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_tex_dimensions</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>tex2d</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>tex2d</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_CUBE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_cube</name></name> <modifier>*</modifier></type><name>cube</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_cube</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture must be 2D or cubemap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>get_fbo</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name></name> <operator>&amp;&amp;</operator> <name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name>width</name> <operator>&amp;&amp;</operator>
<name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name>height</name> <operator>&amp;&amp;</operator> <name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>tex</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>fbo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffers"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fbo_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>fbo</name></name> <operator>=</operator> <name>fbo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>tex</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>cur_render_target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>cur_render_side</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>get_fbo_by_tex</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_tex_dimensions</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_fbo</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_current_fbo</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>fbo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_fbo</name></name> <operator>!=</operator> <name>fbo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GLuint</name></type> <name>fbo_obj</name> <init>= <expr><ternary><condition><expr><name>fbo</name></expr> ?</condition><then> <expr><name><name>fbo</name><operator>-&gt;</operator><name>fbo</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_framebuffer</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo_obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_fbo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_fbo</name><operator>-&gt;</operator><name>cur_render_target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_fbo</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_fbo</name></name> <operator>=</operator> <name>fbo</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>attach_rendertarget</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>fbo</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>side</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fbo</name><operator>-&gt;</operator><name>cur_render_target</name></name> <operator>==</operator> <name>tex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fbo</name><operator>-&gt;</operator><name>cur_render_target</name></name> <operator>=</operator> <name>tex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>,
<argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>,
<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_CUBE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>,
<argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>,
<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>side</name></expr></argument>,
<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture2D"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>attach_zstencil</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>fbo</name></decl></parameter>, <parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLuint</name></type> <name>zsbuffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>zs_attachment</name> <init>= <expr><name>GL_DEPTH_STENCIL_ATTACHMENT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbo</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name> <operator>==</operator> <name>zs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fbo</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name> <operator>=</operator> <name>zs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zsbuffer</name> <operator>=</operator> <name><name>zs</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zs_attachment</name> <operator>=</operator> <name><name>zs</name><operator>-&gt;</operator><name>attachment</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glFramebufferRenderbuffer</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>zs_attachment</name></expr></argument>,
<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>zsbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glFramebufferRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_target</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>fbo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name> <operator>==</operator> <name>tex</name> <operator>&amp;&amp;</operator>
<name><name>device</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name> <operator>==</operator> <name>zs</name> <operator>&amp;&amp;</operator>
<name><name>device</name><operator>-&gt;</operator><name>cur_render_side</name></name> <operator>==</operator> <name>side</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name> <operator>=</operator> <name>tex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_side</name></name> <operator>=</operator> <name>side</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_zstencil_buffer</name></name> <operator>=</operator> <name>zs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_current_fbo</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fbo</name> <operator>=</operator> <call><name>get_fbo_by_tex</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fbo</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_current_fbo</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attach_rendertarget</name><argument_list>(<argument><expr><name>fbo</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attach_zstencil</name><argument_list>(<argument><expr><name>fbo</name></expr></argument>, <argument><expr><name>zs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_set_render_target</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>,
<parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tex</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture is not a 2D texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tex</name><operator>-&gt;</operator><name>is_render_target</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture is not a render target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_target</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zstencil</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_set_render_target (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_set_cube_render_target</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>side</name></decl></parameter>, <parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cubetex</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cubetex</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_TEXTURE_CUBE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture is not a cube texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cubetex</name><operator>-&gt;</operator><name>is_render_target</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture is not a render target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_target</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>cubetex</name></expr></argument>, <argument><expr><name>side</name></expr></argument>, <argument><expr><name>zstencil</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_set_cube_render_target (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_copy_texture_region</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_y</name></decl></parameter>,
<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_x</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>src2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>dst2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source texture is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Destination texture is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_TEXTURE_2D</name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source and destination textures must be 2D "</literal>
<literal type="string">"textures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source and destination formats do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nw</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>src_w</name></expr> ?</condition><then> <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>src_w</name></expr>
</then><else>: <expr><operator>(</operator><name><name>src2d</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>src_x</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>src_h</name></expr> ?</condition><then> <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>src_h</name></expr>
</then><else>: <expr><operator>(</operator><name><name>src2d</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>src_y</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst2d</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>dst_x</name> <operator>&lt;</operator> <name>nw</name> <operator>||</operator> <name><name>dst2d</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>dst_y</name> <operator>&lt;</operator> <name>nh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Destination texture region is not big "</literal>
<literal type="string">"enough to hold the source region"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_copy_texture</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>nw</name></expr></argument>,
<argument><expr><name>nh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_copy_texture (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_copy_texture</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>device_copy_texture_region</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_begin_frame</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_begin_scene</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_textures</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>can_render</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_verts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No vertex shader specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No pixel shader specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_buffer</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>num_verts</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No vertex buffer specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No active swap chain or render target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_viewproj_matrix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>cur_proj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_matrix_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_proj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_proj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_fbo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_proj</name><operator>.</operator><name>x</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>cur_proj</name><operator>.</operator><name>x</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_proj</name><operator>.</operator><name>y</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>cur_proj</name><operator>.</operator><name>y</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_proj</name><operator>.</operator><name>z</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>cur_proj</name><operator>.</operator><name>z</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_proj</name><operator>.</operator><name>t</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>cur_proj</name><operator>.</operator><name>t</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glFrontFace</name><argument_list>(<argument><expr><name>GL_CW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>glFrontFace</name><argument_list>(<argument><expr><name>GL_CCW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glFrontFace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_viewproj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_view</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_proj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_transpose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_viewproj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_viewproj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>viewproj</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_shader_set_matrix4</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>viewproj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_viewproj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>find_program</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>first_program</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>program</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>==</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name> <operator>&amp;&amp;</operator>
<name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name></name> <operator>==</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>program</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <name><name>program</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>get_shader_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name> <init>= <expr><call><name>find_program</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>gs_program_create</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>program</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_draw</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_draw_mode</name></name></type> <name>draw_mode</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_vert</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_verts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_vertex_buffer</name></name> <modifier>*</modifier></type><name>vb</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_index_buffer</name></name> <modifier>*</modifier></type><name>ib</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_index_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>topology</name> <init>= <expr><call><name>convert_gs_topology</name><argument_list>(<argument><expr><name>draw_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>gs_get_effect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_render</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>effect</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_update_params</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>get_shader_program</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_vb_buffers</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>vb</name></expr></argument>, <argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_bind_vertex_array</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>empty_vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>program</name> <operator>!=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_program</name></name> <operator>&amp;&amp;</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_program</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUseProgram (zero)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>program</name> <operator>!=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_program</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_program</name></name> <operator>=</operator> <name>program</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUseProgram"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_viewproj_matrix</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>program_update_params</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ib</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_verts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_verts</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>device</name><operator>-&gt;</operator><name>cur_index_buffer</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>topology</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>, <argument><expr><name><name>ib</name><operator>-&gt;</operator><name>gl_type</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLvoid</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>start_vert</name> <operator>*</operator> <name><name>ib</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDrawElements"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_verts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_verts</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_buffer</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>topology</name></expr></argument>, <argument><expr><name>start_vert</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDrawArrays"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_draw (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_end_scene</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_clear</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>clear_flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>stencil</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLbitfield</name></type> <name>gl_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_flags</name> <operator>&amp;</operator> <name>GS_CLEAR_COLOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glClearColor</name><argument_list>(<argument><expr><name><name>color</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gl_flags</name> <operator>|=</operator> <name>GL_COLOR_BUFFER_BIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_flags</name> <operator>&amp;</operator> <name>GS_CLEAR_DEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glClearDepth</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gl_flags</name> <operator>|=</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_flags</name> <operator>&amp;</operator> <name>GS_CLEAR_STENCIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glClearStencil</name><argument_list>(<argument><expr><name>stencil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gl_flags</name> <operator>|=</operator> <name>GL_STENCIL_BUFFER_BIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>gl_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glClear"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_clear (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_flush</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_set_cull_mode</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_cull_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_cull_mode</name></name> <operator>==</operator> <name>mode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_cull_mode</name></name> <operator>==</operator> <name>GS_NEITHER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_cull_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GS_BACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_cull_face</name><argument_list>(<argument><expr><name>GL_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GS_FRONT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_cull_face</name><argument_list>(<argument><expr><name>GL_FRONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_disable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_cull_mode</name></name></type> <name>device_get_cull_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>cur_cull_mode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_enable_blending</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_disable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_enable_depth_test</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_disable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_enable_stencil_test</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_STENCIL_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_disable</name><argument_list>(<argument><expr><name>GL_STENCIL_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_enable_stencil_write</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glStencilMask</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glStencilMask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_enable_color</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glColorMask</name><argument_list>(<argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_blend_function</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_src</name> <init>= <expr><call><name>convert_gs_blend_type</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_dst</name> <init>= <expr><call><name>convert_gs_blend_type</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>gl_src</name></expr></argument>, <argument><expr><name>gl_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBlendFunc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_blend_function (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_blend_function_separate</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src_c</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest_c</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src_a</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_src_c</name> <init>= <expr><call><name>convert_gs_blend_type</name><argument_list>(<argument><expr><name>src_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_dst_c</name> <init>= <expr><call><name>convert_gs_blend_type</name><argument_list>(<argument><expr><name>dest_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_src_a</name> <init>= <expr><call><name>convert_gs_blend_type</name><argument_list>(<argument><expr><name>src_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_dst_a</name> <init>= <expr><call><name>convert_gs_blend_type</name><argument_list>(<argument><expr><name>dest_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glBlendFuncSeparate</name><argument_list>(<argument><expr><name>gl_src_c</name></expr></argument>, <argument><expr><name>gl_dst_c</name></expr></argument>, <argument><expr><name>gl_src_a</name></expr></argument>, <argument><expr><name>gl_dst_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBlendFuncSeparate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_blend_function_separate (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_depth_function</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_depth_test</name></name></type> <name>test</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_test</name> <init>= <expr><call><name>convert_gs_depth_test</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glDepthFunc</name><argument_list>(<argument><expr><name>gl_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDepthFunc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_depth_function (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_stencil_function</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_stencil_side</name></name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_depth_test</name></name></type> <name>test</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_side</name> <init>= <expr><call><name>convert_gs_stencil_side</name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_test</name> <init>= <expr><call><name>convert_gs_depth_test</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glStencilFuncSeparate</name><argument_list>(<argument><expr><name>gl_side</name></expr></argument>, <argument><expr><name>gl_test</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glStencilFuncSeparate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_stencil_function (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_stencil_op</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_stencil_side</name></name></type> <name>side</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>fail</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>zfail</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>zpass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_side</name> <init>= <expr><call><name>convert_gs_stencil_side</name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_fail</name> <init>= <expr><call><name>convert_gs_stencil_op</name><argument_list>(<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_zfail</name> <init>= <expr><call><name>convert_gs_stencil_op</name><argument_list>(<argument><expr><name>zfail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_zpass</name> <init>= <expr><call><name>convert_gs_stencil_op</name><argument_list>(<argument><expr><name>zpass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glStencilOpSeparate</name><argument_list>(<argument><expr><name>gl_side</name></expr></argument>, <argument><expr><name>gl_fail</name></expr></argument>, <argument><expr><name>gl_zfail</name></expr></argument>, <argument><expr><name>gl_zpass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glStencilOpSeparate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_stencil_op (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_target_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>device_get_height</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_2D</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<return>return <expr><call><name>gs_cubetexture_get_size</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_set_viewport</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gl_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_render_target</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base_height</name> <operator>=</operator> <call><name>get_target_height</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dw</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_getclientsize</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gl_y</name> <operator>=</operator> <name>base_height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glViewport"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_set_viewport (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_viewport</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_viewport</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_viewport</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_viewport</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_get_viewport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rect</name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_viewport</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_set_scissor_rect</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rect</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glScissor</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glScissor"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>gl_enable</name><argument_list>(<argument><expr><name>GL_SCISSOR_TEST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>gl_disable</name><argument_list>(<argument><expr><name>GL_SCISSOR_TEST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_set_scissor_rect (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_ortho</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>far</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_proj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rml</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bmt</name> <init>= <expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fmn</name> <init>= <expr><name>far</name> <operator>-</operator> <name>near</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>rml</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>left</name> <operator>+</operator> <name>right</name><operator>)</operator> <operator>/</operator> <operator>-</operator><name>rml</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <operator>-</operator><name>bmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>bottom</name> <operator>+</operator> <name>top</name><operator>)</operator> <operator>/</operator> <name>bmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0f</literal> <operator>/</operator> <name>fmn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>far</name> <operator>+</operator> <name>near</name><operator>)</operator> <operator>/</operator> <operator>-</operator><name>fmn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>w</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_frustum</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>far</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_proj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rml</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmb</name> <init>= <expr><name>top</name> <operator>-</operator> <name>bottom</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>nmf</name> <init>= <expr><name>near</name> <operator>-</operator> <name>far</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>nearx2</name> <init>= <expr><literal type="number">2.0f</literal> <operator>*</operator> <name>near</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>nearx2</name> <operator>/</operator> <name>rml</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>left</name> <operator>+</operator> <name>right</name><operator>)</operator> <operator>/</operator> <name>rml</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>nearx2</name> <operator>/</operator> <name>tmb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>bottom</name> <operator>+</operator> <name>top</name><operator>)</operator> <operator>/</operator> <name>tmb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>far</name> <operator>+</operator> <name>near</name><operator>)</operator> <operator>/</operator> <name>nmf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>near</name> <operator>*</operator> <name>far</name><operator>)</operator> <operator>/</operator> <name>nmf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_projection_push</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>proj_stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>cur_proj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_projection_pop</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>proj_stack</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>da_end</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>proj_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_proj</name></name> <operator>=</operator> <operator>*</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_pop_back</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>proj_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_debug_marker_begin</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>markername</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPushDebugGroupKHR</name><argument_list>(<argument><expr><name>GL_DEBUG_SOURCE_APPLICATION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>markername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_debug_marker_end</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPopDebugGroupKHR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_swapchain_destroy</name><parameter_list>(<parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swapchain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swapchain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>swapchain</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>==</operator> <name>swapchain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>device_load_swapchain</name><argument_list>(<argument><expr><name><name>swapchain</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_platform_cleanup_swapchain</name><argument_list>(<argument><expr><name>swapchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_windowinfo_destroy</name><argument_list>(<argument><expr><name><name>swapchain</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>swapchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_voltexture_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_voltexture_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_voltexture_get_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>gs_voltexture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GS_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_samplerstate_destroy</name><parameter_list>(<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>samplerstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samplerstate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>samplerstate</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GS_MAX_TEXTURES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>samplerstate</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator>
<name>samplerstate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samplerstate</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>samplerstate_release</name><argument_list>(<argument><expr><name>samplerstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glDeleteQueries</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteQueries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_begin</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glQueryCounter</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>GL_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glQueryCounter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_end</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glQueryCounter</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>GL_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glQueryCounter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_timer_get_data</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ticks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>available</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetQueryObjectiv</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>GL_QUERY_RESULT_AVAILABLE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLuint64</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetQueryObjectui64v</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>GL_QUERY_RESULT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectui64v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetQueryObjectui64v</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>queries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>GL_QUERY_RESULT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectui64v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ticks</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_range_destroy</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_range_begin</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_range_end</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_timer_range_get_data</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>disjoint</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>frequency</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>disjoint</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frequency</name> <operator>=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
