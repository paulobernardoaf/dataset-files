<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs-opengl\gl-shaderparser.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/shader-parser.h&gt;</cpp:file></cpp:include>

<struct>struct <name>gl_parser_attrib</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>input</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_parser_attrib_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_parser_attrib</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gl_parser_attrib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_parser_attrib_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_parser_attrib</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>gl_shader_parser</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>gs_shader_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_parser</name></name></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>gl_string</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint32_t</argument>)</argument_list></macro> <expr_stmt><expr><name>texture_samplers</name></expr>;</expr_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct gl_parser_attrib</argument>)</argument_list></macro> <expr_stmt><expr><name>attribs</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_shader_parser_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_shader_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>glsp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GS_SHADER_VERTEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glsp</name><operator>-&gt;</operator><name>input_prefix</name></name> <operator>=</operator> <literal type="string">"_input_attrib"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glsp</name><operator>-&gt;</operator><name>output_prefix</name></name> <operator>=</operator> <literal type="string">"_vertex_shader_attrib"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GS_SHADER_PIXEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glsp</name><operator>-&gt;</operator><name>input_prefix</name></name> <operator>=</operator> <literal type="string">"_vertex_shader_attrib"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glsp</name><operator>-&gt;</operator><name>output_prefix</name></name> <operator>=</operator> <literal type="string">"_pixel_shader_attrib"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>shader_parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>texture_samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_shader_parser_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_parser_attrib_free</name><argument_list>(<argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>texture_samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shader_parser_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>gl_shader_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader_str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
