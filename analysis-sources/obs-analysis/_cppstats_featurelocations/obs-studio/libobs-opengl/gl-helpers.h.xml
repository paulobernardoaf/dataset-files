<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs-opengl\gl-helpers.h">
















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gl_error_to_str</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>errorcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>GLenum</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block> <decl><name><name>err_to_str</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><name>GL_INVALID_ENUM</name></expr>,
<expr><literal type="string">"GL_INVALID_ENUM"</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><name>GL_INVALID_VALUE</name></expr>,
<expr><literal type="string">"GL_INVALID_VALUE"</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><name>GL_INVALID_OPERATION</name></expr>,
<expr><literal type="string">"GL_INVALID_OPERATION"</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><name>GL_INVALID_FRAMEBUFFER_OPERATION</name></expr>,
<expr><literal type="string">"GL_INVALID_FRAMEBUFFER_OPERATION"</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><name>GL_OUT_OF_MEMORY</name></expr>,
<expr><literal type="string">"GL_OUT_OF_MEMORY"</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><name>GL_STACK_UNDERFLOW</name></expr>,
<expr><literal type="string">"GL_STACK_UNDERFLOW"</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><name>GL_STACK_OVERFLOW</name></expr>,
<expr><literal type="string">"GL_STACK_OVERFLOW"</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</struct>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err_to_str</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>err_to_str</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>err_to_str</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>error</name> <operator>==</operator> <name>errorcode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>err_to_str</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_success</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>errorcode</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>errorcode</name> <operator>!=</operator> <name>GL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attempts</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s failed, glGetError returned %s(0x%X)"</literal></expr></argument>,
<argument><expr><name>funcname</name></expr></argument>, <argument><expr><call><name>gl_error_to_str</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errorcode</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>attempts</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attempts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Too many GL errors, moving on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>errorcode</name> <operator>!=</operator> <name>GL_NO_ERROR</name></expr>)</condition>;</do>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_gen_textures</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_texture</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><name>num_texture</name></expr></argument>, <argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGenTextures"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_bind_texture</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBindTexture"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_delete_textures</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_buffers</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><name>buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteTextures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_gen_buffers</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_buffers</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><name>buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGenBuffers"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_bind_buffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBindBuffer"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_delete_buffers</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_buffers</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><name>buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_gen_vertex_arrays</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_arrays</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenVertexArrays</name><argument_list>(<argument><expr><name>num_arrays</name></expr></argument>, <argument><expr><name>arrays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGenVertexArrays"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_bind_vertex_array</name><parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBindVertexArray"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_delete_vertex_arrays</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_arrays</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glDeleteVertexArrays</name><argument_list>(<argument><expr><name>num_arrays</name></expr></argument>, <argument><expr><name>arrays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteVertexArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_bind_renderbuffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBindRendebuffer"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_gen_framebuffers</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_arrays</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><name>num_arrays</name></expr></argument>, <argument><expr><name>arrays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffers"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_bind_framebuffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBindFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_delete_framebuffers</name><parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>num_arrays</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glDeleteFramebuffers</name><argument_list>(<argument><expr><name>num_arrays</name></expr></argument>, <argument><expr><name>arrays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteFramebuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_tex_param_f</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexParameterf</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glTexParameterf"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_tex_param_i</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glTexParameteri"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_active_texture</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>texture_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glActiveTexture"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_enable</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>capability</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glEnable"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_disable</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>capability</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDisable"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_cull_face</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>faces</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glCullFace</name><argument_list>(<argument><expr><name>faces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCullFace"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_get_integer_v</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetIntegerv"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>gl_init_face</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_levels</name></decl></parameter>,
<parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internal_format</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compressed</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>gl_copy_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_y</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_x</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>gl_create_buffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>update_buffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
