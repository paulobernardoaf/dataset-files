<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs-opengl\gl-shader.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec4.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/matrix3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/matrix4.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-shaderparser.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>shader_param_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_shader_param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>shader_param_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>def_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>shader_attrib_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>shader_attrib</name></name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_get_shader_info</name><parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>info_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLsizei</name></type> <name>chars_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetShaderiv</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetProgramiv"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>info_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>info_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetShaderInfoLog</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chars_written</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetShaderInfoLog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Compiler warnings/errors for %s:\n%s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error_string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error_string</name> <operator>=</operator> <name>errors</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_add_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>shader_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>texture_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>array_count</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>array_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>shader</name></name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>get_shader_param_type</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sampler_id</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>gl_sampler_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>texture_id</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>texture_id</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>da_move</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>def_value</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_copy</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>cur_value</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>def_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_add_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>tex_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_add_param</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tex_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>viewproj</name></name> <operator>=</operator> <call><name>gs_shader_get_param_by_name</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"ViewProj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>world</name></name> <operator>=</operator> <call><name>gs_shader_get_param_by_name</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"World"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_add_sampler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_sampler</name></name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>new_sampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_sampler_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>shader_sampler_convert</name><argument_list>(<argument><expr><name>sampler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_sampler</name> <operator>=</operator> <call><name>device_samplerstate_create</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_add_samplers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_sampler</name></name> <modifier>*</modifier></type><name>sampler</name> <init>=
<expr><name><name>glsp</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>samplers</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gl_add_sampler</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_attrib_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>attrib_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><literal type="string">"POSITION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ATTRIB_POSITION</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ATTRIB_NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><literal type="string">"TANGENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ATTRIB_TANGENT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><literal type="string">"COLOR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ATTRIB_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>astrcmp_n</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><literal type="string">"TEXCOORD"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ATTRIB_TEXCOORD</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>mapping</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><literal type="string">"TARGET"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ATTRIB_TARGET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_process_attrib</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gl_parser_attrib</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_attrib</name></name></type> <name>attrib</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pa</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_attrib_type</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>attrib</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>attrib</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>pa</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_process_attribs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glsp</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gl_parser_attrib</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>glsp</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_process_attrib</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_shader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name> <modifier>*</modifier></type><name>glsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name> <init>= <expr><call><name>convert_shader_type</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compiled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>glCreateShader</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCreateShader"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glShaderSource</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>GLchar</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>glsp</name><operator>-&gt;</operator><name>gl_string</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glShaderSource"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glCompileShader</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCompileShader"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
blog(LOG_DEBUG, "+++++++++++++++++++++++++++++++++++");
blog(LOG_DEBUG, " GL shader string for: %s", file);
blog(LOG_DEBUG, "-----------------------------------");
blog(LOG_DEBUG, "%s", glsp-&gt;gl_string.array);
blog(LOG_DEBUG, "+++++++++++++++++++++++++++++++++++");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>glGetShaderiv</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>GL_COMPILE_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compiled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetShaderiv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compiled</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>infoLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetShaderiv</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infoLog</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>infoLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLsizei</name></type> <name>returnedLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetShaderInfoLog</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>infoLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>returnedLength</name></expr></argument>,
<argument><expr><name>infoLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error compiling shader:\n%s\n"</literal></expr></argument>, <argument><expr><name>infoLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infoLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_get_shader_info</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_add_params</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name><name>shader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_VERTEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_process_attribs</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gl_add_samplers</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_shader_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader_str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_shader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gl_shader_parser</name></name></type> <name>glsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_shader_parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glsp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_shader_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glsp</name></expr></argument>, <argument><expr><name>shader_str</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_shader_init</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glsp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_shader_destroy</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_shader_parser_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>shader</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>device_vertexshader_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>shader_create</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>GS_SHADER_VERTEX</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_vertexshader_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>device_pixelshader_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>shader_create</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>GS_SHADER_PIXEL</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_pixelshader_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_program_references</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>first_program</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>program</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>program</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_VERTEX</name> <operator>&amp;&amp;</operator>
<name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>==</operator> <name>shader</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>shader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PIXEL</name> <operator>&amp;&amp;</operator>
<name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name></name> <operator>==</operator> <name>shader</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_program_destroy</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_destroy</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_program_references</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shader_attrib_free</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_samplerstate_destroy</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shader_param_free</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gs_shader_get_num_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_param_by_idx</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>param</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>param</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_param_by_name</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>param</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_viewproj_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>shader</name><operator>-&gt;</operator><name>viewproj</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_world_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>shader</name><operator>-&gt;</operator><name>world</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_get_param_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_shader_param_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_bool</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>int_val</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_float</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_int</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_matrix3</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>mat</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>matrix4_from_matrix3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_matrix4</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_vec2</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_vec3</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_vec4</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_texture</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>validate_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>program_param</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>expected_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>cur_value</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name>expected_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Parameter '%s' set to invalid size %u, "</literal>
<literal type="string">"expected %u"</literal></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>cur_value</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>program_set_param_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>program_param</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>cur_value</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_BOOL</name> <operator>||</operator>
<name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_INT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform1iv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform1iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_INT2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform2iv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform2iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_INT3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform3iv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform3iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_INT4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform4iv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform4iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_FLOAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform1fv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform1fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_VEC2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform2fv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform2fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_VEC3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform3fv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform3fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_VEC4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform4fv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniform4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_MATRIX4X4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>validate_param</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>matrix4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>cur_samplers</name><index>[<expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>sampler_id</name></name></expr>]</index></name> <operator>=</operator>
<name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>texture_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>device_load_texture</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>texture_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>program_update_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>program</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>program_param</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>program</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>program_set_param_data</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_link_errors</name><parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>info_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLsizei</name></type> <name>chars_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetProgramiv</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetProgramiv"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>info_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>info_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetProgramInfoLog</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chars_written</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetShaderInfoLog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Linker warnings/errors:\n%s"</literal></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>assign_program_attrib</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shader_attrib</name></name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>attrib_obj</name> <init>= <expr><call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetAttribLocation"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attrib_obj</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"glGetAttribLocation: Could not find "</literal>
<literal type="string">"attribute '%s'"</literal></expr></argument>,
<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>assign_program_attribs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>shader_attrib</name></name> <modifier>*</modifier></type><name>attrib</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assign_program_attrib</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>assign_program_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>program_param</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetUniformLocation"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>obj</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>assign_program_shader_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assign_program_param</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>assign_program_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assign_program_shader_params</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assign_program_shader_params</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>gs_program_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>program</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_vertex_shader</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name></name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_pixel_shader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>glCreateProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCreateProgram"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_detach_neither</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glAttachShader</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glAttachShader (vertex)"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_detach_neither</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glAttachShader</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glAttachShader (pixel)"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_detach_vertex</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glLinkProgram</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glLinkProgram"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glGetProgramiv</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>GL_LINK_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetProgramiv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>linked</name> <operator>==</operator> <name>GL_FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_link_errors</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assign_program_attribs</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assign_program_params</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDetachShader (vertex)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDetachShader (pixel)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>first_program</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>first_program</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>first_program</name></name> <operator>=</operator> <name>program</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>program</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>program</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>pixel_shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDetachShader (pixel)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_detach_vertex</name>:</label>
<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDetachShader (vertex)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_detach_neither</name>:</label>
<expr_stmt><expr><call><name>gs_program_destroy</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_program_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>cur_program</name></name> <operator>==</operator> <name>program</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>cur_program</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUseProgram (zero)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>attribs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev_next</name></name> <operator>=</operator> <name><name>program</name><operator>-&gt;</operator><name>prev_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>prev_next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>program</name><operator>-&gt;</operator><name>prev_next</name></name> <operator>=</operator> <name><name>program</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name><name>program</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glDeleteProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_val</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>array_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>expected_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GS_SHADER_PARAM_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_BOOL</name></expr>:</case>
<case>case <expr><name>GS_SHADER_PARAM_INT</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_INT2</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_INT3</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_INT4</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_VEC2</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_VEC3</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_VEC4</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_MATRIX4X4</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GS_SHADER_PARAM_TEXTURE</name></expr>:</case>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>expected_size</name> <operator>*=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expected_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expected_size</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_shader_set_val (GL): Size of shader "</literal>
<literal type="string">"param does not match the size of the input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_shader_set_texture</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>gs_texture_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_value</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_default</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gs_shader_set_val</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>def_value</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>def_value</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_next_sampler</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name> <operator>=</operator> <name>sampler</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
